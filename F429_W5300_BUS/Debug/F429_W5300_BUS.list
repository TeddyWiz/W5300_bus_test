
F429_W5300_BUS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000435c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  0800450c  0800450c  0001450c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046b8  080046b8  000200c4  2**0
                  CONTENTS
  4 .ARM          00000008  080046b8  080046b8  000146b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046c0  080046c0  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046c0  080046c0  000146c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046c4  080046c4  000146c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  080046c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c4  2**0
                  CONTENTS
 10 .bss          000000d8  200000c4  200000c4  000200c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000019c  2000019c  000200c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b818  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e93  00000000  00000000  0002b90c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a78  00000000  00000000  0002d7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009b0  00000000  00000000  0002e218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024675  00000000  00000000  0002ebc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bd1d  00000000  00000000  0005323d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db3df  00000000  00000000  0005ef5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013a339  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003244  00000000  00000000  0013a38c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000c4 	.word	0x200000c4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080044f4 	.word	0x080044f4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000c8 	.word	0x200000c8
 80001ec:	080044f4 	.word	0x080044f4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <_write>:
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
uint8_t rxData[2];

int _write(int fd, char *str, int len)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++)
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]
 80005a4:	e00b      	b.n	80005be <_write+0x2a>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)&str[i], 1, 0xFFFF);
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	68ba      	ldr	r2, [r7, #8]
 80005aa:	18d1      	adds	r1, r2, r3
 80005ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005b0:	2201      	movs	r2, #1
 80005b2:	4807      	ldr	r0, [pc, #28]	; (80005d0 <_write+0x3c>)
 80005b4:	f001 fd19 	bl	8001fea <HAL_UART_Transmit>
	for(int i=0; i<len; i++)
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	3301      	adds	r3, #1
 80005bc:	617b      	str	r3, [r7, #20]
 80005be:	697a      	ldr	r2, [r7, #20]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	dbef      	blt.n	80005a6 <_write+0x12>
	}
	return len;
 80005c6:	687b      	ldr	r3, [r7, #4]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3718      	adds	r7, #24
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200000e0 	.word	0x200000e0

080005d4 <Reset_W5300>:
     */
     HAL_UART_Receive_IT(&huart2, rxData, 1);
     HAL_UART_Transmit(&huart2, rxData, 1, 1000);
}
void Reset_W5300()
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_W5300_GPIO_Port, RESET_W5300_Pin, GPIO_PIN_RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	2180      	movs	r1, #128	; 0x80
 80005dc:	4807      	ldr	r0, [pc, #28]	; (80005fc <Reset_W5300+0x28>)
 80005de:	f000 ffbd 	bl	800155c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80005e2:	200a      	movs	r0, #10
 80005e4:	f000 fd04 	bl	8000ff0 <HAL_Delay>
	HAL_GPIO_WritePin(RESET_W5300_GPIO_Port, RESET_W5300_Pin, GPIO_PIN_SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	2180      	movs	r1, #128	; 0x80
 80005ec:	4803      	ldr	r0, [pc, #12]	; (80005fc <Reset_W5300+0x28>)
 80005ee:	f000 ffb5 	bl	800155c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80005f2:	2064      	movs	r0, #100	; 0x64
 80005f4:	f000 fcfc 	bl	8000ff0 <HAL_Delay>
}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40021400 	.word	0x40021400

08000600 <W5300_write>:

void W5300_write(uint32_t addr, iodata_t wd)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	460b      	mov	r3, r1
 800060a:	807b      	strh	r3, [r7, #2]
	_W5300_DATA(addr) = wd;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 8000614:	461a      	mov	r2, r3
 8000616:	887b      	ldrh	r3, [r7, #2]
 8000618:	8013      	strh	r3, [r2, #0]
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr

08000626 <W5300_read>:

iodata_t W5300_read(uint32_t addr)
{
 8000626:	b480      	push	{r7}
 8000628:	b083      	sub	sp, #12
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
	return _W5300_DATA(addr);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	b29b      	uxth	r3, r3
}
 800063a:	4618      	mov	r0, r3
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr

08000646 <W5300CsEnable>:
void W5300CsEnable(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0

}
 800064a:	bf00      	nop
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <W5300CsDisable>:
void W5300CsDisable(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0

}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
	...

08000664 <print_network_information>:
void print_network_information(void)
{
 8000664:	b5b0      	push	{r4, r5, r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af04      	add	r7, sp, #16
    wizchip_getnetinfo(&gWIZNETINFO);
 800066a:	4830      	ldr	r0, [pc, #192]	; (800072c <print_network_information+0xc8>)
 800066c:	f002 fde8 	bl	8003240 <wizchip_getnetinfo>
    printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 8000670:	4b2e      	ldr	r3, [pc, #184]	; (800072c <print_network_information+0xc8>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	4618      	mov	r0, r3
 8000676:	4b2d      	ldr	r3, [pc, #180]	; (800072c <print_network_information+0xc8>)
 8000678:	785b      	ldrb	r3, [r3, #1]
 800067a:	461c      	mov	r4, r3
 800067c:	4b2b      	ldr	r3, [pc, #172]	; (800072c <print_network_information+0xc8>)
 800067e:	789b      	ldrb	r3, [r3, #2]
 8000680:	461d      	mov	r5, r3
 8000682:	4b2a      	ldr	r3, [pc, #168]	; (800072c <print_network_information+0xc8>)
 8000684:	78db      	ldrb	r3, [r3, #3]
 8000686:	461a      	mov	r2, r3
 8000688:	4b28      	ldr	r3, [pc, #160]	; (800072c <print_network_information+0xc8>)
 800068a:	791b      	ldrb	r3, [r3, #4]
 800068c:	4619      	mov	r1, r3
 800068e:	4b27      	ldr	r3, [pc, #156]	; (800072c <print_network_information+0xc8>)
 8000690:	795b      	ldrb	r3, [r3, #5]
 8000692:	9302      	str	r3, [sp, #8]
 8000694:	9101      	str	r1, [sp, #4]
 8000696:	9200      	str	r2, [sp, #0]
 8000698:	462b      	mov	r3, r5
 800069a:	4622      	mov	r2, r4
 800069c:	4601      	mov	r1, r0
 800069e:	4824      	ldr	r0, [pc, #144]	; (8000730 <print_network_information+0xcc>)
 80006a0:	f003 f804 	bl	80036ac <iprintf>
    printf("IP address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 80006a4:	4b21      	ldr	r3, [pc, #132]	; (800072c <print_network_information+0xc8>)
 80006a6:	799b      	ldrb	r3, [r3, #6]
 80006a8:	4619      	mov	r1, r3
 80006aa:	4b20      	ldr	r3, [pc, #128]	; (800072c <print_network_information+0xc8>)
 80006ac:	79db      	ldrb	r3, [r3, #7]
 80006ae:	461a      	mov	r2, r3
 80006b0:	4b1e      	ldr	r3, [pc, #120]	; (800072c <print_network_information+0xc8>)
 80006b2:	7a1b      	ldrb	r3, [r3, #8]
 80006b4:	4618      	mov	r0, r3
 80006b6:	4b1d      	ldr	r3, [pc, #116]	; (800072c <print_network_information+0xc8>)
 80006b8:	7a5b      	ldrb	r3, [r3, #9]
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	4603      	mov	r3, r0
 80006be:	481d      	ldr	r0, [pc, #116]	; (8000734 <print_network_information+0xd0>)
 80006c0:	f002 fff4 	bl	80036ac <iprintf>
    printf("SM Mask    : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 80006c4:	4b19      	ldr	r3, [pc, #100]	; (800072c <print_network_information+0xc8>)
 80006c6:	7a9b      	ldrb	r3, [r3, #10]
 80006c8:	4619      	mov	r1, r3
 80006ca:	4b18      	ldr	r3, [pc, #96]	; (800072c <print_network_information+0xc8>)
 80006cc:	7adb      	ldrb	r3, [r3, #11]
 80006ce:	461a      	mov	r2, r3
 80006d0:	4b16      	ldr	r3, [pc, #88]	; (800072c <print_network_information+0xc8>)
 80006d2:	7b1b      	ldrb	r3, [r3, #12]
 80006d4:	4618      	mov	r0, r3
 80006d6:	4b15      	ldr	r3, [pc, #84]	; (800072c <print_network_information+0xc8>)
 80006d8:	7b5b      	ldrb	r3, [r3, #13]
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	4603      	mov	r3, r0
 80006de:	4816      	ldr	r0, [pc, #88]	; (8000738 <print_network_information+0xd4>)
 80006e0:	f002 ffe4 	bl	80036ac <iprintf>
    printf("Gate way   : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <print_network_information+0xc8>)
 80006e6:	7b9b      	ldrb	r3, [r3, #14]
 80006e8:	4619      	mov	r1, r3
 80006ea:	4b10      	ldr	r3, [pc, #64]	; (800072c <print_network_information+0xc8>)
 80006ec:	7bdb      	ldrb	r3, [r3, #15]
 80006ee:	461a      	mov	r2, r3
 80006f0:	4b0e      	ldr	r3, [pc, #56]	; (800072c <print_network_information+0xc8>)
 80006f2:	7c1b      	ldrb	r3, [r3, #16]
 80006f4:	4618      	mov	r0, r3
 80006f6:	4b0d      	ldr	r3, [pc, #52]	; (800072c <print_network_information+0xc8>)
 80006f8:	7c5b      	ldrb	r3, [r3, #17]
 80006fa:	9300      	str	r3, [sp, #0]
 80006fc:	4603      	mov	r3, r0
 80006fe:	480f      	ldr	r0, [pc, #60]	; (800073c <print_network_information+0xd8>)
 8000700:	f002 ffd4 	bl	80036ac <iprintf>
    printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <print_network_information+0xc8>)
 8000706:	7c9b      	ldrb	r3, [r3, #18]
 8000708:	4619      	mov	r1, r3
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <print_network_information+0xc8>)
 800070c:	7cdb      	ldrb	r3, [r3, #19]
 800070e:	461a      	mov	r2, r3
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <print_network_information+0xc8>)
 8000712:	7d1b      	ldrb	r3, [r3, #20]
 8000714:	4618      	mov	r0, r3
 8000716:	4b05      	ldr	r3, [pc, #20]	; (800072c <print_network_information+0xc8>)
 8000718:	7d5b      	ldrb	r3, [r3, #21]
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	4603      	mov	r3, r0
 800071e:	4808      	ldr	r0, [pc, #32]	; (8000740 <print_network_information+0xdc>)
 8000720:	f002 ffc4 	bl	80036ac <iprintf>
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	bdb0      	pop	{r4, r5, r7, pc}
 800072a:	bf00      	nop
 800072c:	20000010 	.word	0x20000010
 8000730:	0800450c 	.word	0x0800450c
 8000734:	0800453c 	.word	0x0800453c
 8000738:	08004558 	.word	0x08004558
 800073c:	08004574 	.word	0x08004574
 8000740:	08004590 	.word	0x08004590

08000744 <_InitW5300>:

void _InitW5300(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
	unsigned int tmpaddr[4];

	Reset_W5300();
 800074a:	f7ff ff43 	bl	80005d4 <Reset_W5300>
	reg_wizchip_bus_cbfunc(W5300_read, W5300_write);
 800074e:	4912      	ldr	r1, [pc, #72]	; (8000798 <_InitW5300+0x54>)
 8000750:	4812      	ldr	r0, [pc, #72]	; (800079c <_InitW5300+0x58>)
 8000752:	f002 f9d5 	bl	8002b00 <reg_wizchip_bus_cbfunc>
	reg_wizchip_cs_cbfunc(W5300CsEnable, W5300CsDisable);
 8000756:	4912      	ldr	r1, [pc, #72]	; (80007a0 <_InitW5300+0x5c>)
 8000758:	4812      	ldr	r0, [pc, #72]	; (80007a4 <_InitW5300+0x60>)
 800075a:	f002 f9ab 	bl	8002ab4 <reg_wizchip_cs_cbfunc>
	printf("getMR() = %04X\r\n", getMR());
 800075e:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8000762:	881b      	ldrh	r3, [r3, #0]
 8000764:	4619      	mov	r1, r3
 8000766:	4810      	ldr	r0, [pc, #64]	; (80007a8 <_InitW5300+0x64>)
 8000768:	f002 ffa0 	bl	80036ac <iprintf>

	if (ctlwizchip(CW_INIT_WIZCHIP, (void*)wiznet_memsize) == -1)
 800076c:	490f      	ldr	r1, [pc, #60]	; (80007ac <_InitW5300+0x68>)
 800076e:	2001      	movs	r0, #1
 8000770:	f002 f9f2 	bl	8002b58 <ctlwizchip>
 8000774:	4603      	mov	r3, r0
 8000776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800077a:	d102      	bne.n	8000782 <_InitW5300+0x3e>
	{
		printf("W5300 memory initialization failed\r\n");
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <_InitW5300+0x6c>)
 800077e:	f003 f81b 	bl	80037b8 <puts>
	}

	ctlnetwork(CN_SET_NETINFO, (void *)&gWIZNETINFO);
 8000782:	490c      	ldr	r1, [pc, #48]	; (80007b4 <_InitW5300+0x70>)
 8000784:	2000      	movs	r0, #0
 8000786:	f002 fa63 	bl	8002c50 <ctlnetwork>
	print_network_information();
 800078a:	f7ff ff6b 	bl	8000664 <print_network_information>
}
 800078e:	bf00      	nop
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	08000601 	.word	0x08000601
 800079c:	08000627 	.word	0x08000627
 80007a0:	08000655 	.word	0x08000655
 80007a4:	08000647 	.word	0x08000647
 80007a8:	080045ac 	.word	0x080045ac
 80007ac:	20000000 	.word	0x20000000
 80007b0:	080045c0 	.word	0x080045c0
 80007b4:	20000010 	.word	0x20000010

080007b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007bc:	f000 fba6 	bl	8000f0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c0:	f000 f818 	bl	80007f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c4:	f000 f90c 	bl	80009e0 <MX_GPIO_Init>
  MX_FMC_Init();
 80007c8:	f000 f8a8 	bl	800091c <MX_FMC_Init>
  MX_USART2_UART_Init();
 80007cc:	f000 f87c 	bl	80008c8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello! W5300 BUS loopback System \r\n");
 80007d0:	4805      	ldr	r0, [pc, #20]	; (80007e8 <main+0x30>)
 80007d2:	f002 fff1 	bl	80037b8 <puts>
  HAL_UART_Receive_IT(&huart2, rxData, 1);
 80007d6:	2201      	movs	r2, #1
 80007d8:	4904      	ldr	r1, [pc, #16]	; (80007ec <main+0x34>)
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <main+0x38>)
 80007dc:	f001 fc97 	bl	800210e <HAL_UART_Receive_IT>

  _InitW5300();
 80007e0:	f7ff ffb0 	bl	8000744 <_InitW5300>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <main+0x2c>
 80007e6:	bf00      	nop
 80007e8:	080045e4 	.word	0x080045e4
 80007ec:	20000174 	.word	0x20000174
 80007f0:	200000e0 	.word	0x200000e0

080007f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b094      	sub	sp, #80	; 0x50
 80007f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	f107 0320 	add.w	r3, r7, #32
 80007fe:	2230      	movs	r2, #48	; 0x30
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f002 fe6a 	bl	80034dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	4b28      	ldr	r3, [pc, #160]	; (80008c0 <SystemClock_Config+0xcc>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000820:	4a27      	ldr	r2, [pc, #156]	; (80008c0 <SystemClock_Config+0xcc>)
 8000822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000826:	6413      	str	r3, [r2, #64]	; 0x40
 8000828:	4b25      	ldr	r3, [pc, #148]	; (80008c0 <SystemClock_Config+0xcc>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000834:	2300      	movs	r3, #0
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <SystemClock_Config+0xd0>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a21      	ldr	r2, [pc, #132]	; (80008c4 <SystemClock_Config+0xd0>)
 800083e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000842:	6013      	str	r3, [r2, #0]
 8000844:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <SystemClock_Config+0xd0>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000850:	2301      	movs	r3, #1
 8000852:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000854:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085a:	2302      	movs	r3, #2
 800085c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800085e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000862:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000864:	2304      	movs	r3, #4
 8000866:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000868:	23a8      	movs	r3, #168	; 0xa8
 800086a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800086c:	2302      	movs	r3, #2
 800086e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000870:	2307      	movs	r3, #7
 8000872:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000874:	f107 0320 	add.w	r3, r7, #32
 8000878:	4618      	mov	r0, r3
 800087a:	f000 fe89 	bl	8001590 <HAL_RCC_OscConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000884:	f000 f976 	bl	8000b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000888:	230f      	movs	r3, #15
 800088a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088c:	2302      	movs	r3, #2
 800088e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000894:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000898:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800089a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800089e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	2105      	movs	r1, #5
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 f8ea 	bl	8001a80 <HAL_RCC_ClockConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008b2:	f000 f95f 	bl	8000b74 <Error_Handler>
  }
}
 80008b6:	bf00      	nop
 80008b8:	3750      	adds	r7, #80	; 0x50
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40007000 	.word	0x40007000

080008c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008cc:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_USART2_UART_Init+0x4c>)
 80008ce:	4a12      	ldr	r2, [pc, #72]	; (8000918 <MX_USART2_UART_Init+0x50>)
 80008d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <MX_USART2_UART_Init+0x4c>)
 80008d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_USART2_UART_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_USART2_UART_Init+0x4c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <MX_USART2_UART_Init+0x4c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_USART2_UART_Init+0x4c>)
 80008ee:	220c      	movs	r2, #12
 80008f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <MX_USART2_UART_Init+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_USART2_UART_Init+0x4c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_USART2_UART_Init+0x4c>)
 8000900:	f001 fb26 	bl	8001f50 <HAL_UART_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800090a:	f000 f933 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200000e0 	.word	0x200000e0
 8000918:	40004400 	.word	0x40004400

0800091c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b088      	sub	sp, #32
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
 8000930:	615a      	str	r2, [r3, #20]
 8000932:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000934:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <MX_FMC_Init+0xbc>)
 8000936:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800093a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800093c:	4b26      	ldr	r3, [pc, #152]	; (80009d8 <MX_FMC_Init+0xbc>)
 800093e:	4a27      	ldr	r2, [pc, #156]	; (80009dc <MX_FMC_Init+0xc0>)
 8000940:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000942:	4b25      	ldr	r3, [pc, #148]	; (80009d8 <MX_FMC_Init+0xbc>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000948:	4b23      	ldr	r3, [pc, #140]	; (80009d8 <MX_FMC_Init+0xbc>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800094e:	4b22      	ldr	r3, [pc, #136]	; (80009d8 <MX_FMC_Init+0xbc>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000954:	4b20      	ldr	r3, [pc, #128]	; (80009d8 <MX_FMC_Init+0xbc>)
 8000956:	2210      	movs	r2, #16
 8000958:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800095a:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <MX_FMC_Init+0xbc>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000960:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <MX_FMC_Init+0xbc>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FMC_WRAP_MODE_DISABLE;
 8000966:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <MX_FMC_Init+0xbc>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800096c:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <MX_FMC_Init+0xbc>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000972:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <MX_FMC_Init+0xbc>)
 8000974:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000978:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800097a:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <MX_FMC_Init+0xbc>)
 800097c:	2200      	movs	r2, #0
 800097e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000980:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <MX_FMC_Init+0xbc>)
 8000982:	2200      	movs	r2, #0
 8000984:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000986:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_FMC_Init+0xbc>)
 8000988:	2200      	movs	r2, #0
 800098a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <MX_FMC_Init+0xbc>)
 800098e:	2200      	movs	r2, #0
 8000990:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_FMC_Init+0xbc>)
 8000994:	2200      	movs	r2, #0
 8000996:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <MX_FMC_Init+0xbc>)
 800099a:	2200      	movs	r2, #0
 800099c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 800099e:	230f      	movs	r3, #15
 80009a0:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80009a2:	230f      	movs	r3, #15
 80009a4:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80009a6:	23ff      	movs	r3, #255	; 0xff
 80009a8:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80009aa:	230f      	movs	r3, #15
 80009ac:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80009ae:	2310      	movs	r3, #16
 80009b0:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80009b2:	2311      	movs	r3, #17
 80009b4:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	2200      	movs	r2, #0
 80009be:	4619      	mov	r1, r3
 80009c0:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_FMC_Init+0xbc>)
 80009c2:	f001 fa7d 	bl	8001ec0 <HAL_SRAM_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 80009cc:	f000 f8d2 	bl	8000b74 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80009d0:	bf00      	nop
 80009d2:	3720      	adds	r7, #32
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000124 	.word	0x20000124
 80009dc:	a0000104 	.word	0xa0000104

080009e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08e      	sub	sp, #56	; 0x38
 80009e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
 80009fa:	4b5a      	ldr	r3, [pc, #360]	; (8000b64 <MX_GPIO_Init+0x184>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a59      	ldr	r2, [pc, #356]	; (8000b64 <MX_GPIO_Init+0x184>)
 8000a00:	f043 0304 	orr.w	r3, r3, #4
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b57      	ldr	r3, [pc, #348]	; (8000b64 <MX_GPIO_Init+0x184>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0304 	and.w	r3, r3, #4
 8000a0e:	623b      	str	r3, [r7, #32]
 8000a10:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
 8000a16:	4b53      	ldr	r3, [pc, #332]	; (8000b64 <MX_GPIO_Init+0x184>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a52      	ldr	r2, [pc, #328]	; (8000b64 <MX_GPIO_Init+0x184>)
 8000a1c:	f043 0320 	orr.w	r3, r3, #32
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b50      	ldr	r3, [pc, #320]	; (8000b64 <MX_GPIO_Init+0x184>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0320 	and.w	r3, r3, #32
 8000a2a:	61fb      	str	r3, [r7, #28]
 8000a2c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61bb      	str	r3, [r7, #24]
 8000a32:	4b4c      	ldr	r3, [pc, #304]	; (8000b64 <MX_GPIO_Init+0x184>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a4b      	ldr	r2, [pc, #300]	; (8000b64 <MX_GPIO_Init+0x184>)
 8000a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b49      	ldr	r3, [pc, #292]	; (8000b64 <MX_GPIO_Init+0x184>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a46:	61bb      	str	r3, [r7, #24]
 8000a48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]
 8000a4e:	4b45      	ldr	r3, [pc, #276]	; (8000b64 <MX_GPIO_Init+0x184>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a44      	ldr	r2, [pc, #272]	; (8000b64 <MX_GPIO_Init+0x184>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b42      	ldr	r3, [pc, #264]	; (8000b64 <MX_GPIO_Init+0x184>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	4b3e      	ldr	r3, [pc, #248]	; (8000b64 <MX_GPIO_Init+0x184>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a3d      	ldr	r2, [pc, #244]	; (8000b64 <MX_GPIO_Init+0x184>)
 8000a70:	f043 0302 	orr.w	r3, r3, #2
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b3b      	ldr	r3, [pc, #236]	; (8000b64 <MX_GPIO_Init+0x184>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	4b37      	ldr	r3, [pc, #220]	; (8000b64 <MX_GPIO_Init+0x184>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a36      	ldr	r2, [pc, #216]	; (8000b64 <MX_GPIO_Init+0x184>)
 8000a8c:	f043 0310 	orr.w	r3, r3, #16
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b34      	ldr	r3, [pc, #208]	; (8000b64 <MX_GPIO_Init+0x184>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0310 	and.w	r3, r3, #16
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	4b30      	ldr	r3, [pc, #192]	; (8000b64 <MX_GPIO_Init+0x184>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a2f      	ldr	r2, [pc, #188]	; (8000b64 <MX_GPIO_Init+0x184>)
 8000aa8:	f043 0308 	orr.w	r3, r3, #8
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b2d      	ldr	r3, [pc, #180]	; (8000b64 <MX_GPIO_Init+0x184>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0308 	and.w	r3, r3, #8
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4b29      	ldr	r3, [pc, #164]	; (8000b64 <MX_GPIO_Init+0x184>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a28      	ldr	r2, [pc, #160]	; (8000b64 <MX_GPIO_Init+0x184>)
 8000ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b26      	ldr	r3, [pc, #152]	; (8000b64 <MX_GPIO_Init+0x184>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f244 0181 	movw	r1, #16513	; 0x4081
 8000adc:	4822      	ldr	r0, [pc, #136]	; (8000b68 <MX_GPIO_Init+0x188>)
 8000ade:	f000 fd3d 	bl	800155c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2140      	movs	r1, #64	; 0x40
 8000ae6:	4821      	ldr	r0, [pc, #132]	; (8000b6c <MX_GPIO_Init+0x18c>)
 8000ae8:	f000 fd38 	bl	800155c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000aec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b00:	4619      	mov	r1, r3
 8000b02:	481b      	ldr	r0, [pc, #108]	; (8000b70 <MX_GPIO_Init+0x190>)
 8000b04:	f000 fb7e 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b08:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4811      	ldr	r0, [pc, #68]	; (8000b68 <MX_GPIO_Init+0x188>)
 8000b22:	f000 fb6f 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b26:	2340      	movs	r3, #64	; 0x40
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	480b      	ldr	r0, [pc, #44]	; (8000b6c <MX_GPIO_Init+0x18c>)
 8000b3e:	f000 fb61 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b52:	4619      	mov	r1, r3
 8000b54:	4805      	ldr	r0, [pc, #20]	; (8000b6c <MX_GPIO_Init+0x18c>)
 8000b56:	f000 fb55 	bl	8001204 <HAL_GPIO_Init>

}
 8000b5a:	bf00      	nop
 8000b5c:	3738      	adds	r7, #56	; 0x38
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020400 	.word	0x40020400
 8000b6c:	40021800 	.word	0x40021800
 8000b70:	40020800 	.word	0x40020800

08000b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
}
 8000b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <Error_Handler+0x8>
	...

08000b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <HAL_MspInit+0x4c>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	4a0f      	ldr	r2, [pc, #60]	; (8000bcc <HAL_MspInit+0x4c>)
 8000b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b94:	6453      	str	r3, [r2, #68]	; 0x44
 8000b96:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <HAL_MspInit+0x4c>)
 8000b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <HAL_MspInit+0x4c>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	4a08      	ldr	r2, [pc, #32]	; (8000bcc <HAL_MspInit+0x4c>)
 8000bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_MspInit+0x4c>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	40023800 	.word	0x40023800

08000bd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a19      	ldr	r2, [pc, #100]	; (8000c54 <HAL_UART_MspInit+0x84>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d12b      	bne.n	8000c4a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <HAL_UART_MspInit+0x88>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	4a17      	ldr	r2, [pc, #92]	; (8000c58 <HAL_UART_MspInit+0x88>)
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c00:	6413      	str	r3, [r2, #64]	; 0x40
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <HAL_UART_MspInit+0x88>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <HAL_UART_MspInit+0x88>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a10      	ldr	r2, [pc, #64]	; (8000c58 <HAL_UART_MspInit+0x88>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <HAL_UART_MspInit+0x88>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c2a:	230c      	movs	r3, #12
 8000c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c3a:	2307      	movs	r3, #7
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	4805      	ldr	r0, [pc, #20]	; (8000c5c <HAL_UART_MspInit+0x8c>)
 8000c46:	f000 fadd 	bl	8001204 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c4a:	bf00      	nop
 8000c4c:	3728      	adds	r7, #40	; 0x28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40004400 	.word	0x40004400
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020000 	.word	0x40020000

08000c60 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000c74:	4b24      	ldr	r3, [pc, #144]	; (8000d08 <HAL_FMC_MspInit+0xa8>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d141      	bne.n	8000d00 <HAL_FMC_MspInit+0xa0>
    return;
  }
  FMC_Initialized = 1;
 8000c7c:	4b22      	ldr	r3, [pc, #136]	; (8000d08 <HAL_FMC_MspInit+0xa8>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	603b      	str	r3, [r7, #0]
 8000c86:	4b21      	ldr	r3, [pc, #132]	; (8000d0c <HAL_FMC_MspInit+0xac>)
 8000c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c8a:	4a20      	ldr	r2, [pc, #128]	; (8000d0c <HAL_FMC_MspInit+0xac>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6393      	str	r3, [r2, #56]	; 0x38
 8000c92:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <HAL_FMC_MspInit+0xac>)
 8000c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c9e:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8000ca2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cac:	2303      	movs	r3, #3
 8000cae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cb0:	230c      	movs	r3, #12
 8000cb2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4815      	ldr	r0, [pc, #84]	; (8000d10 <HAL_FMC_MspInit+0xb0>)
 8000cba:	f000 faa3 	bl	8001204 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000cbe:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000cc2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cd0:	230c      	movs	r3, #12
 8000cd2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	480e      	ldr	r0, [pc, #56]	; (8000d14 <HAL_FMC_MspInit+0xb4>)
 8000cda:	f000 fa93 	bl	8001204 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000cde:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000ce2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cec:	2303      	movs	r3, #3
 8000cee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cf0:	230c      	movs	r3, #12
 8000cf2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4807      	ldr	r0, [pc, #28]	; (8000d18 <HAL_FMC_MspInit+0xb8>)
 8000cfa:	f000 fa83 	bl	8001204 <HAL_GPIO_Init>
 8000cfe:	e000      	b.n	8000d02 <HAL_FMC_MspInit+0xa2>
    return;
 8000d00:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000178 	.word	0x20000178
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40021400 	.word	0x40021400
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40020c00 	.word	0x40020c00

08000d1c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000d24:	f7ff ff9c 	bl	8000c60 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <NMI_Handler+0x4>

08000d36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <HardFault_Handler+0x4>

08000d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <MemManage_Handler+0x4>

08000d42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <BusFault_Handler+0x4>

08000d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <UsageFault_Handler+0x4>

08000d4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d7c:	f000 f918 	bl	8000fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	e00a      	b.n	8000dac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d96:	f3af 8000 	nop.w
 8000d9a:	4601      	mov	r1, r0
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	1c5a      	adds	r2, r3, #1
 8000da0:	60ba      	str	r2, [r7, #8]
 8000da2:	b2ca      	uxtb	r2, r1
 8000da4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	3301      	adds	r3, #1
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	697a      	ldr	r2, [r7, #20]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	dbf0      	blt.n	8000d96 <_read+0x12>
	}

return len;
 8000db4:	687b      	ldr	r3, [r7, #4]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <_close>:
	}
	return len;
}

int _close(int file)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
	return -1;
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
 8000dde:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000de6:	605a      	str	r2, [r3, #4]
	return 0;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <_isatty>:

int _isatty(int file)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
	return 1;
 8000dfe:	2301      	movs	r3, #1
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
	return 0;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
	...

08000e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e30:	4a14      	ldr	r2, [pc, #80]	; (8000e84 <_sbrk+0x5c>)
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <_sbrk+0x60>)
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d102      	bne.n	8000e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <_sbrk+0x64>)
 8000e46:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <_sbrk+0x68>)
 8000e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <_sbrk+0x64>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d207      	bcs.n	8000e68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e58:	f002 fb16 	bl	8003488 <__errno>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	220c      	movs	r2, #12
 8000e60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e62:	f04f 33ff 	mov.w	r3, #4294967295
 8000e66:	e009      	b.n	8000e7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <_sbrk+0x64>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <_sbrk+0x64>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <_sbrk+0x64>)
 8000e78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20030000 	.word	0x20030000
 8000e88:	00000400 	.word	0x00000400
 8000e8c:	2000017c 	.word	0x2000017c
 8000e90:	200001a0 	.word	0x200001a0

08000e94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <SystemInit+0x20>)
 8000e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e9e:	4a05      	ldr	r2, [pc, #20]	; (8000eb4 <SystemInit+0x20>)
 8000ea0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000eb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ebc:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ebe:	490e      	ldr	r1, [pc, #56]	; (8000ef8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ec0:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec4:	e002      	b.n	8000ecc <LoopCopyDataInit>

08000ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eca:	3304      	adds	r3, #4

08000ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed0:	d3f9      	bcc.n	8000ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed2:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ed4:	4c0b      	ldr	r4, [pc, #44]	; (8000f04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed8:	e001      	b.n	8000ede <LoopFillZerobss>

08000eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000edc:	3204      	adds	r2, #4

08000ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee0:	d3fb      	bcc.n	8000eda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ee2:	f7ff ffd7 	bl	8000e94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ee6:	f002 fad5 	bl	8003494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eea:	f7ff fc65 	bl	80007b8 <main>
  bx  lr    
 8000eee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ef0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000ef4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef8:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8000efc:	080046c8 	.word	0x080046c8
  ldr r2, =_sbss
 8000f00:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8000f04:	2000019c 	.word	0x2000019c

08000f08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f08:	e7fe      	b.n	8000f08 <ADC_IRQHandler>
	...

08000f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <HAL_Init+0x40>)
 8000f16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <HAL_Init+0x40>)
 8000f22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <HAL_Init+0x40>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a07      	ldr	r2, [pc, #28]	; (8000f4c <HAL_Init+0x40>)
 8000f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f34:	2003      	movs	r0, #3
 8000f36:	f000 f931 	bl	800119c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f000 f808 	bl	8000f50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f40:	f7ff fe1e 	bl	8000b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40023c00 	.word	0x40023c00

08000f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <HAL_InitTick+0x54>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_InitTick+0x58>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4619      	mov	r1, r3
 8000f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 f93b 	bl	80011ea <HAL_SYSTICK_Config>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e00e      	b.n	8000f9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b0f      	cmp	r3, #15
 8000f82:	d80a      	bhi.n	8000f9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f84:	2200      	movs	r2, #0
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8c:	f000 f911 	bl	80011b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f90:	4a06      	ldr	r2, [pc, #24]	; (8000fac <HAL_InitTick+0x5c>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f96:	2300      	movs	r3, #0
 8000f98:	e000      	b.n	8000f9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000028 	.word	0x20000028
 8000fa8:	20000030 	.word	0x20000030
 8000fac:	2000002c 	.word	0x2000002c

08000fb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_IncTick+0x20>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_IncTick+0x24>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <HAL_IncTick+0x24>)
 8000fc2:	6013      	str	r3, [r2, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000030 	.word	0x20000030
 8000fd4:	20000180 	.word	0x20000180

08000fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return uwTick;
 8000fdc:	4b03      	ldr	r3, [pc, #12]	; (8000fec <HAL_GetTick+0x14>)
 8000fde:	681b      	ldr	r3, [r3, #0]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000180 	.word	0x20000180

08000ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff8:	f7ff ffee 	bl	8000fd8 <HAL_GetTick>
 8000ffc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001008:	d005      	beq.n	8001016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <HAL_Delay+0x44>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4413      	add	r3, r2
 8001014:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001016:	bf00      	nop
 8001018:	f7ff ffde 	bl	8000fd8 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	429a      	cmp	r2, r3
 8001026:	d8f7      	bhi.n	8001018 <HAL_Delay+0x28>
  {
  }
}
 8001028:	bf00      	nop
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000030 	.word	0x20000030

08001038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <__NVIC_SetPriorityGrouping+0x44>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001054:	4013      	ands	r3, r2
 8001056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001060:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800106a:	4a04      	ldr	r2, [pc, #16]	; (800107c <__NVIC_SetPriorityGrouping+0x44>)
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	60d3      	str	r3, [r2, #12]
}
 8001070:	bf00      	nop
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <__NVIC_GetPriorityGrouping+0x18>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	0a1b      	lsrs	r3, r3, #8
 800108a:	f003 0307 	and.w	r3, r3, #7
}
 800108e:	4618      	mov	r0, r3
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	6039      	str	r1, [r7, #0]
 80010a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	db0a      	blt.n	80010c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	490c      	ldr	r1, [pc, #48]	; (80010e8 <__NVIC_SetPriority+0x4c>)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	0112      	lsls	r2, r2, #4
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	440b      	add	r3, r1
 80010c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c4:	e00a      	b.n	80010dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4908      	ldr	r1, [pc, #32]	; (80010ec <__NVIC_SetPriority+0x50>)
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	f003 030f 	and.w	r3, r3, #15
 80010d2:	3b04      	subs	r3, #4
 80010d4:	0112      	lsls	r2, r2, #4
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	440b      	add	r3, r1
 80010da:	761a      	strb	r2, [r3, #24]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000e100 	.word	0xe000e100
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b089      	sub	sp, #36	; 0x24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f1c3 0307 	rsb	r3, r3, #7
 800110a:	2b04      	cmp	r3, #4
 800110c:	bf28      	it	cs
 800110e:	2304      	movcs	r3, #4
 8001110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3304      	adds	r3, #4
 8001116:	2b06      	cmp	r3, #6
 8001118:	d902      	bls.n	8001120 <NVIC_EncodePriority+0x30>
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3b03      	subs	r3, #3
 800111e:	e000      	b.n	8001122 <NVIC_EncodePriority+0x32>
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	f04f 32ff 	mov.w	r2, #4294967295
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43da      	mvns	r2, r3
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	401a      	ands	r2, r3
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001138:	f04f 31ff 	mov.w	r1, #4294967295
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	fa01 f303 	lsl.w	r3, r1, r3
 8001142:	43d9      	mvns	r1, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001148:	4313      	orrs	r3, r2
         );
}
 800114a:	4618      	mov	r0, r3
 800114c:	3724      	adds	r7, #36	; 0x24
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
	...

08001158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3b01      	subs	r3, #1
 8001164:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001168:	d301      	bcc.n	800116e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800116a:	2301      	movs	r3, #1
 800116c:	e00f      	b.n	800118e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800116e:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <SysTick_Config+0x40>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001176:	210f      	movs	r1, #15
 8001178:	f04f 30ff 	mov.w	r0, #4294967295
 800117c:	f7ff ff8e 	bl	800109c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <SysTick_Config+0x40>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001186:	4b04      	ldr	r3, [pc, #16]	; (8001198 <SysTick_Config+0x40>)
 8001188:	2207      	movs	r2, #7
 800118a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	e000e010 	.word	0xe000e010

0800119c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff ff47 	bl	8001038 <__NVIC_SetPriorityGrouping>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b086      	sub	sp, #24
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	4603      	mov	r3, r0
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	607a      	str	r2, [r7, #4]
 80011be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011c4:	f7ff ff5c 	bl	8001080 <__NVIC_GetPriorityGrouping>
 80011c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	68b9      	ldr	r1, [r7, #8]
 80011ce:	6978      	ldr	r0, [r7, #20]
 80011d0:	f7ff ff8e 	bl	80010f0 <NVIC_EncodePriority>
 80011d4:	4602      	mov	r2, r0
 80011d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011da:	4611      	mov	r1, r2
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ff5d 	bl	800109c <__NVIC_SetPriority>
}
 80011e2:	bf00      	nop
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff ffb0 	bl	8001158 <SysTick_Config>
 80011f8:	4603      	mov	r3, r0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001204:	b480      	push	{r7}
 8001206:	b089      	sub	sp, #36	; 0x24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001216:	2300      	movs	r3, #0
 8001218:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
 800121e:	e177      	b.n	8001510 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001220:	2201      	movs	r2, #1
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	429a      	cmp	r2, r3
 800123a:	f040 8166 	bne.w	800150a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	2b01      	cmp	r3, #1
 8001248:	d005      	beq.n	8001256 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001252:	2b02      	cmp	r3, #2
 8001254:	d130      	bne.n	80012b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	2203      	movs	r2, #3
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	68da      	ldr	r2, [r3, #12]
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800128c:	2201      	movs	r2, #1
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	091b      	lsrs	r3, r3, #4
 80012a2:	f003 0201 	and.w	r2, r3, #1
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	2b03      	cmp	r3, #3
 80012c2:	d017      	beq.n	80012f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	2203      	movs	r2, #3
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d123      	bne.n	8001348 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	08da      	lsrs	r2, r3, #3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3208      	adds	r2, #8
 8001308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	f003 0307 	and.w	r3, r3, #7
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	220f      	movs	r2, #15
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	691a      	ldr	r2, [r3, #16]
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	08da      	lsrs	r2, r3, #3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3208      	adds	r2, #8
 8001342:	69b9      	ldr	r1, [r7, #24]
 8001344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	2203      	movs	r2, #3
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0203 	and.w	r2, r3, #3
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 80c0 	beq.w	800150a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b66      	ldr	r3, [pc, #408]	; (8001528 <HAL_GPIO_Init+0x324>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	4a65      	ldr	r2, [pc, #404]	; (8001528 <HAL_GPIO_Init+0x324>)
 8001394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001398:	6453      	str	r3, [r2, #68]	; 0x44
 800139a:	4b63      	ldr	r3, [pc, #396]	; (8001528 <HAL_GPIO_Init+0x324>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013a6:	4a61      	ldr	r2, [pc, #388]	; (800152c <HAL_GPIO_Init+0x328>)
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	089b      	lsrs	r3, r3, #2
 80013ac:	3302      	adds	r3, #2
 80013ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f003 0303 	and.w	r3, r3, #3
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	220f      	movs	r2, #15
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a58      	ldr	r2, [pc, #352]	; (8001530 <HAL_GPIO_Init+0x32c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d037      	beq.n	8001442 <HAL_GPIO_Init+0x23e>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a57      	ldr	r2, [pc, #348]	; (8001534 <HAL_GPIO_Init+0x330>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d031      	beq.n	800143e <HAL_GPIO_Init+0x23a>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a56      	ldr	r2, [pc, #344]	; (8001538 <HAL_GPIO_Init+0x334>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d02b      	beq.n	800143a <HAL_GPIO_Init+0x236>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a55      	ldr	r2, [pc, #340]	; (800153c <HAL_GPIO_Init+0x338>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d025      	beq.n	8001436 <HAL_GPIO_Init+0x232>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a54      	ldr	r2, [pc, #336]	; (8001540 <HAL_GPIO_Init+0x33c>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d01f      	beq.n	8001432 <HAL_GPIO_Init+0x22e>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a53      	ldr	r2, [pc, #332]	; (8001544 <HAL_GPIO_Init+0x340>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d019      	beq.n	800142e <HAL_GPIO_Init+0x22a>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a52      	ldr	r2, [pc, #328]	; (8001548 <HAL_GPIO_Init+0x344>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d013      	beq.n	800142a <HAL_GPIO_Init+0x226>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a51      	ldr	r2, [pc, #324]	; (800154c <HAL_GPIO_Init+0x348>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d00d      	beq.n	8001426 <HAL_GPIO_Init+0x222>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a50      	ldr	r2, [pc, #320]	; (8001550 <HAL_GPIO_Init+0x34c>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d007      	beq.n	8001422 <HAL_GPIO_Init+0x21e>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a4f      	ldr	r2, [pc, #316]	; (8001554 <HAL_GPIO_Init+0x350>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d101      	bne.n	800141e <HAL_GPIO_Init+0x21a>
 800141a:	2309      	movs	r3, #9
 800141c:	e012      	b.n	8001444 <HAL_GPIO_Init+0x240>
 800141e:	230a      	movs	r3, #10
 8001420:	e010      	b.n	8001444 <HAL_GPIO_Init+0x240>
 8001422:	2308      	movs	r3, #8
 8001424:	e00e      	b.n	8001444 <HAL_GPIO_Init+0x240>
 8001426:	2307      	movs	r3, #7
 8001428:	e00c      	b.n	8001444 <HAL_GPIO_Init+0x240>
 800142a:	2306      	movs	r3, #6
 800142c:	e00a      	b.n	8001444 <HAL_GPIO_Init+0x240>
 800142e:	2305      	movs	r3, #5
 8001430:	e008      	b.n	8001444 <HAL_GPIO_Init+0x240>
 8001432:	2304      	movs	r3, #4
 8001434:	e006      	b.n	8001444 <HAL_GPIO_Init+0x240>
 8001436:	2303      	movs	r3, #3
 8001438:	e004      	b.n	8001444 <HAL_GPIO_Init+0x240>
 800143a:	2302      	movs	r3, #2
 800143c:	e002      	b.n	8001444 <HAL_GPIO_Init+0x240>
 800143e:	2301      	movs	r3, #1
 8001440:	e000      	b.n	8001444 <HAL_GPIO_Init+0x240>
 8001442:	2300      	movs	r3, #0
 8001444:	69fa      	ldr	r2, [r7, #28]
 8001446:	f002 0203 	and.w	r2, r2, #3
 800144a:	0092      	lsls	r2, r2, #2
 800144c:	4093      	lsls	r3, r2
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001454:	4935      	ldr	r1, [pc, #212]	; (800152c <HAL_GPIO_Init+0x328>)
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	089b      	lsrs	r3, r3, #2
 800145a:	3302      	adds	r3, #2
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001462:	4b3d      	ldr	r3, [pc, #244]	; (8001558 <HAL_GPIO_Init+0x354>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001486:	4a34      	ldr	r2, [pc, #208]	; (8001558 <HAL_GPIO_Init+0x354>)
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800148c:	4b32      	ldr	r3, [pc, #200]	; (8001558 <HAL_GPIO_Init+0x354>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014b0:	4a29      	ldr	r2, [pc, #164]	; (8001558 <HAL_GPIO_Init+0x354>)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014b6:	4b28      	ldr	r3, [pc, #160]	; (8001558 <HAL_GPIO_Init+0x354>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	43db      	mvns	r3, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4013      	ands	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014da:	4a1f      	ldr	r2, [pc, #124]	; (8001558 <HAL_GPIO_Init+0x354>)
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014e0:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <HAL_GPIO_Init+0x354>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	4313      	orrs	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001504:	4a14      	ldr	r2, [pc, #80]	; (8001558 <HAL_GPIO_Init+0x354>)
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3301      	adds	r3, #1
 800150e:	61fb      	str	r3, [r7, #28]
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	2b0f      	cmp	r3, #15
 8001514:	f67f ae84 	bls.w	8001220 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	3724      	adds	r7, #36	; 0x24
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800
 800152c:	40013800 	.word	0x40013800
 8001530:	40020000 	.word	0x40020000
 8001534:	40020400 	.word	0x40020400
 8001538:	40020800 	.word	0x40020800
 800153c:	40020c00 	.word	0x40020c00
 8001540:	40021000 	.word	0x40021000
 8001544:	40021400 	.word	0x40021400
 8001548:	40021800 	.word	0x40021800
 800154c:	40021c00 	.word	0x40021c00
 8001550:	40022000 	.word	0x40022000
 8001554:	40022400 	.word	0x40022400
 8001558:	40013c00 	.word	0x40013c00

0800155c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	807b      	strh	r3, [r7, #2]
 8001568:	4613      	mov	r3, r2
 800156a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800156c:	787b      	ldrb	r3, [r7, #1]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001572:	887a      	ldrh	r2, [r7, #2]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001578:	e003      	b.n	8001582 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800157a:	887b      	ldrh	r3, [r7, #2]
 800157c:	041a      	lsls	r2, r3, #16
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	619a      	str	r2, [r3, #24]
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
	...

08001590 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e267      	b.n	8001a72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d075      	beq.n	800169a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ae:	4b88      	ldr	r3, [pc, #544]	; (80017d0 <HAL_RCC_OscConfig+0x240>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 030c 	and.w	r3, r3, #12
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	d00c      	beq.n	80015d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ba:	4b85      	ldr	r3, [pc, #532]	; (80017d0 <HAL_RCC_OscConfig+0x240>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015c2:	2b08      	cmp	r3, #8
 80015c4:	d112      	bne.n	80015ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015c6:	4b82      	ldr	r3, [pc, #520]	; (80017d0 <HAL_RCC_OscConfig+0x240>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015d2:	d10b      	bne.n	80015ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d4:	4b7e      	ldr	r3, [pc, #504]	; (80017d0 <HAL_RCC_OscConfig+0x240>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d05b      	beq.n	8001698 <HAL_RCC_OscConfig+0x108>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d157      	bne.n	8001698 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e242      	b.n	8001a72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f4:	d106      	bne.n	8001604 <HAL_RCC_OscConfig+0x74>
 80015f6:	4b76      	ldr	r3, [pc, #472]	; (80017d0 <HAL_RCC_OscConfig+0x240>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a75      	ldr	r2, [pc, #468]	; (80017d0 <HAL_RCC_OscConfig+0x240>)
 80015fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	e01d      	b.n	8001640 <HAL_RCC_OscConfig+0xb0>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800160c:	d10c      	bne.n	8001628 <HAL_RCC_OscConfig+0x98>
 800160e:	4b70      	ldr	r3, [pc, #448]	; (80017d0 <HAL_RCC_OscConfig+0x240>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a6f      	ldr	r2, [pc, #444]	; (80017d0 <HAL_RCC_OscConfig+0x240>)
 8001614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	4b6d      	ldr	r3, [pc, #436]	; (80017d0 <HAL_RCC_OscConfig+0x240>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a6c      	ldr	r2, [pc, #432]	; (80017d0 <HAL_RCC_OscConfig+0x240>)
 8001620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	e00b      	b.n	8001640 <HAL_RCC_OscConfig+0xb0>
 8001628:	4b69      	ldr	r3, [pc, #420]	; (80017d0 <HAL_RCC_OscConfig+0x240>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a68      	ldr	r2, [pc, #416]	; (80017d0 <HAL_RCC_OscConfig+0x240>)
 800162e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	4b66      	ldr	r3, [pc, #408]	; (80017d0 <HAL_RCC_OscConfig+0x240>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a65      	ldr	r2, [pc, #404]	; (80017d0 <HAL_RCC_OscConfig+0x240>)
 800163a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800163e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d013      	beq.n	8001670 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001648:	f7ff fcc6 	bl	8000fd8 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001650:	f7ff fcc2 	bl	8000fd8 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b64      	cmp	r3, #100	; 0x64
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e207      	b.n	8001a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001662:	4b5b      	ldr	r3, [pc, #364]	; (80017d0 <HAL_RCC_OscConfig+0x240>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0f0      	beq.n	8001650 <HAL_RCC_OscConfig+0xc0>
 800166e:	e014      	b.n	800169a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff fcb2 	bl	8000fd8 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001678:	f7ff fcae 	bl	8000fd8 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b64      	cmp	r3, #100	; 0x64
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e1f3      	b.n	8001a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800168a:	4b51      	ldr	r3, [pc, #324]	; (80017d0 <HAL_RCC_OscConfig+0x240>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0xe8>
 8001696:	e000      	b.n	800169a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d063      	beq.n	800176e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016a6:	4b4a      	ldr	r3, [pc, #296]	; (80017d0 <HAL_RCC_OscConfig+0x240>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 030c 	and.w	r3, r3, #12
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00b      	beq.n	80016ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016b2:	4b47      	ldr	r3, [pc, #284]	; (80017d0 <HAL_RCC_OscConfig+0x240>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016ba:	2b08      	cmp	r3, #8
 80016bc:	d11c      	bne.n	80016f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016be:	4b44      	ldr	r3, [pc, #272]	; (80017d0 <HAL_RCC_OscConfig+0x240>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d116      	bne.n	80016f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ca:	4b41      	ldr	r3, [pc, #260]	; (80017d0 <HAL_RCC_OscConfig+0x240>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d005      	beq.n	80016e2 <HAL_RCC_OscConfig+0x152>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d001      	beq.n	80016e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e1c7      	b.n	8001a72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e2:	4b3b      	ldr	r3, [pc, #236]	; (80017d0 <HAL_RCC_OscConfig+0x240>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	4937      	ldr	r1, [pc, #220]	; (80017d0 <HAL_RCC_OscConfig+0x240>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f6:	e03a      	b.n	800176e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d020      	beq.n	8001742 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001700:	4b34      	ldr	r3, [pc, #208]	; (80017d4 <HAL_RCC_OscConfig+0x244>)
 8001702:	2201      	movs	r2, #1
 8001704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001706:	f7ff fc67 	bl	8000fd8 <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800170e:	f7ff fc63 	bl	8000fd8 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e1a8      	b.n	8001a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001720:	4b2b      	ldr	r3, [pc, #172]	; (80017d0 <HAL_RCC_OscConfig+0x240>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0f0      	beq.n	800170e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172c:	4b28      	ldr	r3, [pc, #160]	; (80017d0 <HAL_RCC_OscConfig+0x240>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	4925      	ldr	r1, [pc, #148]	; (80017d0 <HAL_RCC_OscConfig+0x240>)
 800173c:	4313      	orrs	r3, r2
 800173e:	600b      	str	r3, [r1, #0]
 8001740:	e015      	b.n	800176e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001742:	4b24      	ldr	r3, [pc, #144]	; (80017d4 <HAL_RCC_OscConfig+0x244>)
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001748:	f7ff fc46 	bl	8000fd8 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001750:	f7ff fc42 	bl	8000fd8 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e187      	b.n	8001a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001762:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <HAL_RCC_OscConfig+0x240>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f0      	bne.n	8001750 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	2b00      	cmp	r3, #0
 8001778:	d036      	beq.n	80017e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d016      	beq.n	80017b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <HAL_RCC_OscConfig+0x248>)
 8001784:	2201      	movs	r2, #1
 8001786:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001788:	f7ff fc26 	bl	8000fd8 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001790:	f7ff fc22 	bl	8000fd8 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e167      	b.n	8001a72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <HAL_RCC_OscConfig+0x240>)
 80017a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0f0      	beq.n	8001790 <HAL_RCC_OscConfig+0x200>
 80017ae:	e01b      	b.n	80017e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <HAL_RCC_OscConfig+0x248>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b6:	f7ff fc0f 	bl	8000fd8 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017bc:	e00e      	b.n	80017dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017be:	f7ff fc0b 	bl	8000fd8 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d907      	bls.n	80017dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e150      	b.n	8001a72 <HAL_RCC_OscConfig+0x4e2>
 80017d0:	40023800 	.word	0x40023800
 80017d4:	42470000 	.word	0x42470000
 80017d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017dc:	4b88      	ldr	r3, [pc, #544]	; (8001a00 <HAL_RCC_OscConfig+0x470>)
 80017de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1ea      	bne.n	80017be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f000 8097 	beq.w	8001924 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017f6:	2300      	movs	r3, #0
 80017f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017fa:	4b81      	ldr	r3, [pc, #516]	; (8001a00 <HAL_RCC_OscConfig+0x470>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10f      	bne.n	8001826 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	4b7d      	ldr	r3, [pc, #500]	; (8001a00 <HAL_RCC_OscConfig+0x470>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	4a7c      	ldr	r2, [pc, #496]	; (8001a00 <HAL_RCC_OscConfig+0x470>)
 8001810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001814:	6413      	str	r3, [r2, #64]	; 0x40
 8001816:	4b7a      	ldr	r3, [pc, #488]	; (8001a00 <HAL_RCC_OscConfig+0x470>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001822:	2301      	movs	r3, #1
 8001824:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001826:	4b77      	ldr	r3, [pc, #476]	; (8001a04 <HAL_RCC_OscConfig+0x474>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182e:	2b00      	cmp	r3, #0
 8001830:	d118      	bne.n	8001864 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001832:	4b74      	ldr	r3, [pc, #464]	; (8001a04 <HAL_RCC_OscConfig+0x474>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a73      	ldr	r2, [pc, #460]	; (8001a04 <HAL_RCC_OscConfig+0x474>)
 8001838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800183c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800183e:	f7ff fbcb 	bl	8000fd8 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001846:	f7ff fbc7 	bl	8000fd8 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e10c      	b.n	8001a72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001858:	4b6a      	ldr	r3, [pc, #424]	; (8001a04 <HAL_RCC_OscConfig+0x474>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0f0      	beq.n	8001846 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d106      	bne.n	800187a <HAL_RCC_OscConfig+0x2ea>
 800186c:	4b64      	ldr	r3, [pc, #400]	; (8001a00 <HAL_RCC_OscConfig+0x470>)
 800186e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001870:	4a63      	ldr	r2, [pc, #396]	; (8001a00 <HAL_RCC_OscConfig+0x470>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	6713      	str	r3, [r2, #112]	; 0x70
 8001878:	e01c      	b.n	80018b4 <HAL_RCC_OscConfig+0x324>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	2b05      	cmp	r3, #5
 8001880:	d10c      	bne.n	800189c <HAL_RCC_OscConfig+0x30c>
 8001882:	4b5f      	ldr	r3, [pc, #380]	; (8001a00 <HAL_RCC_OscConfig+0x470>)
 8001884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001886:	4a5e      	ldr	r2, [pc, #376]	; (8001a00 <HAL_RCC_OscConfig+0x470>)
 8001888:	f043 0304 	orr.w	r3, r3, #4
 800188c:	6713      	str	r3, [r2, #112]	; 0x70
 800188e:	4b5c      	ldr	r3, [pc, #368]	; (8001a00 <HAL_RCC_OscConfig+0x470>)
 8001890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001892:	4a5b      	ldr	r2, [pc, #364]	; (8001a00 <HAL_RCC_OscConfig+0x470>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	6713      	str	r3, [r2, #112]	; 0x70
 800189a:	e00b      	b.n	80018b4 <HAL_RCC_OscConfig+0x324>
 800189c:	4b58      	ldr	r3, [pc, #352]	; (8001a00 <HAL_RCC_OscConfig+0x470>)
 800189e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a0:	4a57      	ldr	r2, [pc, #348]	; (8001a00 <HAL_RCC_OscConfig+0x470>)
 80018a2:	f023 0301 	bic.w	r3, r3, #1
 80018a6:	6713      	str	r3, [r2, #112]	; 0x70
 80018a8:	4b55      	ldr	r3, [pc, #340]	; (8001a00 <HAL_RCC_OscConfig+0x470>)
 80018aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ac:	4a54      	ldr	r2, [pc, #336]	; (8001a00 <HAL_RCC_OscConfig+0x470>)
 80018ae:	f023 0304 	bic.w	r3, r3, #4
 80018b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d015      	beq.n	80018e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018bc:	f7ff fb8c 	bl	8000fd8 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c2:	e00a      	b.n	80018da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c4:	f7ff fb88 	bl	8000fd8 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e0cb      	b.n	8001a72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018da:	4b49      	ldr	r3, [pc, #292]	; (8001a00 <HAL_RCC_OscConfig+0x470>)
 80018dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d0ee      	beq.n	80018c4 <HAL_RCC_OscConfig+0x334>
 80018e6:	e014      	b.n	8001912 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e8:	f7ff fb76 	bl	8000fd8 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ee:	e00a      	b.n	8001906 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f0:	f7ff fb72 	bl	8000fd8 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fe:	4293      	cmp	r3, r2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e0b5      	b.n	8001a72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001906:	4b3e      	ldr	r3, [pc, #248]	; (8001a00 <HAL_RCC_OscConfig+0x470>)
 8001908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1ee      	bne.n	80018f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001912:	7dfb      	ldrb	r3, [r7, #23]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d105      	bne.n	8001924 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001918:	4b39      	ldr	r3, [pc, #228]	; (8001a00 <HAL_RCC_OscConfig+0x470>)
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	4a38      	ldr	r2, [pc, #224]	; (8001a00 <HAL_RCC_OscConfig+0x470>)
 800191e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001922:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 80a1 	beq.w	8001a70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800192e:	4b34      	ldr	r3, [pc, #208]	; (8001a00 <HAL_RCC_OscConfig+0x470>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 030c 	and.w	r3, r3, #12
 8001936:	2b08      	cmp	r3, #8
 8001938:	d05c      	beq.n	80019f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	2b02      	cmp	r3, #2
 8001940:	d141      	bne.n	80019c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001942:	4b31      	ldr	r3, [pc, #196]	; (8001a08 <HAL_RCC_OscConfig+0x478>)
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001948:	f7ff fb46 	bl	8000fd8 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001950:	f7ff fb42 	bl	8000fd8 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e087      	b.n	8001a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001962:	4b27      	ldr	r3, [pc, #156]	; (8001a00 <HAL_RCC_OscConfig+0x470>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f0      	bne.n	8001950 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69da      	ldr	r2, [r3, #28]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	431a      	orrs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197c:	019b      	lsls	r3, r3, #6
 800197e:	431a      	orrs	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001984:	085b      	lsrs	r3, r3, #1
 8001986:	3b01      	subs	r3, #1
 8001988:	041b      	lsls	r3, r3, #16
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001990:	061b      	lsls	r3, r3, #24
 8001992:	491b      	ldr	r1, [pc, #108]	; (8001a00 <HAL_RCC_OscConfig+0x470>)
 8001994:	4313      	orrs	r3, r2
 8001996:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001998:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <HAL_RCC_OscConfig+0x478>)
 800199a:	2201      	movs	r2, #1
 800199c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199e:	f7ff fb1b 	bl	8000fd8 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a6:	f7ff fb17 	bl	8000fd8 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e05c      	b.n	8001a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <HAL_RCC_OscConfig+0x470>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f0      	beq.n	80019a6 <HAL_RCC_OscConfig+0x416>
 80019c4:	e054      	b.n	8001a70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <HAL_RCC_OscConfig+0x478>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7ff fb04 	bl	8000fd8 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d4:	f7ff fb00 	bl	8000fd8 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e045      	b.n	8001a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e6:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_RCC_OscConfig+0x470>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0x444>
 80019f2:	e03d      	b.n	8001a70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d107      	bne.n	8001a0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e038      	b.n	8001a72 <HAL_RCC_OscConfig+0x4e2>
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40007000 	.word	0x40007000
 8001a08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a0c:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <HAL_RCC_OscConfig+0x4ec>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d028      	beq.n	8001a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d121      	bne.n	8001a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d11a      	bne.n	8001a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d111      	bne.n	8001a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a52:	085b      	lsrs	r3, r3, #1
 8001a54:	3b01      	subs	r3, #1
 8001a56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d107      	bne.n	8001a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d001      	beq.n	8001a70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e000      	b.n	8001a72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800

08001a80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e0cc      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a94:	4b68      	ldr	r3, [pc, #416]	; (8001c38 <HAL_RCC_ClockConfig+0x1b8>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 030f 	and.w	r3, r3, #15
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d90c      	bls.n	8001abc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa2:	4b65      	ldr	r3, [pc, #404]	; (8001c38 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aaa:	4b63      	ldr	r3, [pc, #396]	; (8001c38 <HAL_RCC_ClockConfig+0x1b8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d001      	beq.n	8001abc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e0b8      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d020      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ad4:	4b59      	ldr	r3, [pc, #356]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	4a58      	ldr	r2, [pc, #352]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ade:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0308 	and.w	r3, r3, #8
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d005      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aec:	4b53      	ldr	r3, [pc, #332]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	4a52      	ldr	r2, [pc, #328]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001af6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af8:	4b50      	ldr	r3, [pc, #320]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	494d      	ldr	r1, [pc, #308]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d044      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d107      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1e:	4b47      	ldr	r3, [pc, #284]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d119      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e07f      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d003      	beq.n	8001b3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b3a:	2b03      	cmp	r3, #3
 8001b3c:	d107      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b3e:	4b3f      	ldr	r3, [pc, #252]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d109      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e06f      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4e:	4b3b      	ldr	r3, [pc, #236]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e067      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b5e:	4b37      	ldr	r3, [pc, #220]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f023 0203 	bic.w	r2, r3, #3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	4934      	ldr	r1, [pc, #208]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b70:	f7ff fa32 	bl	8000fd8 <HAL_GetTick>
 8001b74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b76:	e00a      	b.n	8001b8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b78:	f7ff fa2e 	bl	8000fd8 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e04f      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8e:	4b2b      	ldr	r3, [pc, #172]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 020c 	and.w	r2, r3, #12
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d1eb      	bne.n	8001b78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ba0:	4b25      	ldr	r3, [pc, #148]	; (8001c38 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 030f 	and.w	r3, r3, #15
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d20c      	bcs.n	8001bc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bae:	4b22      	ldr	r3, [pc, #136]	; (8001c38 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb6:	4b20      	ldr	r3, [pc, #128]	; (8001c38 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d001      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e032      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d008      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd4:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	4916      	ldr	r1, [pc, #88]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d009      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bf2:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	490e      	ldr	r1, [pc, #56]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c06:	f000 f821 	bl	8001c4c <HAL_RCC_GetSysClockFreq>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	091b      	lsrs	r3, r3, #4
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	490a      	ldr	r1, [pc, #40]	; (8001c40 <HAL_RCC_ClockConfig+0x1c0>)
 8001c18:	5ccb      	ldrb	r3, [r1, r3]
 8001c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1e:	4a09      	ldr	r2, [pc, #36]	; (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <HAL_RCC_ClockConfig+0x1c8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff f992 	bl	8000f50 <HAL_InitTick>

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40023c00 	.word	0x40023c00
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	08004608 	.word	0x08004608
 8001c44:	20000028 	.word	0x20000028
 8001c48:	2000002c 	.word	0x2000002c

08001c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c50:	b094      	sub	sp, #80	; 0x50
 8001c52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	647b      	str	r3, [r7, #68]	; 0x44
 8001c58:	2300      	movs	r3, #0
 8001c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c64:	4b79      	ldr	r3, [pc, #484]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 030c 	and.w	r3, r3, #12
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d00d      	beq.n	8001c8c <HAL_RCC_GetSysClockFreq+0x40>
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	f200 80e1 	bhi.w	8001e38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d002      	beq.n	8001c80 <HAL_RCC_GetSysClockFreq+0x34>
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d003      	beq.n	8001c86 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c7e:	e0db      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c80:	4b73      	ldr	r3, [pc, #460]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c82:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c84:	e0db      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c86:	4b73      	ldr	r3, [pc, #460]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c8a:	e0d8      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c8c:	4b6f      	ldr	r3, [pc, #444]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c94:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c96:	4b6d      	ldr	r3, [pc, #436]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d063      	beq.n	8001d6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca2:	4b6a      	ldr	r3, [pc, #424]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	099b      	lsrs	r3, r3, #6
 8001ca8:	2200      	movs	r2, #0
 8001caa:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8001cba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001cbe:	4622      	mov	r2, r4
 8001cc0:	462b      	mov	r3, r5
 8001cc2:	f04f 0000 	mov.w	r0, #0
 8001cc6:	f04f 0100 	mov.w	r1, #0
 8001cca:	0159      	lsls	r1, r3, #5
 8001ccc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cd0:	0150      	lsls	r0, r2, #5
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4621      	mov	r1, r4
 8001cd8:	1a51      	subs	r1, r2, r1
 8001cda:	6139      	str	r1, [r7, #16]
 8001cdc:	4629      	mov	r1, r5
 8001cde:	eb63 0301 	sbc.w	r3, r3, r1
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	f04f 0300 	mov.w	r3, #0
 8001cec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001cf0:	4659      	mov	r1, fp
 8001cf2:	018b      	lsls	r3, r1, #6
 8001cf4:	4651      	mov	r1, sl
 8001cf6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cfa:	4651      	mov	r1, sl
 8001cfc:	018a      	lsls	r2, r1, #6
 8001cfe:	4651      	mov	r1, sl
 8001d00:	ebb2 0801 	subs.w	r8, r2, r1
 8001d04:	4659      	mov	r1, fp
 8001d06:	eb63 0901 	sbc.w	r9, r3, r1
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	f04f 0300 	mov.w	r3, #0
 8001d12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d1e:	4690      	mov	r8, r2
 8001d20:	4699      	mov	r9, r3
 8001d22:	4623      	mov	r3, r4
 8001d24:	eb18 0303 	adds.w	r3, r8, r3
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	462b      	mov	r3, r5
 8001d2c:	eb49 0303 	adc.w	r3, r9, r3
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	f04f 0300 	mov.w	r3, #0
 8001d3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d3e:	4629      	mov	r1, r5
 8001d40:	024b      	lsls	r3, r1, #9
 8001d42:	4621      	mov	r1, r4
 8001d44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d48:	4621      	mov	r1, r4
 8001d4a:	024a      	lsls	r2, r1, #9
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	4619      	mov	r1, r3
 8001d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d52:	2200      	movs	r2, #0
 8001d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d5c:	f7fe fa98 	bl	8000290 <__aeabi_uldivmod>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4613      	mov	r3, r2
 8001d66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d68:	e058      	b.n	8001e1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d6a:	4b38      	ldr	r3, [pc, #224]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	099b      	lsrs	r3, r3, #6
 8001d70:	2200      	movs	r2, #0
 8001d72:	4618      	mov	r0, r3
 8001d74:	4611      	mov	r1, r2
 8001d76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d7a:	623b      	str	r3, [r7, #32]
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d84:	4642      	mov	r2, r8
 8001d86:	464b      	mov	r3, r9
 8001d88:	f04f 0000 	mov.w	r0, #0
 8001d8c:	f04f 0100 	mov.w	r1, #0
 8001d90:	0159      	lsls	r1, r3, #5
 8001d92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d96:	0150      	lsls	r0, r2, #5
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4641      	mov	r1, r8
 8001d9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001da2:	4649      	mov	r1, r9
 8001da4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001db4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001db8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001dbc:	ebb2 040a 	subs.w	r4, r2, sl
 8001dc0:	eb63 050b 	sbc.w	r5, r3, fp
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	00eb      	lsls	r3, r5, #3
 8001dce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dd2:	00e2      	lsls	r2, r4, #3
 8001dd4:	4614      	mov	r4, r2
 8001dd6:	461d      	mov	r5, r3
 8001dd8:	4643      	mov	r3, r8
 8001dda:	18e3      	adds	r3, r4, r3
 8001ddc:	603b      	str	r3, [r7, #0]
 8001dde:	464b      	mov	r3, r9
 8001de0:	eb45 0303 	adc.w	r3, r5, r3
 8001de4:	607b      	str	r3, [r7, #4]
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	f04f 0300 	mov.w	r3, #0
 8001dee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001df2:	4629      	mov	r1, r5
 8001df4:	028b      	lsls	r3, r1, #10
 8001df6:	4621      	mov	r1, r4
 8001df8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dfc:	4621      	mov	r1, r4
 8001dfe:	028a      	lsls	r2, r1, #10
 8001e00:	4610      	mov	r0, r2
 8001e02:	4619      	mov	r1, r3
 8001e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e06:	2200      	movs	r2, #0
 8001e08:	61bb      	str	r3, [r7, #24]
 8001e0a:	61fa      	str	r2, [r7, #28]
 8001e0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e10:	f7fe fa3e 	bl	8000290 <__aeabi_uldivmod>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4613      	mov	r3, r2
 8001e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	0c1b      	lsrs	r3, r3, #16
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	3301      	adds	r3, #1
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001e2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e36:	e002      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e38:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3750      	adds	r7, #80	; 0x50
 8001e44:	46bd      	mov	sp, r7
 8001e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	00f42400 	.word	0x00f42400
 8001e54:	007a1200 	.word	0x007a1200

08001e58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e5c:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	20000028 	.word	0x20000028

08001e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e74:	f7ff fff0 	bl	8001e58 <HAL_RCC_GetHCLKFreq>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	0a9b      	lsrs	r3, r3, #10
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	4903      	ldr	r1, [pc, #12]	; (8001e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e86:	5ccb      	ldrb	r3, [r1, r3]
 8001e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40023800 	.word	0x40023800
 8001e94:	08004618 	.word	0x08004618

08001e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e9c:	f7ff ffdc 	bl	8001e58 <HAL_RCC_GetHCLKFreq>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	0b5b      	lsrs	r3, r3, #13
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	4903      	ldr	r1, [pc, #12]	; (8001ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eae:	5ccb      	ldrb	r3, [r1, r3]
 8001eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	08004618 	.word	0x08004618

08001ec0 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e038      	b.n	8001f48 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d106      	bne.n	8001ef0 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f7fe ff16 	bl	8000d1c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	3308      	adds	r3, #8
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4610      	mov	r0, r2
 8001efc:	f000 fc58 	bl	80027b0 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	68b9      	ldr	r1, [r7, #8]
 8001f0c:	f000 fcd6 	bl	80028bc <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6858      	ldr	r0, [r3, #4]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	f000 fd1d 	bl	800295c <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	6892      	ldr	r2, [r2, #8]
 8001f2a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	6892      	ldr	r2, [r2, #8]
 8001f36:	f041 0101 	orr.w	r1, r1, #1
 8001f3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e03f      	b.n	8001fe2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d106      	bne.n	8001f7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7fe fe2a 	bl	8000bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2224      	movs	r2, #36	; 0x24
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f997 	bl	80022c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	691a      	ldr	r2, [r3, #16]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fa8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	695a      	ldr	r2, [r3, #20]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2220      	movs	r2, #32
 8001fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b08a      	sub	sp, #40	; 0x28
 8001fee:	af02      	add	r7, sp, #8
 8001ff0:	60f8      	str	r0, [r7, #12]
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	603b      	str	r3, [r7, #0]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b20      	cmp	r3, #32
 8002008:	d17c      	bne.n	8002104 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <HAL_UART_Transmit+0x2c>
 8002010:	88fb      	ldrh	r3, [r7, #6]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e075      	b.n	8002106 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002020:	2b01      	cmp	r3, #1
 8002022:	d101      	bne.n	8002028 <HAL_UART_Transmit+0x3e>
 8002024:	2302      	movs	r3, #2
 8002026:	e06e      	b.n	8002106 <HAL_UART_Transmit+0x11c>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2221      	movs	r2, #33	; 0x21
 800203a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800203e:	f7fe ffcb 	bl	8000fd8 <HAL_GetTick>
 8002042:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	88fa      	ldrh	r2, [r7, #6]
 8002048:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	88fa      	ldrh	r2, [r7, #6]
 800204e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002058:	d108      	bne.n	800206c <HAL_UART_Transmit+0x82>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d104      	bne.n	800206c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002062:	2300      	movs	r3, #0
 8002064:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	61bb      	str	r3, [r7, #24]
 800206a:	e003      	b.n	8002074 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002070:	2300      	movs	r3, #0
 8002072:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800207c:	e02a      	b.n	80020d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	2200      	movs	r2, #0
 8002086:	2180      	movs	r1, #128	; 0x80
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f000 f870 	bl	800216e <UART_WaitOnFlagUntilTimeout>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e036      	b.n	8002106 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10b      	bne.n	80020b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	461a      	mov	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	3302      	adds	r3, #2
 80020b2:	61bb      	str	r3, [r7, #24]
 80020b4:	e007      	b.n	80020c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	781a      	ldrb	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	3301      	adds	r3, #1
 80020c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	3b01      	subs	r3, #1
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020d8:	b29b      	uxth	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1cf      	bne.n	800207e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	2200      	movs	r2, #0
 80020e6:	2140      	movs	r1, #64	; 0x40
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f000 f840 	bl	800216e <UART_WaitOnFlagUntilTimeout>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e006      	b.n	8002106 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2220      	movs	r2, #32
 80020fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002100:	2300      	movs	r3, #0
 8002102:	e000      	b.n	8002106 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002104:	2302      	movs	r3, #2
  }
}
 8002106:	4618      	mov	r0, r3
 8002108:	3720      	adds	r7, #32
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b084      	sub	sp, #16
 8002112:	af00      	add	r7, sp, #0
 8002114:	60f8      	str	r0, [r7, #12]
 8002116:	60b9      	str	r1, [r7, #8]
 8002118:	4613      	mov	r3, r2
 800211a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b20      	cmp	r3, #32
 8002126:	d11d      	bne.n	8002164 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d002      	beq.n	8002134 <HAL_UART_Receive_IT+0x26>
 800212e:	88fb      	ldrh	r3, [r7, #6]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e016      	b.n	8002166 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800213e:	2b01      	cmp	r3, #1
 8002140:	d101      	bne.n	8002146 <HAL_UART_Receive_IT+0x38>
 8002142:	2302      	movs	r3, #2
 8002144:	e00f      	b.n	8002166 <HAL_UART_Receive_IT+0x58>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002154:	88fb      	ldrh	r3, [r7, #6]
 8002156:	461a      	mov	r2, r3
 8002158:	68b9      	ldr	r1, [r7, #8]
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 f875 	bl	800224a <UART_Start_Receive_IT>
 8002160:	4603      	mov	r3, r0
 8002162:	e000      	b.n	8002166 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002164:	2302      	movs	r3, #2
  }
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b090      	sub	sp, #64	; 0x40
 8002172:	af00      	add	r7, sp, #0
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	603b      	str	r3, [r7, #0]
 800217a:	4613      	mov	r3, r2
 800217c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800217e:	e050      	b.n	8002222 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002186:	d04c      	beq.n	8002222 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002188:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800218a:	2b00      	cmp	r3, #0
 800218c:	d007      	beq.n	800219e <UART_WaitOnFlagUntilTimeout+0x30>
 800218e:	f7fe ff23 	bl	8000fd8 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800219a:	429a      	cmp	r2, r3
 800219c:	d241      	bcs.n	8002222 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	330c      	adds	r3, #12
 80021a4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a8:	e853 3f00 	ldrex	r3, [r3]
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80021b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	330c      	adds	r3, #12
 80021bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021be:	637a      	str	r2, [r7, #52]	; 0x34
 80021c0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021c6:	e841 2300 	strex	r3, r2, [r1]
 80021ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80021cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1e5      	bne.n	800219e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	3314      	adds	r3, #20
 80021d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	e853 3f00 	ldrex	r3, [r3]
 80021e0:	613b      	str	r3, [r7, #16]
   return(result);
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	f023 0301 	bic.w	r3, r3, #1
 80021e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	3314      	adds	r3, #20
 80021f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021f2:	623a      	str	r2, [r7, #32]
 80021f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021f6:	69f9      	ldr	r1, [r7, #28]
 80021f8:	6a3a      	ldr	r2, [r7, #32]
 80021fa:	e841 2300 	strex	r3, r2, [r1]
 80021fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1e5      	bne.n	80021d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2220      	movs	r2, #32
 800220a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2220      	movs	r2, #32
 8002212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e00f      	b.n	8002242 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	4013      	ands	r3, r2
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	429a      	cmp	r2, r3
 8002230:	bf0c      	ite	eq
 8002232:	2301      	moveq	r3, #1
 8002234:	2300      	movne	r3, #0
 8002236:	b2db      	uxtb	r3, r3
 8002238:	461a      	mov	r2, r3
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	429a      	cmp	r2, r3
 800223e:	d09f      	beq.n	8002180 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3740      	adds	r7, #64	; 0x40
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800224a:	b480      	push	{r7}
 800224c:	b085      	sub	sp, #20
 800224e:	af00      	add	r7, sp, #0
 8002250:	60f8      	str	r0, [r7, #12]
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	4613      	mov	r3, r2
 8002256:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	88fa      	ldrh	r2, [r7, #6]
 8002262:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	88fa      	ldrh	r2, [r7, #6]
 8002268:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2222      	movs	r2, #34	; 0x22
 8002274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d007      	beq.n	8002298 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002296:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	695a      	ldr	r2, [r3, #20]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0201 	orr.w	r2, r2, #1
 80022a6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0220 	orr.w	r2, r2, #32
 80022b6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
	...

080022c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022cc:	b0c0      	sub	sp, #256	; 0x100
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80022e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022e4:	68d9      	ldr	r1, [r3, #12]
 80022e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	ea40 0301 	orr.w	r3, r0, r1
 80022f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	431a      	orrs	r2, r3
 8002300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	431a      	orrs	r2, r3
 8002308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	4313      	orrs	r3, r2
 8002310:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002320:	f021 010c 	bic.w	r1, r1, #12
 8002324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800232e:	430b      	orrs	r3, r1
 8002330:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800233e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002342:	6999      	ldr	r1, [r3, #24]
 8002344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	ea40 0301 	orr.w	r3, r0, r1
 800234e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	4b8f      	ldr	r3, [pc, #572]	; (8002594 <UART_SetConfig+0x2cc>)
 8002358:	429a      	cmp	r2, r3
 800235a:	d005      	beq.n	8002368 <UART_SetConfig+0xa0>
 800235c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	4b8d      	ldr	r3, [pc, #564]	; (8002598 <UART_SetConfig+0x2d0>)
 8002364:	429a      	cmp	r2, r3
 8002366:	d104      	bne.n	8002372 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002368:	f7ff fd96 	bl	8001e98 <HAL_RCC_GetPCLK2Freq>
 800236c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002370:	e003      	b.n	800237a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002372:	f7ff fd7d 	bl	8001e70 <HAL_RCC_GetPCLK1Freq>
 8002376:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800237a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002384:	f040 810c 	bne.w	80025a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002388:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800238c:	2200      	movs	r2, #0
 800238e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002392:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002396:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800239a:	4622      	mov	r2, r4
 800239c:	462b      	mov	r3, r5
 800239e:	1891      	adds	r1, r2, r2
 80023a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80023a2:	415b      	adcs	r3, r3
 80023a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80023aa:	4621      	mov	r1, r4
 80023ac:	eb12 0801 	adds.w	r8, r2, r1
 80023b0:	4629      	mov	r1, r5
 80023b2:	eb43 0901 	adc.w	r9, r3, r1
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	f04f 0300 	mov.w	r3, #0
 80023be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023ca:	4690      	mov	r8, r2
 80023cc:	4699      	mov	r9, r3
 80023ce:	4623      	mov	r3, r4
 80023d0:	eb18 0303 	adds.w	r3, r8, r3
 80023d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80023d8:	462b      	mov	r3, r5
 80023da:	eb49 0303 	adc.w	r3, r9, r3
 80023de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80023e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80023ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80023f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80023f6:	460b      	mov	r3, r1
 80023f8:	18db      	adds	r3, r3, r3
 80023fa:	653b      	str	r3, [r7, #80]	; 0x50
 80023fc:	4613      	mov	r3, r2
 80023fe:	eb42 0303 	adc.w	r3, r2, r3
 8002402:	657b      	str	r3, [r7, #84]	; 0x54
 8002404:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002408:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800240c:	f7fd ff40 	bl	8000290 <__aeabi_uldivmod>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4b61      	ldr	r3, [pc, #388]	; (800259c <UART_SetConfig+0x2d4>)
 8002416:	fba3 2302 	umull	r2, r3, r3, r2
 800241a:	095b      	lsrs	r3, r3, #5
 800241c:	011c      	lsls	r4, r3, #4
 800241e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002422:	2200      	movs	r2, #0
 8002424:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002428:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800242c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002430:	4642      	mov	r2, r8
 8002432:	464b      	mov	r3, r9
 8002434:	1891      	adds	r1, r2, r2
 8002436:	64b9      	str	r1, [r7, #72]	; 0x48
 8002438:	415b      	adcs	r3, r3
 800243a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800243c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002440:	4641      	mov	r1, r8
 8002442:	eb12 0a01 	adds.w	sl, r2, r1
 8002446:	4649      	mov	r1, r9
 8002448:	eb43 0b01 	adc.w	fp, r3, r1
 800244c:	f04f 0200 	mov.w	r2, #0
 8002450:	f04f 0300 	mov.w	r3, #0
 8002454:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002458:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800245c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002460:	4692      	mov	sl, r2
 8002462:	469b      	mov	fp, r3
 8002464:	4643      	mov	r3, r8
 8002466:	eb1a 0303 	adds.w	r3, sl, r3
 800246a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800246e:	464b      	mov	r3, r9
 8002470:	eb4b 0303 	adc.w	r3, fp, r3
 8002474:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002484:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002488:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800248c:	460b      	mov	r3, r1
 800248e:	18db      	adds	r3, r3, r3
 8002490:	643b      	str	r3, [r7, #64]	; 0x40
 8002492:	4613      	mov	r3, r2
 8002494:	eb42 0303 	adc.w	r3, r2, r3
 8002498:	647b      	str	r3, [r7, #68]	; 0x44
 800249a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800249e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80024a2:	f7fd fef5 	bl	8000290 <__aeabi_uldivmod>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4611      	mov	r1, r2
 80024ac:	4b3b      	ldr	r3, [pc, #236]	; (800259c <UART_SetConfig+0x2d4>)
 80024ae:	fba3 2301 	umull	r2, r3, r3, r1
 80024b2:	095b      	lsrs	r3, r3, #5
 80024b4:	2264      	movs	r2, #100	; 0x64
 80024b6:	fb02 f303 	mul.w	r3, r2, r3
 80024ba:	1acb      	subs	r3, r1, r3
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80024c2:	4b36      	ldr	r3, [pc, #216]	; (800259c <UART_SetConfig+0x2d4>)
 80024c4:	fba3 2302 	umull	r2, r3, r3, r2
 80024c8:	095b      	lsrs	r3, r3, #5
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80024d0:	441c      	add	r4, r3
 80024d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024d6:	2200      	movs	r2, #0
 80024d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80024dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80024e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80024e4:	4642      	mov	r2, r8
 80024e6:	464b      	mov	r3, r9
 80024e8:	1891      	adds	r1, r2, r2
 80024ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80024ec:	415b      	adcs	r3, r3
 80024ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80024f4:	4641      	mov	r1, r8
 80024f6:	1851      	adds	r1, r2, r1
 80024f8:	6339      	str	r1, [r7, #48]	; 0x30
 80024fa:	4649      	mov	r1, r9
 80024fc:	414b      	adcs	r3, r1
 80024fe:	637b      	str	r3, [r7, #52]	; 0x34
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	f04f 0300 	mov.w	r3, #0
 8002508:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800250c:	4659      	mov	r1, fp
 800250e:	00cb      	lsls	r3, r1, #3
 8002510:	4651      	mov	r1, sl
 8002512:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002516:	4651      	mov	r1, sl
 8002518:	00ca      	lsls	r2, r1, #3
 800251a:	4610      	mov	r0, r2
 800251c:	4619      	mov	r1, r3
 800251e:	4603      	mov	r3, r0
 8002520:	4642      	mov	r2, r8
 8002522:	189b      	adds	r3, r3, r2
 8002524:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002528:	464b      	mov	r3, r9
 800252a:	460a      	mov	r2, r1
 800252c:	eb42 0303 	adc.w	r3, r2, r3
 8002530:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002540:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002544:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002548:	460b      	mov	r3, r1
 800254a:	18db      	adds	r3, r3, r3
 800254c:	62bb      	str	r3, [r7, #40]	; 0x28
 800254e:	4613      	mov	r3, r2
 8002550:	eb42 0303 	adc.w	r3, r2, r3
 8002554:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002556:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800255a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800255e:	f7fd fe97 	bl	8000290 <__aeabi_uldivmod>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	4b0d      	ldr	r3, [pc, #52]	; (800259c <UART_SetConfig+0x2d4>)
 8002568:	fba3 1302 	umull	r1, r3, r3, r2
 800256c:	095b      	lsrs	r3, r3, #5
 800256e:	2164      	movs	r1, #100	; 0x64
 8002570:	fb01 f303 	mul.w	r3, r1, r3
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	3332      	adds	r3, #50	; 0x32
 800257a:	4a08      	ldr	r2, [pc, #32]	; (800259c <UART_SetConfig+0x2d4>)
 800257c:	fba2 2303 	umull	r2, r3, r2, r3
 8002580:	095b      	lsrs	r3, r3, #5
 8002582:	f003 0207 	and.w	r2, r3, #7
 8002586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4422      	add	r2, r4
 800258e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002590:	e105      	b.n	800279e <UART_SetConfig+0x4d6>
 8002592:	bf00      	nop
 8002594:	40011000 	.word	0x40011000
 8002598:	40011400 	.word	0x40011400
 800259c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025a4:	2200      	movs	r2, #0
 80025a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80025aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80025ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80025b2:	4642      	mov	r2, r8
 80025b4:	464b      	mov	r3, r9
 80025b6:	1891      	adds	r1, r2, r2
 80025b8:	6239      	str	r1, [r7, #32]
 80025ba:	415b      	adcs	r3, r3
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
 80025be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025c2:	4641      	mov	r1, r8
 80025c4:	1854      	adds	r4, r2, r1
 80025c6:	4649      	mov	r1, r9
 80025c8:	eb43 0501 	adc.w	r5, r3, r1
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	00eb      	lsls	r3, r5, #3
 80025d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025da:	00e2      	lsls	r2, r4, #3
 80025dc:	4614      	mov	r4, r2
 80025de:	461d      	mov	r5, r3
 80025e0:	4643      	mov	r3, r8
 80025e2:	18e3      	adds	r3, r4, r3
 80025e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80025e8:	464b      	mov	r3, r9
 80025ea:	eb45 0303 	adc.w	r3, r5, r3
 80025ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80025f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80025fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800260e:	4629      	mov	r1, r5
 8002610:	008b      	lsls	r3, r1, #2
 8002612:	4621      	mov	r1, r4
 8002614:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002618:	4621      	mov	r1, r4
 800261a:	008a      	lsls	r2, r1, #2
 800261c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002620:	f7fd fe36 	bl	8000290 <__aeabi_uldivmod>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4b60      	ldr	r3, [pc, #384]	; (80027ac <UART_SetConfig+0x4e4>)
 800262a:	fba3 2302 	umull	r2, r3, r3, r2
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	011c      	lsls	r4, r3, #4
 8002632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002636:	2200      	movs	r2, #0
 8002638:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800263c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002640:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002644:	4642      	mov	r2, r8
 8002646:	464b      	mov	r3, r9
 8002648:	1891      	adds	r1, r2, r2
 800264a:	61b9      	str	r1, [r7, #24]
 800264c:	415b      	adcs	r3, r3
 800264e:	61fb      	str	r3, [r7, #28]
 8002650:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002654:	4641      	mov	r1, r8
 8002656:	1851      	adds	r1, r2, r1
 8002658:	6139      	str	r1, [r7, #16]
 800265a:	4649      	mov	r1, r9
 800265c:	414b      	adcs	r3, r1
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	f04f 0300 	mov.w	r3, #0
 8002668:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800266c:	4659      	mov	r1, fp
 800266e:	00cb      	lsls	r3, r1, #3
 8002670:	4651      	mov	r1, sl
 8002672:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002676:	4651      	mov	r1, sl
 8002678:	00ca      	lsls	r2, r1, #3
 800267a:	4610      	mov	r0, r2
 800267c:	4619      	mov	r1, r3
 800267e:	4603      	mov	r3, r0
 8002680:	4642      	mov	r2, r8
 8002682:	189b      	adds	r3, r3, r2
 8002684:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002688:	464b      	mov	r3, r9
 800268a:	460a      	mov	r2, r1
 800268c:	eb42 0303 	adc.w	r3, r2, r3
 8002690:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	67bb      	str	r3, [r7, #120]	; 0x78
 800269e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	f04f 0300 	mov.w	r3, #0
 80026a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80026ac:	4649      	mov	r1, r9
 80026ae:	008b      	lsls	r3, r1, #2
 80026b0:	4641      	mov	r1, r8
 80026b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026b6:	4641      	mov	r1, r8
 80026b8:	008a      	lsls	r2, r1, #2
 80026ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80026be:	f7fd fde7 	bl	8000290 <__aeabi_uldivmod>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4b39      	ldr	r3, [pc, #228]	; (80027ac <UART_SetConfig+0x4e4>)
 80026c8:	fba3 1302 	umull	r1, r3, r3, r2
 80026cc:	095b      	lsrs	r3, r3, #5
 80026ce:	2164      	movs	r1, #100	; 0x64
 80026d0:	fb01 f303 	mul.w	r3, r1, r3
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	3332      	adds	r3, #50	; 0x32
 80026da:	4a34      	ldr	r2, [pc, #208]	; (80027ac <UART_SetConfig+0x4e4>)
 80026dc:	fba2 2303 	umull	r2, r3, r2, r3
 80026e0:	095b      	lsrs	r3, r3, #5
 80026e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026e6:	441c      	add	r4, r3
 80026e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026ec:	2200      	movs	r2, #0
 80026ee:	673b      	str	r3, [r7, #112]	; 0x70
 80026f0:	677a      	str	r2, [r7, #116]	; 0x74
 80026f2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80026f6:	4642      	mov	r2, r8
 80026f8:	464b      	mov	r3, r9
 80026fa:	1891      	adds	r1, r2, r2
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	415b      	adcs	r3, r3
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002706:	4641      	mov	r1, r8
 8002708:	1851      	adds	r1, r2, r1
 800270a:	6039      	str	r1, [r7, #0]
 800270c:	4649      	mov	r1, r9
 800270e:	414b      	adcs	r3, r1
 8002710:	607b      	str	r3, [r7, #4]
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	f04f 0300 	mov.w	r3, #0
 800271a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800271e:	4659      	mov	r1, fp
 8002720:	00cb      	lsls	r3, r1, #3
 8002722:	4651      	mov	r1, sl
 8002724:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002728:	4651      	mov	r1, sl
 800272a:	00ca      	lsls	r2, r1, #3
 800272c:	4610      	mov	r0, r2
 800272e:	4619      	mov	r1, r3
 8002730:	4603      	mov	r3, r0
 8002732:	4642      	mov	r2, r8
 8002734:	189b      	adds	r3, r3, r2
 8002736:	66bb      	str	r3, [r7, #104]	; 0x68
 8002738:	464b      	mov	r3, r9
 800273a:	460a      	mov	r2, r1
 800273c:	eb42 0303 	adc.w	r3, r2, r3
 8002740:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	663b      	str	r3, [r7, #96]	; 0x60
 800274c:	667a      	str	r2, [r7, #100]	; 0x64
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	f04f 0300 	mov.w	r3, #0
 8002756:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800275a:	4649      	mov	r1, r9
 800275c:	008b      	lsls	r3, r1, #2
 800275e:	4641      	mov	r1, r8
 8002760:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002764:	4641      	mov	r1, r8
 8002766:	008a      	lsls	r2, r1, #2
 8002768:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800276c:	f7fd fd90 	bl	8000290 <__aeabi_uldivmod>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	4b0d      	ldr	r3, [pc, #52]	; (80027ac <UART_SetConfig+0x4e4>)
 8002776:	fba3 1302 	umull	r1, r3, r3, r2
 800277a:	095b      	lsrs	r3, r3, #5
 800277c:	2164      	movs	r1, #100	; 0x64
 800277e:	fb01 f303 	mul.w	r3, r1, r3
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	011b      	lsls	r3, r3, #4
 8002786:	3332      	adds	r3, #50	; 0x32
 8002788:	4a08      	ldr	r2, [pc, #32]	; (80027ac <UART_SetConfig+0x4e4>)
 800278a:	fba2 2303 	umull	r2, r3, r2, r3
 800278e:	095b      	lsrs	r3, r3, #5
 8002790:	f003 020f 	and.w	r2, r3, #15
 8002794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4422      	add	r2, r4
 800279c:	609a      	str	r2, [r3, #8]
}
 800279e:	bf00      	nop
 80027a0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80027a4:	46bd      	mov	sp, r7
 80027a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027aa:	bf00      	nop
 80027ac:	51eb851f 	.word	0x51eb851f

080027b0 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b087      	sub	sp, #28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FMC_BCR1_WFDIS */
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	6812      	ldr	r2, [r2, #0]
 80027c8:	f023 0101 	bic.w	r1, r3, #1
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	2b08      	cmp	r3, #8
 80027d8:	d102      	bne.n	80027e0 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80027da:	2340      	movs	r3, #64	; 0x40
 80027dc:	617b      	str	r3, [r7, #20]
 80027de:	e001      	b.n	80027e4 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80027f0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80027f6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80027fc:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8002802:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8002808:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800280e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8002814:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800281a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8002820:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8002826:	4313      	orrs	r3, r2
 8002828:	613b      	str	r3, [r7, #16]

#if defined(FMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	4313      	orrs	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WRAPMOD */
#if defined(FMC_BCR1_CCLKEN)
  btcr_reg |= Init->ContinuousClock;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	4313      	orrs	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_CCLKEN */
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4313      	orrs	r3, r2
 8002846:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 8002848:	4b1b      	ldr	r3, [pc, #108]	; (80028b8 <FMC_NORSRAM_Init+0x108>)
 800284a:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

#if defined(FMC_BCR1_WRAPMOD)
  mask |= FMC_BCR1_WRAPMOD;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002852:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WRAPMOD */
#if defined(FMC_BCR1_CCLKEN)
  mask |= FMC_BCR1_CCLKEN;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800285a:	60fb      	str	r3, [r7, #12]
#endif
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
#endif /* FMC_BCR1_WFDIS */
  mask |= FMC_BCR1_CPSIZE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8002862:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	43db      	mvns	r3, r3
 8002872:	ea02 0103 	and.w	r1, r2, r3
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4319      	orrs	r1, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(FMC_BCR1_CCLKEN)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002888:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800288c:	d10c      	bne.n	80028a8 <FMC_NORSRAM_Init+0xf8>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d008      	beq.n	80028a8 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	601a      	str	r2, [r3, #0]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FMC_BCR1_WFDIS */

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	371c      	adds	r7, #28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	0008fb7f 	.word	0x0008fb7f

080028bc <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80028bc:	b480      	push	{r7}
 80028be:	b087      	sub	sp, #28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	1c5a      	adds	r2, r3, #1
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028d2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	431a      	orrs	r2, r3
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	021b      	lsls	r3, r3, #8
 80028e8:	431a      	orrs	r2, r3
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	041b      	lsls	r3, r3, #16
 80028f0:	431a      	orrs	r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	051b      	lsls	r3, r3, #20
 80028fa:	431a      	orrs	r2, r3
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	3b02      	subs	r3, #2
 8002902:	061b      	lsls	r3, r3, #24
 8002904:	431a      	orrs	r2, r3
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	4313      	orrs	r3, r2
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	3201      	adds	r2, #1
 8002910:	4319      	orrs	r1, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

#if defined(FMC_BCR1_CCLKEN)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002920:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002924:	d113      	bne.n	800294e <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800292e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	3b01      	subs	r3, #1
 8002936:	051b      	lsls	r3, r3, #20
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	4313      	orrs	r3, r2
 800293c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	431a      	orrs	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	605a      	str	r2, [r3, #4]
  }

#endif
  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	371c      	adds	r7, #28
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
 8002968:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002970:	d11d      	bne.n	80029ae <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800297a:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800297c:	4013      	ands	r3, r2
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	6811      	ldr	r1, [r2, #0]
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	6852      	ldr	r2, [r2, #4]
 8002986:	0112      	lsls	r2, r2, #4
 8002988:	4311      	orrs	r1, r2
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	6892      	ldr	r2, [r2, #8]
 800298e:	0212      	lsls	r2, r2, #8
 8002990:	4311      	orrs	r1, r2
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	6992      	ldr	r2, [r2, #24]
 8002996:	4311      	orrs	r1, r2
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	68d2      	ldr	r2, [r2, #12]
 800299c:	0412      	lsls	r2, r2, #16
 800299e:	430a      	orrs	r2, r1
 80029a0:	ea43 0102 	orr.w	r1, r3, r2
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80029ac:	e005      	b.n	80029ba <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80029b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	cff00000 	.word	0xcff00000

080029cc <WIZCHIP_WRITE>:
/***********************
 * Basic I/O  Function *
 ***********************/
 
void     WIZCHIP_WRITE(uint32_t AddrSel, uint16_t wb )
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	807b      	strh	r3, [r7, #2]
   WIZCHIP_CRITICAL_ENTER();
 80029d8:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <WIZCHIP_WRITE+0x38>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	4798      	blx	r3
   WIZCHIP.CS._select();
 80029de:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <WIZCHIP_WRITE+0x38>)
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	4798      	blx	r3
#if ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_) )
   #if(_WIZCHIP_IO_BUS_WIDTH_ == 8)
      WIZCHIP.IF.BUS._write_data(AddrSel,  (uint8_t)(wb>>8));
      WIZCHIP.IF.BUS._write_data(WIZCHIP_OFFSET_INC(AddrSel,1),(uint8_t)wb);
   #elif(_WIZCHIP_IO_BUS_WIDTH_ == 16)
      WIZCHIP.IF.BUS._write_data(AddrSel,  wb);   
 80029e4:	4b07      	ldr	r3, [pc, #28]	; (8002a04 <WIZCHIP_WRITE+0x38>)
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	887a      	ldrh	r2, [r7, #2]
 80029ea:	4611      	mov	r1, r2
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	4798      	blx	r3
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5300. !!!"
#endif

   WIZCHIP.CS._deselect();
 80029f0:	4b04      	ldr	r3, [pc, #16]	; (8002a04 <WIZCHIP_WRITE+0x38>)
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80029f6:	4b03      	ldr	r3, [pc, #12]	; (8002a04 <WIZCHIP_WRITE+0x38>)
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	4798      	blx	r3
}
 80029fc:	bf00      	nop
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20000034 	.word	0x20000034

08002a08 <WIZCHIP_READ>:

uint16_t WIZCHIP_READ(uint32_t AddrSel)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
   uint16_t ret;

   WIZCHIP_CRITICAL_ENTER();
 8002a10:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <WIZCHIP_READ+0x38>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002a16:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <WIZCHIP_READ+0x38>)
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	4798      	blx	r3
#if ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_) )
   #if (_WIZCHIP_IO_BUS_WIDTH_ == 8)
      ret = (((uint16_t)WIZCHIP.IF.BUS._read_data(AddrSel)) << 8) | 
            (((uint16_t)WIZCHIP.IF.BUS._read_data(WIZCHIP_OFFSET_INC(AddrSel,1))) & 0x00FF) ;   
   #elif(_WIZCHIP_IO_BUS_WIDTH_ == 16)
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 8002a1c:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <WIZCHIP_READ+0x38>)
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	4798      	blx	r3
 8002a24:	4603      	mov	r3, r0
 8002a26:	81fb      	strh	r3, [r7, #14]
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5300. !!!"
#endif

   WIZCHIP.CS._deselect();
 8002a28:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <WIZCHIP_READ+0x38>)
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002a2e:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <WIZCHIP_READ+0x38>)
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	4798      	blx	r3
   return ret;
 8002a34:	89fb      	ldrh	r3, [r7, #14]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20000034 	.word	0x20000034

08002a44 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	bf00      	nop
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8002a52:	b480      	push	{r7}
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	bf00      	nop
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8002a6e:	b480      	push	{r7}
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	bf00      	nop
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	881b      	ldrh	r3, [r3, #0]
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	807b      	strh	r3, [r7, #2]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	887a      	ldrh	r2, [r7, #2]
 8002aa6:	801a      	strh	r2, [r3, #0]
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d002      	beq.n	8002aca <reg_wizchip_cs_cbfunc+0x16>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d106      	bne.n	8002ad8 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8002aca:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <reg_wizchip_cs_cbfunc+0x40>)
 8002acc:	4a0a      	ldr	r2, [pc, #40]	; (8002af8 <reg_wizchip_cs_cbfunc+0x44>)
 8002ace:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8002ad0:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <reg_wizchip_cs_cbfunc+0x40>)
 8002ad2:	4a0a      	ldr	r2, [pc, #40]	; (8002afc <reg_wizchip_cs_cbfunc+0x48>)
 8002ad4:	619a      	str	r2, [r3, #24]
 8002ad6:	e006      	b.n	8002ae6 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8002ad8:	4a06      	ldr	r2, [pc, #24]	; (8002af4 <reg_wizchip_cs_cbfunc+0x40>)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8002ade:	4a05      	ldr	r2, [pc, #20]	; (8002af4 <reg_wizchip_cs_cbfunc+0x40>)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	6193      	str	r3, [r2, #24]
   }
}
 8002ae4:	bf00      	nop
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	20000034 	.word	0x20000034
 8002af8:	08002a61 	.word	0x08002a61
 8002afc:	08002a6f 	.word	0x08002a6f

08002b00 <reg_wizchip_bus_cbfunc>:

//M20150515 : For integrating with W5300
//void reg_wizchip_bus_cbfunc(uint8_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, uint8_t wb))
void reg_wizchip_bus_cbfunc(iodata_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, iodata_t wb))
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_BUS_));
 8002b0a:	bf00      	nop
 8002b0c:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <reg_wizchip_bus_cbfunc+0x4c>)
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0f9      	beq.n	8002b0c <reg_wizchip_bus_cbfunc+0xc>
   {
      WIZCHIP.IF.BUS._read_byte   = bus_rb;
      WIZCHIP.IF.BUS._write_byte  = bus_wb;
   }
   */
   if(!bus_rb || !bus_wb)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d002      	beq.n	8002b24 <reg_wizchip_bus_cbfunc+0x24>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d106      	bne.n	8002b32 <reg_wizchip_bus_cbfunc+0x32>
   {
      WIZCHIP.IF.BUS._read_data   = wizchip_bus_readdata;
 8002b24:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <reg_wizchip_bus_cbfunc+0x4c>)
 8002b26:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <reg_wizchip_bus_cbfunc+0x50>)
 8002b28:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.BUS._write_data  = wizchip_bus_writedata;
 8002b2a:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <reg_wizchip_bus_cbfunc+0x4c>)
 8002b2c:	4a09      	ldr	r2, [pc, #36]	; (8002b54 <reg_wizchip_bus_cbfunc+0x54>)
 8002b2e:	621a      	str	r2, [r3, #32]
 8002b30:	e006      	b.n	8002b40 <reg_wizchip_bus_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.BUS._read_data   = bus_rb;
 8002b32:	4a06      	ldr	r2, [pc, #24]	; (8002b4c <reg_wizchip_bus_cbfunc+0x4c>)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.BUS._write_data  = bus_wb;
 8002b38:	4a04      	ldr	r2, [pc, #16]	; (8002b4c <reg_wizchip_bus_cbfunc+0x4c>)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	6213      	str	r3, [r2, #32]
   }
}
 8002b3e:	bf00      	nop
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	20000034 	.word	0x20000034
 8002b50:	08002a7d 	.word	0x08002a7d
 8002b54:	08002a97 	.word	0x08002a97

08002b58 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	6039      	str	r1, [r7, #0]
 8002b62:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
#endif
   uint8_t* ptmp[2] = {0,0};
 8002b64:	2300      	movs	r3, #0
 8002b66:	60bb      	str	r3, [r7, #8]
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60fb      	str	r3, [r7, #12]
   switch(cwtype)
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d863      	bhi.n	8002c3a <ctlwizchip+0xe2>
 8002b72:	a201      	add	r2, pc, #4	; (adr r2, 8002b78 <ctlwizchip+0x20>)
 8002b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b78:	08002b9d 	.word	0x08002b9d
 8002b7c:	08002ba3 	.word	0x08002ba3
 8002b80:	08002bcf 	.word	0x08002bcf
 8002b84:	08002bc3 	.word	0x08002bc3
 8002b88:	08002bdd 	.word	0x08002bdd
 8002b8c:	08002be9 	.word	0x08002be9
 8002b90:	08002c3b 	.word	0x08002c3b
 8002b94:	08002c3b 	.word	0x08002c3b
 8002b98:	08002bf7 	.word	0x08002bf7
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8002b9c:	f000 f896 	bl	8002ccc <wizchip_sw_reset>
         break;
 8002ba0:	e04e      	b.n	8002c40 <ctlwizchip+0xe8>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d004      	beq.n	8002bb2 <ctlwizchip+0x5a>
         {
            ptmp[0] = (uint8_t*)arg;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	60bb      	str	r3, [r7, #8]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	3308      	adds	r3, #8
 8002bb0:	60fb      	str	r3, [r7, #12]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 f98f 	bl	8002edc <wizchip_init>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	e03f      	b.n	8002c42 <ctlwizchip+0xea>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 f9f2 	bl	8002fb0 <wizchip_clrinterrupt>
         break;
 8002bcc:	e038      	b.n	8002c40 <ctlwizchip+0xe8>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8002bce:	f000 fa13 	bl	8002ff8 <wizchip_getinterrupt>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	801a      	strh	r2, [r3, #0]
         break;
 8002bda:	e031      	b.n	8002c40 <ctlwizchip+0xe8>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f000 fa2f 	bl	8003044 <wizchip_setinterruptmask>
         break;         
 8002be6:	e02b      	b.n	8002c40 <ctlwizchip+0xe8>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8002be8:	f000 fa50 	bl	800308c <wizchip_getinterruptmask>
 8002bec:	4603      	mov	r3, r0
 8002bee:	461a      	mov	r2, r3
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	801a      	strh	r2, [r3, #0]
         break;
 8002bf4:	e024      	b.n	8002c40 <ctlwizchip+0xe8>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
         break;
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8002bf6:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <ctlwizchip+0xf4>)
 8002bf8:	789a      	ldrb	r2, [r3, #2]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	3301      	adds	r3, #1
 8002c02:	4a12      	ldr	r2, [pc, #72]	; (8002c4c <ctlwizchip+0xf4>)
 8002c04:	78d2      	ldrb	r2, [r2, #3]
 8002c06:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	3302      	adds	r3, #2
 8002c0c:	4a0f      	ldr	r2, [pc, #60]	; (8002c4c <ctlwizchip+0xf4>)
 8002c0e:	7912      	ldrb	r2, [r2, #4]
 8002c10:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	3303      	adds	r3, #3
 8002c16:	4a0d      	ldr	r2, [pc, #52]	; (8002c4c <ctlwizchip+0xf4>)
 8002c18:	7952      	ldrb	r2, [r2, #5]
 8002c1a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	3304      	adds	r3, #4
 8002c20:	4a0a      	ldr	r2, [pc, #40]	; (8002c4c <ctlwizchip+0xf4>)
 8002c22:	7992      	ldrb	r2, [r2, #6]
 8002c24:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	3305      	adds	r3, #5
 8002c2a:	4a08      	ldr	r2, [pc, #32]	; (8002c4c <ctlwizchip+0xf4>)
 8002c2c:	79d2      	ldrb	r2, [r2, #7]
 8002c2e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	3306      	adds	r3, #6
 8002c34:	2200      	movs	r2, #0
 8002c36:	701a      	strb	r2, [r3, #0]
         break;
 8002c38:	e002      	b.n	8002c40 <ctlwizchip+0xe8>
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
   #endif      
      default:
         return -1;
 8002c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c3e:	e000      	b.n	8002c42 <ctlwizchip+0xea>
   }
   return 0;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000034 	.word	0x20000034

08002c50 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	6039      	str	r1, [r7, #0]
 8002c5a:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8002c5c:	79fb      	ldrb	r3, [r7, #7]
 8002c5e:	2b05      	cmp	r3, #5
 8002c60:	d82c      	bhi.n	8002cbc <ctlnetwork+0x6c>
 8002c62:	a201      	add	r2, pc, #4	; (adr r2, 8002c68 <ctlnetwork+0x18>)
 8002c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c68:	08002c81 	.word	0x08002c81
 8002c6c:	08002c89 	.word	0x08002c89
 8002c70:	08002c91 	.word	0x08002c91
 8002c74:	08002c9f 	.word	0x08002c9f
 8002c78:	08002cad 	.word	0x08002cad
 8002c7c:	08002cb5 	.word	0x08002cb5
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8002c80:	6838      	ldr	r0, [r7, #0]
 8002c82:	f000 fa2d 	bl	80030e0 <wizchip_setnetinfo>
         break;
 8002c86:	e01c      	b.n	8002cc2 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8002c88:	6838      	ldr	r0, [r7, #0]
 8002c8a:	f000 fad9 	bl	8003240 <wizchip_getnetinfo>
         break;
 8002c8e:	e018      	b.n	8002cc2 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f000 fb95 	bl	80033c4 <wizchip_setnetmode>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	e012      	b.n	8002cc4 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8002c9e:	f000 fbb4 	bl	800340a <wizchip_getnetmode>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	701a      	strb	r2, [r3, #0]
         break;
 8002caa:	e00a      	b.n	8002cc2 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8002cac:	6838      	ldr	r0, [r7, #0]
 8002cae:	f000 fbb7 	bl	8003420 <wizchip_settimeout>
         break;
 8002cb2:	e006      	b.n	8002cc2 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8002cb4:	6838      	ldr	r0, [r7, #0]
 8002cb6:	f000 fbcd 	bl	8003454 <wizchip_gettimeout>
         break;
 8002cba:	e002      	b.n	8002cc2 <ctlnetwork+0x72>
      default:
         return -1;
 8002cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc0:	e000      	b.n	8002cc4 <ctlnetwork+0x74>
   }
   return 0;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8002cd2:	4879      	ldr	r0, [pc, #484]	; (8002eb8 <wizchip_sw_reset+0x1ec>)
 8002cd4:	f7ff fe98 	bl	8002a08 <WIZCHIP_READ>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	0a1b      	lsrs	r3, r3, #8
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	713b      	strb	r3, [r7, #4]
 8002ce2:	4875      	ldr	r0, [pc, #468]	; (8002eb8 <wizchip_sw_reset+0x1ec>)
 8002ce4:	f7ff fe90 	bl	8002a08 <WIZCHIP_READ>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	717b      	strb	r3, [r7, #5]
 8002cee:	4873      	ldr	r0, [pc, #460]	; (8002ebc <wizchip_sw_reset+0x1f0>)
 8002cf0:	f7ff fe8a 	bl	8002a08 <WIZCHIP_READ>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	0a1b      	lsrs	r3, r3, #8
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	71bb      	strb	r3, [r7, #6]
 8002cfe:	486f      	ldr	r0, [pc, #444]	; (8002ebc <wizchip_sw_reset+0x1f0>)
 8002d00:	f7ff fe82 	bl	8002a08 <WIZCHIP_READ>
 8002d04:	4603      	mov	r3, r0
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	71fb      	strb	r3, [r7, #7]
 8002d0a:	486d      	ldr	r0, [pc, #436]	; (8002ec0 <wizchip_sw_reset+0x1f4>)
 8002d0c:	f7ff fe7c 	bl	8002a08 <WIZCHIP_READ>
 8002d10:	4603      	mov	r3, r0
 8002d12:	0a1b      	lsrs	r3, r3, #8
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	723b      	strb	r3, [r7, #8]
 8002d1a:	4869      	ldr	r0, [pc, #420]	; (8002ec0 <wizchip_sw_reset+0x1f4>)
 8002d1c:	f7ff fe74 	bl	8002a08 <WIZCHIP_READ>
 8002d20:	4603      	mov	r3, r0
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	727b      	strb	r3, [r7, #9]
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8002d26:	4867      	ldr	r0, [pc, #412]	; (8002ec4 <wizchip_sw_reset+0x1f8>)
 8002d28:	f7ff fe6e 	bl	8002a08 <WIZCHIP_READ>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	0a1b      	lsrs	r3, r3, #8
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	753b      	strb	r3, [r7, #20]
 8002d36:	4863      	ldr	r0, [pc, #396]	; (8002ec4 <wizchip_sw_reset+0x1f8>)
 8002d38:	f7ff fe66 	bl	8002a08 <WIZCHIP_READ>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	757b      	strb	r3, [r7, #21]
 8002d42:	4861      	ldr	r0, [pc, #388]	; (8002ec8 <wizchip_sw_reset+0x1fc>)
 8002d44:	f7ff fe60 	bl	8002a08 <WIZCHIP_READ>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	0a1b      	lsrs	r3, r3, #8
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	75bb      	strb	r3, [r7, #22]
 8002d52:	485d      	ldr	r0, [pc, #372]	; (8002ec8 <wizchip_sw_reset+0x1fc>)
 8002d54:	f7ff fe58 	bl	8002a08 <WIZCHIP_READ>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	75fb      	strb	r3, [r7, #23]
 8002d5e:	485b      	ldr	r0, [pc, #364]	; (8002ecc <wizchip_sw_reset+0x200>)
 8002d60:	f7ff fe52 	bl	8002a08 <WIZCHIP_READ>
 8002d64:	4603      	mov	r3, r0
 8002d66:	0a1b      	lsrs	r3, r3, #8
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	743b      	strb	r3, [r7, #16]
 8002d6e:	4857      	ldr	r0, [pc, #348]	; (8002ecc <wizchip_sw_reset+0x200>)
 8002d70:	f7ff fe4a 	bl	8002a08 <WIZCHIP_READ>
 8002d74:	4603      	mov	r3, r0
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	747b      	strb	r3, [r7, #17]
 8002d7a:	4855      	ldr	r0, [pc, #340]	; (8002ed0 <wizchip_sw_reset+0x204>)
 8002d7c:	f7ff fe44 	bl	8002a08 <WIZCHIP_READ>
 8002d80:	4603      	mov	r3, r0
 8002d82:	0a1b      	lsrs	r3, r3, #8
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	74bb      	strb	r3, [r7, #18]
 8002d8a:	4851      	ldr	r0, [pc, #324]	; (8002ed0 <wizchip_sw_reset+0x204>)
 8002d8c:	f7ff fe3c 	bl	8002a08 <WIZCHIP_READ>
 8002d90:	4603      	mov	r3, r0
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	74fb      	strb	r3, [r7, #19]
 8002d96:	484f      	ldr	r0, [pc, #316]	; (8002ed4 <wizchip_sw_reset+0x208>)
 8002d98:	f7ff fe36 	bl	8002a08 <WIZCHIP_READ>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	0a1b      	lsrs	r3, r3, #8
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	733b      	strb	r3, [r7, #12]
 8002da6:	484b      	ldr	r0, [pc, #300]	; (8002ed4 <wizchip_sw_reset+0x208>)
 8002da8:	f7ff fe2e 	bl	8002a08 <WIZCHIP_READ>
 8002dac:	4603      	mov	r3, r0
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	737b      	strb	r3, [r7, #13]
 8002db2:	4849      	ldr	r0, [pc, #292]	; (8002ed8 <wizchip_sw_reset+0x20c>)
 8002db4:	f7ff fe28 	bl	8002a08 <WIZCHIP_READ>
 8002db8:	4603      	mov	r3, r0
 8002dba:	0a1b      	lsrs	r3, r3, #8
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	73bb      	strb	r3, [r7, #14]
 8002dc2:	4845      	ldr	r0, [pc, #276]	; (8002ed8 <wizchip_sw_reset+0x20c>)
 8002dc4:	f7ff fe20 	bl	8002a08 <WIZCHIP_READ>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	73fb      	strb	r3, [r7, #15]
   setMR(MR_RST);
 8002dce:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8002dd2:	2280      	movs	r2, #128	; 0x80
 8002dd4:	801a      	strh	r2, [r3, #0]
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8002dd6:	793b      	ldrb	r3, [r7, #4]
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	021b      	lsls	r3, r3, #8
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	797b      	ldrb	r3, [r7, #5]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	4413      	add	r3, r2
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	4619      	mov	r1, r3
 8002de8:	4833      	ldr	r0, [pc, #204]	; (8002eb8 <wizchip_sw_reset+0x1ec>)
 8002dea:	f7ff fdef 	bl	80029cc <WIZCHIP_WRITE>
 8002dee:	79bb      	ldrb	r3, [r7, #6]
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	021b      	lsls	r3, r3, #8
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	4619      	mov	r1, r3
 8002e00:	482e      	ldr	r0, [pc, #184]	; (8002ebc <wizchip_sw_reset+0x1f0>)
 8002e02:	f7ff fde3 	bl	80029cc <WIZCHIP_WRITE>
 8002e06:	7a3b      	ldrb	r3, [r7, #8]
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	021b      	lsls	r3, r3, #8
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	7a7b      	ldrb	r3, [r7, #9]
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	4413      	add	r3, r2
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	4619      	mov	r1, r3
 8002e18:	4829      	ldr	r0, [pc, #164]	; (8002ec0 <wizchip_sw_reset+0x1f4>)
 8002e1a:	f7ff fdd7 	bl	80029cc <WIZCHIP_WRITE>
   setGAR(gw);
 8002e1e:	7d3b      	ldrb	r3, [r7, #20]
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	021b      	lsls	r3, r3, #8
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	7d7b      	ldrb	r3, [r7, #21]
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4824      	ldr	r0, [pc, #144]	; (8002ec4 <wizchip_sw_reset+0x1f8>)
 8002e32:	f7ff fdcb 	bl	80029cc <WIZCHIP_WRITE>
 8002e36:	7dbb      	ldrb	r3, [r7, #22]
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	021b      	lsls	r3, r3, #8
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	7dfb      	ldrb	r3, [r7, #23]
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	4413      	add	r3, r2
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	4619      	mov	r1, r3
 8002e48:	481f      	ldr	r0, [pc, #124]	; (8002ec8 <wizchip_sw_reset+0x1fc>)
 8002e4a:	f7ff fdbf 	bl	80029cc <WIZCHIP_WRITE>
   setSUBR(sn);
 8002e4e:	7c3b      	ldrb	r3, [r7, #16]
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	021b      	lsls	r3, r3, #8
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	7c7b      	ldrb	r3, [r7, #17]
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	4619      	mov	r1, r3
 8002e60:	481a      	ldr	r0, [pc, #104]	; (8002ecc <wizchip_sw_reset+0x200>)
 8002e62:	f7ff fdb3 	bl	80029cc <WIZCHIP_WRITE>
 8002e66:	7cbb      	ldrb	r3, [r7, #18]
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	021b      	lsls	r3, r3, #8
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	7cfb      	ldrb	r3, [r7, #19]
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	4413      	add	r3, r2
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	4619      	mov	r1, r3
 8002e78:	4815      	ldr	r0, [pc, #84]	; (8002ed0 <wizchip_sw_reset+0x204>)
 8002e7a:	f7ff fda7 	bl	80029cc <WIZCHIP_WRITE>
   setSIPR(sip);
 8002e7e:	7b3b      	ldrb	r3, [r7, #12]
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	021b      	lsls	r3, r3, #8
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	7b7b      	ldrb	r3, [r7, #13]
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4810      	ldr	r0, [pc, #64]	; (8002ed4 <wizchip_sw_reset+0x208>)
 8002e92:	f7ff fd9b 	bl	80029cc <WIZCHIP_WRITE>
 8002e96:	7bbb      	ldrb	r3, [r7, #14]
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	021b      	lsls	r3, r3, #8
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	480b      	ldr	r0, [pc, #44]	; (8002ed8 <wizchip_sw_reset+0x20c>)
 8002eaa:	f7ff fd8f 	bl	80029cc <WIZCHIP_WRITE>
}
 8002eae:	bf00      	nop
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	68000008 	.word	0x68000008
 8002ebc:	6800000a 	.word	0x6800000a
 8002ec0:	6800000c 	.word	0x6800000c
 8002ec4:	68000010 	.word	0x68000010
 8002ec8:	68000012 	.word	0x68000012
 8002ecc:	68000014 	.word	0x68000014
 8002ed0:	68000016 	.word	0x68000016
 8002ed4:	68000018 	.word	0x68000018
 8002ed8:	6800001a 	.word	0x6800001a

08002edc <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8002eea:	f7ff feef 	bl	8002ccc <wizchip_sw_reset>
   if(txsize)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d02a      	beq.n	8002f4a <wizchip_init+0x6e>
   {
      tmp = 0;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	73bb      	strb	r3, [r7, #14]
   //M20150601 : For integrating with W5300
   #if _WIZCHIP_ == W5300
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002ef8:	2300      	movs	r3, #0
 8002efa:	73fb      	strb	r3, [r7, #15]
 8002efc:	e018      	b.n	8002f30 <wizchip_init+0x54>
		{
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8002efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	4413      	add	r3, r2
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b3f      	cmp	r3, #63	; 0x3f
 8002f0a:	d902      	bls.n	8002f12 <wizchip_init+0x36>
 8002f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f10:	e04a      	b.n	8002fa8 <wizchip_init+0xcc>
			tmp += txsize[i];
 8002f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	4413      	add	r3, r2
 8002f1a:	781a      	ldrb	r2, [r3, #0]
 8002f1c:	7bbb      	ldrb	r3, [r7, #14]
 8002f1e:	4413      	add	r3, r2
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	73bb      	strb	r3, [r7, #14]
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	73fb      	strb	r3, [r7, #15]
 8002f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f34:	2b07      	cmp	r3, #7
 8002f36:	dde2      	ble.n	8002efe <wizchip_init+0x22>
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
 8002f38:	7bbb      	ldrb	r3, [r7, #14]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d002      	beq.n	8002f4a <wizchip_init+0x6e>
 8002f44:	f04f 33ff 	mov.w	r3, #4294967295
 8002f48:	e02e      	b.n	8002fa8 <wizchip_init+0xcc>
		}

	#endif
   }

   if(rxsize)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d02a      	beq.n	8002fa6 <wizchip_init+0xca>
   {
      tmp = 0;
 8002f50:	2300      	movs	r3, #0
 8002f52:	73bb      	strb	r3, [r7, #14]
   #if _WIZCHIP_ == W5300
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002f54:	2300      	movs	r3, #0
 8002f56:	73fb      	strb	r3, [r7, #15]
 8002f58:	e018      	b.n	8002f8c <wizchip_init+0xb0>
		{
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8002f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	4413      	add	r3, r2
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b3f      	cmp	r3, #63	; 0x3f
 8002f66:	d902      	bls.n	8002f6e <wizchip_init+0x92>
 8002f68:	f04f 33ff 	mov.w	r3, #4294967295
 8002f6c:	e01c      	b.n	8002fa8 <wizchip_init+0xcc>
			tmp += rxsize[i];
 8002f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	4413      	add	r3, r2
 8002f76:	781a      	ldrb	r2, [r3, #0]
 8002f78:	7bbb      	ldrb	r3, [r7, #14]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	3301      	adds	r3, #1
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	73fb      	strb	r3, [r7, #15]
 8002f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f90:	2b07      	cmp	r3, #7
 8002f92:	dde2      	ble.n	8002f5a <wizchip_init+0x7e>
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
 8002f94:	7bbb      	ldrb	r3, [r7, #14]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <wizchip_init+0xca>
 8002fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa4:	e000      	b.n	8002fa8 <wizchip_init+0xcc>
			setSn_RXBUF_SIZE(i, rxsize[i]);
		#endif
		}
	#endif
   }
   return 0;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8002fba:	88fb      	ldrh	r3, [r7, #6]
 8002fbc:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8002fbe:	88fb      	ldrh	r3, [r7, #6]
 8002fc0:	0a1b      	lsrs	r3, r3, #8
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   ir |= (1<<4); // IK_WOL
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
 8002fc8:	f043 0310 	orr.w	r3, r3, #16
 8002fcc:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ <= W5100S
   ir |= sir;
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
 8002fd0:	021b      	lsls	r3, r3, #8
 8002fd2:	b21a      	sxth	r2, r3
 8002fd4:	7bbb      	ldrb	r3, [r7, #14]
 8002fd6:	b21b      	sxth	r3, r3
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	b21b      	sxth	r3, r3
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4803      	ldr	r0, [pc, #12]	; (8002ff4 <wizchip_clrinterrupt+0x44>)
 8002fe8:	f7ff fcf0 	bl	80029cc <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
   }

#endif   
}
 8002fec:	bf00      	nop
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	68000002 	.word	0x68000002

08002ff8 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8003002:	2300      	movs	r3, #0
 8003004:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003006:	2300      	movs	r3, #0
 8003008:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ <= W5100S
   ir = getIR();
   sir = ir & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_  == W5300
   ret = getIR();
 800300a:	480d      	ldr	r0, [pc, #52]	; (8003040 <wizchip_getinterrupt+0x48>)
 800300c:	f7ff fcfc 	bl	8002a08 <WIZCHIP_READ>
 8003010:	4603      	mov	r3, r0
 8003012:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003016:	80bb      	strh	r3, [r7, #4]
   ir = (uint8_t)(ret >> 8);
 8003018:	88bb      	ldrh	r3, [r7, #4]
 800301a:	0a1b      	lsrs	r3, r3, #8
 800301c:	b29b      	uxth	r3, r3
 800301e:	71fb      	strb	r3, [r7, #7]
   sir = (uint8_t)ret;
 8003020:	88bb      	ldrh	r3, [r7, #4]
 8003022:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8003024:	79bb      	ldrb	r3, [r7, #6]
 8003026:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8003028:	88bb      	ldrh	r3, [r7, #4]
 800302a:	021b      	lsls	r3, r3, #8
 800302c:	b29a      	uxth	r2, r3
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	b29b      	uxth	r3, r3
 8003032:	4413      	add	r3, r2
 8003034:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003036:	88bb      	ldrh	r3, [r7, #4]
}
 8003038:	4618      	mov	r0, r3
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	68000002 	.word	0x68000002

08003044 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 800304e:	88fb      	ldrh	r3, [r7, #6]
 8003050:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8003052:	88fb      	ldrh	r3, [r7, #6]
 8003054:	0a1b      	lsrs	r3, r3, #8
 8003056:	b29b      	uxth	r3, r3
 8003058:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 800305a:	7bfb      	ldrb	r3, [r7, #15]
 800305c:	f023 0310 	bic.w	r3, r3, #16
 8003060:	73fb      	strb	r3, [r7, #15]
   simr &= 0x0F;
   imr |= simr;
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
 8003062:	7bfb      	ldrb	r3, [r7, #15]
 8003064:	021b      	lsls	r3, r3, #8
 8003066:	b21a      	sxth	r2, r3
 8003068:	7bbb      	ldrb	r3, [r7, #14]
 800306a:	b21b      	sxth	r3, r3
 800306c:	4313      	orrs	r3, r2
 800306e:	b21b      	sxth	r3, r3
 8003070:	b29b      	uxth	r3, r3
 8003072:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003076:	b29b      	uxth	r3, r3
 8003078:	4619      	mov	r1, r3
 800307a:	4803      	ldr	r0, [pc, #12]	; (8003088 <wizchip_setinterruptmask+0x44>)
 800307c:	f7ff fca6 	bl	80029cc <WIZCHIP_WRITE>
#else
   setIMR(imr);
   setSIMR(simr);
#endif   
}
 8003080:	bf00      	nop
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	68000004 	.word	0x68000004

0800308c <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8003092:	2300      	movs	r3, #0
 8003094:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8003096:	2300      	movs	r3, #0
 8003098:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800309a:	2300      	movs	r3, #0
 800309c:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ < W5200
   imr  = getIMR();
   simr = imr & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   ret = getIMR();
 800309e:	480f      	ldr	r0, [pc, #60]	; (80030dc <wizchip_getinterruptmask+0x50>)
 80030a0:	f7ff fcb2 	bl	8002a08 <WIZCHIP_READ>
 80030a4:	4603      	mov	r3, r0
 80030a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030aa:	80bb      	strh	r3, [r7, #4]
   imr = (uint8_t)(ret >> 8);
 80030ac:	88bb      	ldrh	r3, [r7, #4]
 80030ae:	0a1b      	lsrs	r3, r3, #8
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	71fb      	strb	r3, [r7, #7]
   simr = (uint8_t)ret;
 80030b4:	88bb      	ldrh	r3, [r7, #4]
 80030b6:	71bb      	strb	r3, [r7, #6]
   imr  = getIMR();
   simr = getSIMR();
#endif         

#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	f023 0310 	bic.w	r3, r3, #16
 80030be:	71fb      	strb	r3, [r7, #7]
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 80030c0:	79bb      	ldrb	r3, [r7, #6]
 80030c2:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 80030c4:	88bb      	ldrh	r3, [r7, #4]
 80030c6:	021b      	lsls	r3, r3, #8
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	79fb      	ldrb	r3, [r7, #7]
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	4413      	add	r3, r2
 80030d0:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80030d2:	88bb      	ldrh	r3, [r7, #4]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	68000004 	.word	0x68000004

080030e0 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	021b      	lsls	r3, r3, #8
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	785b      	ldrb	r3, [r3, #1]
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	4413      	add	r3, r2
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	4619      	mov	r1, r3
 80030fe:	4845      	ldr	r0, [pc, #276]	; (8003214 <wizchip_setnetinfo+0x134>)
 8003100:	f7ff fc64 	bl	80029cc <WIZCHIP_WRITE>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	789b      	ldrb	r3, [r3, #2]
 8003108:	b29b      	uxth	r3, r3
 800310a:	021b      	lsls	r3, r3, #8
 800310c:	b29a      	uxth	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	78db      	ldrb	r3, [r3, #3]
 8003112:	b29b      	uxth	r3, r3
 8003114:	4413      	add	r3, r2
 8003116:	b29b      	uxth	r3, r3
 8003118:	4619      	mov	r1, r3
 800311a:	483f      	ldr	r0, [pc, #252]	; (8003218 <wizchip_setnetinfo+0x138>)
 800311c:	f7ff fc56 	bl	80029cc <WIZCHIP_WRITE>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	791b      	ldrb	r3, [r3, #4]
 8003124:	b29b      	uxth	r3, r3
 8003126:	021b      	lsls	r3, r3, #8
 8003128:	b29a      	uxth	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	795b      	ldrb	r3, [r3, #5]
 800312e:	b29b      	uxth	r3, r3
 8003130:	4413      	add	r3, r2
 8003132:	b29b      	uxth	r3, r3
 8003134:	4619      	mov	r1, r3
 8003136:	4839      	ldr	r0, [pc, #228]	; (800321c <wizchip_setnetinfo+0x13c>)
 8003138:	f7ff fc48 	bl	80029cc <WIZCHIP_WRITE>
   setGAR(pnetinfo->gw);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	7b9b      	ldrb	r3, [r3, #14]
 8003140:	b29b      	uxth	r3, r3
 8003142:	021b      	lsls	r3, r3, #8
 8003144:	b29a      	uxth	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	7bdb      	ldrb	r3, [r3, #15]
 800314a:	b29b      	uxth	r3, r3
 800314c:	4413      	add	r3, r2
 800314e:	b29b      	uxth	r3, r3
 8003150:	4619      	mov	r1, r3
 8003152:	4833      	ldr	r0, [pc, #204]	; (8003220 <wizchip_setnetinfo+0x140>)
 8003154:	f7ff fc3a 	bl	80029cc <WIZCHIP_WRITE>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	7c1b      	ldrb	r3, [r3, #16]
 800315c:	b29b      	uxth	r3, r3
 800315e:	021b      	lsls	r3, r3, #8
 8003160:	b29a      	uxth	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	7c5b      	ldrb	r3, [r3, #17]
 8003166:	b29b      	uxth	r3, r3
 8003168:	4413      	add	r3, r2
 800316a:	b29b      	uxth	r3, r3
 800316c:	4619      	mov	r1, r3
 800316e:	482d      	ldr	r0, [pc, #180]	; (8003224 <wizchip_setnetinfo+0x144>)
 8003170:	f7ff fc2c 	bl	80029cc <WIZCHIP_WRITE>
   setSUBR(pnetinfo->sn);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	7a9b      	ldrb	r3, [r3, #10]
 8003178:	b29b      	uxth	r3, r3
 800317a:	021b      	lsls	r3, r3, #8
 800317c:	b29a      	uxth	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	7adb      	ldrb	r3, [r3, #11]
 8003182:	b29b      	uxth	r3, r3
 8003184:	4413      	add	r3, r2
 8003186:	b29b      	uxth	r3, r3
 8003188:	4619      	mov	r1, r3
 800318a:	4827      	ldr	r0, [pc, #156]	; (8003228 <wizchip_setnetinfo+0x148>)
 800318c:	f7ff fc1e 	bl	80029cc <WIZCHIP_WRITE>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	7b1b      	ldrb	r3, [r3, #12]
 8003194:	b29b      	uxth	r3, r3
 8003196:	021b      	lsls	r3, r3, #8
 8003198:	b29a      	uxth	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	7b5b      	ldrb	r3, [r3, #13]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	4413      	add	r3, r2
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	4619      	mov	r1, r3
 80031a6:	4821      	ldr	r0, [pc, #132]	; (800322c <wizchip_setnetinfo+0x14c>)
 80031a8:	f7ff fc10 	bl	80029cc <WIZCHIP_WRITE>
   setSIPR(pnetinfo->ip);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	799b      	ldrb	r3, [r3, #6]
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	021b      	lsls	r3, r3, #8
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	79db      	ldrb	r3, [r3, #7]
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	4413      	add	r3, r2
 80031be:	b29b      	uxth	r3, r3
 80031c0:	4619      	mov	r1, r3
 80031c2:	481b      	ldr	r0, [pc, #108]	; (8003230 <wizchip_setnetinfo+0x150>)
 80031c4:	f7ff fc02 	bl	80029cc <WIZCHIP_WRITE>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	7a1b      	ldrb	r3, [r3, #8]
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	021b      	lsls	r3, r3, #8
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	7a5b      	ldrb	r3, [r3, #9]
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	4413      	add	r3, r2
 80031da:	b29b      	uxth	r3, r3
 80031dc:	4619      	mov	r1, r3
 80031de:	4815      	ldr	r0, [pc, #84]	; (8003234 <wizchip_setnetinfo+0x154>)
 80031e0:	f7ff fbf4 	bl	80029cc <WIZCHIP_WRITE>
   _DNS_[0] = pnetinfo->dns[0];
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	7c9a      	ldrb	r2, [r3, #18]
 80031e8:	4b13      	ldr	r3, [pc, #76]	; (8003238 <wizchip_setnetinfo+0x158>)
 80031ea:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	7cda      	ldrb	r2, [r3, #19]
 80031f0:	4b11      	ldr	r3, [pc, #68]	; (8003238 <wizchip_setnetinfo+0x158>)
 80031f2:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	7d1a      	ldrb	r2, [r3, #20]
 80031f8:	4b0f      	ldr	r3, [pc, #60]	; (8003238 <wizchip_setnetinfo+0x158>)
 80031fa:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	7d5a      	ldrb	r2, [r3, #21]
 8003200:	4b0d      	ldr	r3, [pc, #52]	; (8003238 <wizchip_setnetinfo+0x158>)
 8003202:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	7d9a      	ldrb	r2, [r3, #22]
 8003208:	4b0c      	ldr	r3, [pc, #48]	; (800323c <wizchip_setnetinfo+0x15c>)
 800320a:	701a      	strb	r2, [r3, #0]
}
 800320c:	bf00      	nop
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	68000008 	.word	0x68000008
 8003218:	6800000a 	.word	0x6800000a
 800321c:	6800000c 	.word	0x6800000c
 8003220:	68000010 	.word	0x68000010
 8003224:	68000012 	.word	0x68000012
 8003228:	68000014 	.word	0x68000014
 800322c:	68000016 	.word	0x68000016
 8003230:	68000018 	.word	0x68000018
 8003234:	6800001a 	.word	0x6800001a
 8003238:	20000184 	.word	0x20000184
 800323c:	20000188 	.word	0x20000188

08003240 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8003248:	4853      	ldr	r0, [pc, #332]	; (8003398 <wizchip_getnetinfo+0x158>)
 800324a:	f7ff fbdd 	bl	8002a08 <WIZCHIP_READ>
 800324e:	4603      	mov	r3, r0
 8003250:	0a1b      	lsrs	r3, r3, #8
 8003252:	b29b      	uxth	r3, r3
 8003254:	b2da      	uxtb	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	701a      	strb	r2, [r3, #0]
 800325a:	484f      	ldr	r0, [pc, #316]	; (8003398 <wizchip_getnetinfo+0x158>)
 800325c:	f7ff fbd4 	bl	8002a08 <WIZCHIP_READ>
 8003260:	4603      	mov	r3, r0
 8003262:	b2da      	uxtb	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	705a      	strb	r2, [r3, #1]
 8003268:	484c      	ldr	r0, [pc, #304]	; (800339c <wizchip_getnetinfo+0x15c>)
 800326a:	f7ff fbcd 	bl	8002a08 <WIZCHIP_READ>
 800326e:	4603      	mov	r3, r0
 8003270:	0a1b      	lsrs	r3, r3, #8
 8003272:	b29b      	uxth	r3, r3
 8003274:	b2da      	uxtb	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	709a      	strb	r2, [r3, #2]
 800327a:	4848      	ldr	r0, [pc, #288]	; (800339c <wizchip_getnetinfo+0x15c>)
 800327c:	f7ff fbc4 	bl	8002a08 <WIZCHIP_READ>
 8003280:	4603      	mov	r3, r0
 8003282:	b2da      	uxtb	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	70da      	strb	r2, [r3, #3]
 8003288:	4845      	ldr	r0, [pc, #276]	; (80033a0 <wizchip_getnetinfo+0x160>)
 800328a:	f7ff fbbd 	bl	8002a08 <WIZCHIP_READ>
 800328e:	4603      	mov	r3, r0
 8003290:	0a1b      	lsrs	r3, r3, #8
 8003292:	b29b      	uxth	r3, r3
 8003294:	b2da      	uxtb	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	711a      	strb	r2, [r3, #4]
 800329a:	4841      	ldr	r0, [pc, #260]	; (80033a0 <wizchip_getnetinfo+0x160>)
 800329c:	f7ff fbb4 	bl	8002a08 <WIZCHIP_READ>
 80032a0:	4603      	mov	r3, r0
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	715a      	strb	r2, [r3, #5]
   getGAR(pnetinfo->gw);
 80032a8:	483e      	ldr	r0, [pc, #248]	; (80033a4 <wizchip_getnetinfo+0x164>)
 80032aa:	f7ff fbad 	bl	8002a08 <WIZCHIP_READ>
 80032ae:	4603      	mov	r3, r0
 80032b0:	0a1b      	lsrs	r3, r3, #8
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	739a      	strb	r2, [r3, #14]
 80032ba:	483a      	ldr	r0, [pc, #232]	; (80033a4 <wizchip_getnetinfo+0x164>)
 80032bc:	f7ff fba4 	bl	8002a08 <WIZCHIP_READ>
 80032c0:	4603      	mov	r3, r0
 80032c2:	b2da      	uxtb	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	73da      	strb	r2, [r3, #15]
 80032c8:	4837      	ldr	r0, [pc, #220]	; (80033a8 <wizchip_getnetinfo+0x168>)
 80032ca:	f7ff fb9d 	bl	8002a08 <WIZCHIP_READ>
 80032ce:	4603      	mov	r3, r0
 80032d0:	0a1b      	lsrs	r3, r3, #8
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	741a      	strb	r2, [r3, #16]
 80032da:	4833      	ldr	r0, [pc, #204]	; (80033a8 <wizchip_getnetinfo+0x168>)
 80032dc:	f7ff fb94 	bl	8002a08 <WIZCHIP_READ>
 80032e0:	4603      	mov	r3, r0
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	745a      	strb	r2, [r3, #17]
   getSUBR(pnetinfo->sn);
 80032e8:	4830      	ldr	r0, [pc, #192]	; (80033ac <wizchip_getnetinfo+0x16c>)
 80032ea:	f7ff fb8d 	bl	8002a08 <WIZCHIP_READ>
 80032ee:	4603      	mov	r3, r0
 80032f0:	0a1b      	lsrs	r3, r3, #8
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	729a      	strb	r2, [r3, #10]
 80032fa:	482c      	ldr	r0, [pc, #176]	; (80033ac <wizchip_getnetinfo+0x16c>)
 80032fc:	f7ff fb84 	bl	8002a08 <WIZCHIP_READ>
 8003300:	4603      	mov	r3, r0
 8003302:	b2da      	uxtb	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	72da      	strb	r2, [r3, #11]
 8003308:	4829      	ldr	r0, [pc, #164]	; (80033b0 <wizchip_getnetinfo+0x170>)
 800330a:	f7ff fb7d 	bl	8002a08 <WIZCHIP_READ>
 800330e:	4603      	mov	r3, r0
 8003310:	0a1b      	lsrs	r3, r3, #8
 8003312:	b29b      	uxth	r3, r3
 8003314:	b2da      	uxtb	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	731a      	strb	r2, [r3, #12]
 800331a:	4825      	ldr	r0, [pc, #148]	; (80033b0 <wizchip_getnetinfo+0x170>)
 800331c:	f7ff fb74 	bl	8002a08 <WIZCHIP_READ>
 8003320:	4603      	mov	r3, r0
 8003322:	b2da      	uxtb	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	735a      	strb	r2, [r3, #13]
   getSIPR(pnetinfo->ip);
 8003328:	4822      	ldr	r0, [pc, #136]	; (80033b4 <wizchip_getnetinfo+0x174>)
 800332a:	f7ff fb6d 	bl	8002a08 <WIZCHIP_READ>
 800332e:	4603      	mov	r3, r0
 8003330:	0a1b      	lsrs	r3, r3, #8
 8003332:	b29b      	uxth	r3, r3
 8003334:	b2da      	uxtb	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	719a      	strb	r2, [r3, #6]
 800333a:	481e      	ldr	r0, [pc, #120]	; (80033b4 <wizchip_getnetinfo+0x174>)
 800333c:	f7ff fb64 	bl	8002a08 <WIZCHIP_READ>
 8003340:	4603      	mov	r3, r0
 8003342:	b2da      	uxtb	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	71da      	strb	r2, [r3, #7]
 8003348:	481b      	ldr	r0, [pc, #108]	; (80033b8 <wizchip_getnetinfo+0x178>)
 800334a:	f7ff fb5d 	bl	8002a08 <WIZCHIP_READ>
 800334e:	4603      	mov	r3, r0
 8003350:	0a1b      	lsrs	r3, r3, #8
 8003352:	b29b      	uxth	r3, r3
 8003354:	b2da      	uxtb	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	721a      	strb	r2, [r3, #8]
 800335a:	4817      	ldr	r0, [pc, #92]	; (80033b8 <wizchip_getnetinfo+0x178>)
 800335c:	f7ff fb54 	bl	8002a08 <WIZCHIP_READ>
 8003360:	4603      	mov	r3, r0
 8003362:	b2da      	uxtb	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	725a      	strb	r2, [r3, #9]
   pnetinfo->dns[0]= _DNS_[0];
 8003368:	4b14      	ldr	r3, [pc, #80]	; (80033bc <wizchip_getnetinfo+0x17c>)
 800336a:	781a      	ldrb	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8003370:	4b12      	ldr	r3, [pc, #72]	; (80033bc <wizchip_getnetinfo+0x17c>)
 8003372:	785a      	ldrb	r2, [r3, #1]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8003378:	4b10      	ldr	r3, [pc, #64]	; (80033bc <wizchip_getnetinfo+0x17c>)
 800337a:	789a      	ldrb	r2, [r3, #2]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8003380:	4b0e      	ldr	r3, [pc, #56]	; (80033bc <wizchip_getnetinfo+0x17c>)
 8003382:	78da      	ldrb	r2, [r3, #3]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8003388:	4b0d      	ldr	r3, [pc, #52]	; (80033c0 <wizchip_getnetinfo+0x180>)
 800338a:	781a      	ldrb	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	759a      	strb	r2, [r3, #22]
}
 8003390:	bf00      	nop
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	68000008 	.word	0x68000008
 800339c:	6800000a 	.word	0x6800000a
 80033a0:	6800000c 	.word	0x6800000c
 80033a4:	68000010 	.word	0x68000010
 80033a8:	68000012 	.word	0x68000012
 80033ac:	68000014 	.word	0x68000014
 80033b0:	68000016 	.word	0x68000016
 80033b4:	68000018 	.word	0x68000018
 80033b8:	6800001a 	.word	0x6800001a
 80033bc:	20000184 	.word	0x20000184
 80033c0:	20000188 	.word	0x20000188

080033c4 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80033ce:	2300      	movs	r3, #0
 80033d0:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
 80033d2:	79fb      	ldrb	r3, [r7, #7]
 80033d4:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d002      	beq.n	80033e2 <wizchip_setnetmode+0x1e>
 80033dc:	f04f 33ff 	mov.w	r3, #4294967295
 80033e0:	e00d      	b.n	80033fe <wizchip_setnetmode+0x3a>
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
#endif      
   tmp = getMR();
 80033e2:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 80033e6:	881b      	ldrh	r3, [r3, #0]
 80033e8:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 80033ea:	7bfa      	ldrb	r2, [r7, #15]
 80033ec:	79fb      	ldrb	r3, [r7, #7]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 80033f2:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 80033f6:	7bfa      	ldrb	r2, [r7, #15]
 80033f8:	b292      	uxth	r2, r2
 80033fa:	801a      	strh	r2, [r3, #0]
   return 0;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 800340a:	b480      	push	{r7}
 800340c:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 800340e:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8003412:	881b      	ldrh	r3, [r3, #0]
 8003414:	b2db      	uxtb	r3, r3
}
 8003416:	4618      	mov	r0, r3
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	b29b      	uxth	r3, r3
 800342e:	4619      	mov	r1, r3
 8003430:	4806      	ldr	r0, [pc, #24]	; (800344c <wizchip_settimeout+0x2c>)
 8003432:	f7ff facb 	bl	80029cc <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	885b      	ldrh	r3, [r3, #2]
 800343a:	4619      	mov	r1, r3
 800343c:	4804      	ldr	r0, [pc, #16]	; (8003450 <wizchip_settimeout+0x30>)
 800343e:	f7ff fac5 	bl	80029cc <WIZCHIP_WRITE>
}
 8003442:	bf00      	nop
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	6800001e 	.word	0x6800001e
 8003450:	6800001c 	.word	0x6800001c

08003454 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 800345c:	4808      	ldr	r0, [pc, #32]	; (8003480 <wizchip_gettimeout+0x2c>)
 800345e:	f7ff fad3 	bl	8002a08 <WIZCHIP_READ>
 8003462:	4603      	mov	r3, r0
 8003464:	b2da      	uxtb	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 800346a:	4806      	ldr	r0, [pc, #24]	; (8003484 <wizchip_gettimeout+0x30>)
 800346c:	f7ff facc 	bl	8002a08 <WIZCHIP_READ>
 8003470:	4603      	mov	r3, r0
 8003472:	461a      	mov	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	805a      	strh	r2, [r3, #2]
}
 8003478:	bf00      	nop
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	6800001e 	.word	0x6800001e
 8003484:	6800001c 	.word	0x6800001c

08003488 <__errno>:
 8003488:	4b01      	ldr	r3, [pc, #4]	; (8003490 <__errno+0x8>)
 800348a:	6818      	ldr	r0, [r3, #0]
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	20000060 	.word	0x20000060

08003494 <__libc_init_array>:
 8003494:	b570      	push	{r4, r5, r6, lr}
 8003496:	4d0d      	ldr	r5, [pc, #52]	; (80034cc <__libc_init_array+0x38>)
 8003498:	4c0d      	ldr	r4, [pc, #52]	; (80034d0 <__libc_init_array+0x3c>)
 800349a:	1b64      	subs	r4, r4, r5
 800349c:	10a4      	asrs	r4, r4, #2
 800349e:	2600      	movs	r6, #0
 80034a0:	42a6      	cmp	r6, r4
 80034a2:	d109      	bne.n	80034b8 <__libc_init_array+0x24>
 80034a4:	4d0b      	ldr	r5, [pc, #44]	; (80034d4 <__libc_init_array+0x40>)
 80034a6:	4c0c      	ldr	r4, [pc, #48]	; (80034d8 <__libc_init_array+0x44>)
 80034a8:	f001 f824 	bl	80044f4 <_init>
 80034ac:	1b64      	subs	r4, r4, r5
 80034ae:	10a4      	asrs	r4, r4, #2
 80034b0:	2600      	movs	r6, #0
 80034b2:	42a6      	cmp	r6, r4
 80034b4:	d105      	bne.n	80034c2 <__libc_init_array+0x2e>
 80034b6:	bd70      	pop	{r4, r5, r6, pc}
 80034b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80034bc:	4798      	blx	r3
 80034be:	3601      	adds	r6, #1
 80034c0:	e7ee      	b.n	80034a0 <__libc_init_array+0xc>
 80034c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80034c6:	4798      	blx	r3
 80034c8:	3601      	adds	r6, #1
 80034ca:	e7f2      	b.n	80034b2 <__libc_init_array+0x1e>
 80034cc:	080046c0 	.word	0x080046c0
 80034d0:	080046c0 	.word	0x080046c0
 80034d4:	080046c0 	.word	0x080046c0
 80034d8:	080046c4 	.word	0x080046c4

080034dc <memset>:
 80034dc:	4402      	add	r2, r0
 80034de:	4603      	mov	r3, r0
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d100      	bne.n	80034e6 <memset+0xa>
 80034e4:	4770      	bx	lr
 80034e6:	f803 1b01 	strb.w	r1, [r3], #1
 80034ea:	e7f9      	b.n	80034e0 <memset+0x4>

080034ec <_free_r>:
 80034ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80034ee:	2900      	cmp	r1, #0
 80034f0:	d044      	beq.n	800357c <_free_r+0x90>
 80034f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034f6:	9001      	str	r0, [sp, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f1a1 0404 	sub.w	r4, r1, #4
 80034fe:	bfb8      	it	lt
 8003500:	18e4      	addlt	r4, r4, r3
 8003502:	f000 fcc9 	bl	8003e98 <__malloc_lock>
 8003506:	4a1e      	ldr	r2, [pc, #120]	; (8003580 <_free_r+0x94>)
 8003508:	9801      	ldr	r0, [sp, #4]
 800350a:	6813      	ldr	r3, [r2, #0]
 800350c:	b933      	cbnz	r3, 800351c <_free_r+0x30>
 800350e:	6063      	str	r3, [r4, #4]
 8003510:	6014      	str	r4, [r2, #0]
 8003512:	b003      	add	sp, #12
 8003514:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003518:	f000 bcc4 	b.w	8003ea4 <__malloc_unlock>
 800351c:	42a3      	cmp	r3, r4
 800351e:	d908      	bls.n	8003532 <_free_r+0x46>
 8003520:	6825      	ldr	r5, [r4, #0]
 8003522:	1961      	adds	r1, r4, r5
 8003524:	428b      	cmp	r3, r1
 8003526:	bf01      	itttt	eq
 8003528:	6819      	ldreq	r1, [r3, #0]
 800352a:	685b      	ldreq	r3, [r3, #4]
 800352c:	1949      	addeq	r1, r1, r5
 800352e:	6021      	streq	r1, [r4, #0]
 8003530:	e7ed      	b.n	800350e <_free_r+0x22>
 8003532:	461a      	mov	r2, r3
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	b10b      	cbz	r3, 800353c <_free_r+0x50>
 8003538:	42a3      	cmp	r3, r4
 800353a:	d9fa      	bls.n	8003532 <_free_r+0x46>
 800353c:	6811      	ldr	r1, [r2, #0]
 800353e:	1855      	adds	r5, r2, r1
 8003540:	42a5      	cmp	r5, r4
 8003542:	d10b      	bne.n	800355c <_free_r+0x70>
 8003544:	6824      	ldr	r4, [r4, #0]
 8003546:	4421      	add	r1, r4
 8003548:	1854      	adds	r4, r2, r1
 800354a:	42a3      	cmp	r3, r4
 800354c:	6011      	str	r1, [r2, #0]
 800354e:	d1e0      	bne.n	8003512 <_free_r+0x26>
 8003550:	681c      	ldr	r4, [r3, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	6053      	str	r3, [r2, #4]
 8003556:	4421      	add	r1, r4
 8003558:	6011      	str	r1, [r2, #0]
 800355a:	e7da      	b.n	8003512 <_free_r+0x26>
 800355c:	d902      	bls.n	8003564 <_free_r+0x78>
 800355e:	230c      	movs	r3, #12
 8003560:	6003      	str	r3, [r0, #0]
 8003562:	e7d6      	b.n	8003512 <_free_r+0x26>
 8003564:	6825      	ldr	r5, [r4, #0]
 8003566:	1961      	adds	r1, r4, r5
 8003568:	428b      	cmp	r3, r1
 800356a:	bf04      	itt	eq
 800356c:	6819      	ldreq	r1, [r3, #0]
 800356e:	685b      	ldreq	r3, [r3, #4]
 8003570:	6063      	str	r3, [r4, #4]
 8003572:	bf04      	itt	eq
 8003574:	1949      	addeq	r1, r1, r5
 8003576:	6021      	streq	r1, [r4, #0]
 8003578:	6054      	str	r4, [r2, #4]
 800357a:	e7ca      	b.n	8003512 <_free_r+0x26>
 800357c:	b003      	add	sp, #12
 800357e:	bd30      	pop	{r4, r5, pc}
 8003580:	2000018c 	.word	0x2000018c

08003584 <sbrk_aligned>:
 8003584:	b570      	push	{r4, r5, r6, lr}
 8003586:	4e0e      	ldr	r6, [pc, #56]	; (80035c0 <sbrk_aligned+0x3c>)
 8003588:	460c      	mov	r4, r1
 800358a:	6831      	ldr	r1, [r6, #0]
 800358c:	4605      	mov	r5, r0
 800358e:	b911      	cbnz	r1, 8003596 <sbrk_aligned+0x12>
 8003590:	f000 f91a 	bl	80037c8 <_sbrk_r>
 8003594:	6030      	str	r0, [r6, #0]
 8003596:	4621      	mov	r1, r4
 8003598:	4628      	mov	r0, r5
 800359a:	f000 f915 	bl	80037c8 <_sbrk_r>
 800359e:	1c43      	adds	r3, r0, #1
 80035a0:	d00a      	beq.n	80035b8 <sbrk_aligned+0x34>
 80035a2:	1cc4      	adds	r4, r0, #3
 80035a4:	f024 0403 	bic.w	r4, r4, #3
 80035a8:	42a0      	cmp	r0, r4
 80035aa:	d007      	beq.n	80035bc <sbrk_aligned+0x38>
 80035ac:	1a21      	subs	r1, r4, r0
 80035ae:	4628      	mov	r0, r5
 80035b0:	f000 f90a 	bl	80037c8 <_sbrk_r>
 80035b4:	3001      	adds	r0, #1
 80035b6:	d101      	bne.n	80035bc <sbrk_aligned+0x38>
 80035b8:	f04f 34ff 	mov.w	r4, #4294967295
 80035bc:	4620      	mov	r0, r4
 80035be:	bd70      	pop	{r4, r5, r6, pc}
 80035c0:	20000190 	.word	0x20000190

080035c4 <_malloc_r>:
 80035c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035c8:	1ccd      	adds	r5, r1, #3
 80035ca:	f025 0503 	bic.w	r5, r5, #3
 80035ce:	3508      	adds	r5, #8
 80035d0:	2d0c      	cmp	r5, #12
 80035d2:	bf38      	it	cc
 80035d4:	250c      	movcc	r5, #12
 80035d6:	2d00      	cmp	r5, #0
 80035d8:	4607      	mov	r7, r0
 80035da:	db01      	blt.n	80035e0 <_malloc_r+0x1c>
 80035dc:	42a9      	cmp	r1, r5
 80035de:	d905      	bls.n	80035ec <_malloc_r+0x28>
 80035e0:	230c      	movs	r3, #12
 80035e2:	603b      	str	r3, [r7, #0]
 80035e4:	2600      	movs	r6, #0
 80035e6:	4630      	mov	r0, r6
 80035e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035ec:	4e2e      	ldr	r6, [pc, #184]	; (80036a8 <_malloc_r+0xe4>)
 80035ee:	f000 fc53 	bl	8003e98 <__malloc_lock>
 80035f2:	6833      	ldr	r3, [r6, #0]
 80035f4:	461c      	mov	r4, r3
 80035f6:	bb34      	cbnz	r4, 8003646 <_malloc_r+0x82>
 80035f8:	4629      	mov	r1, r5
 80035fa:	4638      	mov	r0, r7
 80035fc:	f7ff ffc2 	bl	8003584 <sbrk_aligned>
 8003600:	1c43      	adds	r3, r0, #1
 8003602:	4604      	mov	r4, r0
 8003604:	d14d      	bne.n	80036a2 <_malloc_r+0xde>
 8003606:	6834      	ldr	r4, [r6, #0]
 8003608:	4626      	mov	r6, r4
 800360a:	2e00      	cmp	r6, #0
 800360c:	d140      	bne.n	8003690 <_malloc_r+0xcc>
 800360e:	6823      	ldr	r3, [r4, #0]
 8003610:	4631      	mov	r1, r6
 8003612:	4638      	mov	r0, r7
 8003614:	eb04 0803 	add.w	r8, r4, r3
 8003618:	f000 f8d6 	bl	80037c8 <_sbrk_r>
 800361c:	4580      	cmp	r8, r0
 800361e:	d13a      	bne.n	8003696 <_malloc_r+0xd2>
 8003620:	6821      	ldr	r1, [r4, #0]
 8003622:	3503      	adds	r5, #3
 8003624:	1a6d      	subs	r5, r5, r1
 8003626:	f025 0503 	bic.w	r5, r5, #3
 800362a:	3508      	adds	r5, #8
 800362c:	2d0c      	cmp	r5, #12
 800362e:	bf38      	it	cc
 8003630:	250c      	movcc	r5, #12
 8003632:	4629      	mov	r1, r5
 8003634:	4638      	mov	r0, r7
 8003636:	f7ff ffa5 	bl	8003584 <sbrk_aligned>
 800363a:	3001      	adds	r0, #1
 800363c:	d02b      	beq.n	8003696 <_malloc_r+0xd2>
 800363e:	6823      	ldr	r3, [r4, #0]
 8003640:	442b      	add	r3, r5
 8003642:	6023      	str	r3, [r4, #0]
 8003644:	e00e      	b.n	8003664 <_malloc_r+0xa0>
 8003646:	6822      	ldr	r2, [r4, #0]
 8003648:	1b52      	subs	r2, r2, r5
 800364a:	d41e      	bmi.n	800368a <_malloc_r+0xc6>
 800364c:	2a0b      	cmp	r2, #11
 800364e:	d916      	bls.n	800367e <_malloc_r+0xba>
 8003650:	1961      	adds	r1, r4, r5
 8003652:	42a3      	cmp	r3, r4
 8003654:	6025      	str	r5, [r4, #0]
 8003656:	bf18      	it	ne
 8003658:	6059      	strne	r1, [r3, #4]
 800365a:	6863      	ldr	r3, [r4, #4]
 800365c:	bf08      	it	eq
 800365e:	6031      	streq	r1, [r6, #0]
 8003660:	5162      	str	r2, [r4, r5]
 8003662:	604b      	str	r3, [r1, #4]
 8003664:	4638      	mov	r0, r7
 8003666:	f104 060b 	add.w	r6, r4, #11
 800366a:	f000 fc1b 	bl	8003ea4 <__malloc_unlock>
 800366e:	f026 0607 	bic.w	r6, r6, #7
 8003672:	1d23      	adds	r3, r4, #4
 8003674:	1af2      	subs	r2, r6, r3
 8003676:	d0b6      	beq.n	80035e6 <_malloc_r+0x22>
 8003678:	1b9b      	subs	r3, r3, r6
 800367a:	50a3      	str	r3, [r4, r2]
 800367c:	e7b3      	b.n	80035e6 <_malloc_r+0x22>
 800367e:	6862      	ldr	r2, [r4, #4]
 8003680:	42a3      	cmp	r3, r4
 8003682:	bf0c      	ite	eq
 8003684:	6032      	streq	r2, [r6, #0]
 8003686:	605a      	strne	r2, [r3, #4]
 8003688:	e7ec      	b.n	8003664 <_malloc_r+0xa0>
 800368a:	4623      	mov	r3, r4
 800368c:	6864      	ldr	r4, [r4, #4]
 800368e:	e7b2      	b.n	80035f6 <_malloc_r+0x32>
 8003690:	4634      	mov	r4, r6
 8003692:	6876      	ldr	r6, [r6, #4]
 8003694:	e7b9      	b.n	800360a <_malloc_r+0x46>
 8003696:	230c      	movs	r3, #12
 8003698:	603b      	str	r3, [r7, #0]
 800369a:	4638      	mov	r0, r7
 800369c:	f000 fc02 	bl	8003ea4 <__malloc_unlock>
 80036a0:	e7a1      	b.n	80035e6 <_malloc_r+0x22>
 80036a2:	6025      	str	r5, [r4, #0]
 80036a4:	e7de      	b.n	8003664 <_malloc_r+0xa0>
 80036a6:	bf00      	nop
 80036a8:	2000018c 	.word	0x2000018c

080036ac <iprintf>:
 80036ac:	b40f      	push	{r0, r1, r2, r3}
 80036ae:	4b0a      	ldr	r3, [pc, #40]	; (80036d8 <iprintf+0x2c>)
 80036b0:	b513      	push	{r0, r1, r4, lr}
 80036b2:	681c      	ldr	r4, [r3, #0]
 80036b4:	b124      	cbz	r4, 80036c0 <iprintf+0x14>
 80036b6:	69a3      	ldr	r3, [r4, #24]
 80036b8:	b913      	cbnz	r3, 80036c0 <iprintf+0x14>
 80036ba:	4620      	mov	r0, r4
 80036bc:	f000 fad4 	bl	8003c68 <__sinit>
 80036c0:	ab05      	add	r3, sp, #20
 80036c2:	9a04      	ldr	r2, [sp, #16]
 80036c4:	68a1      	ldr	r1, [r4, #8]
 80036c6:	9301      	str	r3, [sp, #4]
 80036c8:	4620      	mov	r0, r4
 80036ca:	f000 fc1b 	bl	8003f04 <_vfiprintf_r>
 80036ce:	b002      	add	sp, #8
 80036d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036d4:	b004      	add	sp, #16
 80036d6:	4770      	bx	lr
 80036d8:	20000060 	.word	0x20000060

080036dc <_puts_r>:
 80036dc:	b570      	push	{r4, r5, r6, lr}
 80036de:	460e      	mov	r6, r1
 80036e0:	4605      	mov	r5, r0
 80036e2:	b118      	cbz	r0, 80036ec <_puts_r+0x10>
 80036e4:	6983      	ldr	r3, [r0, #24]
 80036e6:	b90b      	cbnz	r3, 80036ec <_puts_r+0x10>
 80036e8:	f000 fabe 	bl	8003c68 <__sinit>
 80036ec:	69ab      	ldr	r3, [r5, #24]
 80036ee:	68ac      	ldr	r4, [r5, #8]
 80036f0:	b913      	cbnz	r3, 80036f8 <_puts_r+0x1c>
 80036f2:	4628      	mov	r0, r5
 80036f4:	f000 fab8 	bl	8003c68 <__sinit>
 80036f8:	4b2c      	ldr	r3, [pc, #176]	; (80037ac <_puts_r+0xd0>)
 80036fa:	429c      	cmp	r4, r3
 80036fc:	d120      	bne.n	8003740 <_puts_r+0x64>
 80036fe:	686c      	ldr	r4, [r5, #4]
 8003700:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003702:	07db      	lsls	r3, r3, #31
 8003704:	d405      	bmi.n	8003712 <_puts_r+0x36>
 8003706:	89a3      	ldrh	r3, [r4, #12]
 8003708:	0598      	lsls	r0, r3, #22
 800370a:	d402      	bmi.n	8003712 <_puts_r+0x36>
 800370c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800370e:	f000 fb49 	bl	8003da4 <__retarget_lock_acquire_recursive>
 8003712:	89a3      	ldrh	r3, [r4, #12]
 8003714:	0719      	lsls	r1, r3, #28
 8003716:	d51d      	bpl.n	8003754 <_puts_r+0x78>
 8003718:	6923      	ldr	r3, [r4, #16]
 800371a:	b1db      	cbz	r3, 8003754 <_puts_r+0x78>
 800371c:	3e01      	subs	r6, #1
 800371e:	68a3      	ldr	r3, [r4, #8]
 8003720:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003724:	3b01      	subs	r3, #1
 8003726:	60a3      	str	r3, [r4, #8]
 8003728:	bb39      	cbnz	r1, 800377a <_puts_r+0x9e>
 800372a:	2b00      	cmp	r3, #0
 800372c:	da38      	bge.n	80037a0 <_puts_r+0xc4>
 800372e:	4622      	mov	r2, r4
 8003730:	210a      	movs	r1, #10
 8003732:	4628      	mov	r0, r5
 8003734:	f000 f89c 	bl	8003870 <__swbuf_r>
 8003738:	3001      	adds	r0, #1
 800373a:	d011      	beq.n	8003760 <_puts_r+0x84>
 800373c:	250a      	movs	r5, #10
 800373e:	e011      	b.n	8003764 <_puts_r+0x88>
 8003740:	4b1b      	ldr	r3, [pc, #108]	; (80037b0 <_puts_r+0xd4>)
 8003742:	429c      	cmp	r4, r3
 8003744:	d101      	bne.n	800374a <_puts_r+0x6e>
 8003746:	68ac      	ldr	r4, [r5, #8]
 8003748:	e7da      	b.n	8003700 <_puts_r+0x24>
 800374a:	4b1a      	ldr	r3, [pc, #104]	; (80037b4 <_puts_r+0xd8>)
 800374c:	429c      	cmp	r4, r3
 800374e:	bf08      	it	eq
 8003750:	68ec      	ldreq	r4, [r5, #12]
 8003752:	e7d5      	b.n	8003700 <_puts_r+0x24>
 8003754:	4621      	mov	r1, r4
 8003756:	4628      	mov	r0, r5
 8003758:	f000 f8ee 	bl	8003938 <__swsetup_r>
 800375c:	2800      	cmp	r0, #0
 800375e:	d0dd      	beq.n	800371c <_puts_r+0x40>
 8003760:	f04f 35ff 	mov.w	r5, #4294967295
 8003764:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003766:	07da      	lsls	r2, r3, #31
 8003768:	d405      	bmi.n	8003776 <_puts_r+0x9a>
 800376a:	89a3      	ldrh	r3, [r4, #12]
 800376c:	059b      	lsls	r3, r3, #22
 800376e:	d402      	bmi.n	8003776 <_puts_r+0x9a>
 8003770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003772:	f000 fb18 	bl	8003da6 <__retarget_lock_release_recursive>
 8003776:	4628      	mov	r0, r5
 8003778:	bd70      	pop	{r4, r5, r6, pc}
 800377a:	2b00      	cmp	r3, #0
 800377c:	da04      	bge.n	8003788 <_puts_r+0xac>
 800377e:	69a2      	ldr	r2, [r4, #24]
 8003780:	429a      	cmp	r2, r3
 8003782:	dc06      	bgt.n	8003792 <_puts_r+0xb6>
 8003784:	290a      	cmp	r1, #10
 8003786:	d004      	beq.n	8003792 <_puts_r+0xb6>
 8003788:	6823      	ldr	r3, [r4, #0]
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	6022      	str	r2, [r4, #0]
 800378e:	7019      	strb	r1, [r3, #0]
 8003790:	e7c5      	b.n	800371e <_puts_r+0x42>
 8003792:	4622      	mov	r2, r4
 8003794:	4628      	mov	r0, r5
 8003796:	f000 f86b 	bl	8003870 <__swbuf_r>
 800379a:	3001      	adds	r0, #1
 800379c:	d1bf      	bne.n	800371e <_puts_r+0x42>
 800379e:	e7df      	b.n	8003760 <_puts_r+0x84>
 80037a0:	6823      	ldr	r3, [r4, #0]
 80037a2:	250a      	movs	r5, #10
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	6022      	str	r2, [r4, #0]
 80037a8:	701d      	strb	r5, [r3, #0]
 80037aa:	e7db      	b.n	8003764 <_puts_r+0x88>
 80037ac:	08004644 	.word	0x08004644
 80037b0:	08004664 	.word	0x08004664
 80037b4:	08004624 	.word	0x08004624

080037b8 <puts>:
 80037b8:	4b02      	ldr	r3, [pc, #8]	; (80037c4 <puts+0xc>)
 80037ba:	4601      	mov	r1, r0
 80037bc:	6818      	ldr	r0, [r3, #0]
 80037be:	f7ff bf8d 	b.w	80036dc <_puts_r>
 80037c2:	bf00      	nop
 80037c4:	20000060 	.word	0x20000060

080037c8 <_sbrk_r>:
 80037c8:	b538      	push	{r3, r4, r5, lr}
 80037ca:	4d06      	ldr	r5, [pc, #24]	; (80037e4 <_sbrk_r+0x1c>)
 80037cc:	2300      	movs	r3, #0
 80037ce:	4604      	mov	r4, r0
 80037d0:	4608      	mov	r0, r1
 80037d2:	602b      	str	r3, [r5, #0]
 80037d4:	f7fd fb28 	bl	8000e28 <_sbrk>
 80037d8:	1c43      	adds	r3, r0, #1
 80037da:	d102      	bne.n	80037e2 <_sbrk_r+0x1a>
 80037dc:	682b      	ldr	r3, [r5, #0]
 80037de:	b103      	cbz	r3, 80037e2 <_sbrk_r+0x1a>
 80037e0:	6023      	str	r3, [r4, #0]
 80037e2:	bd38      	pop	{r3, r4, r5, pc}
 80037e4:	20000198 	.word	0x20000198

080037e8 <__sread>:
 80037e8:	b510      	push	{r4, lr}
 80037ea:	460c      	mov	r4, r1
 80037ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037f0:	f000 fe4c 	bl	800448c <_read_r>
 80037f4:	2800      	cmp	r0, #0
 80037f6:	bfab      	itete	ge
 80037f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80037fa:	89a3      	ldrhlt	r3, [r4, #12]
 80037fc:	181b      	addge	r3, r3, r0
 80037fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003802:	bfac      	ite	ge
 8003804:	6563      	strge	r3, [r4, #84]	; 0x54
 8003806:	81a3      	strhlt	r3, [r4, #12]
 8003808:	bd10      	pop	{r4, pc}

0800380a <__swrite>:
 800380a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800380e:	461f      	mov	r7, r3
 8003810:	898b      	ldrh	r3, [r1, #12]
 8003812:	05db      	lsls	r3, r3, #23
 8003814:	4605      	mov	r5, r0
 8003816:	460c      	mov	r4, r1
 8003818:	4616      	mov	r6, r2
 800381a:	d505      	bpl.n	8003828 <__swrite+0x1e>
 800381c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003820:	2302      	movs	r3, #2
 8003822:	2200      	movs	r2, #0
 8003824:	f000 fac0 	bl	8003da8 <_lseek_r>
 8003828:	89a3      	ldrh	r3, [r4, #12]
 800382a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800382e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003832:	81a3      	strh	r3, [r4, #12]
 8003834:	4632      	mov	r2, r6
 8003836:	463b      	mov	r3, r7
 8003838:	4628      	mov	r0, r5
 800383a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800383e:	f000 b869 	b.w	8003914 <_write_r>

08003842 <__sseek>:
 8003842:	b510      	push	{r4, lr}
 8003844:	460c      	mov	r4, r1
 8003846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800384a:	f000 faad 	bl	8003da8 <_lseek_r>
 800384e:	1c43      	adds	r3, r0, #1
 8003850:	89a3      	ldrh	r3, [r4, #12]
 8003852:	bf15      	itete	ne
 8003854:	6560      	strne	r0, [r4, #84]	; 0x54
 8003856:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800385a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800385e:	81a3      	strheq	r3, [r4, #12]
 8003860:	bf18      	it	ne
 8003862:	81a3      	strhne	r3, [r4, #12]
 8003864:	bd10      	pop	{r4, pc}

08003866 <__sclose>:
 8003866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800386a:	f000 b8d3 	b.w	8003a14 <_close_r>
	...

08003870 <__swbuf_r>:
 8003870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003872:	460e      	mov	r6, r1
 8003874:	4614      	mov	r4, r2
 8003876:	4605      	mov	r5, r0
 8003878:	b118      	cbz	r0, 8003882 <__swbuf_r+0x12>
 800387a:	6983      	ldr	r3, [r0, #24]
 800387c:	b90b      	cbnz	r3, 8003882 <__swbuf_r+0x12>
 800387e:	f000 f9f3 	bl	8003c68 <__sinit>
 8003882:	4b21      	ldr	r3, [pc, #132]	; (8003908 <__swbuf_r+0x98>)
 8003884:	429c      	cmp	r4, r3
 8003886:	d12b      	bne.n	80038e0 <__swbuf_r+0x70>
 8003888:	686c      	ldr	r4, [r5, #4]
 800388a:	69a3      	ldr	r3, [r4, #24]
 800388c:	60a3      	str	r3, [r4, #8]
 800388e:	89a3      	ldrh	r3, [r4, #12]
 8003890:	071a      	lsls	r2, r3, #28
 8003892:	d52f      	bpl.n	80038f4 <__swbuf_r+0x84>
 8003894:	6923      	ldr	r3, [r4, #16]
 8003896:	b36b      	cbz	r3, 80038f4 <__swbuf_r+0x84>
 8003898:	6923      	ldr	r3, [r4, #16]
 800389a:	6820      	ldr	r0, [r4, #0]
 800389c:	1ac0      	subs	r0, r0, r3
 800389e:	6963      	ldr	r3, [r4, #20]
 80038a0:	b2f6      	uxtb	r6, r6
 80038a2:	4283      	cmp	r3, r0
 80038a4:	4637      	mov	r7, r6
 80038a6:	dc04      	bgt.n	80038b2 <__swbuf_r+0x42>
 80038a8:	4621      	mov	r1, r4
 80038aa:	4628      	mov	r0, r5
 80038ac:	f000 f948 	bl	8003b40 <_fflush_r>
 80038b0:	bb30      	cbnz	r0, 8003900 <__swbuf_r+0x90>
 80038b2:	68a3      	ldr	r3, [r4, #8]
 80038b4:	3b01      	subs	r3, #1
 80038b6:	60a3      	str	r3, [r4, #8]
 80038b8:	6823      	ldr	r3, [r4, #0]
 80038ba:	1c5a      	adds	r2, r3, #1
 80038bc:	6022      	str	r2, [r4, #0]
 80038be:	701e      	strb	r6, [r3, #0]
 80038c0:	6963      	ldr	r3, [r4, #20]
 80038c2:	3001      	adds	r0, #1
 80038c4:	4283      	cmp	r3, r0
 80038c6:	d004      	beq.n	80038d2 <__swbuf_r+0x62>
 80038c8:	89a3      	ldrh	r3, [r4, #12]
 80038ca:	07db      	lsls	r3, r3, #31
 80038cc:	d506      	bpl.n	80038dc <__swbuf_r+0x6c>
 80038ce:	2e0a      	cmp	r6, #10
 80038d0:	d104      	bne.n	80038dc <__swbuf_r+0x6c>
 80038d2:	4621      	mov	r1, r4
 80038d4:	4628      	mov	r0, r5
 80038d6:	f000 f933 	bl	8003b40 <_fflush_r>
 80038da:	b988      	cbnz	r0, 8003900 <__swbuf_r+0x90>
 80038dc:	4638      	mov	r0, r7
 80038de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038e0:	4b0a      	ldr	r3, [pc, #40]	; (800390c <__swbuf_r+0x9c>)
 80038e2:	429c      	cmp	r4, r3
 80038e4:	d101      	bne.n	80038ea <__swbuf_r+0x7a>
 80038e6:	68ac      	ldr	r4, [r5, #8]
 80038e8:	e7cf      	b.n	800388a <__swbuf_r+0x1a>
 80038ea:	4b09      	ldr	r3, [pc, #36]	; (8003910 <__swbuf_r+0xa0>)
 80038ec:	429c      	cmp	r4, r3
 80038ee:	bf08      	it	eq
 80038f0:	68ec      	ldreq	r4, [r5, #12]
 80038f2:	e7ca      	b.n	800388a <__swbuf_r+0x1a>
 80038f4:	4621      	mov	r1, r4
 80038f6:	4628      	mov	r0, r5
 80038f8:	f000 f81e 	bl	8003938 <__swsetup_r>
 80038fc:	2800      	cmp	r0, #0
 80038fe:	d0cb      	beq.n	8003898 <__swbuf_r+0x28>
 8003900:	f04f 37ff 	mov.w	r7, #4294967295
 8003904:	e7ea      	b.n	80038dc <__swbuf_r+0x6c>
 8003906:	bf00      	nop
 8003908:	08004644 	.word	0x08004644
 800390c:	08004664 	.word	0x08004664
 8003910:	08004624 	.word	0x08004624

08003914 <_write_r>:
 8003914:	b538      	push	{r3, r4, r5, lr}
 8003916:	4d07      	ldr	r5, [pc, #28]	; (8003934 <_write_r+0x20>)
 8003918:	4604      	mov	r4, r0
 800391a:	4608      	mov	r0, r1
 800391c:	4611      	mov	r1, r2
 800391e:	2200      	movs	r2, #0
 8003920:	602a      	str	r2, [r5, #0]
 8003922:	461a      	mov	r2, r3
 8003924:	f7fc fe36 	bl	8000594 <_write>
 8003928:	1c43      	adds	r3, r0, #1
 800392a:	d102      	bne.n	8003932 <_write_r+0x1e>
 800392c:	682b      	ldr	r3, [r5, #0]
 800392e:	b103      	cbz	r3, 8003932 <_write_r+0x1e>
 8003930:	6023      	str	r3, [r4, #0]
 8003932:	bd38      	pop	{r3, r4, r5, pc}
 8003934:	20000198 	.word	0x20000198

08003938 <__swsetup_r>:
 8003938:	4b32      	ldr	r3, [pc, #200]	; (8003a04 <__swsetup_r+0xcc>)
 800393a:	b570      	push	{r4, r5, r6, lr}
 800393c:	681d      	ldr	r5, [r3, #0]
 800393e:	4606      	mov	r6, r0
 8003940:	460c      	mov	r4, r1
 8003942:	b125      	cbz	r5, 800394e <__swsetup_r+0x16>
 8003944:	69ab      	ldr	r3, [r5, #24]
 8003946:	b913      	cbnz	r3, 800394e <__swsetup_r+0x16>
 8003948:	4628      	mov	r0, r5
 800394a:	f000 f98d 	bl	8003c68 <__sinit>
 800394e:	4b2e      	ldr	r3, [pc, #184]	; (8003a08 <__swsetup_r+0xd0>)
 8003950:	429c      	cmp	r4, r3
 8003952:	d10f      	bne.n	8003974 <__swsetup_r+0x3c>
 8003954:	686c      	ldr	r4, [r5, #4]
 8003956:	89a3      	ldrh	r3, [r4, #12]
 8003958:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800395c:	0719      	lsls	r1, r3, #28
 800395e:	d42c      	bmi.n	80039ba <__swsetup_r+0x82>
 8003960:	06dd      	lsls	r5, r3, #27
 8003962:	d411      	bmi.n	8003988 <__swsetup_r+0x50>
 8003964:	2309      	movs	r3, #9
 8003966:	6033      	str	r3, [r6, #0]
 8003968:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800396c:	81a3      	strh	r3, [r4, #12]
 800396e:	f04f 30ff 	mov.w	r0, #4294967295
 8003972:	e03e      	b.n	80039f2 <__swsetup_r+0xba>
 8003974:	4b25      	ldr	r3, [pc, #148]	; (8003a0c <__swsetup_r+0xd4>)
 8003976:	429c      	cmp	r4, r3
 8003978:	d101      	bne.n	800397e <__swsetup_r+0x46>
 800397a:	68ac      	ldr	r4, [r5, #8]
 800397c:	e7eb      	b.n	8003956 <__swsetup_r+0x1e>
 800397e:	4b24      	ldr	r3, [pc, #144]	; (8003a10 <__swsetup_r+0xd8>)
 8003980:	429c      	cmp	r4, r3
 8003982:	bf08      	it	eq
 8003984:	68ec      	ldreq	r4, [r5, #12]
 8003986:	e7e6      	b.n	8003956 <__swsetup_r+0x1e>
 8003988:	0758      	lsls	r0, r3, #29
 800398a:	d512      	bpl.n	80039b2 <__swsetup_r+0x7a>
 800398c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800398e:	b141      	cbz	r1, 80039a2 <__swsetup_r+0x6a>
 8003990:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003994:	4299      	cmp	r1, r3
 8003996:	d002      	beq.n	800399e <__swsetup_r+0x66>
 8003998:	4630      	mov	r0, r6
 800399a:	f7ff fda7 	bl	80034ec <_free_r>
 800399e:	2300      	movs	r3, #0
 80039a0:	6363      	str	r3, [r4, #52]	; 0x34
 80039a2:	89a3      	ldrh	r3, [r4, #12]
 80039a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80039a8:	81a3      	strh	r3, [r4, #12]
 80039aa:	2300      	movs	r3, #0
 80039ac:	6063      	str	r3, [r4, #4]
 80039ae:	6923      	ldr	r3, [r4, #16]
 80039b0:	6023      	str	r3, [r4, #0]
 80039b2:	89a3      	ldrh	r3, [r4, #12]
 80039b4:	f043 0308 	orr.w	r3, r3, #8
 80039b8:	81a3      	strh	r3, [r4, #12]
 80039ba:	6923      	ldr	r3, [r4, #16]
 80039bc:	b94b      	cbnz	r3, 80039d2 <__swsetup_r+0x9a>
 80039be:	89a3      	ldrh	r3, [r4, #12]
 80039c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80039c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039c8:	d003      	beq.n	80039d2 <__swsetup_r+0x9a>
 80039ca:	4621      	mov	r1, r4
 80039cc:	4630      	mov	r0, r6
 80039ce:	f000 fa23 	bl	8003e18 <__smakebuf_r>
 80039d2:	89a0      	ldrh	r0, [r4, #12]
 80039d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80039d8:	f010 0301 	ands.w	r3, r0, #1
 80039dc:	d00a      	beq.n	80039f4 <__swsetup_r+0xbc>
 80039de:	2300      	movs	r3, #0
 80039e0:	60a3      	str	r3, [r4, #8]
 80039e2:	6963      	ldr	r3, [r4, #20]
 80039e4:	425b      	negs	r3, r3
 80039e6:	61a3      	str	r3, [r4, #24]
 80039e8:	6923      	ldr	r3, [r4, #16]
 80039ea:	b943      	cbnz	r3, 80039fe <__swsetup_r+0xc6>
 80039ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80039f0:	d1ba      	bne.n	8003968 <__swsetup_r+0x30>
 80039f2:	bd70      	pop	{r4, r5, r6, pc}
 80039f4:	0781      	lsls	r1, r0, #30
 80039f6:	bf58      	it	pl
 80039f8:	6963      	ldrpl	r3, [r4, #20]
 80039fa:	60a3      	str	r3, [r4, #8]
 80039fc:	e7f4      	b.n	80039e8 <__swsetup_r+0xb0>
 80039fe:	2000      	movs	r0, #0
 8003a00:	e7f7      	b.n	80039f2 <__swsetup_r+0xba>
 8003a02:	bf00      	nop
 8003a04:	20000060 	.word	0x20000060
 8003a08:	08004644 	.word	0x08004644
 8003a0c:	08004664 	.word	0x08004664
 8003a10:	08004624 	.word	0x08004624

08003a14 <_close_r>:
 8003a14:	b538      	push	{r3, r4, r5, lr}
 8003a16:	4d06      	ldr	r5, [pc, #24]	; (8003a30 <_close_r+0x1c>)
 8003a18:	2300      	movs	r3, #0
 8003a1a:	4604      	mov	r4, r0
 8003a1c:	4608      	mov	r0, r1
 8003a1e:	602b      	str	r3, [r5, #0]
 8003a20:	f7fd f9cd 	bl	8000dbe <_close>
 8003a24:	1c43      	adds	r3, r0, #1
 8003a26:	d102      	bne.n	8003a2e <_close_r+0x1a>
 8003a28:	682b      	ldr	r3, [r5, #0]
 8003a2a:	b103      	cbz	r3, 8003a2e <_close_r+0x1a>
 8003a2c:	6023      	str	r3, [r4, #0]
 8003a2e:	bd38      	pop	{r3, r4, r5, pc}
 8003a30:	20000198 	.word	0x20000198

08003a34 <__sflush_r>:
 8003a34:	898a      	ldrh	r2, [r1, #12]
 8003a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a3a:	4605      	mov	r5, r0
 8003a3c:	0710      	lsls	r0, r2, #28
 8003a3e:	460c      	mov	r4, r1
 8003a40:	d458      	bmi.n	8003af4 <__sflush_r+0xc0>
 8003a42:	684b      	ldr	r3, [r1, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	dc05      	bgt.n	8003a54 <__sflush_r+0x20>
 8003a48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	dc02      	bgt.n	8003a54 <__sflush_r+0x20>
 8003a4e:	2000      	movs	r0, #0
 8003a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a56:	2e00      	cmp	r6, #0
 8003a58:	d0f9      	beq.n	8003a4e <__sflush_r+0x1a>
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003a60:	682f      	ldr	r7, [r5, #0]
 8003a62:	602b      	str	r3, [r5, #0]
 8003a64:	d032      	beq.n	8003acc <__sflush_r+0x98>
 8003a66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003a68:	89a3      	ldrh	r3, [r4, #12]
 8003a6a:	075a      	lsls	r2, r3, #29
 8003a6c:	d505      	bpl.n	8003a7a <__sflush_r+0x46>
 8003a6e:	6863      	ldr	r3, [r4, #4]
 8003a70:	1ac0      	subs	r0, r0, r3
 8003a72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a74:	b10b      	cbz	r3, 8003a7a <__sflush_r+0x46>
 8003a76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a78:	1ac0      	subs	r0, r0, r3
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a80:	6a21      	ldr	r1, [r4, #32]
 8003a82:	4628      	mov	r0, r5
 8003a84:	47b0      	blx	r6
 8003a86:	1c43      	adds	r3, r0, #1
 8003a88:	89a3      	ldrh	r3, [r4, #12]
 8003a8a:	d106      	bne.n	8003a9a <__sflush_r+0x66>
 8003a8c:	6829      	ldr	r1, [r5, #0]
 8003a8e:	291d      	cmp	r1, #29
 8003a90:	d82c      	bhi.n	8003aec <__sflush_r+0xb8>
 8003a92:	4a2a      	ldr	r2, [pc, #168]	; (8003b3c <__sflush_r+0x108>)
 8003a94:	40ca      	lsrs	r2, r1
 8003a96:	07d6      	lsls	r6, r2, #31
 8003a98:	d528      	bpl.n	8003aec <__sflush_r+0xb8>
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	6062      	str	r2, [r4, #4]
 8003a9e:	04d9      	lsls	r1, r3, #19
 8003aa0:	6922      	ldr	r2, [r4, #16]
 8003aa2:	6022      	str	r2, [r4, #0]
 8003aa4:	d504      	bpl.n	8003ab0 <__sflush_r+0x7c>
 8003aa6:	1c42      	adds	r2, r0, #1
 8003aa8:	d101      	bne.n	8003aae <__sflush_r+0x7a>
 8003aaa:	682b      	ldr	r3, [r5, #0]
 8003aac:	b903      	cbnz	r3, 8003ab0 <__sflush_r+0x7c>
 8003aae:	6560      	str	r0, [r4, #84]	; 0x54
 8003ab0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ab2:	602f      	str	r7, [r5, #0]
 8003ab4:	2900      	cmp	r1, #0
 8003ab6:	d0ca      	beq.n	8003a4e <__sflush_r+0x1a>
 8003ab8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003abc:	4299      	cmp	r1, r3
 8003abe:	d002      	beq.n	8003ac6 <__sflush_r+0x92>
 8003ac0:	4628      	mov	r0, r5
 8003ac2:	f7ff fd13 	bl	80034ec <_free_r>
 8003ac6:	2000      	movs	r0, #0
 8003ac8:	6360      	str	r0, [r4, #52]	; 0x34
 8003aca:	e7c1      	b.n	8003a50 <__sflush_r+0x1c>
 8003acc:	6a21      	ldr	r1, [r4, #32]
 8003ace:	2301      	movs	r3, #1
 8003ad0:	4628      	mov	r0, r5
 8003ad2:	47b0      	blx	r6
 8003ad4:	1c41      	adds	r1, r0, #1
 8003ad6:	d1c7      	bne.n	8003a68 <__sflush_r+0x34>
 8003ad8:	682b      	ldr	r3, [r5, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0c4      	beq.n	8003a68 <__sflush_r+0x34>
 8003ade:	2b1d      	cmp	r3, #29
 8003ae0:	d001      	beq.n	8003ae6 <__sflush_r+0xb2>
 8003ae2:	2b16      	cmp	r3, #22
 8003ae4:	d101      	bne.n	8003aea <__sflush_r+0xb6>
 8003ae6:	602f      	str	r7, [r5, #0]
 8003ae8:	e7b1      	b.n	8003a4e <__sflush_r+0x1a>
 8003aea:	89a3      	ldrh	r3, [r4, #12]
 8003aec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003af0:	81a3      	strh	r3, [r4, #12]
 8003af2:	e7ad      	b.n	8003a50 <__sflush_r+0x1c>
 8003af4:	690f      	ldr	r7, [r1, #16]
 8003af6:	2f00      	cmp	r7, #0
 8003af8:	d0a9      	beq.n	8003a4e <__sflush_r+0x1a>
 8003afa:	0793      	lsls	r3, r2, #30
 8003afc:	680e      	ldr	r6, [r1, #0]
 8003afe:	bf08      	it	eq
 8003b00:	694b      	ldreq	r3, [r1, #20]
 8003b02:	600f      	str	r7, [r1, #0]
 8003b04:	bf18      	it	ne
 8003b06:	2300      	movne	r3, #0
 8003b08:	eba6 0807 	sub.w	r8, r6, r7
 8003b0c:	608b      	str	r3, [r1, #8]
 8003b0e:	f1b8 0f00 	cmp.w	r8, #0
 8003b12:	dd9c      	ble.n	8003a4e <__sflush_r+0x1a>
 8003b14:	6a21      	ldr	r1, [r4, #32]
 8003b16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003b18:	4643      	mov	r3, r8
 8003b1a:	463a      	mov	r2, r7
 8003b1c:	4628      	mov	r0, r5
 8003b1e:	47b0      	blx	r6
 8003b20:	2800      	cmp	r0, #0
 8003b22:	dc06      	bgt.n	8003b32 <__sflush_r+0xfe>
 8003b24:	89a3      	ldrh	r3, [r4, #12]
 8003b26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b2a:	81a3      	strh	r3, [r4, #12]
 8003b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b30:	e78e      	b.n	8003a50 <__sflush_r+0x1c>
 8003b32:	4407      	add	r7, r0
 8003b34:	eba8 0800 	sub.w	r8, r8, r0
 8003b38:	e7e9      	b.n	8003b0e <__sflush_r+0xda>
 8003b3a:	bf00      	nop
 8003b3c:	20400001 	.word	0x20400001

08003b40 <_fflush_r>:
 8003b40:	b538      	push	{r3, r4, r5, lr}
 8003b42:	690b      	ldr	r3, [r1, #16]
 8003b44:	4605      	mov	r5, r0
 8003b46:	460c      	mov	r4, r1
 8003b48:	b913      	cbnz	r3, 8003b50 <_fflush_r+0x10>
 8003b4a:	2500      	movs	r5, #0
 8003b4c:	4628      	mov	r0, r5
 8003b4e:	bd38      	pop	{r3, r4, r5, pc}
 8003b50:	b118      	cbz	r0, 8003b5a <_fflush_r+0x1a>
 8003b52:	6983      	ldr	r3, [r0, #24]
 8003b54:	b90b      	cbnz	r3, 8003b5a <_fflush_r+0x1a>
 8003b56:	f000 f887 	bl	8003c68 <__sinit>
 8003b5a:	4b14      	ldr	r3, [pc, #80]	; (8003bac <_fflush_r+0x6c>)
 8003b5c:	429c      	cmp	r4, r3
 8003b5e:	d11b      	bne.n	8003b98 <_fflush_r+0x58>
 8003b60:	686c      	ldr	r4, [r5, #4]
 8003b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0ef      	beq.n	8003b4a <_fflush_r+0xa>
 8003b6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003b6c:	07d0      	lsls	r0, r2, #31
 8003b6e:	d404      	bmi.n	8003b7a <_fflush_r+0x3a>
 8003b70:	0599      	lsls	r1, r3, #22
 8003b72:	d402      	bmi.n	8003b7a <_fflush_r+0x3a>
 8003b74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b76:	f000 f915 	bl	8003da4 <__retarget_lock_acquire_recursive>
 8003b7a:	4628      	mov	r0, r5
 8003b7c:	4621      	mov	r1, r4
 8003b7e:	f7ff ff59 	bl	8003a34 <__sflush_r>
 8003b82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b84:	07da      	lsls	r2, r3, #31
 8003b86:	4605      	mov	r5, r0
 8003b88:	d4e0      	bmi.n	8003b4c <_fflush_r+0xc>
 8003b8a:	89a3      	ldrh	r3, [r4, #12]
 8003b8c:	059b      	lsls	r3, r3, #22
 8003b8e:	d4dd      	bmi.n	8003b4c <_fflush_r+0xc>
 8003b90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b92:	f000 f908 	bl	8003da6 <__retarget_lock_release_recursive>
 8003b96:	e7d9      	b.n	8003b4c <_fflush_r+0xc>
 8003b98:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <_fflush_r+0x70>)
 8003b9a:	429c      	cmp	r4, r3
 8003b9c:	d101      	bne.n	8003ba2 <_fflush_r+0x62>
 8003b9e:	68ac      	ldr	r4, [r5, #8]
 8003ba0:	e7df      	b.n	8003b62 <_fflush_r+0x22>
 8003ba2:	4b04      	ldr	r3, [pc, #16]	; (8003bb4 <_fflush_r+0x74>)
 8003ba4:	429c      	cmp	r4, r3
 8003ba6:	bf08      	it	eq
 8003ba8:	68ec      	ldreq	r4, [r5, #12]
 8003baa:	e7da      	b.n	8003b62 <_fflush_r+0x22>
 8003bac:	08004644 	.word	0x08004644
 8003bb0:	08004664 	.word	0x08004664
 8003bb4:	08004624 	.word	0x08004624

08003bb8 <std>:
 8003bb8:	2300      	movs	r3, #0
 8003bba:	b510      	push	{r4, lr}
 8003bbc:	4604      	mov	r4, r0
 8003bbe:	e9c0 3300 	strd	r3, r3, [r0]
 8003bc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003bc6:	6083      	str	r3, [r0, #8]
 8003bc8:	8181      	strh	r1, [r0, #12]
 8003bca:	6643      	str	r3, [r0, #100]	; 0x64
 8003bcc:	81c2      	strh	r2, [r0, #14]
 8003bce:	6183      	str	r3, [r0, #24]
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	2208      	movs	r2, #8
 8003bd4:	305c      	adds	r0, #92	; 0x5c
 8003bd6:	f7ff fc81 	bl	80034dc <memset>
 8003bda:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <std+0x38>)
 8003bdc:	6263      	str	r3, [r4, #36]	; 0x24
 8003bde:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <std+0x3c>)
 8003be0:	62a3      	str	r3, [r4, #40]	; 0x28
 8003be2:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <std+0x40>)
 8003be4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003be6:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <std+0x44>)
 8003be8:	6224      	str	r4, [r4, #32]
 8003bea:	6323      	str	r3, [r4, #48]	; 0x30
 8003bec:	bd10      	pop	{r4, pc}
 8003bee:	bf00      	nop
 8003bf0:	080037e9 	.word	0x080037e9
 8003bf4:	0800380b 	.word	0x0800380b
 8003bf8:	08003843 	.word	0x08003843
 8003bfc:	08003867 	.word	0x08003867

08003c00 <_cleanup_r>:
 8003c00:	4901      	ldr	r1, [pc, #4]	; (8003c08 <_cleanup_r+0x8>)
 8003c02:	f000 b8af 	b.w	8003d64 <_fwalk_reent>
 8003c06:	bf00      	nop
 8003c08:	08003b41 	.word	0x08003b41

08003c0c <__sfmoreglue>:
 8003c0c:	b570      	push	{r4, r5, r6, lr}
 8003c0e:	2268      	movs	r2, #104	; 0x68
 8003c10:	1e4d      	subs	r5, r1, #1
 8003c12:	4355      	muls	r5, r2
 8003c14:	460e      	mov	r6, r1
 8003c16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003c1a:	f7ff fcd3 	bl	80035c4 <_malloc_r>
 8003c1e:	4604      	mov	r4, r0
 8003c20:	b140      	cbz	r0, 8003c34 <__sfmoreglue+0x28>
 8003c22:	2100      	movs	r1, #0
 8003c24:	e9c0 1600 	strd	r1, r6, [r0]
 8003c28:	300c      	adds	r0, #12
 8003c2a:	60a0      	str	r0, [r4, #8]
 8003c2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003c30:	f7ff fc54 	bl	80034dc <memset>
 8003c34:	4620      	mov	r0, r4
 8003c36:	bd70      	pop	{r4, r5, r6, pc}

08003c38 <__sfp_lock_acquire>:
 8003c38:	4801      	ldr	r0, [pc, #4]	; (8003c40 <__sfp_lock_acquire+0x8>)
 8003c3a:	f000 b8b3 	b.w	8003da4 <__retarget_lock_acquire_recursive>
 8003c3e:	bf00      	nop
 8003c40:	20000195 	.word	0x20000195

08003c44 <__sfp_lock_release>:
 8003c44:	4801      	ldr	r0, [pc, #4]	; (8003c4c <__sfp_lock_release+0x8>)
 8003c46:	f000 b8ae 	b.w	8003da6 <__retarget_lock_release_recursive>
 8003c4a:	bf00      	nop
 8003c4c:	20000195 	.word	0x20000195

08003c50 <__sinit_lock_acquire>:
 8003c50:	4801      	ldr	r0, [pc, #4]	; (8003c58 <__sinit_lock_acquire+0x8>)
 8003c52:	f000 b8a7 	b.w	8003da4 <__retarget_lock_acquire_recursive>
 8003c56:	bf00      	nop
 8003c58:	20000196 	.word	0x20000196

08003c5c <__sinit_lock_release>:
 8003c5c:	4801      	ldr	r0, [pc, #4]	; (8003c64 <__sinit_lock_release+0x8>)
 8003c5e:	f000 b8a2 	b.w	8003da6 <__retarget_lock_release_recursive>
 8003c62:	bf00      	nop
 8003c64:	20000196 	.word	0x20000196

08003c68 <__sinit>:
 8003c68:	b510      	push	{r4, lr}
 8003c6a:	4604      	mov	r4, r0
 8003c6c:	f7ff fff0 	bl	8003c50 <__sinit_lock_acquire>
 8003c70:	69a3      	ldr	r3, [r4, #24]
 8003c72:	b11b      	cbz	r3, 8003c7c <__sinit+0x14>
 8003c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c78:	f7ff bff0 	b.w	8003c5c <__sinit_lock_release>
 8003c7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003c80:	6523      	str	r3, [r4, #80]	; 0x50
 8003c82:	4b13      	ldr	r3, [pc, #76]	; (8003cd0 <__sinit+0x68>)
 8003c84:	4a13      	ldr	r2, [pc, #76]	; (8003cd4 <__sinit+0x6c>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	62a2      	str	r2, [r4, #40]	; 0x28
 8003c8a:	42a3      	cmp	r3, r4
 8003c8c:	bf04      	itt	eq
 8003c8e:	2301      	moveq	r3, #1
 8003c90:	61a3      	streq	r3, [r4, #24]
 8003c92:	4620      	mov	r0, r4
 8003c94:	f000 f820 	bl	8003cd8 <__sfp>
 8003c98:	6060      	str	r0, [r4, #4]
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	f000 f81c 	bl	8003cd8 <__sfp>
 8003ca0:	60a0      	str	r0, [r4, #8]
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	f000 f818 	bl	8003cd8 <__sfp>
 8003ca8:	2200      	movs	r2, #0
 8003caa:	60e0      	str	r0, [r4, #12]
 8003cac:	2104      	movs	r1, #4
 8003cae:	6860      	ldr	r0, [r4, #4]
 8003cb0:	f7ff ff82 	bl	8003bb8 <std>
 8003cb4:	68a0      	ldr	r0, [r4, #8]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	2109      	movs	r1, #9
 8003cba:	f7ff ff7d 	bl	8003bb8 <std>
 8003cbe:	68e0      	ldr	r0, [r4, #12]
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	2112      	movs	r1, #18
 8003cc4:	f7ff ff78 	bl	8003bb8 <std>
 8003cc8:	2301      	movs	r3, #1
 8003cca:	61a3      	str	r3, [r4, #24]
 8003ccc:	e7d2      	b.n	8003c74 <__sinit+0xc>
 8003cce:	bf00      	nop
 8003cd0:	08004620 	.word	0x08004620
 8003cd4:	08003c01 	.word	0x08003c01

08003cd8 <__sfp>:
 8003cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cda:	4607      	mov	r7, r0
 8003cdc:	f7ff ffac 	bl	8003c38 <__sfp_lock_acquire>
 8003ce0:	4b1e      	ldr	r3, [pc, #120]	; (8003d5c <__sfp+0x84>)
 8003ce2:	681e      	ldr	r6, [r3, #0]
 8003ce4:	69b3      	ldr	r3, [r6, #24]
 8003ce6:	b913      	cbnz	r3, 8003cee <__sfp+0x16>
 8003ce8:	4630      	mov	r0, r6
 8003cea:	f7ff ffbd 	bl	8003c68 <__sinit>
 8003cee:	3648      	adds	r6, #72	; 0x48
 8003cf0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	d503      	bpl.n	8003d00 <__sfp+0x28>
 8003cf8:	6833      	ldr	r3, [r6, #0]
 8003cfa:	b30b      	cbz	r3, 8003d40 <__sfp+0x68>
 8003cfc:	6836      	ldr	r6, [r6, #0]
 8003cfe:	e7f7      	b.n	8003cf0 <__sfp+0x18>
 8003d00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003d04:	b9d5      	cbnz	r5, 8003d3c <__sfp+0x64>
 8003d06:	4b16      	ldr	r3, [pc, #88]	; (8003d60 <__sfp+0x88>)
 8003d08:	60e3      	str	r3, [r4, #12]
 8003d0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003d0e:	6665      	str	r5, [r4, #100]	; 0x64
 8003d10:	f000 f847 	bl	8003da2 <__retarget_lock_init_recursive>
 8003d14:	f7ff ff96 	bl	8003c44 <__sfp_lock_release>
 8003d18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003d1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003d20:	6025      	str	r5, [r4, #0]
 8003d22:	61a5      	str	r5, [r4, #24]
 8003d24:	2208      	movs	r2, #8
 8003d26:	4629      	mov	r1, r5
 8003d28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003d2c:	f7ff fbd6 	bl	80034dc <memset>
 8003d30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003d34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003d38:	4620      	mov	r0, r4
 8003d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d3c:	3468      	adds	r4, #104	; 0x68
 8003d3e:	e7d9      	b.n	8003cf4 <__sfp+0x1c>
 8003d40:	2104      	movs	r1, #4
 8003d42:	4638      	mov	r0, r7
 8003d44:	f7ff ff62 	bl	8003c0c <__sfmoreglue>
 8003d48:	4604      	mov	r4, r0
 8003d4a:	6030      	str	r0, [r6, #0]
 8003d4c:	2800      	cmp	r0, #0
 8003d4e:	d1d5      	bne.n	8003cfc <__sfp+0x24>
 8003d50:	f7ff ff78 	bl	8003c44 <__sfp_lock_release>
 8003d54:	230c      	movs	r3, #12
 8003d56:	603b      	str	r3, [r7, #0]
 8003d58:	e7ee      	b.n	8003d38 <__sfp+0x60>
 8003d5a:	bf00      	nop
 8003d5c:	08004620 	.word	0x08004620
 8003d60:	ffff0001 	.word	0xffff0001

08003d64 <_fwalk_reent>:
 8003d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d68:	4606      	mov	r6, r0
 8003d6a:	4688      	mov	r8, r1
 8003d6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003d70:	2700      	movs	r7, #0
 8003d72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d76:	f1b9 0901 	subs.w	r9, r9, #1
 8003d7a:	d505      	bpl.n	8003d88 <_fwalk_reent+0x24>
 8003d7c:	6824      	ldr	r4, [r4, #0]
 8003d7e:	2c00      	cmp	r4, #0
 8003d80:	d1f7      	bne.n	8003d72 <_fwalk_reent+0xe>
 8003d82:	4638      	mov	r0, r7
 8003d84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d88:	89ab      	ldrh	r3, [r5, #12]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d907      	bls.n	8003d9e <_fwalk_reent+0x3a>
 8003d8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d92:	3301      	adds	r3, #1
 8003d94:	d003      	beq.n	8003d9e <_fwalk_reent+0x3a>
 8003d96:	4629      	mov	r1, r5
 8003d98:	4630      	mov	r0, r6
 8003d9a:	47c0      	blx	r8
 8003d9c:	4307      	orrs	r7, r0
 8003d9e:	3568      	adds	r5, #104	; 0x68
 8003da0:	e7e9      	b.n	8003d76 <_fwalk_reent+0x12>

08003da2 <__retarget_lock_init_recursive>:
 8003da2:	4770      	bx	lr

08003da4 <__retarget_lock_acquire_recursive>:
 8003da4:	4770      	bx	lr

08003da6 <__retarget_lock_release_recursive>:
 8003da6:	4770      	bx	lr

08003da8 <_lseek_r>:
 8003da8:	b538      	push	{r3, r4, r5, lr}
 8003daa:	4d07      	ldr	r5, [pc, #28]	; (8003dc8 <_lseek_r+0x20>)
 8003dac:	4604      	mov	r4, r0
 8003dae:	4608      	mov	r0, r1
 8003db0:	4611      	mov	r1, r2
 8003db2:	2200      	movs	r2, #0
 8003db4:	602a      	str	r2, [r5, #0]
 8003db6:	461a      	mov	r2, r3
 8003db8:	f7fd f828 	bl	8000e0c <_lseek>
 8003dbc:	1c43      	adds	r3, r0, #1
 8003dbe:	d102      	bne.n	8003dc6 <_lseek_r+0x1e>
 8003dc0:	682b      	ldr	r3, [r5, #0]
 8003dc2:	b103      	cbz	r3, 8003dc6 <_lseek_r+0x1e>
 8003dc4:	6023      	str	r3, [r4, #0]
 8003dc6:	bd38      	pop	{r3, r4, r5, pc}
 8003dc8:	20000198 	.word	0x20000198

08003dcc <__swhatbuf_r>:
 8003dcc:	b570      	push	{r4, r5, r6, lr}
 8003dce:	460e      	mov	r6, r1
 8003dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dd4:	2900      	cmp	r1, #0
 8003dd6:	b096      	sub	sp, #88	; 0x58
 8003dd8:	4614      	mov	r4, r2
 8003dda:	461d      	mov	r5, r3
 8003ddc:	da08      	bge.n	8003df0 <__swhatbuf_r+0x24>
 8003dde:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	602a      	str	r2, [r5, #0]
 8003de6:	061a      	lsls	r2, r3, #24
 8003de8:	d410      	bmi.n	8003e0c <__swhatbuf_r+0x40>
 8003dea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dee:	e00e      	b.n	8003e0e <__swhatbuf_r+0x42>
 8003df0:	466a      	mov	r2, sp
 8003df2:	f000 fb5d 	bl	80044b0 <_fstat_r>
 8003df6:	2800      	cmp	r0, #0
 8003df8:	dbf1      	blt.n	8003dde <__swhatbuf_r+0x12>
 8003dfa:	9a01      	ldr	r2, [sp, #4]
 8003dfc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003e00:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003e04:	425a      	negs	r2, r3
 8003e06:	415a      	adcs	r2, r3
 8003e08:	602a      	str	r2, [r5, #0]
 8003e0a:	e7ee      	b.n	8003dea <__swhatbuf_r+0x1e>
 8003e0c:	2340      	movs	r3, #64	; 0x40
 8003e0e:	2000      	movs	r0, #0
 8003e10:	6023      	str	r3, [r4, #0]
 8003e12:	b016      	add	sp, #88	; 0x58
 8003e14:	bd70      	pop	{r4, r5, r6, pc}
	...

08003e18 <__smakebuf_r>:
 8003e18:	898b      	ldrh	r3, [r1, #12]
 8003e1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e1c:	079d      	lsls	r5, r3, #30
 8003e1e:	4606      	mov	r6, r0
 8003e20:	460c      	mov	r4, r1
 8003e22:	d507      	bpl.n	8003e34 <__smakebuf_r+0x1c>
 8003e24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003e28:	6023      	str	r3, [r4, #0]
 8003e2a:	6123      	str	r3, [r4, #16]
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	6163      	str	r3, [r4, #20]
 8003e30:	b002      	add	sp, #8
 8003e32:	bd70      	pop	{r4, r5, r6, pc}
 8003e34:	ab01      	add	r3, sp, #4
 8003e36:	466a      	mov	r2, sp
 8003e38:	f7ff ffc8 	bl	8003dcc <__swhatbuf_r>
 8003e3c:	9900      	ldr	r1, [sp, #0]
 8003e3e:	4605      	mov	r5, r0
 8003e40:	4630      	mov	r0, r6
 8003e42:	f7ff fbbf 	bl	80035c4 <_malloc_r>
 8003e46:	b948      	cbnz	r0, 8003e5c <__smakebuf_r+0x44>
 8003e48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e4c:	059a      	lsls	r2, r3, #22
 8003e4e:	d4ef      	bmi.n	8003e30 <__smakebuf_r+0x18>
 8003e50:	f023 0303 	bic.w	r3, r3, #3
 8003e54:	f043 0302 	orr.w	r3, r3, #2
 8003e58:	81a3      	strh	r3, [r4, #12]
 8003e5a:	e7e3      	b.n	8003e24 <__smakebuf_r+0xc>
 8003e5c:	4b0d      	ldr	r3, [pc, #52]	; (8003e94 <__smakebuf_r+0x7c>)
 8003e5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003e60:	89a3      	ldrh	r3, [r4, #12]
 8003e62:	6020      	str	r0, [r4, #0]
 8003e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e68:	81a3      	strh	r3, [r4, #12]
 8003e6a:	9b00      	ldr	r3, [sp, #0]
 8003e6c:	6163      	str	r3, [r4, #20]
 8003e6e:	9b01      	ldr	r3, [sp, #4]
 8003e70:	6120      	str	r0, [r4, #16]
 8003e72:	b15b      	cbz	r3, 8003e8c <__smakebuf_r+0x74>
 8003e74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e78:	4630      	mov	r0, r6
 8003e7a:	f000 fb2b 	bl	80044d4 <_isatty_r>
 8003e7e:	b128      	cbz	r0, 8003e8c <__smakebuf_r+0x74>
 8003e80:	89a3      	ldrh	r3, [r4, #12]
 8003e82:	f023 0303 	bic.w	r3, r3, #3
 8003e86:	f043 0301 	orr.w	r3, r3, #1
 8003e8a:	81a3      	strh	r3, [r4, #12]
 8003e8c:	89a0      	ldrh	r0, [r4, #12]
 8003e8e:	4305      	orrs	r5, r0
 8003e90:	81a5      	strh	r5, [r4, #12]
 8003e92:	e7cd      	b.n	8003e30 <__smakebuf_r+0x18>
 8003e94:	08003c01 	.word	0x08003c01

08003e98 <__malloc_lock>:
 8003e98:	4801      	ldr	r0, [pc, #4]	; (8003ea0 <__malloc_lock+0x8>)
 8003e9a:	f7ff bf83 	b.w	8003da4 <__retarget_lock_acquire_recursive>
 8003e9e:	bf00      	nop
 8003ea0:	20000194 	.word	0x20000194

08003ea4 <__malloc_unlock>:
 8003ea4:	4801      	ldr	r0, [pc, #4]	; (8003eac <__malloc_unlock+0x8>)
 8003ea6:	f7ff bf7e 	b.w	8003da6 <__retarget_lock_release_recursive>
 8003eaa:	bf00      	nop
 8003eac:	20000194 	.word	0x20000194

08003eb0 <__sfputc_r>:
 8003eb0:	6893      	ldr	r3, [r2, #8]
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	b410      	push	{r4}
 8003eb8:	6093      	str	r3, [r2, #8]
 8003eba:	da08      	bge.n	8003ece <__sfputc_r+0x1e>
 8003ebc:	6994      	ldr	r4, [r2, #24]
 8003ebe:	42a3      	cmp	r3, r4
 8003ec0:	db01      	blt.n	8003ec6 <__sfputc_r+0x16>
 8003ec2:	290a      	cmp	r1, #10
 8003ec4:	d103      	bne.n	8003ece <__sfputc_r+0x1e>
 8003ec6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003eca:	f7ff bcd1 	b.w	8003870 <__swbuf_r>
 8003ece:	6813      	ldr	r3, [r2, #0]
 8003ed0:	1c58      	adds	r0, r3, #1
 8003ed2:	6010      	str	r0, [r2, #0]
 8003ed4:	7019      	strb	r1, [r3, #0]
 8003ed6:	4608      	mov	r0, r1
 8003ed8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <__sfputs_r>:
 8003ede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ee0:	4606      	mov	r6, r0
 8003ee2:	460f      	mov	r7, r1
 8003ee4:	4614      	mov	r4, r2
 8003ee6:	18d5      	adds	r5, r2, r3
 8003ee8:	42ac      	cmp	r4, r5
 8003eea:	d101      	bne.n	8003ef0 <__sfputs_r+0x12>
 8003eec:	2000      	movs	r0, #0
 8003eee:	e007      	b.n	8003f00 <__sfputs_r+0x22>
 8003ef0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ef4:	463a      	mov	r2, r7
 8003ef6:	4630      	mov	r0, r6
 8003ef8:	f7ff ffda 	bl	8003eb0 <__sfputc_r>
 8003efc:	1c43      	adds	r3, r0, #1
 8003efe:	d1f3      	bne.n	8003ee8 <__sfputs_r+0xa>
 8003f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f04 <_vfiprintf_r>:
 8003f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f08:	460d      	mov	r5, r1
 8003f0a:	b09d      	sub	sp, #116	; 0x74
 8003f0c:	4614      	mov	r4, r2
 8003f0e:	4698      	mov	r8, r3
 8003f10:	4606      	mov	r6, r0
 8003f12:	b118      	cbz	r0, 8003f1c <_vfiprintf_r+0x18>
 8003f14:	6983      	ldr	r3, [r0, #24]
 8003f16:	b90b      	cbnz	r3, 8003f1c <_vfiprintf_r+0x18>
 8003f18:	f7ff fea6 	bl	8003c68 <__sinit>
 8003f1c:	4b89      	ldr	r3, [pc, #548]	; (8004144 <_vfiprintf_r+0x240>)
 8003f1e:	429d      	cmp	r5, r3
 8003f20:	d11b      	bne.n	8003f5a <_vfiprintf_r+0x56>
 8003f22:	6875      	ldr	r5, [r6, #4]
 8003f24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f26:	07d9      	lsls	r1, r3, #31
 8003f28:	d405      	bmi.n	8003f36 <_vfiprintf_r+0x32>
 8003f2a:	89ab      	ldrh	r3, [r5, #12]
 8003f2c:	059a      	lsls	r2, r3, #22
 8003f2e:	d402      	bmi.n	8003f36 <_vfiprintf_r+0x32>
 8003f30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f32:	f7ff ff37 	bl	8003da4 <__retarget_lock_acquire_recursive>
 8003f36:	89ab      	ldrh	r3, [r5, #12]
 8003f38:	071b      	lsls	r3, r3, #28
 8003f3a:	d501      	bpl.n	8003f40 <_vfiprintf_r+0x3c>
 8003f3c:	692b      	ldr	r3, [r5, #16]
 8003f3e:	b9eb      	cbnz	r3, 8003f7c <_vfiprintf_r+0x78>
 8003f40:	4629      	mov	r1, r5
 8003f42:	4630      	mov	r0, r6
 8003f44:	f7ff fcf8 	bl	8003938 <__swsetup_r>
 8003f48:	b1c0      	cbz	r0, 8003f7c <_vfiprintf_r+0x78>
 8003f4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f4c:	07dc      	lsls	r4, r3, #31
 8003f4e:	d50e      	bpl.n	8003f6e <_vfiprintf_r+0x6a>
 8003f50:	f04f 30ff 	mov.w	r0, #4294967295
 8003f54:	b01d      	add	sp, #116	; 0x74
 8003f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f5a:	4b7b      	ldr	r3, [pc, #492]	; (8004148 <_vfiprintf_r+0x244>)
 8003f5c:	429d      	cmp	r5, r3
 8003f5e:	d101      	bne.n	8003f64 <_vfiprintf_r+0x60>
 8003f60:	68b5      	ldr	r5, [r6, #8]
 8003f62:	e7df      	b.n	8003f24 <_vfiprintf_r+0x20>
 8003f64:	4b79      	ldr	r3, [pc, #484]	; (800414c <_vfiprintf_r+0x248>)
 8003f66:	429d      	cmp	r5, r3
 8003f68:	bf08      	it	eq
 8003f6a:	68f5      	ldreq	r5, [r6, #12]
 8003f6c:	e7da      	b.n	8003f24 <_vfiprintf_r+0x20>
 8003f6e:	89ab      	ldrh	r3, [r5, #12]
 8003f70:	0598      	lsls	r0, r3, #22
 8003f72:	d4ed      	bmi.n	8003f50 <_vfiprintf_r+0x4c>
 8003f74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f76:	f7ff ff16 	bl	8003da6 <__retarget_lock_release_recursive>
 8003f7a:	e7e9      	b.n	8003f50 <_vfiprintf_r+0x4c>
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8003f80:	2320      	movs	r3, #32
 8003f82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f86:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f8a:	2330      	movs	r3, #48	; 0x30
 8003f8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004150 <_vfiprintf_r+0x24c>
 8003f90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f94:	f04f 0901 	mov.w	r9, #1
 8003f98:	4623      	mov	r3, r4
 8003f9a:	469a      	mov	sl, r3
 8003f9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fa0:	b10a      	cbz	r2, 8003fa6 <_vfiprintf_r+0xa2>
 8003fa2:	2a25      	cmp	r2, #37	; 0x25
 8003fa4:	d1f9      	bne.n	8003f9a <_vfiprintf_r+0x96>
 8003fa6:	ebba 0b04 	subs.w	fp, sl, r4
 8003faa:	d00b      	beq.n	8003fc4 <_vfiprintf_r+0xc0>
 8003fac:	465b      	mov	r3, fp
 8003fae:	4622      	mov	r2, r4
 8003fb0:	4629      	mov	r1, r5
 8003fb2:	4630      	mov	r0, r6
 8003fb4:	f7ff ff93 	bl	8003ede <__sfputs_r>
 8003fb8:	3001      	adds	r0, #1
 8003fba:	f000 80aa 	beq.w	8004112 <_vfiprintf_r+0x20e>
 8003fbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fc0:	445a      	add	r2, fp
 8003fc2:	9209      	str	r2, [sp, #36]	; 0x24
 8003fc4:	f89a 3000 	ldrb.w	r3, [sl]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 80a2 	beq.w	8004112 <_vfiprintf_r+0x20e>
 8003fce:	2300      	movs	r3, #0
 8003fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fd8:	f10a 0a01 	add.w	sl, sl, #1
 8003fdc:	9304      	str	r3, [sp, #16]
 8003fde:	9307      	str	r3, [sp, #28]
 8003fe0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003fe4:	931a      	str	r3, [sp, #104]	; 0x68
 8003fe6:	4654      	mov	r4, sl
 8003fe8:	2205      	movs	r2, #5
 8003fea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fee:	4858      	ldr	r0, [pc, #352]	; (8004150 <_vfiprintf_r+0x24c>)
 8003ff0:	f7fc f8fe 	bl	80001f0 <memchr>
 8003ff4:	9a04      	ldr	r2, [sp, #16]
 8003ff6:	b9d8      	cbnz	r0, 8004030 <_vfiprintf_r+0x12c>
 8003ff8:	06d1      	lsls	r1, r2, #27
 8003ffa:	bf44      	itt	mi
 8003ffc:	2320      	movmi	r3, #32
 8003ffe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004002:	0713      	lsls	r3, r2, #28
 8004004:	bf44      	itt	mi
 8004006:	232b      	movmi	r3, #43	; 0x2b
 8004008:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800400c:	f89a 3000 	ldrb.w	r3, [sl]
 8004010:	2b2a      	cmp	r3, #42	; 0x2a
 8004012:	d015      	beq.n	8004040 <_vfiprintf_r+0x13c>
 8004014:	9a07      	ldr	r2, [sp, #28]
 8004016:	4654      	mov	r4, sl
 8004018:	2000      	movs	r0, #0
 800401a:	f04f 0c0a 	mov.w	ip, #10
 800401e:	4621      	mov	r1, r4
 8004020:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004024:	3b30      	subs	r3, #48	; 0x30
 8004026:	2b09      	cmp	r3, #9
 8004028:	d94e      	bls.n	80040c8 <_vfiprintf_r+0x1c4>
 800402a:	b1b0      	cbz	r0, 800405a <_vfiprintf_r+0x156>
 800402c:	9207      	str	r2, [sp, #28]
 800402e:	e014      	b.n	800405a <_vfiprintf_r+0x156>
 8004030:	eba0 0308 	sub.w	r3, r0, r8
 8004034:	fa09 f303 	lsl.w	r3, r9, r3
 8004038:	4313      	orrs	r3, r2
 800403a:	9304      	str	r3, [sp, #16]
 800403c:	46a2      	mov	sl, r4
 800403e:	e7d2      	b.n	8003fe6 <_vfiprintf_r+0xe2>
 8004040:	9b03      	ldr	r3, [sp, #12]
 8004042:	1d19      	adds	r1, r3, #4
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	9103      	str	r1, [sp, #12]
 8004048:	2b00      	cmp	r3, #0
 800404a:	bfbb      	ittet	lt
 800404c:	425b      	neglt	r3, r3
 800404e:	f042 0202 	orrlt.w	r2, r2, #2
 8004052:	9307      	strge	r3, [sp, #28]
 8004054:	9307      	strlt	r3, [sp, #28]
 8004056:	bfb8      	it	lt
 8004058:	9204      	strlt	r2, [sp, #16]
 800405a:	7823      	ldrb	r3, [r4, #0]
 800405c:	2b2e      	cmp	r3, #46	; 0x2e
 800405e:	d10c      	bne.n	800407a <_vfiprintf_r+0x176>
 8004060:	7863      	ldrb	r3, [r4, #1]
 8004062:	2b2a      	cmp	r3, #42	; 0x2a
 8004064:	d135      	bne.n	80040d2 <_vfiprintf_r+0x1ce>
 8004066:	9b03      	ldr	r3, [sp, #12]
 8004068:	1d1a      	adds	r2, r3, #4
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	9203      	str	r2, [sp, #12]
 800406e:	2b00      	cmp	r3, #0
 8004070:	bfb8      	it	lt
 8004072:	f04f 33ff 	movlt.w	r3, #4294967295
 8004076:	3402      	adds	r4, #2
 8004078:	9305      	str	r3, [sp, #20]
 800407a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004160 <_vfiprintf_r+0x25c>
 800407e:	7821      	ldrb	r1, [r4, #0]
 8004080:	2203      	movs	r2, #3
 8004082:	4650      	mov	r0, sl
 8004084:	f7fc f8b4 	bl	80001f0 <memchr>
 8004088:	b140      	cbz	r0, 800409c <_vfiprintf_r+0x198>
 800408a:	2340      	movs	r3, #64	; 0x40
 800408c:	eba0 000a 	sub.w	r0, r0, sl
 8004090:	fa03 f000 	lsl.w	r0, r3, r0
 8004094:	9b04      	ldr	r3, [sp, #16]
 8004096:	4303      	orrs	r3, r0
 8004098:	3401      	adds	r4, #1
 800409a:	9304      	str	r3, [sp, #16]
 800409c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040a0:	482c      	ldr	r0, [pc, #176]	; (8004154 <_vfiprintf_r+0x250>)
 80040a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040a6:	2206      	movs	r2, #6
 80040a8:	f7fc f8a2 	bl	80001f0 <memchr>
 80040ac:	2800      	cmp	r0, #0
 80040ae:	d03f      	beq.n	8004130 <_vfiprintf_r+0x22c>
 80040b0:	4b29      	ldr	r3, [pc, #164]	; (8004158 <_vfiprintf_r+0x254>)
 80040b2:	bb1b      	cbnz	r3, 80040fc <_vfiprintf_r+0x1f8>
 80040b4:	9b03      	ldr	r3, [sp, #12]
 80040b6:	3307      	adds	r3, #7
 80040b8:	f023 0307 	bic.w	r3, r3, #7
 80040bc:	3308      	adds	r3, #8
 80040be:	9303      	str	r3, [sp, #12]
 80040c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040c2:	443b      	add	r3, r7
 80040c4:	9309      	str	r3, [sp, #36]	; 0x24
 80040c6:	e767      	b.n	8003f98 <_vfiprintf_r+0x94>
 80040c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80040cc:	460c      	mov	r4, r1
 80040ce:	2001      	movs	r0, #1
 80040d0:	e7a5      	b.n	800401e <_vfiprintf_r+0x11a>
 80040d2:	2300      	movs	r3, #0
 80040d4:	3401      	adds	r4, #1
 80040d6:	9305      	str	r3, [sp, #20]
 80040d8:	4619      	mov	r1, r3
 80040da:	f04f 0c0a 	mov.w	ip, #10
 80040de:	4620      	mov	r0, r4
 80040e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040e4:	3a30      	subs	r2, #48	; 0x30
 80040e6:	2a09      	cmp	r2, #9
 80040e8:	d903      	bls.n	80040f2 <_vfiprintf_r+0x1ee>
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0c5      	beq.n	800407a <_vfiprintf_r+0x176>
 80040ee:	9105      	str	r1, [sp, #20]
 80040f0:	e7c3      	b.n	800407a <_vfiprintf_r+0x176>
 80040f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80040f6:	4604      	mov	r4, r0
 80040f8:	2301      	movs	r3, #1
 80040fa:	e7f0      	b.n	80040de <_vfiprintf_r+0x1da>
 80040fc:	ab03      	add	r3, sp, #12
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	462a      	mov	r2, r5
 8004102:	4b16      	ldr	r3, [pc, #88]	; (800415c <_vfiprintf_r+0x258>)
 8004104:	a904      	add	r1, sp, #16
 8004106:	4630      	mov	r0, r6
 8004108:	f3af 8000 	nop.w
 800410c:	4607      	mov	r7, r0
 800410e:	1c78      	adds	r0, r7, #1
 8004110:	d1d6      	bne.n	80040c0 <_vfiprintf_r+0x1bc>
 8004112:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004114:	07d9      	lsls	r1, r3, #31
 8004116:	d405      	bmi.n	8004124 <_vfiprintf_r+0x220>
 8004118:	89ab      	ldrh	r3, [r5, #12]
 800411a:	059a      	lsls	r2, r3, #22
 800411c:	d402      	bmi.n	8004124 <_vfiprintf_r+0x220>
 800411e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004120:	f7ff fe41 	bl	8003da6 <__retarget_lock_release_recursive>
 8004124:	89ab      	ldrh	r3, [r5, #12]
 8004126:	065b      	lsls	r3, r3, #25
 8004128:	f53f af12 	bmi.w	8003f50 <_vfiprintf_r+0x4c>
 800412c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800412e:	e711      	b.n	8003f54 <_vfiprintf_r+0x50>
 8004130:	ab03      	add	r3, sp, #12
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	462a      	mov	r2, r5
 8004136:	4b09      	ldr	r3, [pc, #36]	; (800415c <_vfiprintf_r+0x258>)
 8004138:	a904      	add	r1, sp, #16
 800413a:	4630      	mov	r0, r6
 800413c:	f000 f880 	bl	8004240 <_printf_i>
 8004140:	e7e4      	b.n	800410c <_vfiprintf_r+0x208>
 8004142:	bf00      	nop
 8004144:	08004644 	.word	0x08004644
 8004148:	08004664 	.word	0x08004664
 800414c:	08004624 	.word	0x08004624
 8004150:	08004684 	.word	0x08004684
 8004154:	0800468e 	.word	0x0800468e
 8004158:	00000000 	.word	0x00000000
 800415c:	08003edf 	.word	0x08003edf
 8004160:	0800468a 	.word	0x0800468a

08004164 <_printf_common>:
 8004164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004168:	4616      	mov	r6, r2
 800416a:	4699      	mov	r9, r3
 800416c:	688a      	ldr	r2, [r1, #8]
 800416e:	690b      	ldr	r3, [r1, #16]
 8004170:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004174:	4293      	cmp	r3, r2
 8004176:	bfb8      	it	lt
 8004178:	4613      	movlt	r3, r2
 800417a:	6033      	str	r3, [r6, #0]
 800417c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004180:	4607      	mov	r7, r0
 8004182:	460c      	mov	r4, r1
 8004184:	b10a      	cbz	r2, 800418a <_printf_common+0x26>
 8004186:	3301      	adds	r3, #1
 8004188:	6033      	str	r3, [r6, #0]
 800418a:	6823      	ldr	r3, [r4, #0]
 800418c:	0699      	lsls	r1, r3, #26
 800418e:	bf42      	ittt	mi
 8004190:	6833      	ldrmi	r3, [r6, #0]
 8004192:	3302      	addmi	r3, #2
 8004194:	6033      	strmi	r3, [r6, #0]
 8004196:	6825      	ldr	r5, [r4, #0]
 8004198:	f015 0506 	ands.w	r5, r5, #6
 800419c:	d106      	bne.n	80041ac <_printf_common+0x48>
 800419e:	f104 0a19 	add.w	sl, r4, #25
 80041a2:	68e3      	ldr	r3, [r4, #12]
 80041a4:	6832      	ldr	r2, [r6, #0]
 80041a6:	1a9b      	subs	r3, r3, r2
 80041a8:	42ab      	cmp	r3, r5
 80041aa:	dc26      	bgt.n	80041fa <_printf_common+0x96>
 80041ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041b0:	1e13      	subs	r3, r2, #0
 80041b2:	6822      	ldr	r2, [r4, #0]
 80041b4:	bf18      	it	ne
 80041b6:	2301      	movne	r3, #1
 80041b8:	0692      	lsls	r2, r2, #26
 80041ba:	d42b      	bmi.n	8004214 <_printf_common+0xb0>
 80041bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041c0:	4649      	mov	r1, r9
 80041c2:	4638      	mov	r0, r7
 80041c4:	47c0      	blx	r8
 80041c6:	3001      	adds	r0, #1
 80041c8:	d01e      	beq.n	8004208 <_printf_common+0xa4>
 80041ca:	6823      	ldr	r3, [r4, #0]
 80041cc:	68e5      	ldr	r5, [r4, #12]
 80041ce:	6832      	ldr	r2, [r6, #0]
 80041d0:	f003 0306 	and.w	r3, r3, #6
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	bf08      	it	eq
 80041d8:	1aad      	subeq	r5, r5, r2
 80041da:	68a3      	ldr	r3, [r4, #8]
 80041dc:	6922      	ldr	r2, [r4, #16]
 80041de:	bf0c      	ite	eq
 80041e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041e4:	2500      	movne	r5, #0
 80041e6:	4293      	cmp	r3, r2
 80041e8:	bfc4      	itt	gt
 80041ea:	1a9b      	subgt	r3, r3, r2
 80041ec:	18ed      	addgt	r5, r5, r3
 80041ee:	2600      	movs	r6, #0
 80041f0:	341a      	adds	r4, #26
 80041f2:	42b5      	cmp	r5, r6
 80041f4:	d11a      	bne.n	800422c <_printf_common+0xc8>
 80041f6:	2000      	movs	r0, #0
 80041f8:	e008      	b.n	800420c <_printf_common+0xa8>
 80041fa:	2301      	movs	r3, #1
 80041fc:	4652      	mov	r2, sl
 80041fe:	4649      	mov	r1, r9
 8004200:	4638      	mov	r0, r7
 8004202:	47c0      	blx	r8
 8004204:	3001      	adds	r0, #1
 8004206:	d103      	bne.n	8004210 <_printf_common+0xac>
 8004208:	f04f 30ff 	mov.w	r0, #4294967295
 800420c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004210:	3501      	adds	r5, #1
 8004212:	e7c6      	b.n	80041a2 <_printf_common+0x3e>
 8004214:	18e1      	adds	r1, r4, r3
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	2030      	movs	r0, #48	; 0x30
 800421a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800421e:	4422      	add	r2, r4
 8004220:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004224:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004228:	3302      	adds	r3, #2
 800422a:	e7c7      	b.n	80041bc <_printf_common+0x58>
 800422c:	2301      	movs	r3, #1
 800422e:	4622      	mov	r2, r4
 8004230:	4649      	mov	r1, r9
 8004232:	4638      	mov	r0, r7
 8004234:	47c0      	blx	r8
 8004236:	3001      	adds	r0, #1
 8004238:	d0e6      	beq.n	8004208 <_printf_common+0xa4>
 800423a:	3601      	adds	r6, #1
 800423c:	e7d9      	b.n	80041f2 <_printf_common+0x8e>
	...

08004240 <_printf_i>:
 8004240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004244:	7e0f      	ldrb	r7, [r1, #24]
 8004246:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004248:	2f78      	cmp	r7, #120	; 0x78
 800424a:	4691      	mov	r9, r2
 800424c:	4680      	mov	r8, r0
 800424e:	460c      	mov	r4, r1
 8004250:	469a      	mov	sl, r3
 8004252:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004256:	d807      	bhi.n	8004268 <_printf_i+0x28>
 8004258:	2f62      	cmp	r7, #98	; 0x62
 800425a:	d80a      	bhi.n	8004272 <_printf_i+0x32>
 800425c:	2f00      	cmp	r7, #0
 800425e:	f000 80d8 	beq.w	8004412 <_printf_i+0x1d2>
 8004262:	2f58      	cmp	r7, #88	; 0x58
 8004264:	f000 80a3 	beq.w	80043ae <_printf_i+0x16e>
 8004268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800426c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004270:	e03a      	b.n	80042e8 <_printf_i+0xa8>
 8004272:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004276:	2b15      	cmp	r3, #21
 8004278:	d8f6      	bhi.n	8004268 <_printf_i+0x28>
 800427a:	a101      	add	r1, pc, #4	; (adr r1, 8004280 <_printf_i+0x40>)
 800427c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004280:	080042d9 	.word	0x080042d9
 8004284:	080042ed 	.word	0x080042ed
 8004288:	08004269 	.word	0x08004269
 800428c:	08004269 	.word	0x08004269
 8004290:	08004269 	.word	0x08004269
 8004294:	08004269 	.word	0x08004269
 8004298:	080042ed 	.word	0x080042ed
 800429c:	08004269 	.word	0x08004269
 80042a0:	08004269 	.word	0x08004269
 80042a4:	08004269 	.word	0x08004269
 80042a8:	08004269 	.word	0x08004269
 80042ac:	080043f9 	.word	0x080043f9
 80042b0:	0800431d 	.word	0x0800431d
 80042b4:	080043db 	.word	0x080043db
 80042b8:	08004269 	.word	0x08004269
 80042bc:	08004269 	.word	0x08004269
 80042c0:	0800441b 	.word	0x0800441b
 80042c4:	08004269 	.word	0x08004269
 80042c8:	0800431d 	.word	0x0800431d
 80042cc:	08004269 	.word	0x08004269
 80042d0:	08004269 	.word	0x08004269
 80042d4:	080043e3 	.word	0x080043e3
 80042d8:	682b      	ldr	r3, [r5, #0]
 80042da:	1d1a      	adds	r2, r3, #4
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	602a      	str	r2, [r5, #0]
 80042e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042e8:	2301      	movs	r3, #1
 80042ea:	e0a3      	b.n	8004434 <_printf_i+0x1f4>
 80042ec:	6820      	ldr	r0, [r4, #0]
 80042ee:	6829      	ldr	r1, [r5, #0]
 80042f0:	0606      	lsls	r6, r0, #24
 80042f2:	f101 0304 	add.w	r3, r1, #4
 80042f6:	d50a      	bpl.n	800430e <_printf_i+0xce>
 80042f8:	680e      	ldr	r6, [r1, #0]
 80042fa:	602b      	str	r3, [r5, #0]
 80042fc:	2e00      	cmp	r6, #0
 80042fe:	da03      	bge.n	8004308 <_printf_i+0xc8>
 8004300:	232d      	movs	r3, #45	; 0x2d
 8004302:	4276      	negs	r6, r6
 8004304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004308:	485e      	ldr	r0, [pc, #376]	; (8004484 <_printf_i+0x244>)
 800430a:	230a      	movs	r3, #10
 800430c:	e019      	b.n	8004342 <_printf_i+0x102>
 800430e:	680e      	ldr	r6, [r1, #0]
 8004310:	602b      	str	r3, [r5, #0]
 8004312:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004316:	bf18      	it	ne
 8004318:	b236      	sxthne	r6, r6
 800431a:	e7ef      	b.n	80042fc <_printf_i+0xbc>
 800431c:	682b      	ldr	r3, [r5, #0]
 800431e:	6820      	ldr	r0, [r4, #0]
 8004320:	1d19      	adds	r1, r3, #4
 8004322:	6029      	str	r1, [r5, #0]
 8004324:	0601      	lsls	r1, r0, #24
 8004326:	d501      	bpl.n	800432c <_printf_i+0xec>
 8004328:	681e      	ldr	r6, [r3, #0]
 800432a:	e002      	b.n	8004332 <_printf_i+0xf2>
 800432c:	0646      	lsls	r6, r0, #25
 800432e:	d5fb      	bpl.n	8004328 <_printf_i+0xe8>
 8004330:	881e      	ldrh	r6, [r3, #0]
 8004332:	4854      	ldr	r0, [pc, #336]	; (8004484 <_printf_i+0x244>)
 8004334:	2f6f      	cmp	r7, #111	; 0x6f
 8004336:	bf0c      	ite	eq
 8004338:	2308      	moveq	r3, #8
 800433a:	230a      	movne	r3, #10
 800433c:	2100      	movs	r1, #0
 800433e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004342:	6865      	ldr	r5, [r4, #4]
 8004344:	60a5      	str	r5, [r4, #8]
 8004346:	2d00      	cmp	r5, #0
 8004348:	bfa2      	ittt	ge
 800434a:	6821      	ldrge	r1, [r4, #0]
 800434c:	f021 0104 	bicge.w	r1, r1, #4
 8004350:	6021      	strge	r1, [r4, #0]
 8004352:	b90e      	cbnz	r6, 8004358 <_printf_i+0x118>
 8004354:	2d00      	cmp	r5, #0
 8004356:	d04d      	beq.n	80043f4 <_printf_i+0x1b4>
 8004358:	4615      	mov	r5, r2
 800435a:	fbb6 f1f3 	udiv	r1, r6, r3
 800435e:	fb03 6711 	mls	r7, r3, r1, r6
 8004362:	5dc7      	ldrb	r7, [r0, r7]
 8004364:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004368:	4637      	mov	r7, r6
 800436a:	42bb      	cmp	r3, r7
 800436c:	460e      	mov	r6, r1
 800436e:	d9f4      	bls.n	800435a <_printf_i+0x11a>
 8004370:	2b08      	cmp	r3, #8
 8004372:	d10b      	bne.n	800438c <_printf_i+0x14c>
 8004374:	6823      	ldr	r3, [r4, #0]
 8004376:	07de      	lsls	r6, r3, #31
 8004378:	d508      	bpl.n	800438c <_printf_i+0x14c>
 800437a:	6923      	ldr	r3, [r4, #16]
 800437c:	6861      	ldr	r1, [r4, #4]
 800437e:	4299      	cmp	r1, r3
 8004380:	bfde      	ittt	le
 8004382:	2330      	movle	r3, #48	; 0x30
 8004384:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004388:	f105 35ff 	addle.w	r5, r5, #4294967295
 800438c:	1b52      	subs	r2, r2, r5
 800438e:	6122      	str	r2, [r4, #16]
 8004390:	f8cd a000 	str.w	sl, [sp]
 8004394:	464b      	mov	r3, r9
 8004396:	aa03      	add	r2, sp, #12
 8004398:	4621      	mov	r1, r4
 800439a:	4640      	mov	r0, r8
 800439c:	f7ff fee2 	bl	8004164 <_printf_common>
 80043a0:	3001      	adds	r0, #1
 80043a2:	d14c      	bne.n	800443e <_printf_i+0x1fe>
 80043a4:	f04f 30ff 	mov.w	r0, #4294967295
 80043a8:	b004      	add	sp, #16
 80043aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043ae:	4835      	ldr	r0, [pc, #212]	; (8004484 <_printf_i+0x244>)
 80043b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80043b4:	6829      	ldr	r1, [r5, #0]
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80043bc:	6029      	str	r1, [r5, #0]
 80043be:	061d      	lsls	r5, r3, #24
 80043c0:	d514      	bpl.n	80043ec <_printf_i+0x1ac>
 80043c2:	07df      	lsls	r7, r3, #31
 80043c4:	bf44      	itt	mi
 80043c6:	f043 0320 	orrmi.w	r3, r3, #32
 80043ca:	6023      	strmi	r3, [r4, #0]
 80043cc:	b91e      	cbnz	r6, 80043d6 <_printf_i+0x196>
 80043ce:	6823      	ldr	r3, [r4, #0]
 80043d0:	f023 0320 	bic.w	r3, r3, #32
 80043d4:	6023      	str	r3, [r4, #0]
 80043d6:	2310      	movs	r3, #16
 80043d8:	e7b0      	b.n	800433c <_printf_i+0xfc>
 80043da:	6823      	ldr	r3, [r4, #0]
 80043dc:	f043 0320 	orr.w	r3, r3, #32
 80043e0:	6023      	str	r3, [r4, #0]
 80043e2:	2378      	movs	r3, #120	; 0x78
 80043e4:	4828      	ldr	r0, [pc, #160]	; (8004488 <_printf_i+0x248>)
 80043e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043ea:	e7e3      	b.n	80043b4 <_printf_i+0x174>
 80043ec:	0659      	lsls	r1, r3, #25
 80043ee:	bf48      	it	mi
 80043f0:	b2b6      	uxthmi	r6, r6
 80043f2:	e7e6      	b.n	80043c2 <_printf_i+0x182>
 80043f4:	4615      	mov	r5, r2
 80043f6:	e7bb      	b.n	8004370 <_printf_i+0x130>
 80043f8:	682b      	ldr	r3, [r5, #0]
 80043fa:	6826      	ldr	r6, [r4, #0]
 80043fc:	6961      	ldr	r1, [r4, #20]
 80043fe:	1d18      	adds	r0, r3, #4
 8004400:	6028      	str	r0, [r5, #0]
 8004402:	0635      	lsls	r5, r6, #24
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	d501      	bpl.n	800440c <_printf_i+0x1cc>
 8004408:	6019      	str	r1, [r3, #0]
 800440a:	e002      	b.n	8004412 <_printf_i+0x1d2>
 800440c:	0670      	lsls	r0, r6, #25
 800440e:	d5fb      	bpl.n	8004408 <_printf_i+0x1c8>
 8004410:	8019      	strh	r1, [r3, #0]
 8004412:	2300      	movs	r3, #0
 8004414:	6123      	str	r3, [r4, #16]
 8004416:	4615      	mov	r5, r2
 8004418:	e7ba      	b.n	8004390 <_printf_i+0x150>
 800441a:	682b      	ldr	r3, [r5, #0]
 800441c:	1d1a      	adds	r2, r3, #4
 800441e:	602a      	str	r2, [r5, #0]
 8004420:	681d      	ldr	r5, [r3, #0]
 8004422:	6862      	ldr	r2, [r4, #4]
 8004424:	2100      	movs	r1, #0
 8004426:	4628      	mov	r0, r5
 8004428:	f7fb fee2 	bl	80001f0 <memchr>
 800442c:	b108      	cbz	r0, 8004432 <_printf_i+0x1f2>
 800442e:	1b40      	subs	r0, r0, r5
 8004430:	6060      	str	r0, [r4, #4]
 8004432:	6863      	ldr	r3, [r4, #4]
 8004434:	6123      	str	r3, [r4, #16]
 8004436:	2300      	movs	r3, #0
 8004438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800443c:	e7a8      	b.n	8004390 <_printf_i+0x150>
 800443e:	6923      	ldr	r3, [r4, #16]
 8004440:	462a      	mov	r2, r5
 8004442:	4649      	mov	r1, r9
 8004444:	4640      	mov	r0, r8
 8004446:	47d0      	blx	sl
 8004448:	3001      	adds	r0, #1
 800444a:	d0ab      	beq.n	80043a4 <_printf_i+0x164>
 800444c:	6823      	ldr	r3, [r4, #0]
 800444e:	079b      	lsls	r3, r3, #30
 8004450:	d413      	bmi.n	800447a <_printf_i+0x23a>
 8004452:	68e0      	ldr	r0, [r4, #12]
 8004454:	9b03      	ldr	r3, [sp, #12]
 8004456:	4298      	cmp	r0, r3
 8004458:	bfb8      	it	lt
 800445a:	4618      	movlt	r0, r3
 800445c:	e7a4      	b.n	80043a8 <_printf_i+0x168>
 800445e:	2301      	movs	r3, #1
 8004460:	4632      	mov	r2, r6
 8004462:	4649      	mov	r1, r9
 8004464:	4640      	mov	r0, r8
 8004466:	47d0      	blx	sl
 8004468:	3001      	adds	r0, #1
 800446a:	d09b      	beq.n	80043a4 <_printf_i+0x164>
 800446c:	3501      	adds	r5, #1
 800446e:	68e3      	ldr	r3, [r4, #12]
 8004470:	9903      	ldr	r1, [sp, #12]
 8004472:	1a5b      	subs	r3, r3, r1
 8004474:	42ab      	cmp	r3, r5
 8004476:	dcf2      	bgt.n	800445e <_printf_i+0x21e>
 8004478:	e7eb      	b.n	8004452 <_printf_i+0x212>
 800447a:	2500      	movs	r5, #0
 800447c:	f104 0619 	add.w	r6, r4, #25
 8004480:	e7f5      	b.n	800446e <_printf_i+0x22e>
 8004482:	bf00      	nop
 8004484:	08004695 	.word	0x08004695
 8004488:	080046a6 	.word	0x080046a6

0800448c <_read_r>:
 800448c:	b538      	push	{r3, r4, r5, lr}
 800448e:	4d07      	ldr	r5, [pc, #28]	; (80044ac <_read_r+0x20>)
 8004490:	4604      	mov	r4, r0
 8004492:	4608      	mov	r0, r1
 8004494:	4611      	mov	r1, r2
 8004496:	2200      	movs	r2, #0
 8004498:	602a      	str	r2, [r5, #0]
 800449a:	461a      	mov	r2, r3
 800449c:	f7fc fc72 	bl	8000d84 <_read>
 80044a0:	1c43      	adds	r3, r0, #1
 80044a2:	d102      	bne.n	80044aa <_read_r+0x1e>
 80044a4:	682b      	ldr	r3, [r5, #0]
 80044a6:	b103      	cbz	r3, 80044aa <_read_r+0x1e>
 80044a8:	6023      	str	r3, [r4, #0]
 80044aa:	bd38      	pop	{r3, r4, r5, pc}
 80044ac:	20000198 	.word	0x20000198

080044b0 <_fstat_r>:
 80044b0:	b538      	push	{r3, r4, r5, lr}
 80044b2:	4d07      	ldr	r5, [pc, #28]	; (80044d0 <_fstat_r+0x20>)
 80044b4:	2300      	movs	r3, #0
 80044b6:	4604      	mov	r4, r0
 80044b8:	4608      	mov	r0, r1
 80044ba:	4611      	mov	r1, r2
 80044bc:	602b      	str	r3, [r5, #0]
 80044be:	f7fc fc8a 	bl	8000dd6 <_fstat>
 80044c2:	1c43      	adds	r3, r0, #1
 80044c4:	d102      	bne.n	80044cc <_fstat_r+0x1c>
 80044c6:	682b      	ldr	r3, [r5, #0]
 80044c8:	b103      	cbz	r3, 80044cc <_fstat_r+0x1c>
 80044ca:	6023      	str	r3, [r4, #0]
 80044cc:	bd38      	pop	{r3, r4, r5, pc}
 80044ce:	bf00      	nop
 80044d0:	20000198 	.word	0x20000198

080044d4 <_isatty_r>:
 80044d4:	b538      	push	{r3, r4, r5, lr}
 80044d6:	4d06      	ldr	r5, [pc, #24]	; (80044f0 <_isatty_r+0x1c>)
 80044d8:	2300      	movs	r3, #0
 80044da:	4604      	mov	r4, r0
 80044dc:	4608      	mov	r0, r1
 80044de:	602b      	str	r3, [r5, #0]
 80044e0:	f7fc fc89 	bl	8000df6 <_isatty>
 80044e4:	1c43      	adds	r3, r0, #1
 80044e6:	d102      	bne.n	80044ee <_isatty_r+0x1a>
 80044e8:	682b      	ldr	r3, [r5, #0]
 80044ea:	b103      	cbz	r3, 80044ee <_isatty_r+0x1a>
 80044ec:	6023      	str	r3, [r4, #0]
 80044ee:	bd38      	pop	{r3, r4, r5, pc}
 80044f0:	20000198 	.word	0x20000198

080044f4 <_init>:
 80044f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044f6:	bf00      	nop
 80044f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044fa:	bc08      	pop	{r3}
 80044fc:	469e      	mov	lr, r3
 80044fe:	4770      	bx	lr

08004500 <_fini>:
 8004500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004502:	bf00      	nop
 8004504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004506:	bc08      	pop	{r3}
 8004508:	469e      	mov	lr, r3
 800450a:	4770      	bx	lr
