
W5300_BUS_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a98  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08008ccc  08008ccc  00018ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008dcc  08008dcc  00018dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008dd4  08008dd4  00018dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008dd8  08008dd8  00018dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000009  20000000  08008ddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006a4  2000000c  08008de5  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200006b0  08008de5  000206b0  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020009  2**0
                  CONTENTS, READONLY
 10 .debug_info   000195ae  00000000  00000000  0002003f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002dc0  00000000  00000000  000395ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001260  00000000  00000000  0003c3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001158  00000000  00000000  0003d610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000365c7  00000000  00000000  0003e768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016fa4  00000000  00000000  00074d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015c1c0  00000000  00000000  0008bcd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e7e93  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004e5c  00000000  00000000  001e7ee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	2000000c 	.word	0x2000000c
 8000250:	00000000 	.word	0x00000000
 8000254:	08008cb4 	.word	0x08008cb4

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000010 	.word	0x20000010
 8000270:	08008cb4 	.word	0x08008cb4

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b982 	b.w	8000590 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002aa:	4604      	mov	r4, r0
 80002ac:	460f      	mov	r7, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d148      	bne.n	8000344 <__udivmoddi4+0xa0>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d961      	bls.n	800037c <__udivmoddi4+0xd8>
 80002b8:	fab2 f382 	clz	r3, r2
 80002bc:	b143      	cbz	r3, 80002d0 <__udivmoddi4+0x2c>
 80002be:	f1c3 0120 	rsb	r1, r3, #32
 80002c2:	409f      	lsls	r7, r3
 80002c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c8:	409c      	lsls	r4, r3
 80002ca:	fa20 f101 	lsr.w	r1, r0, r1
 80002ce:	430f      	orrs	r7, r1
 80002d0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002d4:	fa1f fe8c 	uxth.w	lr, ip
 80002d8:	0c22      	lsrs	r2, r4, #16
 80002da:	fbb7 f6f1 	udiv	r6, r7, r1
 80002de:	fb01 7716 	mls	r7, r1, r6, r7
 80002e2:	fb06 f00e 	mul.w	r0, r6, lr
 80002e6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ea:	4290      	cmp	r0, r2
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0x5c>
 80002ee:	eb1c 0202 	adds.w	r2, ip, r2
 80002f2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0x5a>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f200 8137 	bhi.w	800056c <__udivmoddi4+0x2c8>
 80002fe:	463e      	mov	r6, r7
 8000300:	1a12      	subs	r2, r2, r0
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb2 f0f1 	udiv	r0, r2, r1
 8000308:	fb01 2210 	mls	r2, r1, r0, r2
 800030c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000310:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000314:	45a6      	cmp	lr, r4
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x86>
 8000318:	eb1c 0404 	adds.w	r4, ip, r4
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x84>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f200 811c 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 8000328:	4610      	mov	r0, r2
 800032a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032e:	eba4 040e 	sub.w	r4, r4, lr
 8000332:	2600      	movs	r6, #0
 8000334:	b11d      	cbz	r5, 800033e <__udivmoddi4+0x9a>
 8000336:	40dc      	lsrs	r4, r3
 8000338:	2300      	movs	r3, #0
 800033a:	e9c5 4300 	strd	r4, r3, [r5]
 800033e:	4631      	mov	r1, r6
 8000340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000344:	428b      	cmp	r3, r1
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0xb8>
 8000348:	2d00      	cmp	r5, #0
 800034a:	f000 80fd 	beq.w	8000548 <__udivmoddi4+0x2a4>
 800034e:	2600      	movs	r6, #0
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	4630      	mov	r0, r6
 8000356:	4631      	mov	r1, r6
 8000358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035c:	fab3 f683 	clz	r6, r3
 8000360:	2e00      	cmp	r6, #0
 8000362:	d14b      	bne.n	80003fc <__udivmoddi4+0x158>
 8000364:	428b      	cmp	r3, r1
 8000366:	f0c0 80f2 	bcc.w	800054e <__udivmoddi4+0x2aa>
 800036a:	4282      	cmp	r2, r0
 800036c:	f240 80ef 	bls.w	800054e <__udivmoddi4+0x2aa>
 8000370:	4630      	mov	r0, r6
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e3      	beq.n	800033e <__udivmoddi4+0x9a>
 8000376:	e9c5 4700 	strd	r4, r7, [r5]
 800037a:	e7e0      	b.n	800033e <__udivmoddi4+0x9a>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xdc>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f382 	clz	r3, r2
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 809d 	bne.w	80004c4 <__udivmoddi4+0x220>
 800038a:	1a89      	subs	r1, r1, r2
 800038c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000390:	b297      	uxth	r7, r2
 8000392:	2601      	movs	r6, #1
 8000394:	0c20      	lsrs	r0, r4, #16
 8000396:	fbb1 f2fe 	udiv	r2, r1, lr
 800039a:	fb0e 1112 	mls	r1, lr, r2, r1
 800039e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a2:	fb07 f002 	mul.w	r0, r7, r2
 80003a6:	4288      	cmp	r0, r1
 80003a8:	d90f      	bls.n	80003ca <__udivmoddi4+0x126>
 80003aa:	eb1c 0101 	adds.w	r1, ip, r1
 80003ae:	f102 38ff 	add.w	r8, r2, #4294967295
 80003b2:	bf2c      	ite	cs
 80003b4:	f04f 0901 	movcs.w	r9, #1
 80003b8:	f04f 0900 	movcc.w	r9, #0
 80003bc:	4288      	cmp	r0, r1
 80003be:	d903      	bls.n	80003c8 <__udivmoddi4+0x124>
 80003c0:	f1b9 0f00 	cmp.w	r9, #0
 80003c4:	f000 80cf 	beq.w	8000566 <__udivmoddi4+0x2c2>
 80003c8:	4642      	mov	r2, r8
 80003ca:	1a09      	subs	r1, r1, r0
 80003cc:	b2a4      	uxth	r4, r4
 80003ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d6:	fb00 f707 	mul.w	r7, r0, r7
 80003da:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003de:	42a7      	cmp	r7, r4
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x150>
 80003e2:	eb1c 0404 	adds.w	r4, ip, r4
 80003e6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x14e>
 80003ec:	42a7      	cmp	r7, r4
 80003ee:	f200 80b4 	bhi.w	800055a <__udivmoddi4+0x2b6>
 80003f2:	4608      	mov	r0, r1
 80003f4:	1be4      	subs	r4, r4, r7
 80003f6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003fa:	e79b      	b.n	8000334 <__udivmoddi4+0x90>
 80003fc:	f1c6 0720 	rsb	r7, r6, #32
 8000400:	40b3      	lsls	r3, r6
 8000402:	fa01 f406 	lsl.w	r4, r1, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	40f9      	lsrs	r1, r7
 800040c:	40b2      	lsls	r2, r6
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f307 	lsr.w	r3, r0, r7
 8000416:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041a:	431c      	orrs	r4, r3
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	fb09 1118 	mls	r1, r9, r8, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb08 f00e 	mul.w	r0, r8, lr
 8000436:	4288      	cmp	r0, r1
 8000438:	d90f      	bls.n	800045a <__udivmoddi4+0x1b6>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000442:	bf2c      	ite	cs
 8000444:	f04f 0b01 	movcs.w	fp, #1
 8000448:	f04f 0b00 	movcc.w	fp, #0
 800044c:	4288      	cmp	r0, r1
 800044e:	d903      	bls.n	8000458 <__udivmoddi4+0x1b4>
 8000450:	f1bb 0f00 	cmp.w	fp, #0
 8000454:	f000 808d 	beq.w	8000572 <__udivmoddi4+0x2ce>
 8000458:	46d0      	mov	r8, sl
 800045a:	1a09      	subs	r1, r1, r0
 800045c:	b2a4      	uxth	r4, r4
 800045e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000462:	fb09 1110 	mls	r1, r9, r0, r1
 8000466:	fb00 fe0e 	mul.w	lr, r0, lr
 800046a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046e:	458e      	cmp	lr, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1de>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d201      	bcs.n	8000480 <__udivmoddi4+0x1dc>
 800047c:	458e      	cmp	lr, r1
 800047e:	d87f      	bhi.n	8000580 <__udivmoddi4+0x2dc>
 8000480:	4620      	mov	r0, r4
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	eba1 010e 	sub.w	r1, r1, lr
 800048a:	fba0 9802 	umull	r9, r8, r0, r2
 800048e:	4541      	cmp	r1, r8
 8000490:	464c      	mov	r4, r9
 8000492:	46c6      	mov	lr, r8
 8000494:	d302      	bcc.n	800049c <__udivmoddi4+0x1f8>
 8000496:	d106      	bne.n	80004a6 <__udivmoddi4+0x202>
 8000498:	454b      	cmp	r3, r9
 800049a:	d204      	bcs.n	80004a6 <__udivmoddi4+0x202>
 800049c:	3801      	subs	r0, #1
 800049e:	ebb9 0402 	subs.w	r4, r9, r2
 80004a2:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004a6:	2d00      	cmp	r5, #0
 80004a8:	d070      	beq.n	800058c <__udivmoddi4+0x2e8>
 80004aa:	1b1a      	subs	r2, r3, r4
 80004ac:	eb61 010e 	sbc.w	r1, r1, lr
 80004b0:	fa22 f306 	lsr.w	r3, r2, r6
 80004b4:	fa01 f707 	lsl.w	r7, r1, r7
 80004b8:	40f1      	lsrs	r1, r6
 80004ba:	2600      	movs	r6, #0
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	e73c      	b.n	800033e <__udivmoddi4+0x9a>
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	f1c3 0020 	rsb	r0, r3, #32
 80004cc:	fa01 f203 	lsl.w	r2, r1, r3
 80004d0:	fa21 f600 	lsr.w	r6, r1, r0
 80004d4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004d8:	fa24 f100 	lsr.w	r1, r4, r0
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	409c      	lsls	r4, r3
 80004e2:	4311      	orrs	r1, r2
 80004e4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004e8:	0c0a      	lsrs	r2, r1, #16
 80004ea:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ee:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004f2:	fb00 f607 	mul.w	r6, r0, r7
 80004f6:	4296      	cmp	r6, r2
 80004f8:	d90e      	bls.n	8000518 <__udivmoddi4+0x274>
 80004fa:	eb1c 0202 	adds.w	r2, ip, r2
 80004fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000502:	bf2c      	ite	cs
 8000504:	f04f 0901 	movcs.w	r9, #1
 8000508:	f04f 0900 	movcc.w	r9, #0
 800050c:	4296      	cmp	r6, r2
 800050e:	d902      	bls.n	8000516 <__udivmoddi4+0x272>
 8000510:	f1b9 0f00 	cmp.w	r9, #0
 8000514:	d031      	beq.n	800057a <__udivmoddi4+0x2d6>
 8000516:	4640      	mov	r0, r8
 8000518:	1b92      	subs	r2, r2, r6
 800051a:	b289      	uxth	r1, r1
 800051c:	fbb2 f6fe 	udiv	r6, r2, lr
 8000520:	fb0e 2216 	mls	r2, lr, r6, r2
 8000524:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000528:	fb06 f207 	mul.w	r2, r6, r7
 800052c:	428a      	cmp	r2, r1
 800052e:	d907      	bls.n	8000540 <__udivmoddi4+0x29c>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f106 38ff 	add.w	r8, r6, #4294967295
 8000538:	d201      	bcs.n	800053e <__udivmoddi4+0x29a>
 800053a:	428a      	cmp	r2, r1
 800053c:	d823      	bhi.n	8000586 <__udivmoddi4+0x2e2>
 800053e:	4646      	mov	r6, r8
 8000540:	1a89      	subs	r1, r1, r2
 8000542:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000546:	e725      	b.n	8000394 <__udivmoddi4+0xf0>
 8000548:	462e      	mov	r6, r5
 800054a:	4628      	mov	r0, r5
 800054c:	e6f7      	b.n	800033e <__udivmoddi4+0x9a>
 800054e:	1a84      	subs	r4, r0, r2
 8000550:	eb61 0303 	sbc.w	r3, r1, r3
 8000554:	2001      	movs	r0, #1
 8000556:	461f      	mov	r7, r3
 8000558:	e70b      	b.n	8000372 <__udivmoddi4+0xce>
 800055a:	4464      	add	r4, ip
 800055c:	3802      	subs	r0, #2
 800055e:	e749      	b.n	80003f4 <__udivmoddi4+0x150>
 8000560:	4464      	add	r4, ip
 8000562:	3802      	subs	r0, #2
 8000564:	e6e1      	b.n	800032a <__udivmoddi4+0x86>
 8000566:	3a02      	subs	r2, #2
 8000568:	4461      	add	r1, ip
 800056a:	e72e      	b.n	80003ca <__udivmoddi4+0x126>
 800056c:	3e02      	subs	r6, #2
 800056e:	4462      	add	r2, ip
 8000570:	e6c6      	b.n	8000300 <__udivmoddi4+0x5c>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	e76f      	b.n	800045a <__udivmoddi4+0x1b6>
 800057a:	3802      	subs	r0, #2
 800057c:	4462      	add	r2, ip
 800057e:	e7cb      	b.n	8000518 <__udivmoddi4+0x274>
 8000580:	3802      	subs	r0, #2
 8000582:	4461      	add	r1, ip
 8000584:	e77d      	b.n	8000482 <__udivmoddi4+0x1de>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	e7d9      	b.n	8000540 <__udivmoddi4+0x29c>
 800058c:	462e      	mov	r6, r5
 800058e:	e6d6      	b.n	800033e <__udivmoddi4+0x9a>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 800059c:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <LL_AHB2_GRP1_EnableClock+0x34>)
 800059e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80005a2:	4909      	ldr	r1, [pc, #36]	; (80005c8 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	4313      	orrs	r3, r2
 80005a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005ae:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4013      	ands	r3, r2
 80005b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005b8:	68fb      	ldr	r3, [r7, #12]
}
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	46020c00 	.word	0x46020c00

080005cc <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <LL_APB1_GRP2_EnableClock+0x34>)
 80005d6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80005da:	4909      	ldr	r1, [pc, #36]	; (8000600 <LL_APB1_GRP2_EnableClock+0x34>)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4313      	orrs	r3, r2
 80005e0:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <LL_APB1_GRP2_EnableClock+0x34>)
 80005e6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4013      	ands	r3, r2
 80005ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005f0:	68fb      	ldr	r3, [r7, #12]
}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	46020c00 	.word	0x46020c00

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f000 fd44 	bl	8001094 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f80f 	bl	800062e <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000610:	f000 f871 	bl	80006f6 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 f9d8 	bl	80009c8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000618:	f000 f87c 	bl	8000714 <MX_ADC1_Init>
  MX_UCPD1_Init();
 800061c:	f000 f8be 	bl	800079c <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 8000620:	f000 f8f2 	bl	8000808 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000624:	f000 f93c 	bl	80008a0 <MX_USB_OTG_FS_PCD_Init>
  MX_FMC_Init();
 8000628:	f000 f966 	bl	80008f8 <MX_FMC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062c:	e7fe      	b.n	800062c <main+0x28>

0800062e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062e:	b580      	push	{r7, lr}
 8000630:	b09e      	sub	sp, #120	; 0x78
 8000632:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000634:	f107 0318 	add.w	r3, r7, #24
 8000638:	2260      	movs	r2, #96	; 0x60
 800063a:	2100      	movs	r1, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f008 fb31 	bl	8008ca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000642:	463b      	mov	r3, r7
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
 8000650:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000652:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000656:	f002 fd1d 	bl	8003094 <HAL_PWREx_ControlVoltageScaling>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000660:	f000 fa96 	bl	8000b90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000664:	2332      	movs	r3, #50	; 0x32
 8000666:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000668:	f44f 7380 	mov.w	r3, #256	; 0x100
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800066e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000672:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000674:	2310      	movs	r3, #16
 8000676:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000678:	2301      	movs	r3, #1
 800067a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800067c:	2310      	movs	r3, #16
 800067e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000680:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000684:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000686:	2302      	movs	r3, #2
 8000688:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800068a:	2301      	movs	r3, #1
 800068c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000692:	2301      	movs	r3, #1
 8000694:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000696:	2350      	movs	r3, #80	; 0x50
 8000698:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 800069a:	2302      	movs	r3, #2
 800069c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800069e:	2302      	movs	r3, #2
 80006a0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	f107 0318 	add.w	r3, r7, #24
 80006b2:	4618      	mov	r0, r3
 80006b4:	f002 fde0 	bl	8003278 <HAL_RCC_OscConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006be:	f000 fa67 	bl	8000b90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	231f      	movs	r3, #31
 80006c4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c6:	2303      	movs	r3, #3
 80006c8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006da:	463b      	mov	r3, r7
 80006dc:	2104      	movs	r1, #4
 80006de:	4618      	mov	r0, r3
 80006e0:	f003 fca0 	bl	8004024 <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006ea:	f000 fa51 	bl	8000b90 <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3778      	adds	r7, #120	; 0x78
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80006fa:	f002 fdad 	bl	8003258 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80006fe:	2002      	movs	r0, #2
 8000700:	f002 fd4a 	bl	8003198 <HAL_PWREx_ConfigSupply>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemPower_Config+0x18>
  {
    Error_Handler();
 800070a:	f000 fa41 	bl	8000b90 <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000718:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <MX_ADC1_Init+0x80>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <MX_ADC1_Init+0x84>)
 800071c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800071e:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <MX_ADC1_Init+0x80>)
 8000720:	2200      	movs	r2, #0
 8000722:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000724:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <MX_ADC1_Init+0x80>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 800072a:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <MX_ADC1_Init+0x80>)
 800072c:	2200      	movs	r2, #0
 800072e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000730:	4b18      	ldr	r3, [pc, #96]	; (8000794 <MX_ADC1_Init+0x80>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <MX_ADC1_Init+0x80>)
 8000738:	2204      	movs	r2, #4
 800073a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800073c:	4b15      	ldr	r3, [pc, #84]	; (8000794 <MX_ADC1_Init+0x80>)
 800073e:	2200      	movs	r2, #0
 8000740:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_ADC1_Init+0x80>)
 8000744:	2200      	movs	r2, #0
 8000746:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 800074a:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_ADC1_Init+0x80>)
 800074c:	2201      	movs	r2, #1
 800074e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000750:	4b10      	ldr	r3, [pc, #64]	; (8000794 <MX_ADC1_Init+0x80>)
 8000752:	2200      	movs	r2, #0
 8000754:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000758:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_ADC1_Init+0x80>)
 800075a:	2200      	movs	r2, #0
 800075c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_ADC1_Init+0x80>)
 8000762:	2200      	movs	r2, #0
 8000764:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <MX_ADC1_Init+0x80>)
 8000768:	2200      	movs	r2, #0
 800076a:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_ADC1_Init+0x80>)
 800076e:	2200      	movs	r2, #0
 8000770:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_ADC1_Init+0x80>)
 8000774:	2200      	movs	r2, #0
 8000776:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_ADC1_Init+0x80>)
 800077a:	2200      	movs	r2, #0
 800077c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_ADC1_Init+0x80>)
 8000782:	f000 fe0b 	bl	800139c <HAL_ADC_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 800078c:	f000 fa00 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000028 	.word	0x20000028
 8000798:	42028000 	.word	0x42028000

0800079c <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	463b      	mov	r3, r7
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
 80007b0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 80007b2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80007b6:	f7ff ff09 	bl	80005cc <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80007ba:	2002      	movs	r0, #2
 80007bc:	f7ff feea 	bl	8000594 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80007c0:	2001      	movs	r0, #1
 80007c2:	f7ff fee7 	bl	8000594 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80007c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007ca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80007cc:	2303      	movs	r3, #3
 80007ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007d0:	2300      	movs	r3, #0
 80007d2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d4:	463b      	mov	r3, r7
 80007d6:	4619      	mov	r1, r3
 80007d8:	4809      	ldr	r0, [pc, #36]	; (8000800 <MX_UCPD1_Init+0x64>)
 80007da:	f007 fbe4 	bl	8007fa6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80007de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007e2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80007e4:	2303      	movs	r3, #3
 80007e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007e8:	2300      	movs	r3, #0
 80007ea:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ec:	463b      	mov	r3, r7
 80007ee:	4619      	mov	r1, r3
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_UCPD1_Init+0x68>)
 80007f2:	f007 fbd8 	bl	8007fa6 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	3718      	adds	r7, #24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	42020400 	.word	0x42020400
 8000804:	42020000 	.word	0x42020000

08000808 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800080c:	4b22      	ldr	r3, [pc, #136]	; (8000898 <MX_USART1_UART_Init+0x90>)
 800080e:	4a23      	ldr	r2, [pc, #140]	; (800089c <MX_USART1_UART_Init+0x94>)
 8000810:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000812:	4b21      	ldr	r3, [pc, #132]	; (8000898 <MX_USART1_UART_Init+0x90>)
 8000814:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000818:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800081a:	4b1f      	ldr	r3, [pc, #124]	; (8000898 <MX_USART1_UART_Init+0x90>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000820:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <MX_USART1_UART_Init+0x90>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000826:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <MX_USART1_UART_Init+0x90>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800082c:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <MX_USART1_UART_Init+0x90>)
 800082e:	220c      	movs	r2, #12
 8000830:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000832:	4b19      	ldr	r3, [pc, #100]	; (8000898 <MX_USART1_UART_Init+0x90>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000838:	4b17      	ldr	r3, [pc, #92]	; (8000898 <MX_USART1_UART_Init+0x90>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083e:	4b16      	ldr	r3, [pc, #88]	; (8000898 <MX_USART1_UART_Init+0x90>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000844:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_USART1_UART_Init+0x90>)
 8000846:	2200      	movs	r2, #0
 8000848:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800084a:	4b13      	ldr	r3, [pc, #76]	; (8000898 <MX_USART1_UART_Init+0x90>)
 800084c:	2200      	movs	r2, #0
 800084e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000850:	4811      	ldr	r0, [pc, #68]	; (8000898 <MX_USART1_UART_Init+0x90>)
 8000852:	f006 fc57 	bl	8007104 <HAL_UART_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800085c:	f000 f998 	bl	8000b90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000860:	2100      	movs	r1, #0
 8000862:	480d      	ldr	r0, [pc, #52]	; (8000898 <MX_USART1_UART_Init+0x90>)
 8000864:	f007 f82e 	bl	80078c4 <HAL_UARTEx_SetTxFifoThreshold>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800086e:	f000 f98f 	bl	8000b90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000872:	2100      	movs	r1, #0
 8000874:	4808      	ldr	r0, [pc, #32]	; (8000898 <MX_USART1_UART_Init+0x90>)
 8000876:	f007 f863 	bl	8007940 <HAL_UARTEx_SetRxFifoThreshold>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000880:	f000 f986 	bl	8000b90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000884:	4804      	ldr	r0, [pc, #16]	; (8000898 <MX_USART1_UART_Init+0x90>)
 8000886:	f006 ffe4 	bl	8007852 <HAL_UARTEx_DisableFifoMode>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000890:	f000 f97e 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200000b4 	.word	0x200000b4
 800089c:	40013800 	.word	0x40013800

080008a0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80008a6:	4a13      	ldr	r2, [pc, #76]	; (80008f4 <MX_USB_OTG_FS_PCD_Init+0x54>)
 80008a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80008ac:	2206      	movs	r2, #6
 80008ae:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80008b2:	2202      	movs	r2, #2
 80008b4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80008be:	2200      	movs	r2, #0
 80008c0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80008c8:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80008dc:	f001 fb58 	bl	8001f90 <HAL_PCD_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_USB_OTG_FS_PCD_Init+0x4a>
  {
    Error_Handler();
 80008e6:	f000 f953 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000144 	.word	0x20000144
 80008f4:	42040000 	.word	0x42040000

080008f8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b088      	sub	sp, #32
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80008fe:	463b      	mov	r3, r7
 8000900:	2220      	movs	r2, #32
 8000902:	2100      	movs	r1, #0
 8000904:	4618      	mov	r0, r3
 8000906:	f008 f9cd 	bl	8008ca4 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800090a:	4b2c      	ldr	r3, [pc, #176]	; (80009bc <MX_FMC_Init+0xc4>)
 800090c:	4a2c      	ldr	r2, [pc, #176]	; (80009c0 <MX_FMC_Init+0xc8>)
 800090e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000910:	4b2a      	ldr	r3, [pc, #168]	; (80009bc <MX_FMC_Init+0xc4>)
 8000912:	4a2c      	ldr	r2, [pc, #176]	; (80009c4 <MX_FMC_Init+0xcc>)
 8000914:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000916:	4b29      	ldr	r3, [pc, #164]	; (80009bc <MX_FMC_Init+0xc4>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800091c:	4b27      	ldr	r3, [pc, #156]	; (80009bc <MX_FMC_Init+0xc4>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000922:	4b26      	ldr	r3, [pc, #152]	; (80009bc <MX_FMC_Init+0xc4>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000928:	4b24      	ldr	r3, [pc, #144]	; (80009bc <MX_FMC_Init+0xc4>)
 800092a:	2210      	movs	r2, #16
 800092c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800092e:	4b23      	ldr	r3, [pc, #140]	; (80009bc <MX_FMC_Init+0xc4>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000934:	4b21      	ldr	r3, [pc, #132]	; (80009bc <MX_FMC_Init+0xc4>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800093a:	4b20      	ldr	r3, [pc, #128]	; (80009bc <MX_FMC_Init+0xc4>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000940:	4b1e      	ldr	r3, [pc, #120]	; (80009bc <MX_FMC_Init+0xc4>)
 8000942:	2200      	movs	r2, #0
 8000944:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000946:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <MX_FMC_Init+0xc4>)
 8000948:	2200      	movs	r2, #0
 800094a:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800094c:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <MX_FMC_Init+0xc4>)
 800094e:	2200      	movs	r2, #0
 8000950:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000952:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <MX_FMC_Init+0xc4>)
 8000954:	2200      	movs	r2, #0
 8000956:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000958:	4b18      	ldr	r3, [pc, #96]	; (80009bc <MX_FMC_Init+0xc4>)
 800095a:	2200      	movs	r2, #0
 800095c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <MX_FMC_Init+0xc4>)
 8000960:	2200      	movs	r2, #0
 8000962:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000964:	4b15      	ldr	r3, [pc, #84]	; (80009bc <MX_FMC_Init+0xc4>)
 8000966:	2200      	movs	r2, #0
 8000968:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_FMC_Init+0xc4>)
 800096c:	2200      	movs	r2, #0
 800096e:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <MX_FMC_Init+0xc4>)
 8000972:	2200      	movs	r2, #0
 8000974:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_FMC_Init+0xc4>)
 8000978:	2200      	movs	r2, #0
 800097a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  /* Timing */
  Timing.AddressSetupTime = 15;
 800097e:	230f      	movs	r3, #15
 8000980:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000982:	230f      	movs	r3, #15
 8000984:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000986:	23ff      	movs	r3, #255	; 0xff
 8000988:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800098e:	230f      	movs	r3, #15
 8000990:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000992:	2310      	movs	r3, #16
 8000994:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000996:	2311      	movs	r3, #17
 8000998:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800099a:	2300      	movs	r3, #0
 800099c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800099e:	463b      	mov	r3, r7
 80009a0:	2200      	movs	r2, #0
 80009a2:	4619      	mov	r1, r3
 80009a4:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_FMC_Init+0xc4>)
 80009a6:	f006 fb5d 	bl	8007064 <HAL_SRAM_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_FMC_Init+0xbc>
  {
    Error_Handler( );
 80009b0:	f000 f8ee 	bl	8000b90 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80009b4:	bf00      	nop
 80009b6:	3720      	adds	r7, #32
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000650 	.word	0x20000650
 80009c0:	420d0400 	.word	0x420d0400
 80009c4:	420d0504 	.word	0x420d0504

080009c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08c      	sub	sp, #48	; 0x30
 80009cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	4b67      	ldr	r3, [pc, #412]	; (8000b7c <MX_GPIO_Init+0x1b4>)
 80009e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009e4:	4a65      	ldr	r2, [pc, #404]	; (8000b7c <MX_GPIO_Init+0x1b4>)
 80009e6:	f043 0304 	orr.w	r3, r3, #4
 80009ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009ee:	4b63      	ldr	r3, [pc, #396]	; (8000b7c <MX_GPIO_Init+0x1b4>)
 80009f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009f4:	f003 0304 	and.w	r3, r3, #4
 80009f8:	61bb      	str	r3, [r7, #24]
 80009fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009fc:	4b5f      	ldr	r3, [pc, #380]	; (8000b7c <MX_GPIO_Init+0x1b4>)
 80009fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a02:	4a5e      	ldr	r2, [pc, #376]	; (8000b7c <MX_GPIO_Init+0x1b4>)
 8000a04:	f043 0320 	orr.w	r3, r3, #32
 8000a08:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a0c:	4b5b      	ldr	r3, [pc, #364]	; (8000b7c <MX_GPIO_Init+0x1b4>)
 8000a0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a12:	f003 0320 	and.w	r3, r3, #32
 8000a16:	617b      	str	r3, [r7, #20]
 8000a18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a1a:	4b58      	ldr	r3, [pc, #352]	; (8000b7c <MX_GPIO_Init+0x1b4>)
 8000a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a20:	4a56      	ldr	r2, [pc, #344]	; (8000b7c <MX_GPIO_Init+0x1b4>)
 8000a22:	f043 0310 	orr.w	r3, r3, #16
 8000a26:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a2a:	4b54      	ldr	r3, [pc, #336]	; (8000b7c <MX_GPIO_Init+0x1b4>)
 8000a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a30:	f003 0310 	and.w	r3, r3, #16
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a38:	4b50      	ldr	r3, [pc, #320]	; (8000b7c <MX_GPIO_Init+0x1b4>)
 8000a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a3e:	4a4f      	ldr	r2, [pc, #316]	; (8000b7c <MX_GPIO_Init+0x1b4>)
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a48:	4b4c      	ldr	r3, [pc, #304]	; (8000b7c <MX_GPIO_Init+0x1b4>)
 8000a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a4e:	f003 0302 	and.w	r3, r3, #2
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a56:	4b49      	ldr	r3, [pc, #292]	; (8000b7c <MX_GPIO_Init+0x1b4>)
 8000a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a5c:	4a47      	ldr	r2, [pc, #284]	; (8000b7c <MX_GPIO_Init+0x1b4>)
 8000a5e:	f043 0308 	orr.w	r3, r3, #8
 8000a62:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a66:	4b45      	ldr	r3, [pc, #276]	; (8000b7c <MX_GPIO_Init+0x1b4>)
 8000a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a6c:	f003 0308 	and.w	r3, r3, #8
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a74:	4b41      	ldr	r3, [pc, #260]	; (8000b7c <MX_GPIO_Init+0x1b4>)
 8000a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a7a:	4a40      	ldr	r2, [pc, #256]	; (8000b7c <MX_GPIO_Init+0x1b4>)
 8000a7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a80:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a84:	4b3d      	ldr	r3, [pc, #244]	; (8000b7c <MX_GPIO_Init+0x1b4>)
 8000a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	4b3a      	ldr	r3, [pc, #232]	; (8000b7c <MX_GPIO_Init+0x1b4>)
 8000a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a98:	4a38      	ldr	r2, [pc, #224]	; (8000b7c <MX_GPIO_Init+0x1b4>)
 8000a9a:	f043 0301 	orr.w	r3, r3, #1
 8000a9e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000aa2:	4b36      	ldr	r3, [pc, #216]	; (8000b7c <MX_GPIO_Init+0x1b4>)
 8000aa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2104      	movs	r1, #4
 8000ab4:	4832      	ldr	r0, [pc, #200]	; (8000b80 <MX_GPIO_Init+0x1b8>)
 8000ab6:	f001 fa53 	bl	8001f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2180      	movs	r1, #128	; 0x80
 8000abe:	4831      	ldr	r0, [pc, #196]	; (8000b84 <MX_GPIO_Init+0x1bc>)
 8000ac0:	f001 fa4e 	bl	8001f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	21a0      	movs	r1, #160	; 0xa0
 8000ac8:	482f      	ldr	r0, [pc, #188]	; (8000b88 <MX_GPIO_Init+0x1c0>)
 8000aca:	f001 fa49 	bl	8001f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000ace:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ad4:	4b2d      	ldr	r3, [pc, #180]	; (8000b8c <MX_GPIO_Init+0x1c4>)
 8000ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000adc:	f107 031c 	add.w	r3, r7, #28
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4828      	ldr	r0, [pc, #160]	; (8000b84 <MX_GPIO_Init+0x1bc>)
 8000ae4:	f001 f864 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000ae8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aee:	2300      	movs	r3, #0
 8000af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	4619      	mov	r1, r3
 8000afc:	4822      	ldr	r0, [pc, #136]	; (8000b88 <MX_GPIO_Init+0x1c0>)
 8000afe:	f001 f857 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000b02:	2304      	movs	r3, #4
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	4619      	mov	r1, r3
 8000b18:	4819      	ldr	r0, [pc, #100]	; (8000b80 <MX_GPIO_Init+0x1b8>)
 8000b1a:	f001 f849 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000b1e:	2380      	movs	r3, #128	; 0x80
 8000b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	4619      	mov	r1, r3
 8000b34:	4813      	ldr	r0, [pc, #76]	; (8000b84 <MX_GPIO_Init+0x1bc>)
 8000b36:	f001 f83b 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8000b3a:	2320      	movs	r3, #32
 8000b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	4619      	mov	r1, r3
 8000b50:	480d      	ldr	r0, [pc, #52]	; (8000b88 <MX_GPIO_Init+0x1c0>)
 8000b52:	f001 f82d 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000b56:	2380      	movs	r3, #128	; 0x80
 8000b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b62:	2302      	movs	r3, #2
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4806      	ldr	r0, [pc, #24]	; (8000b88 <MX_GPIO_Init+0x1c0>)
 8000b6e:	f001 f81f 	bl	8001bb0 <HAL_GPIO_Init>

}
 8000b72:	bf00      	nop
 8000b74:	3730      	adds	r7, #48	; 0x30
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	46020c00 	.word	0x46020c00
 8000b80:	42021800 	.word	0x42021800
 8000b84:	42020800 	.word	0x42020800
 8000b88:	42020400 	.word	0x42020400
 8000b8c:	10210000 	.word	0x10210000

08000b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b94:	b672      	cpsid	i
}
 8000b96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <Error_Handler+0x8>
	...

08000b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <HAL_MspInit+0x34>)
 8000ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ba8:	4a09      	ldr	r2, [pc, #36]	; (8000bd0 <HAL_MspInit+0x34>)
 8000baa:	f043 0304 	orr.w	r3, r3, #4
 8000bae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000bb2:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <HAL_MspInit+0x34>)
 8000bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bb8:	f003 0304 	and.w	r3, r3, #4
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000bc0:	2004      	movs	r0, #4
 8000bc2:	f000 ffb5 	bl	8001b30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	46020c00 	.word	0x46020c00

08000bd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b0bc      	sub	sp, #240	; 0xf0
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	22c8      	movs	r2, #200	; 0xc8
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f008 f855 	bl	8008ca4 <memset>
  if(hadc->Instance==ADC1)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a24      	ldr	r2, [pc, #144]	; (8000c90 <HAL_ADC_MspInit+0xbc>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d140      	bne.n	8000c86 <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000c04:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8000c10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c18:	f107 0310 	add.w	r3, r7, #16
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f003 fdd7 	bl	80047d0 <HAL_RCCEx_PeriphCLKConfig>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8000c28:	f7ff ffb2 	bl	8000b90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c2c:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <HAL_ADC_MspInit+0xc0>)
 8000c2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c32:	4a18      	ldr	r2, [pc, #96]	; (8000c94 <HAL_ADC_MspInit+0xc0>)
 8000c34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c38:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c3c:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <HAL_ADC_MspInit+0xc0>)
 8000c3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4a:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <HAL_ADC_MspInit+0xc0>)
 8000c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c50:	4a10      	ldr	r2, [pc, #64]	; (8000c94 <HAL_ADC_MspInit+0xc0>)
 8000c52:	f043 0304 	orr.w	r3, r3, #4
 8000c56:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <HAL_ADC_MspInit+0xc0>)
 8000c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c60:	f003 0304 	and.w	r3, r3, #4
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000c68:	2304      	movs	r3, #4
 8000c6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4805      	ldr	r0, [pc, #20]	; (8000c98 <HAL_ADC_MspInit+0xc4>)
 8000c82:	f000 ff95 	bl	8001bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c86:	bf00      	nop
 8000c88:	37f0      	adds	r7, #240	; 0xf0
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	42028000 	.word	0x42028000
 8000c94:	46020c00 	.word	0x46020c00
 8000c98:	42020800 	.word	0x42020800

08000c9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b0bc      	sub	sp, #240	; 0xf0
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	22c8      	movs	r2, #200	; 0xc8
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f007 fff1 	bl	8008ca4 <memset>
  if(huart->Instance==USART1)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a26      	ldr	r2, [pc, #152]	; (8000d60 <HAL_UART_MspInit+0xc4>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d145      	bne.n	8000d58 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ccc:	f04f 0201 	mov.w	r2, #1
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cdc:	f107 0310 	add.w	r3, r7, #16
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f003 fd75 	bl	80047d0 <HAL_RCCEx_PeriphCLKConfig>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000cec:	f7ff ff50 	bl	8000b90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cf0:	4b1c      	ldr	r3, [pc, #112]	; (8000d64 <HAL_UART_MspInit+0xc8>)
 8000cf2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000cf6:	4a1b      	ldr	r2, [pc, #108]	; (8000d64 <HAL_UART_MspInit+0xc8>)
 8000cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cfc:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000d00:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <HAL_UART_MspInit+0xc8>)
 8000d02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <HAL_UART_MspInit+0xc8>)
 8000d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d14:	4a13      	ldr	r2, [pc, #76]	; (8000d64 <HAL_UART_MspInit+0xc8>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <HAL_UART_MspInit+0xc8>)
 8000d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8000d2c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d46:	2307      	movs	r3, #7
 8000d48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000d50:	4619      	mov	r1, r3
 8000d52:	4805      	ldr	r0, [pc, #20]	; (8000d68 <HAL_UART_MspInit+0xcc>)
 8000d54:	f000 ff2c 	bl	8001bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d58:	bf00      	nop
 8000d5a:	37f0      	adds	r7, #240	; 0xf0
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40013800 	.word	0x40013800
 8000d64:	46020c00 	.word	0x46020c00
 8000d68:	42020000 	.word	0x42020000

08000d6c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b0be      	sub	sp, #248	; 0xf8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d84:	f107 0318 	add.w	r3, r7, #24
 8000d88:	22c8      	movs	r2, #200	; 0xc8
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f007 ff89 	bl	8008ca4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a3c      	ldr	r2, [pc, #240]	; (8000e88 <HAL_PCD_MspInit+0x11c>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d171      	bne.n	8000e80 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000d9c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000da0:	f04f 0300 	mov.w	r3, #0
 8000da4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8000da8:	2300      	movs	r3, #0
 8000daa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dae:	f107 0318 	add.w	r3, r7, #24
 8000db2:	4618      	mov	r0, r3
 8000db4:	f003 fd0c 	bl	80047d0 <HAL_RCCEx_PeriphCLKConfig>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8000dbe:	f7ff fee7 	bl	8000b90 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	4b32      	ldr	r3, [pc, #200]	; (8000e8c <HAL_PCD_MspInit+0x120>)
 8000dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dc8:	4a30      	ldr	r2, [pc, #192]	; (8000e8c <HAL_PCD_MspInit+0x120>)
 8000dca:	f043 0301 	orr.w	r3, r3, #1
 8000dce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000dd2:	4b2e      	ldr	r3, [pc, #184]	; (8000e8c <HAL_PCD_MspInit+0x120>)
 8000dd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000de0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000de4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df4:	2303      	movs	r3, #3
 8000df6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000dfa:	230a      	movs	r3, #10
 8000dfc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e00:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e04:	4619      	mov	r1, r3
 8000e06:	4822      	ldr	r0, [pc, #136]	; (8000e90 <HAL_PCD_MspInit+0x124>)
 8000e08:	f000 fed2 	bl	8001bb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000e0c:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <HAL_PCD_MspInit+0x120>)
 8000e0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e12:	4a1e      	ldr	r2, [pc, #120]	; (8000e8c <HAL_PCD_MspInit+0x120>)
 8000e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e18:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e1c:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <HAL_PCD_MspInit+0x120>)
 8000e1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e2a:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <HAL_PCD_MspInit+0x120>)
 8000e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e30:	f003 0304 	and.w	r3, r3, #4
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d119      	bne.n	8000e6c <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e38:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <HAL_PCD_MspInit+0x120>)
 8000e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e3e:	4a13      	ldr	r2, [pc, #76]	; (8000e8c <HAL_PCD_MspInit+0x120>)
 8000e40:	f043 0304 	orr.w	r3, r3, #4
 8000e44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000e48:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <HAL_PCD_MspInit+0x120>)
 8000e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e4e:	f003 0304 	and.w	r3, r3, #4
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000e56:	f002 f9ef 	bl	8003238 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <HAL_PCD_MspInit+0x120>)
 8000e5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e60:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <HAL_PCD_MspInit+0x120>)
 8000e62:	f023 0304 	bic.w	r3, r3, #4
 8000e66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000e6a:	e001      	b.n	8000e70 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8000e6c:	f002 f9e4 	bl	8003238 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2100      	movs	r1, #0
 8000e74:	2049      	movs	r0, #73	; 0x49
 8000e76:	f000 fe66 	bl	8001b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000e7a:	2049      	movs	r0, #73	; 0x49
 8000e7c:	f000 fe7d 	bl	8001b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e80:	bf00      	nop
 8000e82:	37f8      	adds	r7, #248	; 0xf8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	42040000 	.word	0x42040000
 8000e8c:	46020c00 	.word	0x46020c00
 8000e90:	42020000 	.word	0x42020000

08000e94 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000ea8:	4b25      	ldr	r3, [pc, #148]	; (8000f40 <HAL_FMC_MspInit+0xac>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d142      	bne.n	8000f36 <HAL_FMC_MspInit+0xa2>
    return;
  }
  FMC_Initialized = 1;
 8000eb0:	4b23      	ldr	r3, [pc, #140]	; (8000f40 <HAL_FMC_MspInit+0xac>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000eb6:	4b23      	ldr	r3, [pc, #140]	; (8000f44 <HAL_FMC_MspInit+0xb0>)
 8000eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ebc:	4a21      	ldr	r2, [pc, #132]	; (8000f44 <HAL_FMC_MspInit+0xb0>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000ec6:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <HAL_FMC_MspInit+0xb0>)
 8000ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	603b      	str	r3, [r7, #0]
 8000ed2:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ed4:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8000ed8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ee6:	230c      	movs	r3, #12
 8000ee8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	4619      	mov	r1, r3
 8000eee:	4816      	ldr	r0, [pc, #88]	; (8000f48 <HAL_FMC_MspInit+0xb4>)
 8000ef0:	f000 fe5e 	bl	8001bb0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000ef4:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000ef8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f02:	2303      	movs	r3, #3
 8000f04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f06:	230c      	movs	r3, #12
 8000f08:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	480f      	ldr	r0, [pc, #60]	; (8000f4c <HAL_FMC_MspInit+0xb8>)
 8000f10:	f000 fe4e 	bl	8001bb0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000f14:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000f18:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f26:	230c      	movs	r3, #12
 8000f28:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4808      	ldr	r0, [pc, #32]	; (8000f50 <HAL_FMC_MspInit+0xbc>)
 8000f30:	f000 fe3e 	bl	8001bb0 <HAL_GPIO_Init>
 8000f34:	e000      	b.n	8000f38 <HAL_FMC_MspInit+0xa4>
    return;
 8000f36:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200006a8 	.word	0x200006a8
 8000f44:	46020c00 	.word	0x46020c00
 8000f48:	42021400 	.word	0x42021400
 8000f4c:	42021000 	.word	0x42021000
 8000f50:	42020c00 	.word	0x42020c00

08000f54 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000f5c:	f7ff ff9a 	bl	8000e94 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <NMI_Handler+0x4>

08000f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <HardFault_Handler+0x4>

08000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <MemManage_Handler+0x4>

08000f7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <BusFault_Handler+0x4>

08000f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <UsageFault_Handler+0x4>

08000f86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb4:	f000 f8d2 	bl	800115c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <OTG_FS_IRQHandler+0x10>)
 8000fc2:	f001 f909 	bl	80021d8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000144 	.word	0x20000144

08000fd0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fd4:	4b18      	ldr	r3, [pc, #96]	; (8001038 <SystemInit+0x68>)
 8000fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fda:	4a17      	ldr	r2, [pc, #92]	; (8001038 <SystemInit+0x68>)
 8000fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000fe4:	4b15      	ldr	r3, [pc, #84]	; (800103c <SystemInit+0x6c>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000fea:	4b14      	ldr	r3, [pc, #80]	; (800103c <SystemInit+0x6c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <SystemInit+0x6c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000ff6:	4b11      	ldr	r3, [pc, #68]	; (800103c <SystemInit+0x6c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <SystemInit+0x6c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a0e      	ldr	r2, [pc, #56]	; (800103c <SystemInit+0x6c>)
 8001002:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001006:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800100a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <SystemInit+0x6c>)
 800100e:	2200      	movs	r2, #0
 8001010:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001012:	4b0a      	ldr	r3, [pc, #40]	; (800103c <SystemInit+0x6c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a09      	ldr	r2, [pc, #36]	; (800103c <SystemInit+0x6c>)
 8001018:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800101c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800101e:	4b07      	ldr	r3, [pc, #28]	; (800103c <SystemInit+0x6c>)
 8001020:	2200      	movs	r2, #0
 8001022:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <SystemInit+0x68>)
 8001026:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800102a:	609a      	str	r2, [r3, #8]
  #endif
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000ed00 	.word	0xe000ed00
 800103c:	46020c00 	.word	0x46020c00

08001040 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001040:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001078 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001044:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001046:	e003      	b.n	8001050 <LoopCopyDataInit>

08001048 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800104a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800104c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800104e:	3104      	adds	r1, #4

08001050 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001050:	480b      	ldr	r0, [pc, #44]	; (8001080 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001054:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001056:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001058:	d3f6      	bcc.n	8001048 <CopyDataInit>
	ldr	r2, =_sbss
 800105a:	4a0b      	ldr	r2, [pc, #44]	; (8001088 <LoopForever+0x12>)
	b	LoopFillZerobss
 800105c:	e002      	b.n	8001064 <LoopFillZerobss>

0800105e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800105e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001060:	f842 3b04 	str.w	r3, [r2], #4

08001064 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001064:	4b09      	ldr	r3, [pc, #36]	; (800108c <LoopForever+0x16>)
	cmp	r2, r3
 8001066:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001068:	d3f9      	bcc.n	800105e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800106a:	f7ff ffb1 	bl	8000fd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800106e:	f007 fdf5 	bl	8008c5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001072:	f7ff fac7 	bl	8000604 <main>

08001076 <LoopForever>:

LoopForever:
    b LoopForever
 8001076:	e7fe      	b.n	8001076 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001078:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 800107c:	08008ddc 	.word	0x08008ddc
	ldr	r0, =_sdata
 8001080:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001084:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8001088:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800108c:	200006b0 	.word	0x200006b0

08001090 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001090:	e7fe      	b.n	8001090 <ADC1_IRQHandler>
	...

08001094 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <HAL_Init+0x4c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a10      	ldr	r2, [pc, #64]	; (80010e0 <HAL_Init+0x4c>)
 800109e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a4:	2003      	movs	r0, #3
 80010a6:	f000 fd43 	bl	8001b30 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80010aa:	f003 f9ad 	bl	8004408 <HAL_RCC_GetSysClockFreq>
 80010ae:	4602      	mov	r2, r0
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <HAL_Init+0x50>)
 80010b2:	6a1b      	ldr	r3, [r3, #32]
 80010b4:	f003 030f 	and.w	r3, r3, #15
 80010b8:	490b      	ldr	r1, [pc, #44]	; (80010e8 <HAL_Init+0x54>)
 80010ba:	5ccb      	ldrb	r3, [r1, r3]
 80010bc:	fa22 f303 	lsr.w	r3, r2, r3
 80010c0:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <HAL_Init+0x58>)
 80010c2:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010c4:	2000      	movs	r0, #0
 80010c6:	f000 f813 	bl	80010f0 <HAL_InitTick>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e002      	b.n	80010da <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010d4:	f7ff fd62 	bl	8000b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40022000 	.word	0x40022000
 80010e4:	46020c00 	.word	0x46020c00
 80010e8:	08008ccc 	.word	0x08008ccc
 80010ec:	20000000 	.word	0x20000000

080010f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80010f8:	4b15      	ldr	r3, [pc, #84]	; (8001150 <HAL_InitTick+0x60>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d101      	bne.n	8001104 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e021      	b.n	8001148 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001104:	4b13      	ldr	r3, [pc, #76]	; (8001154 <HAL_InitTick+0x64>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <HAL_InitTick+0x60>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001112:	fbb3 f3f1 	udiv	r3, r3, r1
 8001116:	fbb2 f3f3 	udiv	r3, r2, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f000 fd3b 	bl	8001b96 <HAL_SYSTICK_Config>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e00e      	b.n	8001148 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b0f      	cmp	r3, #15
 800112e:	d80a      	bhi.n	8001146 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001130:	2200      	movs	r2, #0
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	f04f 30ff 	mov.w	r0, #4294967295
 8001138:	f000 fd05 	bl	8001b46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800113c:	4a06      	ldr	r2, [pc, #24]	; (8001158 <HAL_InitTick+0x68>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001142:	2300      	movs	r3, #0
 8001144:	e000      	b.n	8001148 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000008 	.word	0x20000008
 8001154:	20000000 	.word	0x20000000
 8001158:	20000004 	.word	0x20000004

0800115c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_IncTick+0x20>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_IncTick+0x24>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4413      	add	r3, r2
 800116c:	4a04      	ldr	r2, [pc, #16]	; (8001180 <HAL_IncTick+0x24>)
 800116e:	6013      	str	r3, [r2, #0]
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000008 	.word	0x20000008
 8001180:	200006ac 	.word	0x200006ac

08001184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return uwTick;
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <HAL_GetTick+0x14>)
 800118a:	681b      	ldr	r3, [r3, #0]
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	200006ac 	.word	0x200006ac

0800119c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a4:	f7ff ffee 	bl	8001184 <HAL_GetTick>
 80011a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b4:	d005      	beq.n	80011c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <HAL_Delay+0x44>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4413      	add	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011c2:	bf00      	nop
 80011c4:	f7ff ffde 	bl	8001184 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d8f7      	bhi.n	80011c4 <HAL_Delay+0x28>
  {
  }
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000008 	.word	0x20000008

080011e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	431a      	orrs	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	601a      	str	r2, [r3, #0]
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001218:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800121c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	431a      	orrs	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800122c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	2a00      	cmp	r2, #0
 8001234:	d002      	beq.n	800123c <LL_ADC_SetGainCompensation+0x32>
 8001236:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800123a:	e000      	b.n	800123e <LL_ADC_SetGainCompensation+0x34>
 800123c:	2200      	movs	r2, #0
 800123e:	431a      	orrs	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	671a      	str	r2, [r3, #112]	; 0x70
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	695a      	ldr	r2, [r3, #20]
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	2107      	movs	r1, #7
 8001268:	fa01 f303 	lsl.w	r3, r1, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	401a      	ands	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	f003 0304 	and.w	r3, r3, #4
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	fa01 f303 	lsl.w	r3, r1, r3
 800127c:	431a      	orrs	r2, r3
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001282:	bf00      	nop
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800129e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	6093      	str	r3, [r2, #8]
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012c6:	d101      	bne.n	80012cc <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80012c8:	2301      	movs	r3, #1
 80012ca:	e000      	b.n	80012ce <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80012ea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012ee:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	609a      	str	r2, [r3, #8]
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001312:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001316:	d101      	bne.n	800131c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001318:	2301      	movs	r3, #1
 800131a:	e000      	b.n	800131e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	2b01      	cmp	r3, #1
 800133c:	d101      	bne.n	8001342 <LL_ADC_IsEnabled+0x18>
 800133e:	2301      	movs	r3, #1
 8001340:	e000      	b.n	8001344 <LL_ADC_IsEnabled+0x1a>
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	2b04      	cmp	r3, #4
 8001362:	d101      	bne.n	8001368 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001364:	2301      	movs	r3, #1
 8001366:	e000      	b.n	800136a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	2b08      	cmp	r3, #8
 8001388:	d101      	bne.n	800138e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	; 0x28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e2e3      	b.n	8001984 <HAL_ADC_Init+0x5e8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a92      	ldr	r2, [pc, #584]	; (8001614 <HAL_ADC_Init+0x278>)
 80013ca:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d109      	bne.n	80013e8 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff fbfd 	bl	8000bd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff60 	bl	80012b2 <LL_ADC_IsDeepPowerDownEnabled>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d004      	beq.n	8001402 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff46 	bl	800128e <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff ff7b 	bl	8001302 <LL_ADC_IsInternalRegulatorEnabled>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d115      	bne.n	800143e <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ff5f 	bl	80012da <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800141c:	4b7e      	ldr	r3, [pc, #504]	; (8001618 <HAL_ADC_Init+0x27c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	099b      	lsrs	r3, r3, #6
 8001422:	4a7e      	ldr	r2, [pc, #504]	; (800161c <HAL_ADC_Init+0x280>)
 8001424:	fba2 2303 	umull	r2, r3, r2, r3
 8001428:	099b      	lsrs	r3, r3, #6
 800142a:	3301      	adds	r3, #1
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001430:	e002      	b.n	8001438 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	3b01      	subs	r3, #1
 8001436:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f9      	bne.n	8001432 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff ff5d 	bl	8001302 <LL_ADC_IsInternalRegulatorEnabled>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d10e      	bne.n	800146c <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001452:	f043 0210 	orr.w	r2, r3, #16
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800145e:	f043 0201 	orr.w	r2, r3, #1
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff6d 	bl	8001350 <LL_ADC_REG_IsConversionOngoing>
 8001476:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800147c:	f003 0310 	and.w	r3, r3, #16
 8001480:	2b00      	cmp	r3, #0
 8001482:	f040 8274 	bne.w	800196e <HAL_ADC_Init+0x5d2>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	2b00      	cmp	r3, #0
 800148a:	f040 8270 	bne.w	800196e <HAL_ADC_Init+0x5d2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001492:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001496:	f043 0202 	orr.w	r2, r3, #2
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff ff41 	bl	800132a <LL_ADC_IsEnabled>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d14e      	bne.n	800154c <HAL_ADC_Init+0x1b0>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a58      	ldr	r2, [pc, #352]	; (8001614 <HAL_ADC_Init+0x278>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d028      	beq.n	800150a <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a58      	ldr	r2, [pc, #352]	; (8001620 <HAL_ADC_Init+0x284>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d109      	bne.n	80014d6 <HAL_ADC_Init+0x13a>
 80014c2:	4857      	ldr	r0, [pc, #348]	; (8001620 <HAL_ADC_Init+0x284>)
 80014c4:	f7ff ff31 	bl	800132a <LL_ADC_IsEnabled>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	bf0c      	ite	eq
 80014ce:	2301      	moveq	r3, #1
 80014d0:	2300      	movne	r3, #0
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	e008      	b.n	80014e8 <HAL_ADC_Init+0x14c>
 80014d6:	484f      	ldr	r0, [pc, #316]	; (8001614 <HAL_ADC_Init+0x278>)
 80014d8:	f7ff ff27 	bl	800132a <LL_ADC_IsEnabled>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	bf0c      	ite	eq
 80014e2:	2301      	moveq	r3, #1
 80014e4:	2300      	movne	r3, #0
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d02f      	beq.n	800154c <HAL_ADC_Init+0x1b0>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a4b      	ldr	r2, [pc, #300]	; (8001620 <HAL_ADC_Init+0x284>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d101      	bne.n	80014fa <HAL_ADC_Init+0x15e>
 80014f6:	4a4b      	ldr	r2, [pc, #300]	; (8001624 <HAL_ADC_Init+0x288>)
 80014f8:	e000      	b.n	80014fc <HAL_ADC_Init+0x160>
 80014fa:	4a4b      	ldr	r2, [pc, #300]	; (8001628 <HAL_ADC_Init+0x28c>)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	4619      	mov	r1, r3
 8001502:	4610      	mov	r0, r2
 8001504:	f7ff fe6e 	bl	80011e4 <LL_ADC_SetCommonClock>
 8001508:	e020      	b.n	800154c <HAL_ADC_Init+0x1b0>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        MODIFY_REG(hadc->Instance->CFGR1,
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	f023 010c 	bic.w	r1, r3, #12
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800151c:	4293      	cmp	r3, r2
 800151e:	d005      	beq.n	800152c <HAL_ADC_Init+0x190>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	3b01      	subs	r3, #1
 8001526:	f003 030c 	and.w	r3, r3, #12
 800152a:	e000      	b.n	800152e <HAL_ADC_Init+0x192>
 800152c:	230c      	movs	r3, #12
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	6812      	ldr	r2, [r2, #0]
 8001532:	430b      	orrs	r3, r1
 8001534:	60d3      	str	r3, [r2, #12]
                   ADC_CFGR1_RES,
                   __LL_ADC_RESOLUTION_ADC1_TO_ADC4(hadc->Init.Resolution));   /* Convert resolution for the ADC4 */

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8001536:	4b3c      	ldr	r3, [pc, #240]	; (8001628 <HAL_ADC_Init+0x28c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001546:	4938      	ldr	r1, [pc, #224]	; (8001628 <HAL_ADC_Init+0x28c>)
 8001548:	4313      	orrs	r3, r2
 800154a:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a30      	ldr	r2, [pc, #192]	; (8001614 <HAL_ADC_Init+0x278>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d010      	beq.n	8001578 <HAL_ADC_Init+0x1dc>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800155c:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001562:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8001568:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001570:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8001572:	4313      	orrs	r3, r2
 8001574:	623b      	str	r3, [r7, #32]
 8001576:	e030      	b.n	80015da <HAL_ADC_Init+0x23e>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	7f1b      	ldrb	r3, [r3, #28]
 800157c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001584:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001586:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800158c:	2a00      	cmp	r2, #0
 800158e:	d002      	beq.n	8001596 <HAL_ADC_Init+0x1fa>
 8001590:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001594:	e000      	b.n	8001598 <HAL_ADC_Init+0x1fc>
 8001596:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001598:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800159e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	da04      	bge.n	80015b2 <HAL_ADC_Init+0x216>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015b0:	e001      	b.n	80015b6 <HAL_ADC_Init+0x21a>
 80015b2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 80015b6:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4918      	ldr	r1, [pc, #96]	; (8001620 <HAL_ADC_Init+0x284>)
 80015be:	428b      	cmp	r3, r1
 80015c0:	d103      	bne.n	80015ca <HAL_ADC_Init+0x22e>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015c8:	e003      	b.n	80015d2 <HAL_ADC_Init+0x236>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015d0:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80015d2:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015d4:	6a3a      	ldr	r2, [r7, #32]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d12f      	bne.n	8001644 <HAL_ADC_Init+0x2a8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <HAL_ADC_Init+0x278>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d007      	beq.n	80015fe <HAL_ADC_Init+0x262>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	3b01      	subs	r3, #1
 80015f4:	045b      	lsls	r3, r3, #17
 80015f6:	6a3a      	ldr	r2, [r7, #32]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	623b      	str	r3, [r7, #32]
 80015fc:	e022      	b.n	8001644 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001604:	2b00      	cmp	r3, #0
 8001606:	d111      	bne.n	800162c <HAL_ADC_Init+0x290>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001608:	6a3b      	ldr	r3, [r7, #32]
 800160a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160e:	623b      	str	r3, [r7, #32]
 8001610:	e018      	b.n	8001644 <HAL_ADC_Init+0x2a8>
 8001612:	bf00      	nop
 8001614:	46021000 	.word	0x46021000
 8001618:	20000000 	.word	0x20000000
 800161c:	053e2d63 	.word	0x053e2d63
 8001620:	42028000 	.word	0x42028000
 8001624:	42028308 	.word	0x42028308
 8001628:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001630:	f043 0220 	orr.w	r2, r3, #32
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800163c:	f043 0201 	orr.w	r2, r3, #1
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a93      	ldr	r2, [pc, #588]	; (8001898 <HAL_ADC_Init+0x4fc>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d018      	beq.n	8001680 <HAL_ADC_Init+0x2e4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001652:	2b00      	cmp	r3, #0
 8001654:	d009      	beq.n	800166a <HAL_ADC_Init+0x2ce>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800165a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001662:	4313      	orrs	r3, r2
 8001664:	6a3a      	ldr	r2, [r7, #32]
 8001666:	4313      	orrs	r3, r2
 8001668:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68da      	ldr	r2, [r3, #12]
 8001670:	4b8a      	ldr	r3, [pc, #552]	; (800189c <HAL_ADC_Init+0x500>)
 8001672:	4013      	ands	r3, r2
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	6812      	ldr	r2, [r2, #0]
 8001678:	6a39      	ldr	r1, [r7, #32]
 800167a:	430b      	orrs	r3, r1
 800167c:	60d3      	str	r3, [r2, #12]
 800167e:	e033      	b.n	80016e8 <HAL_ADC_Init+0x34c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001684:	2b00      	cmp	r3, #0
 8001686:	d009      	beq.n	800169c <HAL_ADC_Init+0x300>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800168c:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001694:	4313      	orrs	r3, r2
 8001696:	6a3a      	ldr	r2, [r7, #32]
 8001698:	4313      	orrs	r3, r2
 800169a:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	f423 33bf 	bic.w	r3, r3, #97792	; 0x17e00
 80016a6:	f423 73f9 	bic.w	r3, r3, #498	; 0x1f2
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	6a39      	ldr	r1, [r7, #32]
 80016b0:	430b      	orrs	r3, r1
 80016b2:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN   |
                 ADC4_CFGR1_SCANDIR |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d008      	beq.n	80016ce <HAL_ADC_Init+0x332>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.LowPowerAutoPowerOff);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a1a      	ldr	r2, [r3, #32]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d008      	beq.n	80016e8 <HAL_ADC_Init+0x34c>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.VrefProtection);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a6a      	ldr	r2, [pc, #424]	; (8001898 <HAL_ADC_Init+0x4fc>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	f000 8093 	beq.w	800181a <HAL_ADC_Init+0x47e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fe29 	bl	8001350 <LL_ADC_REG_IsConversionOngoing>
 80016fe:	6138      	str	r0, [r7, #16]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fe36 	bl	8001376 <LL_ADC_INJ_IsConversionOngoing>
 800170a:	60f8      	str	r0, [r7, #12]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d161      	bne.n	80017d6 <HAL_ADC_Init+0x43a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d15e      	bne.n	80017d6 <HAL_ADC_Init+0x43a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	7f1b      	ldrb	r3, [r3, #28]
 800171c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	495f      	ldr	r1, [pc, #380]	; (80018a0 <HAL_ADC_Init+0x504>)
 8001724:	428b      	cmp	r3, r1
 8001726:	d102      	bne.n	800172e <HAL_ADC_Init+0x392>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800172c:	e002      	b.n	8001734 <HAL_ADC_Init+0x398>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001732:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001734:	4313      	orrs	r3, r2
 8001736:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001742:	f023 0303 	bic.w	r3, r3, #3
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	6812      	ldr	r2, [r2, #0]
 800174a:	6a39      	ldr	r1, [r7, #32]
 800174c:	430b      	orrs	r3, r1
 800174e:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d007      	beq.n	8001768 <HAL_ADC_Init+0x3cc>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	4619      	mov	r1, r3
 8001762:	4610      	mov	r0, r2
 8001764:	f7ff fd51 	bl	800120a <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800176e:	2b01      	cmp	r3, #1
 8001770:	d11e      	bne.n	80017b0 <HAL_ADC_Init+0x414>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001776:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	691a      	ldr	r2, [r3, #16]
 800177e:	4b49      	ldr	r3, [pc, #292]	; (80018a4 <HAL_ADC_Init+0x508>)
 8001780:	4013      	ands	r3, r2
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001786:	0411      	lsls	r1, r2, #16
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800178c:	4311      	orrs	r1, r2
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001792:	4311      	orrs	r1, r2
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8001798:	4311      	orrs	r1, r2
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800179e:	0892      	lsrs	r2, r2, #2
 80017a0:	430a      	orrs	r2, r1
 80017a2:	431a      	orrs	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f042 0201 	orr.w	r2, r2, #1
 80017ac:	611a      	str	r2, [r3, #16]
 80017ae:	e007      	b.n	80017c0 <HAL_ADC_Init+0x424>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	691a      	ldr	r2, [r3, #16]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 0201 	bic.w	r2, r2, #1
 80017be:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d10c      	bne.n	80017f8 <HAL_ADC_Init+0x45c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e4:	f023 010f 	bic.w	r1, r3, #15
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ec:	1e5a      	subs	r2, r3, #1
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	631a      	str	r2, [r3, #48]	; 0x30
 80017f6:	e007      	b.n	8001808 <HAL_ADC_Init+0x46c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 020f 	bic.w	r2, r2, #15
 8001806:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800180c:	f023 0303 	bic.w	r3, r3, #3
 8001810:	f043 0201 	orr.w	r2, r3, #1
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001818:	e0b2      	b.n	8001980 <HAL_ADC_Init+0x5e4>
      /*  - oversampling enable                                                 */
      /*  - oversampling ratio                                                  */
      /*  - oversampling shift                                                  */
      /*  - oversampling discontinuous mode (triggered mode)                    */
      /*  - trigger frequency mode                                              */
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                   hadc->Init.Oversampling.RightBitShift |
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001822:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                   hadc->Init.Oversampling.RightBitShift |
 8001828:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                   hadc->Init.Oversampling.TriggeredMode |
 800182e:	4313      	orrs	r3, r2
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001830:	69fa      	ldr	r2, [r7, #28]
 8001832:	4313      	orrs	r3, r2
 8001834:	61fb      	str	r3, [r7, #28]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800183c:	2b01      	cmp	r3, #1
 800183e:	d103      	bne.n	8001848 <HAL_ADC_Init+0x4ac>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	691a      	ldr	r2, [r3, #16]
 800184e:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <HAL_ADC_Init+0x50c>)
 8001850:	4013      	ands	r3, r2
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6812      	ldr	r2, [r2, #0]
 8001856:	69f9      	ldr	r1, [r7, #28]
 8001858:	430b      	orrs	r3, r1
 800185a:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6818      	ldr	r0, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001864:	461a      	mov	r2, r3
 8001866:	2100      	movs	r1, #0
 8001868:	f7ff fcf2 	bl	8001250 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001874:	461a      	mov	r2, r3
 8001876:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 800187a:	f7ff fce9 	bl	8001250 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d112      	bne.n	80018ac <HAL_ADC_Init+0x510>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f062 020f 	orn	r2, r2, #15
 8001894:	629a      	str	r2, [r3, #40]	; 0x28
 8001896:	e044      	b.n	8001922 <HAL_ADC_Init+0x586>
 8001898:	46021000 	.word	0x46021000
 800189c:	fff0c013 	.word	0xfff0c013
 80018a0:	42028000 	.word	0x42028000
 80018a4:	fc00f81e 	.word	0xfc00f81e
 80018a8:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018b4:	d135      	bne.n	8001922 <HAL_ADC_Init+0x586>
      {
        /* Count number of ranks available in HAL ADC handle variable */
        uint32_t ADCGroupRegularSequencerRanksCount;

        /* Parse all ranks from 1 to 8 */
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 80018b6:	2300      	movs	r3, #0
 80018b8:	61bb      	str	r3, [r7, #24]
 80018ba:	e00d      	b.n	80018d8 <HAL_ADC_Init+0x53c>
             ADCGroupRegularSequencerRanksCount++)
        {
          /* Check each sequencer rank until value of end of sequence */
          if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ca:	f003 030f 	and.w	r3, r3, #15
 80018ce:	2b0f      	cmp	r3, #15
 80018d0:	d006      	beq.n	80018e0 <HAL_ADC_Init+0x544>
             ADCGroupRegularSequencerRanksCount++)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	3301      	adds	r3, #1
 80018d6:	61bb      	str	r3, [r7, #24]
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	2b07      	cmp	r3, #7
 80018dc:	d9ee      	bls.n	80018bc <HAL_ADC_Init+0x520>
 80018de:	e000      	b.n	80018e2 <HAL_ADC_Init+0x546>
              ADC_CHSELR_SQ1)
          {
            break;
 80018e0:	bf00      	nop
          }
        }

        if (ADCGroupRegularSequencerRanksCount == 1UL)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d108      	bne.n	80018fa <HAL_ADC_Init+0x55e>
        {
          /* Set ADC group regular sequencer:                                   */
          /* Set sequencer scan length by clearing ranks above rank 1           */
          /* and do not modify rank 1 value.                                    */
          SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f062 020f 	orn	r2, r2, #15
 80018f6:	629a      	str	r2, [r3, #40]	; 0x28
 80018f8:	e013      	b.n	8001922 <HAL_ADC_Init+0x586>
          /*          therefore after the first call of "HAL_ADC_Init()",        */
          /*          each rank corresponding to parameter "NbrOfConversion"    */
          /*          must be set using "HAL_ADC_ConfigChannel()".              */
          /*  - Set sequencer scan length by clearing ranks above maximum rank  */
          /*    and do not modify other ranks value.                            */
          MODIFY_REG(hadc->Instance->CHSELR,
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001904:	3b01      	subs	r3, #1
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	f003 031c 	and.w	r3, r3, #28
 800190c:	f06f 020f 	mvn.w	r2, #15
 8001910:	fa02 f103 	lsl.w	r1, r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	430a      	orrs	r2, r1
 8001920:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68da      	ldr	r2, [r3, #12]
 8001928:	4b18      	ldr	r3, [pc, #96]	; (800198c <HAL_ADC_Init+0x5f0>)
 800192a:	4013      	ands	r3, r2
 800192c:	6a3a      	ldr	r2, [r7, #32]
 800192e:	429a      	cmp	r2, r3
 8001930:	d10b      	bne.n	800194a <HAL_ADC_Init+0x5ae>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800193c:	f023 0303 	bic.w	r3, r3, #3
 8001940:	f043 0201 	orr.w	r2, r3, #1
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001948:	e01a      	b.n	8001980 <HAL_ADC_Init+0x5e4>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800194e:	f023 0312 	bic.w	r3, r3, #18
 8001952:	f043 0210 	orr.w	r2, r3, #16
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800195e:	f043 0201 	orr.w	r2, r3, #1
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800196c:	e008      	b.n	8001980 <HAL_ADC_Init+0x5e4>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001972:	f043 0210 	orr.w	r2, r3, #16
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 8001980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001984:	4618      	mov	r0, r3
 8001986:	3728      	adds	r7, #40	; 0x28
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	833ffff3 	.word	0x833ffff3

08001990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019ac:	4013      	ands	r3, r2
 80019ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019c2:	4a04      	ldr	r2, [pc, #16]	; (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	60d3      	str	r3, [r2, #12]
}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <__NVIC_GetPriorityGrouping+0x18>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	0a1b      	lsrs	r3, r3, #8
 80019e2:	f003 0307 	and.w	r3, r3, #7
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	db0b      	blt.n	8001a1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	f003 021f 	and.w	r2, r3, #31
 8001a0c:	4907      	ldr	r1, [pc, #28]	; (8001a2c <__NVIC_EnableIRQ+0x38>)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	095b      	lsrs	r3, r3, #5
 8001a14:	2001      	movs	r0, #1
 8001a16:	fa00 f202 	lsl.w	r2, r0, r2
 8001a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000e100 	.word	0xe000e100

08001a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	6039      	str	r1, [r7, #0]
 8001a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	db0a      	blt.n	8001a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	490c      	ldr	r1, [pc, #48]	; (8001a7c <__NVIC_SetPriority+0x4c>)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	0112      	lsls	r2, r2, #4
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	440b      	add	r3, r1
 8001a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a58:	e00a      	b.n	8001a70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	4908      	ldr	r1, [pc, #32]	; (8001a80 <__NVIC_SetPriority+0x50>)
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	3b04      	subs	r3, #4
 8001a68:	0112      	lsls	r2, r2, #4
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	761a      	strb	r2, [r3, #24]
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000e100 	.word	0xe000e100
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b089      	sub	sp, #36	; 0x24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f1c3 0307 	rsb	r3, r3, #7
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	bf28      	it	cs
 8001aa2:	2304      	movcs	r3, #4
 8001aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	2b06      	cmp	r3, #6
 8001aac:	d902      	bls.n	8001ab4 <NVIC_EncodePriority+0x30>
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3b03      	subs	r3, #3
 8001ab2:	e000      	b.n	8001ab6 <NVIC_EncodePriority+0x32>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43da      	mvns	r2, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001acc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad6:	43d9      	mvns	r1, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	4313      	orrs	r3, r2
         );
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3724      	adds	r7, #36	; 0x24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001afc:	d301      	bcc.n	8001b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001afe:	2301      	movs	r3, #1
 8001b00:	e00f      	b.n	8001b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b02:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <SysTick_Config+0x40>)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b0a:	210f      	movs	r1, #15
 8001b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b10:	f7ff ff8e 	bl	8001a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <SysTick_Config+0x40>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b1a:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <SysTick_Config+0x40>)
 8001b1c:	2207      	movs	r2, #7
 8001b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	e000e010 	.word	0xe000e010

08001b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff ff29 	bl	8001990 <__NVIC_SetPriorityGrouping>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b086      	sub	sp, #24
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b54:	f7ff ff40 	bl	80019d8 <__NVIC_GetPriorityGrouping>
 8001b58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	68b9      	ldr	r1, [r7, #8]
 8001b5e:	6978      	ldr	r0, [r7, #20]
 8001b60:	f7ff ff90 	bl	8001a84 <NVIC_EncodePriority>
 8001b64:	4602      	mov	r2, r0
 8001b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff5f 	bl	8001a30 <__NVIC_SetPriority>
}
 8001b72:	bf00      	nop
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	4603      	mov	r3, r0
 8001b82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ff33 	bl	80019f4 <__NVIC_EnableIRQ>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff ffa4 	bl	8001aec <SysTick_Config>
 8001ba4:	4603      	mov	r3, r0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b089      	sub	sp, #36	; 0x24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001bc2:	e1ba      	b.n	8001f3a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	2101      	movs	r1, #1
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 81aa 	beq.w	8001f34 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a55      	ldr	r2, [pc, #340]	; (8001d38 <HAL_GPIO_Init+0x188>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d15d      	bne.n	8001ca4 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001bee:	2201      	movs	r2, #1
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69fa      	ldr	r2, [r7, #28]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 0201 	and.w	r2, r3, #1
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	69fa      	ldr	r2, [r7, #28]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69fa      	ldr	r2, [r7, #28]
 8001c16:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001c18:	4a48      	ldr	r2, [pc, #288]	; (8001d3c <HAL_GPIO_Init+0x18c>)
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001c20:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001c22:	4a46      	ldr	r2, [pc, #280]	; (8001d3c <HAL_GPIO_Init+0x18c>)
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	4413      	add	r3, r2
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	08da      	lsrs	r2, r3, #3
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	3208      	adds	r2, #8
 8001c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c3a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	220f      	movs	r2, #15
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69fa      	ldr	r2, [r7, #28]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	220b      	movs	r2, #11
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	69fa      	ldr	r2, [r7, #28]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	08da      	lsrs	r2, r3, #3
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	3208      	adds	r2, #8
 8001c6e:	69f9      	ldr	r1, [r7, #28]
 8001c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	2203      	movs	r2, #3
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69fa      	ldr	r2, [r7, #28]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	2202      	movs	r2, #2
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	69fa      	ldr	r2, [r7, #28]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	69fa      	ldr	r2, [r7, #28]
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	e067      	b.n	8001d74 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d003      	beq.n	8001cb4 <HAL_GPIO_Init+0x104>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b12      	cmp	r3, #18
 8001cb2:	d145      	bne.n	8001d40 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	08da      	lsrs	r2, r3, #3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3208      	adds	r2, #8
 8001cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cc0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	220f      	movs	r2, #15
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69fa      	ldr	r2, [r7, #28]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	f003 020f 	and.w	r2, r3, #15
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	69fa      	ldr	r2, [r7, #28]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	08da      	lsrs	r2, r3, #3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3208      	adds	r2, #8
 8001cfa:	69f9      	ldr	r1, [r7, #28]
 8001cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69fa      	ldr	r2, [r7, #28]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0203 	and.w	r2, r3, #3
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	69fa      	ldr	r2, [r7, #28]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	69fa      	ldr	r2, [r7, #28]
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	e01e      	b.n	8001d74 <HAL_GPIO_Init+0x1c4>
 8001d36:	bf00      	nop
 8001d38:	46020000 	.word	0x46020000
 8001d3c:	08008d24 	.word	0x08008d24
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	2203      	movs	r2, #3
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69fa      	ldr	r2, [r7, #28]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0203 	and.w	r2, r3, #3
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	69fa      	ldr	r2, [r7, #28]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	69fa      	ldr	r2, [r7, #28]
 8001d72:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d00b      	beq.n	8001d94 <HAL_GPIO_Init+0x1e4>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d007      	beq.n	8001d94 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d88:	2b11      	cmp	r3, #17
 8001d8a:	d003      	beq.n	8001d94 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b12      	cmp	r3, #18
 8001d92:	d130      	bne.n	8001df6 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	2203      	movs	r2, #3
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69fa      	ldr	r2, [r7, #28]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	69fa      	ldr	r2, [r7, #28]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	69fa      	ldr	r2, [r7, #28]
 8001dc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001dca:	2201      	movs	r2, #1
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	69fa      	ldr	r2, [r7, #28]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	091b      	lsrs	r3, r3, #4
 8001de0:	f003 0201 	and.w	r2, r3, #1
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	69fa      	ldr	r2, [r7, #28]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	69fa      	ldr	r2, [r7, #28]
 8001df4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d017      	beq.n	8001e2e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	2203      	movs	r2, #3
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	69fa      	ldr	r2, [r7, #28]
 8001e12:	4013      	ands	r3, r2
 8001e14:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	69fa      	ldr	r2, [r7, #28]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	69fa      	ldr	r2, [r7, #28]
 8001e2c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d07c      	beq.n	8001f34 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001e3a:	4a47      	ldr	r2, [pc, #284]	; (8001f58 <HAL_GPIO_Init+0x3a8>)
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	089b      	lsrs	r3, r3, #2
 8001e40:	3318      	adds	r3, #24
 8001e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e46:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	220f      	movs	r2, #15
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	69fa      	ldr	r2, [r7, #28]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	0a9a      	lsrs	r2, r3, #10
 8001e62:	4b3e      	ldr	r3, [pc, #248]	; (8001f5c <HAL_GPIO_Init+0x3ac>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	f002 0203 	and.w	r2, r2, #3
 8001e6c:	00d2      	lsls	r2, r2, #3
 8001e6e:	4093      	lsls	r3, r2
 8001e70:	69fa      	ldr	r2, [r7, #28]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001e76:	4938      	ldr	r1, [pc, #224]	; (8001f58 <HAL_GPIO_Init+0x3a8>)
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	089b      	lsrs	r3, r3, #2
 8001e7c:	3318      	adds	r3, #24
 8001e7e:	69fa      	ldr	r2, [r7, #28]
 8001e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001e84:	4b34      	ldr	r3, [pc, #208]	; (8001f58 <HAL_GPIO_Init+0x3a8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69fa      	ldr	r2, [r7, #28]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001ea0:	69fa      	ldr	r2, [r7, #28]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001ea8:	4a2b      	ldr	r2, [pc, #172]	; (8001f58 <HAL_GPIO_Init+0x3a8>)
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001eae:	4b2a      	ldr	r3, [pc, #168]	; (8001f58 <HAL_GPIO_Init+0x3a8>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	69fa      	ldr	r2, [r7, #28]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001eca:	69fa      	ldr	r2, [r7, #28]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001ed2:	4a21      	ldr	r2, [pc, #132]	; (8001f58 <HAL_GPIO_Init+0x3a8>)
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001ed8:	4b1f      	ldr	r3, [pc, #124]	; (8001f58 <HAL_GPIO_Init+0x3a8>)
 8001eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ede:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69fa      	ldr	r2, [r7, #28]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8001ef6:	69fa      	ldr	r2, [r7, #28]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001efe:	4a16      	ldr	r2, [pc, #88]	; (8001f58 <HAL_GPIO_Init+0x3a8>)
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8001f06:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <HAL_GPIO_Init+0x3a8>)
 8001f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f0c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69fa      	ldr	r2, [r7, #28]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001f24:	69fa      	ldr	r2, [r7, #28]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001f2c:	4a0a      	ldr	r2, [pc, #40]	; (8001f58 <HAL_GPIO_Init+0x3a8>)
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	3301      	adds	r3, #1
 8001f38:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	fa22 f303 	lsr.w	r3, r2, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f47f ae3d 	bne.w	8001bc4 <HAL_GPIO_Init+0x14>
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	bf00      	nop
 8001f4e:	3724      	adds	r7, #36	; 0x24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	46022000 	.word	0x46022000
 8001f5c:	002f7f7f 	.word	0x002f7f7f

08001f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	807b      	strh	r3, [r7, #2]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f70:	787b      	ldrb	r3, [r7, #1]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f76:	887a      	ldrh	r2, [r7, #2]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8001f7c:	e002      	b.n	8001f84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8001f7e:	887a      	ldrh	r2, [r7, #2]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f92:	b08f      	sub	sp, #60	; 0x3c
 8001f94:	af0a      	add	r7, sp, #40	; 0x28
 8001f96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e116      	b.n	80021d0 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	60bb      	str	r3, [r7, #8]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d106      	bne.n	8001fc2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7fe fed5 	bl	8000d6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d102      	bne.n	8001fdc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f006 f935 	bl	8008250 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	687e      	ldr	r6, [r7, #4]
 8001fee:	466d      	mov	r5, sp
 8001ff0:	f106 0410 	add.w	r4, r6, #16
 8001ff4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ff6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ff8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ffa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ffc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002000:	e885 0003 	stmia.w	r5, {r0, r1}
 8002004:	1d33      	adds	r3, r6, #4
 8002006:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002008:	6838      	ldr	r0, [r7, #0]
 800200a:	f006 f852 	bl	80080b2 <USB_CoreInit>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2202      	movs	r2, #2
 8002018:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e0d7      	b.n	80021d0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2100      	movs	r1, #0
 8002026:	4618      	mov	r0, r3
 8002028:	f006 f923 	bl	8008272 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800202c:	2300      	movs	r3, #0
 800202e:	73fb      	strb	r3, [r7, #15]
 8002030:	e04a      	b.n	80020c8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002032:	7bfa      	ldrb	r2, [r7, #15]
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	4613      	mov	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	4413      	add	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	440b      	add	r3, r1
 8002040:	333d      	adds	r3, #61	; 0x3d
 8002042:	2201      	movs	r2, #1
 8002044:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002046:	7bfa      	ldrb	r2, [r7, #15]
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4413      	add	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	440b      	add	r3, r1
 8002054:	333c      	adds	r3, #60	; 0x3c
 8002056:	7bfa      	ldrb	r2, [r7, #15]
 8002058:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800205a:	7bfa      	ldrb	r2, [r7, #15]
 800205c:	7bfb      	ldrb	r3, [r7, #15]
 800205e:	b298      	uxth	r0, r3
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	4613      	mov	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	440b      	add	r3, r1
 800206c:	3344      	adds	r3, #68	; 0x44
 800206e:	4602      	mov	r2, r0
 8002070:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002072:	7bfa      	ldrb	r2, [r7, #15]
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	4613      	mov	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	4413      	add	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	440b      	add	r3, r1
 8002080:	3340      	adds	r3, #64	; 0x40
 8002082:	2200      	movs	r2, #0
 8002084:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002086:	7bfa      	ldrb	r2, [r7, #15]
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	4413      	add	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	440b      	add	r3, r1
 8002094:	3348      	adds	r3, #72	; 0x48
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800209a:	7bfa      	ldrb	r2, [r7, #15]
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4413      	add	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	440b      	add	r3, r1
 80020a8:	334c      	adds	r3, #76	; 0x4c
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020ae:	7bfa      	ldrb	r2, [r7, #15]
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	4413      	add	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	440b      	add	r3, r1
 80020bc:	3354      	adds	r3, #84	; 0x54
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020c2:	7bfb      	ldrb	r3, [r7, #15]
 80020c4:	3301      	adds	r3, #1
 80020c6:	73fb      	strb	r3, [r7, #15]
 80020c8:	7bfa      	ldrb	r2, [r7, #15]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d3af      	bcc.n	8002032 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020d2:	2300      	movs	r3, #0
 80020d4:	73fb      	strb	r3, [r7, #15]
 80020d6:	e044      	b.n	8002162 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020d8:	7bfa      	ldrb	r2, [r7, #15]
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	4413      	add	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80020ea:	2200      	movs	r2, #0
 80020ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020ee:	7bfa      	ldrb	r2, [r7, #15]
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4413      	add	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002100:	7bfa      	ldrb	r2, [r7, #15]
 8002102:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002104:	7bfa      	ldrb	r2, [r7, #15]
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800211a:	7bfa      	ldrb	r2, [r7, #15]
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4413      	add	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002130:	7bfa      	ldrb	r2, [r7, #15]
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	4413      	add	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	440b      	add	r3, r1
 800213e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002146:	7bfa      	ldrb	r2, [r7, #15]
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4413      	add	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	440b      	add	r3, r1
 8002154:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800215c:	7bfb      	ldrb	r3, [r7, #15]
 800215e:	3301      	adds	r3, #1
 8002160:	73fb      	strb	r3, [r7, #15]
 8002162:	7bfa      	ldrb	r2, [r7, #15]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	429a      	cmp	r2, r3
 800216a:	d3b5      	bcc.n	80020d8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	603b      	str	r3, [r7, #0]
 8002172:	687e      	ldr	r6, [r7, #4]
 8002174:	466d      	mov	r5, sp
 8002176:	f106 0410 	add.w	r4, r6, #16
 800217a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800217c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800217e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002180:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002182:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002186:	e885 0003 	stmia.w	r5, {r0, r1}
 800218a:	1d33      	adds	r3, r6, #4
 800218c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800218e:	6838      	ldr	r0, [r7, #0]
 8002190:	f006 f8bc 	bl	800830c <USB_DevInit>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d005      	beq.n	80021a6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2202      	movs	r2, #2
 800219e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e014      	b.n	80021d0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d102      	bne.n	80021c4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 ff38 	bl	8003034 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f006 fbcf 	bl	800896c <USB_DevDisconnect>

  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021d8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80021d8:	b590      	push	{r4, r7, lr}
 80021da:	b08d      	sub	sp, #52	; 0x34
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021e6:	6a3b      	ldr	r3, [r7, #32]
 80021e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f006 fc70 	bl	8008ad4 <USB_GetMode>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f040 84b7 	bne.w	8002b6a <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f006 fbd4 	bl	80089ae <USB_ReadInterrupts>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 84ad 	beq.w	8002b68 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	0a1b      	lsrs	r3, r3, #8
 8002218:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f006 fbc1 	bl	80089ae <USB_ReadInterrupts>
 800222c:	4603      	mov	r3, r0
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b02      	cmp	r3, #2
 8002234:	d107      	bne.n	8002246 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	695a      	ldr	r2, [r3, #20]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f002 0202 	and.w	r2, r2, #2
 8002244:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f006 fbaf 	bl	80089ae <USB_ReadInterrupts>
 8002250:	4603      	mov	r3, r0
 8002252:	f003 0310 	and.w	r3, r3, #16
 8002256:	2b10      	cmp	r3, #16
 8002258:	d161      	bne.n	800231e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	699a      	ldr	r2, [r3, #24]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0210 	bic.w	r2, r2, #16
 8002268:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800226a:	6a3b      	ldr	r3, [r7, #32]
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	f003 020f 	and.w	r2, r3, #15
 8002276:	4613      	mov	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	4413      	add	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	4413      	add	r3, r2
 8002286:	3304      	adds	r3, #4
 8002288:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	0c5b      	lsrs	r3, r3, #17
 800228e:	f003 030f 	and.w	r3, r3, #15
 8002292:	2b02      	cmp	r3, #2
 8002294:	d124      	bne.n	80022e0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800229c:	4013      	ands	r3, r2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d035      	beq.n	800230e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	091b      	lsrs	r3, r3, #4
 80022aa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	461a      	mov	r2, r3
 80022b4:	6a38      	ldr	r0, [r7, #32]
 80022b6:	f006 fb01 	bl	80088bc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	691a      	ldr	r2, [r3, #16]
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	091b      	lsrs	r3, r3, #4
 80022c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022c6:	441a      	add	r2, r3
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	6a1a      	ldr	r2, [r3, #32]
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	091b      	lsrs	r3, r3, #4
 80022d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022d8:	441a      	add	r2, r3
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	621a      	str	r2, [r3, #32]
 80022de:	e016      	b.n	800230e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	0c5b      	lsrs	r3, r3, #17
 80022e4:	f003 030f 	and.w	r3, r3, #15
 80022e8:	2b06      	cmp	r3, #6
 80022ea:	d110      	bne.n	800230e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022f2:	2208      	movs	r2, #8
 80022f4:	4619      	mov	r1, r3
 80022f6:	6a38      	ldr	r0, [r7, #32]
 80022f8:	f006 fae0 	bl	80088bc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	6a1a      	ldr	r2, [r3, #32]
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	091b      	lsrs	r3, r3, #4
 8002304:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002308:	441a      	add	r2, r3
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	699a      	ldr	r2, [r3, #24]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f042 0210 	orr.w	r2, r2, #16
 800231c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f006 fb43 	bl	80089ae <USB_ReadInterrupts>
 8002328:	4603      	mov	r3, r0
 800232a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800232e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002332:	f040 80a7 	bne.w	8002484 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002336:	2300      	movs	r3, #0
 8002338:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f006 fb48 	bl	80089d4 <USB_ReadDevAllOutEpInterrupt>
 8002344:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002346:	e099      	b.n	800247c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 808e 	beq.w	8002470 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	4611      	mov	r1, r2
 800235e:	4618      	mov	r0, r3
 8002360:	f006 fb6c 	bl	8008a3c <USB_ReadDevOutEPInterrupt>
 8002364:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00c      	beq.n	800238a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	015a      	lsls	r2, r3, #5
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	4413      	add	r3, r2
 8002378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800237c:	461a      	mov	r2, r3
 800237e:	2301      	movs	r3, #1
 8002380:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002382:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 fd27 	bl	8002dd8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	f003 0308 	and.w	r3, r3, #8
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00c      	beq.n	80023ae <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	015a      	lsls	r2, r3, #5
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	4413      	add	r3, r2
 800239c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023a0:	461a      	mov	r2, r3
 80023a2:	2308      	movs	r3, #8
 80023a4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80023a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 fdfd 	bl	8002fa8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	f003 0310 	and.w	r3, r3, #16
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d008      	beq.n	80023ca <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	015a      	lsls	r2, r3, #5
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	4413      	add	r3, r2
 80023c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023c4:	461a      	mov	r2, r3
 80023c6:	2310      	movs	r3, #16
 80023c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d030      	beq.n	8002436 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80023d4:	6a3b      	ldr	r3, [r7, #32]
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023dc:	2b80      	cmp	r3, #128	; 0x80
 80023de:	d109      	bne.n	80023f4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	69fa      	ldr	r2, [r7, #28]
 80023ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023f2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80023f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f6:	4613      	mov	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	4413      	add	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	3304      	adds	r3, #4
 8002408:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	78db      	ldrb	r3, [r3, #3]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d108      	bne.n	8002424 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	2200      	movs	r2, #0
 8002416:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	b2db      	uxtb	r3, r3
 800241c:	4619      	mov	r1, r3
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 fbf0 	bl	8002c04 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	015a      	lsls	r2, r3, #5
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	4413      	add	r3, r2
 800242c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002430:	461a      	mov	r2, r3
 8002432:	2302      	movs	r3, #2
 8002434:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	f003 0320 	and.w	r3, r3, #32
 800243c:	2b00      	cmp	r3, #0
 800243e:	d008      	beq.n	8002452 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	015a      	lsls	r2, r3, #5
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	4413      	add	r3, r2
 8002448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800244c:	461a      	mov	r2, r3
 800244e:	2320      	movs	r3, #32
 8002450:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d009      	beq.n	8002470 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	015a      	lsls	r2, r3, #5
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	4413      	add	r3, r2
 8002464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002468:	461a      	mov	r2, r3
 800246a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800246e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	3301      	adds	r3, #1
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002478:	085b      	lsrs	r3, r3, #1
 800247a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800247c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247e:	2b00      	cmp	r3, #0
 8002480:	f47f af62 	bne.w	8002348 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f006 fa90 	bl	80089ae <USB_ReadInterrupts>
 800248e:	4603      	mov	r3, r0
 8002490:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002494:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002498:	f040 80db 	bne.w	8002652 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f006 fab1 	bl	8008a08 <USB_ReadDevAllInEpInterrupt>
 80024a6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80024ac:	e0cd      	b.n	800264a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80024ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 80c2 	beq.w	800263e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	4611      	mov	r1, r2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f006 fad7 	bl	8008a78 <USB_ReadDevInEPInterrupt>
 80024ca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d057      	beq.n	8002586 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	f003 030f 	and.w	r3, r3, #15
 80024dc:	2201      	movs	r2, #1
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	43db      	mvns	r3, r3
 80024f0:	69f9      	ldr	r1, [r7, #28]
 80024f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80024f6:	4013      	ands	r3, r2
 80024f8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	015a      	lsls	r2, r3, #5
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	4413      	add	r3, r2
 8002502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002506:	461a      	mov	r2, r3
 8002508:	2301      	movs	r3, #1
 800250a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d132      	bne.n	800257a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002518:	4613      	mov	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	334c      	adds	r3, #76	; 0x4c
 8002524:	6819      	ldr	r1, [r3, #0]
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252a:	4613      	mov	r3, r2
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	4413      	add	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4403      	add	r3, r0
 8002534:	3348      	adds	r3, #72	; 0x48
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4419      	add	r1, r3
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800253e:	4613      	mov	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	4413      	add	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4403      	add	r3, r0
 8002548:	334c      	adds	r3, #76	; 0x4c
 800254a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	2b00      	cmp	r3, #0
 8002550:	d113      	bne.n	800257a <HAL_PCD_IRQHandler+0x3a2>
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002556:	4613      	mov	r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	4413      	add	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	440b      	add	r3, r1
 8002560:	3354      	adds	r3, #84	; 0x54
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d108      	bne.n	800257a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6818      	ldr	r0, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002572:	461a      	mov	r2, r3
 8002574:	2101      	movs	r1, #1
 8002576:	f006 fadf 	bl	8008b38 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	b2db      	uxtb	r3, r3
 800257e:	4619      	mov	r1, r3
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 fb01 	bl	8002b88 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b00      	cmp	r3, #0
 800258e:	d008      	beq.n	80025a2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	015a      	lsls	r2, r3, #5
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	4413      	add	r3, r2
 8002598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800259c:	461a      	mov	r2, r3
 800259e:	2308      	movs	r3, #8
 80025a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	f003 0310 	and.w	r3, r3, #16
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d008      	beq.n	80025be <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	015a      	lsls	r2, r3, #5
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	4413      	add	r3, r2
 80025b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025b8:	461a      	mov	r2, r3
 80025ba:	2310      	movs	r3, #16
 80025bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	015a      	lsls	r2, r3, #5
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025d4:	461a      	mov	r2, r3
 80025d6:	2340      	movs	r3, #64	; 0x40
 80025d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d023      	beq.n	800262c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80025e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025e6:	6a38      	ldr	r0, [r7, #32]
 80025e8:	f005 ffde 	bl	80085a8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80025ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ee:	4613      	mov	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4413      	add	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	3338      	adds	r3, #56	; 0x38
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	4413      	add	r3, r2
 80025fc:	3304      	adds	r3, #4
 80025fe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	78db      	ldrb	r3, [r3, #3]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d108      	bne.n	800261a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	2200      	movs	r2, #0
 800260c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	b2db      	uxtb	r3, r3
 8002612:	4619      	mov	r1, r3
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 fb01 	bl	8002c1c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	015a      	lsls	r2, r3, #5
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	4413      	add	r3, r2
 8002622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002626:	461a      	mov	r2, r3
 8002628:	2302      	movs	r3, #2
 800262a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002636:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 fb40 	bl	8002cbe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	3301      	adds	r3, #1
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002646:	085b      	lsrs	r3, r3, #1
 8002648:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800264a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264c:	2b00      	cmp	r3, #0
 800264e:	f47f af2e 	bne.w	80024ae <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f006 f9a9 	bl	80089ae <USB_ReadInterrupts>
 800265c:	4603      	mov	r3, r0
 800265e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002662:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002666:	d122      	bne.n	80026ae <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	69fa      	ldr	r2, [r7, #28]
 8002672:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002676:	f023 0301 	bic.w	r3, r3, #1
 800267a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002682:	2b01      	cmp	r3, #1
 8002684:	d108      	bne.n	8002698 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800268e:	2100      	movs	r1, #0
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 fcf3 	bl	800307c <HAL_PCDEx_LPM_Callback>
 8002696:	e002      	b.n	800269e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 faa9 	bl	8002bf0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695a      	ldr	r2, [r3, #20]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80026ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f006 f97b 	bl	80089ae <USB_ReadInterrupts>
 80026b8:	4603      	mov	r3, r0
 80026ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026c2:	d112      	bne.n	80026ea <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d102      	bne.n	80026da <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 fa81 	bl	8002bdc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	695a      	ldr	r2, [r3, #20]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80026e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f006 f95d 	bl	80089ae <USB_ReadInterrupts>
 80026f4:	4603      	mov	r3, r0
 80026f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026fe:	d121      	bne.n	8002744 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	695a      	ldr	r2, [r3, #20]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800270e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002716:	2b00      	cmp	r3, #0
 8002718:	d111      	bne.n	800273e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002728:	089b      	lsrs	r3, r3, #2
 800272a:	f003 020f 	and.w	r2, r3, #15
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002734:	2101      	movs	r1, #1
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 fca0 	bl	800307c <HAL_PCDEx_LPM_Callback>
 800273c:	e002      	b.n	8002744 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 fa4c 	bl	8002bdc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f006 f930 	bl	80089ae <USB_ReadInterrupts>
 800274e:	4603      	mov	r3, r0
 8002750:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002758:	f040 80b7 	bne.w	80028ca <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	69fa      	ldr	r2, [r7, #28]
 8002766:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800276a:	f023 0301 	bic.w	r3, r3, #1
 800276e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2110      	movs	r1, #16
 8002776:	4618      	mov	r0, r3
 8002778:	f005 ff16 	bl	80085a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800277c:	2300      	movs	r3, #0
 800277e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002780:	e046      	b.n	8002810 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002784:	015a      	lsls	r2, r3, #5
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	4413      	add	r3, r2
 800278a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800278e:	461a      	mov	r2, r3
 8002790:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002794:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002798:	015a      	lsls	r2, r3, #5
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	4413      	add	r3, r2
 800279e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027a6:	0151      	lsls	r1, r2, #5
 80027a8:	69fa      	ldr	r2, [r7, #28]
 80027aa:	440a      	add	r2, r1
 80027ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80027b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b8:	015a      	lsls	r2, r3, #5
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	4413      	add	r3, r2
 80027be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027c2:	461a      	mov	r2, r3
 80027c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027c8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80027ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027cc:	015a      	lsls	r2, r3, #5
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	4413      	add	r3, r2
 80027d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027da:	0151      	lsls	r1, r2, #5
 80027dc:	69fa      	ldr	r2, [r7, #28]
 80027de:	440a      	add	r2, r1
 80027e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80027ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ec:	015a      	lsls	r2, r3, #5
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	4413      	add	r3, r2
 80027f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027fa:	0151      	lsls	r1, r2, #5
 80027fc:	69fa      	ldr	r2, [r7, #28]
 80027fe:	440a      	add	r2, r1
 8002800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002804:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002808:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800280a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280c:	3301      	adds	r3, #1
 800280e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002816:	429a      	cmp	r2, r3
 8002818:	d3b3      	bcc.n	8002782 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	69fa      	ldr	r2, [r7, #28]
 8002824:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002828:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800282c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	2b00      	cmp	r3, #0
 8002834:	d016      	beq.n	8002864 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800283c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002840:	69fa      	ldr	r2, [r7, #28]
 8002842:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002846:	f043 030b 	orr.w	r3, r3, #11
 800284a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	69fa      	ldr	r2, [r7, #28]
 8002858:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800285c:	f043 030b 	orr.w	r3, r3, #11
 8002860:	6453      	str	r3, [r2, #68]	; 0x44
 8002862:	e015      	b.n	8002890 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	69fa      	ldr	r2, [r7, #28]
 800286e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002872:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002876:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800287a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	69fa      	ldr	r2, [r7, #28]
 8002886:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800288a:	f043 030b 	orr.w	r3, r3, #11
 800288e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	69fa      	ldr	r2, [r7, #28]
 800289a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800289e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80028a2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6818      	ldr	r0, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028b4:	461a      	mov	r2, r3
 80028b6:	f006 f93f 	bl	8008b38 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	695a      	ldr	r2, [r3, #20]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80028c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f006 f86d 	bl	80089ae <USB_ReadInterrupts>
 80028d4:	4603      	mov	r3, r0
 80028d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028de:	d124      	bne.n	800292a <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f006 f903 	bl	8008af0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f005 fed7 	bl	80086a2 <USB_GetDevSpeed>
 80028f4:	4603      	mov	r3, r0
 80028f6:	461a      	mov	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681c      	ldr	r4, [r3, #0]
 8002900:	f001 fe8a 	bl	8004618 <HAL_RCC_GetHCLKFreq>
 8002904:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800290a:	b2db      	uxtb	r3, r3
 800290c:	461a      	mov	r2, r3
 800290e:	4620      	mov	r0, r4
 8002910:	f005 fbfc 	bl	800810c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 f957 	bl	8002bc8 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	695a      	ldr	r2, [r3, #20]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002928:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f006 f83d 	bl	80089ae <USB_ReadInterrupts>
 8002934:	4603      	mov	r3, r0
 8002936:	f003 0308 	and.w	r3, r3, #8
 800293a:	2b08      	cmp	r3, #8
 800293c:	d10a      	bne.n	8002954 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f938 	bl	8002bb4 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	695a      	ldr	r2, [r3, #20]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f002 0208 	and.w	r2, r2, #8
 8002952:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f006 f828 	bl	80089ae <USB_ReadInterrupts>
 800295e:	4603      	mov	r3, r0
 8002960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002964:	2b80      	cmp	r3, #128	; 0x80
 8002966:	d122      	bne.n	80029ae <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002968:	6a3b      	ldr	r3, [r7, #32]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002974:	2301      	movs	r3, #1
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
 8002978:	e014      	b.n	80029a4 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800297e:	4613      	mov	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	4413      	add	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	440b      	add	r3, r1
 8002988:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d105      	bne.n	800299e <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	b2db      	uxtb	r3, r3
 8002996:	4619      	mov	r1, r3
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 f95f 	bl	8002c5c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	3301      	adds	r3, #1
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d3e5      	bcc.n	800297a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f005 fffb 	bl	80089ae <USB_ReadInterrupts>
 80029b8:	4603      	mov	r3, r0
 80029ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029c2:	d13b      	bne.n	8002a3c <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029c4:	2301      	movs	r3, #1
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24
 80029c8:	e02b      	b.n	8002a22 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	015a      	lsls	r2, r3, #5
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	4413      	add	r3, r2
 80029d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029de:	4613      	mov	r3, r2
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	4413      	add	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	440b      	add	r3, r1
 80029e8:	3340      	adds	r3, #64	; 0x40
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d115      	bne.n	8002a1c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80029f0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	da12      	bge.n	8002a1c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029fa:	4613      	mov	r3, r2
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	4413      	add	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	333f      	adds	r3, #63	; 0x3f
 8002a06:	2201      	movs	r2, #1
 8002a08:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	4619      	mov	r1, r3
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f920 	bl	8002c5c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	3301      	adds	r3, #1
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d3ce      	bcc.n	80029ca <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695a      	ldr	r2, [r3, #20]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002a3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f005 ffb4 	bl	80089ae <USB_ReadInterrupts>
 8002a46:	4603      	mov	r3, r0
 8002a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a50:	d155      	bne.n	8002afe <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a52:	2301      	movs	r3, #1
 8002a54:	627b      	str	r3, [r7, #36]	; 0x24
 8002a56:	e045      	b.n	8002ae4 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	4413      	add	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d12e      	bne.n	8002ade <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a80:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	da2b      	bge.n	8002ade <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002a92:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d121      	bne.n	8002ade <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002aac:	2201      	movs	r2, #1
 8002aae:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002ab8:	6a3b      	ldr	r3, [r7, #32]
 8002aba:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10a      	bne.n	8002ade <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	69fa      	ldr	r2, [r7, #28]
 8002ad2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ad6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ada:	6053      	str	r3, [r2, #4]
            break;
 8002adc:	e007      	b.n	8002aee <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d3b4      	bcc.n	8002a58 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695a      	ldr	r2, [r3, #20]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002afc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f005 ff53 	bl	80089ae <USB_ReadInterrupts>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b12:	d10a      	bne.n	8002b2a <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f88d 	bl	8002c34 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	695a      	ldr	r2, [r3, #20]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002b28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f005 ff3d 	bl	80089ae <USB_ReadInterrupts>
 8002b34:	4603      	mov	r3, r0
 8002b36:	f003 0304 	and.w	r3, r3, #4
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d115      	bne.n	8002b6a <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d002      	beq.n	8002b56 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f879 	bl	8002c48 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6859      	ldr	r1, [r3, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	605a      	str	r2, [r3, #4]
 8002b66:	e000      	b.n	8002b6a <HAL_PCD_IRQHandler+0x992>
      return;
 8002b68:	bf00      	nop
    }
  }
}
 8002b6a:	3734      	adds	r7, #52	; 0x34
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd90      	pop	{r4, r7, pc}

08002b70 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	460b      	mov	r3, r1
 8002b92:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	460b      	mov	r3, r1
 8002c66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002c68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	da0c      	bge.n	8002c8a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c70:	78fb      	ldrb	r3, [r7, #3]
 8002c72:	f003 020f 	and.w	r2, r3, #15
 8002c76:	4613      	mov	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	3338      	adds	r3, #56	; 0x38
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	4413      	add	r3, r2
 8002c84:	3304      	adds	r3, #4
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	e00c      	b.n	8002ca4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c8a:	78fb      	ldrb	r3, [r7, #3]
 8002c8c:	f003 020f 	and.w	r2, r3, #15
 8002c90:	4613      	mov	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68f9      	ldr	r1, [r7, #12]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f005 fd1e 	bl	80086ec <USB_EPStopXfer>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002cb4:	7afb      	ldrb	r3, [r7, #11]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b08a      	sub	sp, #40	; 0x28
 8002cc2:	af02      	add	r7, sp, #8
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	4413      	add	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	3338      	adds	r3, #56	; 0x38
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6a1a      	ldr	r2, [r3, #32]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d901      	bls.n	8002cf6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e06c      	b.n	8002dd0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	699a      	ldr	r2, [r3, #24]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	69fa      	ldr	r2, [r7, #28]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d902      	bls.n	8002d12 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	3303      	adds	r3, #3
 8002d16:	089b      	lsrs	r3, r3, #2
 8002d18:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d1a:	e02b      	b.n	8002d74 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	699a      	ldr	r2, [r3, #24]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	69fa      	ldr	r2, [r7, #28]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d902      	bls.n	8002d38 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	3303      	adds	r3, #3
 8002d3c:	089b      	lsrs	r3, r3, #2
 8002d3e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6919      	ldr	r1, [r3, #16]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	4603      	mov	r3, r0
 8002d56:	6978      	ldr	r0, [r7, #20]
 8002d58:	f005 fd72 	bl	8008840 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	691a      	ldr	r2, [r3, #16]
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	441a      	add	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a1a      	ldr	r2, [r3, #32]
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	441a      	add	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d809      	bhi.n	8002d9e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6a1a      	ldr	r2, [r3, #32]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d203      	bcs.n	8002d9e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1be      	bne.n	8002d1c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	699a      	ldr	r2, [r3, #24]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d811      	bhi.n	8002dce <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	f003 030f 	and.w	r3, r3, #15
 8002db0:	2201      	movs	r2, #1
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	6939      	ldr	r1, [r7, #16]
 8002dc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002dca:	4013      	ands	r3, r2
 8002dcc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3720      	adds	r7, #32
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b088      	sub	sp, #32
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	333c      	adds	r3, #60	; 0x3c
 8002df0:	3304      	adds	r3, #4
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	015a      	lsls	r2, r3, #5
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d17b      	bne.n	8002f06 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d015      	beq.n	8002e44 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	4a61      	ldr	r2, [pc, #388]	; (8002fa0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	f240 80b9 	bls.w	8002f94 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 80b3 	beq.w	8002f94 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	015a      	lsls	r2, r3, #5
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	4413      	add	r3, r2
 8002e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e40:	6093      	str	r3, [r2, #8]
 8002e42:	e0a7      	b.n	8002f94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	f003 0320 	and.w	r3, r3, #32
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d009      	beq.n	8002e62 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	015a      	lsls	r2, r3, #5
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	4413      	add	r3, r2
 8002e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	2320      	movs	r3, #32
 8002e5e:	6093      	str	r3, [r2, #8]
 8002e60:	e098      	b.n	8002f94 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f040 8093 	bne.w	8002f94 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	4a4b      	ldr	r2, [pc, #300]	; (8002fa0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d90f      	bls.n	8002e96 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00a      	beq.n	8002e96 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	015a      	lsls	r2, r3, #5
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	4413      	add	r3, r2
 8002e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e92:	6093      	str	r3, [r2, #8]
 8002e94:	e07e      	b.n	8002f94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	69da      	ldr	r2, [r3, #28]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	0159      	lsls	r1, r3, #5
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	440b      	add	r3, r1
 8002eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec2:	1ad2      	subs	r2, r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d114      	bne.n	8002ef8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d109      	bne.n	8002eea <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6818      	ldr	r0, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	f005 fe28 	bl	8008b38 <USB_EP0_OutStart>
 8002ee8:	e006      	b.n	8002ef8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	691a      	ldr	r2, [r3, #16]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	441a      	add	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	4619      	mov	r1, r3
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7ff fe36 	bl	8002b70 <HAL_PCD_DataOutStageCallback>
 8002f04:	e046      	b.n	8002f94 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	4a26      	ldr	r2, [pc, #152]	; (8002fa4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d124      	bne.n	8002f58 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00a      	beq.n	8002f2e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f24:	461a      	mov	r2, r3
 8002f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f2a:	6093      	str	r3, [r2, #8]
 8002f2c:	e032      	b.n	8002f94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	f003 0320 	and.w	r3, r3, #32
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d008      	beq.n	8002f4a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	015a      	lsls	r2, r3, #5
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f44:	461a      	mov	r2, r3
 8002f46:	2320      	movs	r3, #32
 8002f48:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	4619      	mov	r1, r3
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7ff fe0d 	bl	8002b70 <HAL_PCD_DataOutStageCallback>
 8002f56:	e01d      	b.n	8002f94 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d114      	bne.n	8002f88 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	4613      	mov	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d108      	bne.n	8002f88 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6818      	ldr	r0, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f80:	461a      	mov	r2, r3
 8002f82:	2100      	movs	r1, #0
 8002f84:	f005 fdd8 	bl	8008b38 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7ff fdee 	bl	8002b70 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3720      	adds	r7, #32
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	4f54300a 	.word	0x4f54300a
 8002fa4:	4f54310a 	.word	0x4f54310a

08002fa8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	333c      	adds	r3, #60	; 0x3c
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	015a      	lsls	r2, r3, #5
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	4413      	add	r3, r2
 8002fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4a15      	ldr	r2, [pc, #84]	; (8003030 <PCD_EP_OutSetupPacket_int+0x88>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d90e      	bls.n	8002ffc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d009      	beq.n	8002ffc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ffa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7ff fdcf 	bl	8002ba0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4a0a      	ldr	r2, [pc, #40]	; (8003030 <PCD_EP_OutSetupPacket_int+0x88>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d90c      	bls.n	8003024 <PCD_EP_OutSetupPacket_int+0x7c>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d108      	bne.n	8003024 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6818      	ldr	r0, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800301c:	461a      	mov	r2, r3
 800301e:	2101      	movs	r1, #1
 8003020:	f005 fd8a 	bl	8008b38 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3718      	adds	r7, #24
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	4f54300a 	.word	0x4f54300a

08003034 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003066:	f043 0303 	orr.w	r3, r3, #3
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800309c:	4b34      	ldr	r3, [pc, #208]	; (8003170 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800309e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030a4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d101      	bne.n	80030b2 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	e057      	b.n	8003162 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b8:	d90a      	bls.n	80030d0 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80030ba:	4b2d      	ldr	r3, [pc, #180]	; (8003170 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	4a2a      	ldr	r2, [pc, #168]	; (8003170 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80030c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030cc:	60d3      	str	r3, [r2, #12]
 80030ce:	e007      	b.n	80030e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80030d0:	4b27      	ldr	r3, [pc, #156]	; (8003170 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80030d8:	4925      	ldr	r1, [pc, #148]	; (8003170 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4313      	orrs	r3, r2
 80030de:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80030e0:	4b24      	ldr	r3, [pc, #144]	; (8003174 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a24      	ldr	r2, [pc, #144]	; (8003178 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80030e6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ea:	099b      	lsrs	r3, r3, #6
 80030ec:	2232      	movs	r2, #50	; 0x32
 80030ee:	fb02 f303 	mul.w	r3, r2, r3
 80030f2:	4a21      	ldr	r2, [pc, #132]	; (8003178 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80030f4:	fba2 2303 	umull	r2, r3, r2, r3
 80030f8:	099b      	lsrs	r3, r3, #6
 80030fa:	3301      	adds	r3, #1
 80030fc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80030fe:	e002      	b.n	8003106 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	3b01      	subs	r3, #1
 8003104:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003106:	4b1a      	ldr	r3, [pc, #104]	; (8003170 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d102      	bne.n	8003118 <HAL_PWREx_ControlVoltageScaling+0x84>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1f3      	bne.n	8003100 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d01b      	beq.n	8003156 <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800311e:	4b15      	ldr	r3, [pc, #84]	; (8003174 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a15      	ldr	r2, [pc, #84]	; (8003178 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8003124:	fba2 2303 	umull	r2, r3, r2, r3
 8003128:	099b      	lsrs	r3, r3, #6
 800312a:	2232      	movs	r2, #50	; 0x32
 800312c:	fb02 f303 	mul.w	r3, r2, r3
 8003130:	4a11      	ldr	r2, [pc, #68]	; (8003178 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8003132:	fba2 2303 	umull	r2, r3, r2, r3
 8003136:	099b      	lsrs	r3, r3, #6
 8003138:	3301      	adds	r3, #1
 800313a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800313c:	e002      	b.n	8003144 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	3b01      	subs	r3, #1
 8003142:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003144:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003148:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d102      	bne.n	8003156 <HAL_PWREx_ControlVoltageScaling+0xc2>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f3      	bne.n	800313e <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e000      	b.n	8003162 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	46020800 	.word	0x46020800
 8003174:	20000000 	.word	0x20000000
 8003178:	10624dd3 	.word	0x10624dd3

0800317c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003180:	4b04      	ldr	r3, [pc, #16]	; (8003194 <HAL_PWREx_GetVoltageRange+0x18>)
 8003182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003184:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003188:	4618      	mov	r0, r3
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	46020800 	.word	0x46020800

08003198 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80031a0:	4b22      	ldr	r3, [pc, #136]	; (800322c <HAL_PWREx_ConfigSupply+0x94>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a22      	ldr	r2, [pc, #136]	; (8003230 <HAL_PWREx_ConfigSupply+0x98>)
 80031a6:	fba2 2303 	umull	r2, r3, r2, r3
 80031aa:	099b      	lsrs	r3, r3, #6
 80031ac:	2232      	movs	r2, #50	; 0x32
 80031ae:	fb02 f303 	mul.w	r3, r2, r3
 80031b2:	4a1f      	ldr	r2, [pc, #124]	; (8003230 <HAL_PWREx_ConfigSupply+0x98>)
 80031b4:	fba2 2303 	umull	r2, r3, r2, r3
 80031b8:	099b      	lsrs	r3, r3, #6
 80031ba:	3301      	adds	r3, #1
 80031bc:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d113      	bne.n	80031ec <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80031c4:	4b1b      	ldr	r3, [pc, #108]	; (8003234 <HAL_PWREx_ConfigSupply+0x9c>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	4a1a      	ldr	r2, [pc, #104]	; (8003234 <HAL_PWREx_ConfigSupply+0x9c>)
 80031ca:	f023 0302 	bic.w	r3, r3, #2
 80031ce:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80031d0:	e002      	b.n	80031d8 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	3b01      	subs	r3, #1
 80031d6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80031d8:	4b16      	ldr	r3, [pc, #88]	; (8003234 <HAL_PWREx_ConfigSupply+0x9c>)
 80031da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d116      	bne.n	8003212 <HAL_PWREx_ConfigSupply+0x7a>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f3      	bne.n	80031d2 <HAL_PWREx_ConfigSupply+0x3a>
 80031ea:	e012      	b.n	8003212 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80031ec:	4b11      	ldr	r3, [pc, #68]	; (8003234 <HAL_PWREx_ConfigSupply+0x9c>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	4a10      	ldr	r2, [pc, #64]	; (8003234 <HAL_PWREx_ConfigSupply+0x9c>)
 80031f2:	f043 0302 	orr.w	r3, r3, #2
 80031f6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80031f8:	e002      	b.n	8003200 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	3b01      	subs	r3, #1
 80031fe:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003200:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <HAL_PWREx_ConfigSupply+0x9c>)
 8003202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d102      	bne.n	8003212 <HAL_PWREx_ConfigSupply+0x7a>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f3      	bne.n	80031fa <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e000      	b.n	800321e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	20000000 	.word	0x20000000
 8003230:	10624dd3 	.word	0x10624dd3
 8003234:	46020800 	.word	0x46020800

08003238 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 800323c:	4b05      	ldr	r3, [pc, #20]	; (8003254 <HAL_PWREx_EnableVddUSB+0x1c>)
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	4a04      	ldr	r2, [pc, #16]	; (8003254 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003246:	6113      	str	r3, [r2, #16]
}
 8003248:	bf00      	nop
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	46020800 	.word	0x46020800

08003258 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800325c:	4b05      	ldr	r3, [pc, #20]	; (8003274 <HAL_PWREx_EnableVddIO2+0x1c>)
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	4a04      	ldr	r2, [pc, #16]	; (8003274 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003262:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003266:	6113      	str	r3, [r2, #16]
}
 8003268:	bf00      	nop
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	46020800 	.word	0x46020800

08003278 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b08e      	sub	sp, #56	; 0x38
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003280:	2300      	movs	r3, #0
 8003282:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d102      	bne.n	8003292 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	f000 bec3 	b.w	8004018 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003292:	4b9c      	ldr	r3, [pc, #624]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	f003 030c 	and.w	r3, r3, #12
 800329a:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800329c:	4b99      	ldr	r3, [pc, #612]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	f003 0303 	and.w	r3, r3, #3
 80032a4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0310 	and.w	r3, r3, #16
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 8172 	beq.w	8003598 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80032b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d007      	beq.n	80032ca <HAL_RCC_OscConfig+0x52>
 80032ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032bc:	2b0c      	cmp	r3, #12
 80032be:	f040 80e4 	bne.w	800348a <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80032c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	f040 80e0 	bne.w	800348a <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032ca:	4b8e      	ldr	r3, [pc, #568]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0304 	and.w	r3, r3, #4
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d006      	beq.n	80032e4 <HAL_RCC_OscConfig+0x6c>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d102      	bne.n	80032e4 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	f000 be9a 	b.w	8004018 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032e8:	4b86      	ldr	r3, [pc, #536]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d004      	beq.n	80032fe <HAL_RCC_OscConfig+0x86>
 80032f4:	4b83      	ldr	r3, [pc, #524]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80032fc:	e005      	b.n	800330a <HAL_RCC_OscConfig+0x92>
 80032fe:	4b81      	ldr	r3, [pc, #516]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 8003300:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003304:	041b      	lsls	r3, r3, #16
 8003306:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800330a:	4293      	cmp	r3, r2
 800330c:	d255      	bcs.n	80033ba <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800330e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10a      	bne.n	800332a <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	4618      	mov	r0, r3
 800331a:	f001 f9d3 	bl	80046c4 <RCC_SetFlashLatencyFromMSIRange>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d002      	beq.n	800332a <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	f000 be77 	b.w	8004018 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800332a:	4b76      	ldr	r3, [pc, #472]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	4a75      	ldr	r2, [pc, #468]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 8003330:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003334:	6093      	str	r3, [r2, #8]
 8003336:	4b73      	ldr	r3, [pc, #460]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	4970      	ldr	r1, [pc, #448]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 8003344:	4313      	orrs	r3, r2
 8003346:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003350:	d309      	bcc.n	8003366 <HAL_RCC_OscConfig+0xee>
 8003352:	4b6c      	ldr	r3, [pc, #432]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f023 021f 	bic.w	r2, r3, #31
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	4969      	ldr	r1, [pc, #420]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 8003360:	4313      	orrs	r3, r2
 8003362:	60cb      	str	r3, [r1, #12]
 8003364:	e07e      	b.n	8003464 <HAL_RCC_OscConfig+0x1ec>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	2b00      	cmp	r3, #0
 800336c:	da0a      	bge.n	8003384 <HAL_RCC_OscConfig+0x10c>
 800336e:	4b65      	ldr	r3, [pc, #404]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	015b      	lsls	r3, r3, #5
 800337c:	4961      	ldr	r1, [pc, #388]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 800337e:	4313      	orrs	r3, r2
 8003380:	60cb      	str	r3, [r1, #12]
 8003382:	e06f      	b.n	8003464 <HAL_RCC_OscConfig+0x1ec>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800338c:	d30a      	bcc.n	80033a4 <HAL_RCC_OscConfig+0x12c>
 800338e:	4b5d      	ldr	r3, [pc, #372]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	029b      	lsls	r3, r3, #10
 800339c:	4959      	ldr	r1, [pc, #356]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	60cb      	str	r3, [r1, #12]
 80033a2:	e05f      	b.n	8003464 <HAL_RCC_OscConfig+0x1ec>
 80033a4:	4b57      	ldr	r3, [pc, #348]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	03db      	lsls	r3, r3, #15
 80033b2:	4954      	ldr	r1, [pc, #336]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60cb      	str	r3, [r1, #12]
 80033b8:	e054      	b.n	8003464 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80033ba:	4b52      	ldr	r3, [pc, #328]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	4a51      	ldr	r2, [pc, #324]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 80033c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033c4:	6093      	str	r3, [r2, #8]
 80033c6:	4b4f      	ldr	r3, [pc, #316]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	494c      	ldr	r1, [pc, #304]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80033e0:	d309      	bcc.n	80033f6 <HAL_RCC_OscConfig+0x17e>
 80033e2:	4b48      	ldr	r3, [pc, #288]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f023 021f 	bic.w	r2, r3, #31
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	4945      	ldr	r1, [pc, #276]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	60cb      	str	r3, [r1, #12]
 80033f4:	e028      	b.n	8003448 <HAL_RCC_OscConfig+0x1d0>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	da0a      	bge.n	8003414 <HAL_RCC_OscConfig+0x19c>
 80033fe:	4b41      	ldr	r3, [pc, #260]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	015b      	lsls	r3, r3, #5
 800340c:	493d      	ldr	r1, [pc, #244]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 800340e:	4313      	orrs	r3, r2
 8003410:	60cb      	str	r3, [r1, #12]
 8003412:	e019      	b.n	8003448 <HAL_RCC_OscConfig+0x1d0>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800341c:	d30a      	bcc.n	8003434 <HAL_RCC_OscConfig+0x1bc>
 800341e:	4b39      	ldr	r3, [pc, #228]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	029b      	lsls	r3, r3, #10
 800342c:	4935      	ldr	r1, [pc, #212]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 800342e:	4313      	orrs	r3, r2
 8003430:	60cb      	str	r3, [r1, #12]
 8003432:	e009      	b.n	8003448 <HAL_RCC_OscConfig+0x1d0>
 8003434:	4b33      	ldr	r3, [pc, #204]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	03db      	lsls	r3, r3, #15
 8003442:	4930      	ldr	r1, [pc, #192]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 8003444:	4313      	orrs	r3, r2
 8003446:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10a      	bne.n	8003464 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	4618      	mov	r0, r3
 8003454:	f001 f936 	bl	80046c4 <RCC_SetFlashLatencyFromMSIRange>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d002      	beq.n	8003464 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	f000 bdda 	b.w	8004018 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003464:	f001 f8d8 	bl	8004618 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003468:	4b27      	ldr	r3, [pc, #156]	; (8003508 <HAL_RCC_OscConfig+0x290>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	f7fd fe3f 	bl	80010f0 <HAL_InitTick>
 8003472:	4603      	mov	r3, r0
 8003474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8003478:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 808a 	beq.w	8003596 <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8003482:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003486:	f000 bdc7 	b.w	8004018 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d066      	beq.n	8003560 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003492:	4b1c      	ldr	r3, [pc, #112]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a1b      	ldr	r2, [pc, #108]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 8003498:	f043 0301 	orr.w	r3, r3, #1
 800349c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800349e:	f7fd fe71 	bl	8001184 <HAL_GetTick>
 80034a2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80034a4:	e009      	b.n	80034ba <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034a6:	f7fd fe6d 	bl	8001184 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d902      	bls.n	80034ba <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	f000 bdaf 	b.w	8004018 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80034ba:	4b12      	ldr	r3, [pc, #72]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0304 	and.w	r3, r3, #4
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0ef      	beq.n	80034a6 <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80034c6:	4b0f      	ldr	r3, [pc, #60]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	4a0e      	ldr	r2, [pc, #56]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 80034cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034d0:	6093      	str	r3, [r2, #8]
 80034d2:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	4909      	ldr	r1, [pc, #36]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80034ec:	d30e      	bcc.n	800350c <HAL_RCC_OscConfig+0x294>
 80034ee:	4b05      	ldr	r3, [pc, #20]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f023 021f 	bic.w	r2, r3, #31
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	4902      	ldr	r1, [pc, #8]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	60cb      	str	r3, [r1, #12]
 8003500:	e04a      	b.n	8003598 <HAL_RCC_OscConfig+0x320>
 8003502:	bf00      	nop
 8003504:	46020c00 	.word	0x46020c00
 8003508:	20000004 	.word	0x20000004
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	2b00      	cmp	r3, #0
 8003512:	da0a      	bge.n	800352a <HAL_RCC_OscConfig+0x2b2>
 8003514:	4b9b      	ldr	r3, [pc, #620]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	015b      	lsls	r3, r3, #5
 8003522:	4998      	ldr	r1, [pc, #608]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 8003524:	4313      	orrs	r3, r2
 8003526:	60cb      	str	r3, [r1, #12]
 8003528:	e036      	b.n	8003598 <HAL_RCC_OscConfig+0x320>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003532:	d30a      	bcc.n	800354a <HAL_RCC_OscConfig+0x2d2>
 8003534:	4b93      	ldr	r3, [pc, #588]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	029b      	lsls	r3, r3, #10
 8003542:	4990      	ldr	r1, [pc, #576]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 8003544:	4313      	orrs	r3, r2
 8003546:	60cb      	str	r3, [r1, #12]
 8003548:	e026      	b.n	8003598 <HAL_RCC_OscConfig+0x320>
 800354a:	4b8e      	ldr	r3, [pc, #568]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	03db      	lsls	r3, r3, #15
 8003558:	498a      	ldr	r1, [pc, #552]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 800355a:	4313      	orrs	r3, r2
 800355c:	60cb      	str	r3, [r1, #12]
 800355e:	e01b      	b.n	8003598 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003560:	4b88      	ldr	r3, [pc, #544]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a87      	ldr	r2, [pc, #540]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 8003566:	f023 0301 	bic.w	r3, r3, #1
 800356a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800356c:	f7fd fe0a 	bl	8001184 <HAL_GetTick>
 8003570:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003572:	e009      	b.n	8003588 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003574:	f7fd fe06 	bl	8001184 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d902      	bls.n	8003588 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	f000 bd48 	b.w	8004018 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003588:	4b7e      	ldr	r3, [pc, #504]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1ef      	bne.n	8003574 <HAL_RCC_OscConfig+0x2fc>
 8003594:	e000      	b.n	8003598 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003596:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 8094 	beq.w	80036ce <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80035a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d005      	beq.n	80035b8 <HAL_RCC_OscConfig+0x340>
 80035ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ae:	2b0c      	cmp	r3, #12
 80035b0:	d110      	bne.n	80035d4 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d10d      	bne.n	80035d4 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b8:	4b72      	ldr	r3, [pc, #456]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 8083 	beq.w	80036cc <HAL_RCC_OscConfig+0x454>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d17e      	bne.n	80036cc <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	f000 bd22 	b.w	8004018 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035dc:	d106      	bne.n	80035ec <HAL_RCC_OscConfig+0x374>
 80035de:	4b69      	ldr	r3, [pc, #420]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a68      	ldr	r2, [pc, #416]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 80035e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	e041      	b.n	8003670 <HAL_RCC_OscConfig+0x3f8>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035f4:	d112      	bne.n	800361c <HAL_RCC_OscConfig+0x3a4>
 80035f6:	4b63      	ldr	r3, [pc, #396]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a62      	ldr	r2, [pc, #392]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 80035fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003600:	6013      	str	r3, [r2, #0]
 8003602:	4b60      	ldr	r3, [pc, #384]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a5f      	ldr	r2, [pc, #380]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 8003608:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	4b5d      	ldr	r3, [pc, #372]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a5c      	ldr	r2, [pc, #368]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 8003614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	e029      	b.n	8003670 <HAL_RCC_OscConfig+0x3f8>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003624:	d112      	bne.n	800364c <HAL_RCC_OscConfig+0x3d4>
 8003626:	4b57      	ldr	r3, [pc, #348]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a56      	ldr	r2, [pc, #344]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 800362c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003630:	6013      	str	r3, [r2, #0]
 8003632:	4b54      	ldr	r3, [pc, #336]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a53      	ldr	r2, [pc, #332]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 8003638:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	4b51      	ldr	r3, [pc, #324]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a50      	ldr	r2, [pc, #320]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 8003644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	e011      	b.n	8003670 <HAL_RCC_OscConfig+0x3f8>
 800364c:	4b4d      	ldr	r3, [pc, #308]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a4c      	ldr	r2, [pc, #304]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 8003652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003656:	6013      	str	r3, [r2, #0]
 8003658:	4b4a      	ldr	r3, [pc, #296]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a49      	ldr	r2, [pc, #292]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 800365e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003662:	6013      	str	r3, [r2, #0]
 8003664:	4b47      	ldr	r3, [pc, #284]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a46      	ldr	r2, [pc, #280]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 800366a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800366e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d014      	beq.n	80036a2 <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8003678:	f7fd fd84 	bl	8001184 <HAL_GetTick>
 800367c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800367e:	e009      	b.n	8003694 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003680:	f7fd fd80 	bl	8001184 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b64      	cmp	r3, #100	; 0x64
 800368c:	d902      	bls.n	8003694 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	f000 bcc2 	b.w	8004018 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003694:	4b3b      	ldr	r3, [pc, #236]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0ef      	beq.n	8003680 <HAL_RCC_OscConfig+0x408>
 80036a0:	e015      	b.n	80036ce <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80036a2:	f7fd fd6f 	bl	8001184 <HAL_GetTick>
 80036a6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036a8:	e009      	b.n	80036be <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036aa:	f7fd fd6b 	bl	8001184 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b64      	cmp	r3, #100	; 0x64
 80036b6:	d902      	bls.n	80036be <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	f000 bcad 	b.w	8004018 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036be:	4b31      	ldr	r3, [pc, #196]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1ef      	bne.n	80036aa <HAL_RCC_OscConfig+0x432>
 80036ca:	e000      	b.n	80036ce <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d066      	beq.n	80037a8 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80036da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d005      	beq.n	80036ec <HAL_RCC_OscConfig+0x474>
 80036e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e2:	2b0c      	cmp	r3, #12
 80036e4:	d11a      	bne.n	800371c <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80036e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d117      	bne.n	800371c <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036ec:	4b25      	ldr	r3, [pc, #148]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d006      	beq.n	8003706 <HAL_RCC_OscConfig+0x48e>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d102      	bne.n	8003706 <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	f000 bc89 	b.w	8004018 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003706:	4b1f      	ldr	r3, [pc, #124]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	041b      	lsls	r3, r3, #16
 8003714:	491b      	ldr	r1, [pc, #108]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 8003716:	4313      	orrs	r3, r2
 8003718:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800371a:	e045      	b.n	80037a8 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d024      	beq.n	800376e <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003724:	4b17      	ldr	r3, [pc, #92]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a16      	ldr	r2, [pc, #88]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 800372a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800372e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003730:	f7fd fd28 	bl	8001184 <HAL_GetTick>
 8003734:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003736:	e009      	b.n	800374c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003738:	f7fd fd24 	bl	8001184 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d902      	bls.n	800374c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	f000 bc66 	b.w	8004018 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800374c:	4b0d      	ldr	r3, [pc, #52]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0ef      	beq.n	8003738 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003758:	4b0a      	ldr	r3, [pc, #40]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	041b      	lsls	r3, r3, #16
 8003766:	4907      	ldr	r1, [pc, #28]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 8003768:	4313      	orrs	r3, r2
 800376a:	610b      	str	r3, [r1, #16]
 800376c:	e01c      	b.n	80037a8 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800376e:	4b05      	ldr	r3, [pc, #20]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a04      	ldr	r2, [pc, #16]	; (8003784 <HAL_RCC_OscConfig+0x50c>)
 8003774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003778:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800377a:	f7fd fd03 	bl	8001184 <HAL_GetTick>
 800377e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003780:	e00c      	b.n	800379c <HAL_RCC_OscConfig+0x524>
 8003782:	bf00      	nop
 8003784:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003788:	f7fd fcfc 	bl	8001184 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d902      	bls.n	800379c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	f000 bc3e 	b.w	8004018 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800379c:	4baf      	ldr	r3, [pc, #700]	; (8003a5c <HAL_RCC_OscConfig+0x7e4>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1ef      	bne.n	8003788 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0308 	and.w	r3, r3, #8
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 80c7 	beq.w	8003944 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80037b6:	2300      	movs	r3, #0
 80037b8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037bc:	4ba7      	ldr	r3, [pc, #668]	; (8003a5c <HAL_RCC_OscConfig+0x7e4>)
 80037be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037c2:	f003 0304 	and.w	r3, r3, #4
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d111      	bne.n	80037ee <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ca:	4ba4      	ldr	r3, [pc, #656]	; (8003a5c <HAL_RCC_OscConfig+0x7e4>)
 80037cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037d0:	4aa2      	ldr	r2, [pc, #648]	; (8003a5c <HAL_RCC_OscConfig+0x7e4>)
 80037d2:	f043 0304 	orr.w	r3, r3, #4
 80037d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80037da:	4ba0      	ldr	r3, [pc, #640]	; (8003a5c <HAL_RCC_OscConfig+0x7e4>)
 80037dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80037e8:	2301      	movs	r3, #1
 80037ea:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80037ee:	4b9c      	ldr	r3, [pc, #624]	; (8003a60 <HAL_RCC_OscConfig+0x7e8>)
 80037f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d118      	bne.n	800382c <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80037fa:	4b99      	ldr	r3, [pc, #612]	; (8003a60 <HAL_RCC_OscConfig+0x7e8>)
 80037fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fe:	4a98      	ldr	r2, [pc, #608]	; (8003a60 <HAL_RCC_OscConfig+0x7e8>)
 8003800:	f043 0301 	orr.w	r3, r3, #1
 8003804:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003806:	f7fd fcbd 	bl	8001184 <HAL_GetTick>
 800380a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800380e:	f7fd fcb9 	bl	8001184 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e3fb      	b.n	8004018 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003820:	4b8f      	ldr	r3, [pc, #572]	; (8003a60 <HAL_RCC_OscConfig+0x7e8>)
 8003822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0f0      	beq.n	800380e <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d05f      	beq.n	80038f4 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003834:	4b89      	ldr	r3, [pc, #548]	; (8003a5c <HAL_RCC_OscConfig+0x7e4>)
 8003836:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800383a:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	699a      	ldr	r2, [r3, #24]
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003846:	429a      	cmp	r2, r3
 8003848:	d037      	beq.n	80038ba <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d006      	beq.n	8003862 <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e3da      	b.n	8004018 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d01b      	beq.n	80038a4 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 800386c:	4b7b      	ldr	r3, [pc, #492]	; (8003a5c <HAL_RCC_OscConfig+0x7e4>)
 800386e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003872:	4a7a      	ldr	r2, [pc, #488]	; (8003a5c <HAL_RCC_OscConfig+0x7e4>)
 8003874:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003878:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800387c:	f7fd fc82 	bl	8001184 <HAL_GetTick>
 8003880:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003884:	f7fd fc7e 	bl	8001184 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e3c0      	b.n	8004018 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003896:	4b71      	ldr	r3, [pc, #452]	; (8003a5c <HAL_RCC_OscConfig+0x7e4>)
 8003898:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800389c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1ef      	bne.n	8003884 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80038a4:	4b6d      	ldr	r3, [pc, #436]	; (8003a5c <HAL_RCC_OscConfig+0x7e4>)
 80038a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	496a      	ldr	r1, [pc, #424]	; (8003a5c <HAL_RCC_OscConfig+0x7e4>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80038ba:	4b68      	ldr	r3, [pc, #416]	; (8003a5c <HAL_RCC_OscConfig+0x7e4>)
 80038bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038c0:	4a66      	ldr	r2, [pc, #408]	; (8003a5c <HAL_RCC_OscConfig+0x7e4>)
 80038c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80038ca:	f7fd fc5b 	bl	8001184 <HAL_GetTick>
 80038ce:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80038d0:	e008      	b.n	80038e4 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038d2:	f7fd fc57 	bl	8001184 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e399      	b.n	8004018 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80038e4:	4b5d      	ldr	r3, [pc, #372]	; (8003a5c <HAL_RCC_OscConfig+0x7e4>)
 80038e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0ef      	beq.n	80038d2 <HAL_RCC_OscConfig+0x65a>
 80038f2:	e01b      	b.n	800392c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80038f4:	4b59      	ldr	r3, [pc, #356]	; (8003a5c <HAL_RCC_OscConfig+0x7e4>)
 80038f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038fa:	4a58      	ldr	r2, [pc, #352]	; (8003a5c <HAL_RCC_OscConfig+0x7e4>)
 80038fc:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003900:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8003904:	f7fd fc3e 	bl	8001184 <HAL_GetTick>
 8003908:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800390c:	f7fd fc3a 	bl	8001184 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e37c      	b.n	8004018 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800391e:	4b4f      	ldr	r3, [pc, #316]	; (8003a5c <HAL_RCC_OscConfig+0x7e4>)
 8003920:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003924:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1ef      	bne.n	800390c <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800392c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003930:	2b01      	cmp	r3, #1
 8003932:	d107      	bne.n	8003944 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003934:	4b49      	ldr	r3, [pc, #292]	; (8003a5c <HAL_RCC_OscConfig+0x7e4>)
 8003936:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800393a:	4a48      	ldr	r2, [pc, #288]	; (8003a5c <HAL_RCC_OscConfig+0x7e4>)
 800393c:	f023 0304 	bic.w	r3, r3, #4
 8003940:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b00      	cmp	r3, #0
 800394e:	f000 8112 	beq.w	8003b76 <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8003952:	2300      	movs	r3, #0
 8003954:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003958:	4b40      	ldr	r3, [pc, #256]	; (8003a5c <HAL_RCC_OscConfig+0x7e4>)
 800395a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	2b00      	cmp	r3, #0
 8003964:	d111      	bne.n	800398a <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003966:	4b3d      	ldr	r3, [pc, #244]	; (8003a5c <HAL_RCC_OscConfig+0x7e4>)
 8003968:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800396c:	4a3b      	ldr	r2, [pc, #236]	; (8003a5c <HAL_RCC_OscConfig+0x7e4>)
 800396e:	f043 0304 	orr.w	r3, r3, #4
 8003972:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003976:	4b39      	ldr	r3, [pc, #228]	; (8003a5c <HAL_RCC_OscConfig+0x7e4>)
 8003978:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	613b      	str	r3, [r7, #16]
 8003982:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003984:	2301      	movs	r3, #1
 8003986:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800398a:	4b35      	ldr	r3, [pc, #212]	; (8003a60 <HAL_RCC_OscConfig+0x7e8>)
 800398c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d118      	bne.n	80039c8 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003996:	4b32      	ldr	r3, [pc, #200]	; (8003a60 <HAL_RCC_OscConfig+0x7e8>)
 8003998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399a:	4a31      	ldr	r2, [pc, #196]	; (8003a60 <HAL_RCC_OscConfig+0x7e8>)
 800399c:	f043 0301 	orr.w	r3, r3, #1
 80039a0:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039a2:	f7fd fbef 	bl	8001184 <HAL_GetTick>
 80039a6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039aa:	f7fd fbeb 	bl	8001184 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e32d      	b.n	8004018 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80039bc:	4b28      	ldr	r3, [pc, #160]	; (8003a60 <HAL_RCC_OscConfig+0x7e8>)
 80039be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0f0      	beq.n	80039aa <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d01f      	beq.n	8003a14 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d010      	beq.n	8003a02 <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80039e0:	4b1e      	ldr	r3, [pc, #120]	; (8003a5c <HAL_RCC_OscConfig+0x7e4>)
 80039e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039e6:	4a1d      	ldr	r2, [pc, #116]	; (8003a5c <HAL_RCC_OscConfig+0x7e4>)
 80039e8:	f043 0304 	orr.w	r3, r3, #4
 80039ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80039f0:	4b1a      	ldr	r3, [pc, #104]	; (8003a5c <HAL_RCC_OscConfig+0x7e4>)
 80039f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039f6:	4a19      	ldr	r2, [pc, #100]	; (8003a5c <HAL_RCC_OscConfig+0x7e4>)
 80039f8:	f043 0301 	orr.w	r3, r3, #1
 80039fc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a00:	e018      	b.n	8003a34 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a02:	4b16      	ldr	r3, [pc, #88]	; (8003a5c <HAL_RCC_OscConfig+0x7e4>)
 8003a04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a08:	4a14      	ldr	r2, [pc, #80]	; (8003a5c <HAL_RCC_OscConfig+0x7e4>)
 8003a0a:	f043 0301 	orr.w	r3, r3, #1
 8003a0e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a12:	e00f      	b.n	8003a34 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a14:	4b11      	ldr	r3, [pc, #68]	; (8003a5c <HAL_RCC_OscConfig+0x7e4>)
 8003a16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a1a:	4a10      	ldr	r2, [pc, #64]	; (8003a5c <HAL_RCC_OscConfig+0x7e4>)
 8003a1c:	f023 0301 	bic.w	r3, r3, #1
 8003a20:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003a24:	4b0d      	ldr	r3, [pc, #52]	; (8003a5c <HAL_RCC_OscConfig+0x7e4>)
 8003a26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a2a:	4a0c      	ldr	r2, [pc, #48]	; (8003a5c <HAL_RCC_OscConfig+0x7e4>)
 8003a2c:	f023 0304 	bic.w	r3, r3, #4
 8003a30:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d058      	beq.n	8003aee <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8003a3c:	f7fd fba2 	bl	8001184 <HAL_GetTick>
 8003a40:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a42:	e00f      	b.n	8003a64 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a44:	f7fd fb9e 	bl	8001184 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d906      	bls.n	8003a64 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e2de      	b.n	8004018 <HAL_RCC_OscConfig+0xda0>
 8003a5a:	bf00      	nop
 8003a5c:	46020c00 	.word	0x46020c00
 8003a60:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a64:	4b9c      	ldr	r3, [pc, #624]	; (8003cd8 <HAL_RCC_OscConfig+0xa60>)
 8003a66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0e8      	beq.n	8003a44 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d01b      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003a7e:	4b96      	ldr	r3, [pc, #600]	; (8003cd8 <HAL_RCC_OscConfig+0xa60>)
 8003a80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a84:	4a94      	ldr	r2, [pc, #592]	; (8003cd8 <HAL_RCC_OscConfig+0xa60>)
 8003a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a8a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003a8e:	e00a      	b.n	8003aa6 <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a90:	f7fd fb78 	bl	8001184 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e2b8      	b.n	8004018 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003aa6:	4b8c      	ldr	r3, [pc, #560]	; (8003cd8 <HAL_RCC_OscConfig+0xa60>)
 8003aa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003aac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0ed      	beq.n	8003a90 <HAL_RCC_OscConfig+0x818>
 8003ab4:	e053      	b.n	8003b5e <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003ab6:	4b88      	ldr	r3, [pc, #544]	; (8003cd8 <HAL_RCC_OscConfig+0xa60>)
 8003ab8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003abc:	4a86      	ldr	r2, [pc, #536]	; (8003cd8 <HAL_RCC_OscConfig+0xa60>)
 8003abe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ac2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003ac6:	e00a      	b.n	8003ade <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac8:	f7fd fb5c 	bl	8001184 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e29c      	b.n	8004018 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003ade:	4b7e      	ldr	r3, [pc, #504]	; (8003cd8 <HAL_RCC_OscConfig+0xa60>)
 8003ae0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ae4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1ed      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x850>
 8003aec:	e037      	b.n	8003b5e <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003aee:	f7fd fb49 	bl	8001184 <HAL_GetTick>
 8003af2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003af4:	e00a      	b.n	8003b0c <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003af6:	f7fd fb45 	bl	8001184 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e285      	b.n	8004018 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b0c:	4b72      	ldr	r3, [pc, #456]	; (8003cd8 <HAL_RCC_OscConfig+0xa60>)
 8003b0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1ed      	bne.n	8003af6 <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003b1a:	4b6f      	ldr	r3, [pc, #444]	; (8003cd8 <HAL_RCC_OscConfig+0xa60>)
 8003b1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d01a      	beq.n	8003b5e <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003b28:	4b6b      	ldr	r3, [pc, #428]	; (8003cd8 <HAL_RCC_OscConfig+0xa60>)
 8003b2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b2e:	4a6a      	ldr	r2, [pc, #424]	; (8003cd8 <HAL_RCC_OscConfig+0xa60>)
 8003b30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b34:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003b38:	e00a      	b.n	8003b50 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b3a:	f7fd fb23 	bl	8001184 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e263      	b.n	8004018 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003b50:	4b61      	ldr	r3, [pc, #388]	; (8003cd8 <HAL_RCC_OscConfig+0xa60>)
 8003b52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1ed      	bne.n	8003b3a <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b5e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d107      	bne.n	8003b76 <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b66:	4b5c      	ldr	r3, [pc, #368]	; (8003cd8 <HAL_RCC_OscConfig+0xa60>)
 8003b68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b6c:	4a5a      	ldr	r2, [pc, #360]	; (8003cd8 <HAL_RCC_OscConfig+0xa60>)
 8003b6e:	f023 0304 	bic.w	r3, r3, #4
 8003b72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0320 	and.w	r3, r3, #32
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d036      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d019      	beq.n	8003bbe <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8003b8a:	4b53      	ldr	r3, [pc, #332]	; (8003cd8 <HAL_RCC_OscConfig+0xa60>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a52      	ldr	r2, [pc, #328]	; (8003cd8 <HAL_RCC_OscConfig+0xa60>)
 8003b90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b94:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003b96:	f7fd faf5 	bl	8001184 <HAL_GetTick>
 8003b9a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b9e:	f7fd faf1 	bl	8001184 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e233      	b.n	8004018 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003bb0:	4b49      	ldr	r3, [pc, #292]	; (8003cd8 <HAL_RCC_OscConfig+0xa60>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0f0      	beq.n	8003b9e <HAL_RCC_OscConfig+0x926>
 8003bbc:	e018      	b.n	8003bf0 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8003bbe:	4b46      	ldr	r3, [pc, #280]	; (8003cd8 <HAL_RCC_OscConfig+0xa60>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a45      	ldr	r2, [pc, #276]	; (8003cd8 <HAL_RCC_OscConfig+0xa60>)
 8003bc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bc8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003bca:	f7fd fadb 	bl	8001184 <HAL_GetTick>
 8003bce:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003bd0:	e008      	b.n	8003be4 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bd2:	f7fd fad7 	bl	8001184 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e219      	b.n	8004018 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003be4:	4b3c      	ldr	r3, [pc, #240]	; (8003cd8 <HAL_RCC_OscConfig+0xa60>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1f0      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d036      	beq.n	8003c6a <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d019      	beq.n	8003c38 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8003c04:	4b34      	ldr	r3, [pc, #208]	; (8003cd8 <HAL_RCC_OscConfig+0xa60>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a33      	ldr	r2, [pc, #204]	; (8003cd8 <HAL_RCC_OscConfig+0xa60>)
 8003c0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c0e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003c10:	f7fd fab8 	bl	8001184 <HAL_GetTick>
 8003c14:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003c18:	f7fd fab4 	bl	8001184 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e1f6      	b.n	8004018 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003c2a:	4b2b      	ldr	r3, [pc, #172]	; (8003cd8 <HAL_RCC_OscConfig+0xa60>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f0      	beq.n	8003c18 <HAL_RCC_OscConfig+0x9a0>
 8003c36:	e018      	b.n	8003c6a <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003c38:	4b27      	ldr	r3, [pc, #156]	; (8003cd8 <HAL_RCC_OscConfig+0xa60>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a26      	ldr	r2, [pc, #152]	; (8003cd8 <HAL_RCC_OscConfig+0xa60>)
 8003c3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c42:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003c44:	f7fd fa9e 	bl	8001184 <HAL_GetTick>
 8003c48:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003c4c:	f7fd fa9a 	bl	8001184 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e1dc      	b.n	8004018 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003c5e:	4b1e      	ldr	r3, [pc, #120]	; (8003cd8 <HAL_RCC_OscConfig+0xa60>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1f0      	bne.n	8003c4c <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d07f      	beq.n	8003d76 <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d062      	beq.n	8003d44 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8003c7e:	4b16      	ldr	r3, [pc, #88]	; (8003cd8 <HAL_RCC_OscConfig+0xa60>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	4a15      	ldr	r2, [pc, #84]	; (8003cd8 <HAL_RCC_OscConfig+0xa60>)
 8003c84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c88:	6093      	str	r3, [r2, #8]
 8003c8a:	4b13      	ldr	r3, [pc, #76]	; (8003cd8 <HAL_RCC_OscConfig+0xa60>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c96:	4910      	ldr	r1, [pc, #64]	; (8003cd8 <HAL_RCC_OscConfig+0xa60>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003ca4:	d309      	bcc.n	8003cba <HAL_RCC_OscConfig+0xa42>
 8003ca6:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <HAL_RCC_OscConfig+0xa60>)
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f023 021f 	bic.w	r2, r3, #31
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	4909      	ldr	r1, [pc, #36]	; (8003cd8 <HAL_RCC_OscConfig+0xa60>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	60cb      	str	r3, [r1, #12]
 8003cb8:	e02a      	b.n	8003d10 <HAL_RCC_OscConfig+0xa98>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	da0c      	bge.n	8003cdc <HAL_RCC_OscConfig+0xa64>
 8003cc2:	4b05      	ldr	r3, [pc, #20]	; (8003cd8 <HAL_RCC_OscConfig+0xa60>)
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	015b      	lsls	r3, r3, #5
 8003cd0:	4901      	ldr	r1, [pc, #4]	; (8003cd8 <HAL_RCC_OscConfig+0xa60>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	60cb      	str	r3, [r1, #12]
 8003cd6:	e01b      	b.n	8003d10 <HAL_RCC_OscConfig+0xa98>
 8003cd8:	46020c00 	.word	0x46020c00
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce4:	d30a      	bcc.n	8003cfc <HAL_RCC_OscConfig+0xa84>
 8003ce6:	4ba5      	ldr	r3, [pc, #660]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	029b      	lsls	r3, r3, #10
 8003cf4:	49a1      	ldr	r1, [pc, #644]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60cb      	str	r3, [r1, #12]
 8003cfa:	e009      	b.n	8003d10 <HAL_RCC_OscConfig+0xa98>
 8003cfc:	4b9f      	ldr	r3, [pc, #636]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	03db      	lsls	r3, r3, #15
 8003d0a:	499c      	ldr	r1, [pc, #624]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003d10:	4b9a      	ldr	r3, [pc, #616]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a99      	ldr	r2, [pc, #612]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003d16:	f043 0310 	orr.w	r3, r3, #16
 8003d1a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003d1c:	f7fd fa32 	bl	8001184 <HAL_GetTick>
 8003d20:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003d24:	f7fd fa2e 	bl	8001184 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e170      	b.n	8004018 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003d36:	4b91      	ldr	r3, [pc, #580]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0f0      	beq.n	8003d24 <HAL_RCC_OscConfig+0xaac>
 8003d42:	e018      	b.n	8003d76 <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8003d44:	4b8d      	ldr	r3, [pc, #564]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a8c      	ldr	r2, [pc, #560]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003d4a:	f023 0310 	bic.w	r3, r3, #16
 8003d4e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003d50:	f7fd fa18 	bl	8001184 <HAL_GetTick>
 8003d54:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003d58:	f7fd fa14 	bl	8001184 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e156      	b.n	8004018 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003d6a:	4b84      	ldr	r3, [pc, #528]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0320 	and.w	r3, r3, #32
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f0      	bne.n	8003d58 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f000 814b 	beq.w	8004016 <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 8003d80:	2300      	movs	r3, #0
 8003d82:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d86:	4b7d      	ldr	r3, [pc, #500]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	f003 030c 	and.w	r3, r3, #12
 8003d8e:	2b0c      	cmp	r3, #12
 8003d90:	f000 80fa 	beq.w	8003f88 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	f040 80cc 	bne.w	8003f36 <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003d9e:	4b77      	ldr	r3, [pc, #476]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a76      	ldr	r2, [pc, #472]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003da4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003da8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003daa:	f7fd f9eb 	bl	8001184 <HAL_GetTick>
 8003dae:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db2:	f7fd f9e7 	bl	8001184 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e129      	b.n	8004018 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003dc4:	4b6d      	ldr	r3, [pc, #436]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1f0      	bne.n	8003db2 <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dd0:	4b6a      	ldr	r3, [pc, #424]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dd6:	f003 0304 	and.w	r3, r3, #4
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d111      	bne.n	8003e02 <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8003dde:	4b67      	ldr	r3, [pc, #412]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003de4:	4a65      	ldr	r2, [pc, #404]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003de6:	f043 0304 	orr.w	r3, r3, #4
 8003dea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003dee:	4b63      	ldr	r3, [pc, #396]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003df0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8003e02:	4b5f      	ldr	r3, [pc, #380]	; (8003f80 <HAL_RCC_OscConfig+0xd08>)
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e0e:	d102      	bne.n	8003e16 <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8003e10:	2301      	movs	r3, #1
 8003e12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003e16:	4b5a      	ldr	r3, [pc, #360]	; (8003f80 <HAL_RCC_OscConfig+0xd08>)
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	4a59      	ldr	r2, [pc, #356]	; (8003f80 <HAL_RCC_OscConfig+0xd08>)
 8003e1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e20:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8003e22:	4b56      	ldr	r3, [pc, #344]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e2a:	f023 0303 	bic.w	r3, r3, #3
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e36:	3a01      	subs	r2, #1
 8003e38:	0212      	lsls	r2, r2, #8
 8003e3a:	4311      	orrs	r1, r2
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003e40:	430a      	orrs	r2, r1
 8003e42:	494e      	ldr	r1, [pc, #312]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	628b      	str	r3, [r1, #40]	; 0x28
 8003e48:	4b4c      	ldr	r3, [pc, #304]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003e4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e4c:	4b4d      	ldr	r3, [pc, #308]	; (8003f84 <HAL_RCC_OscConfig+0xd0c>)
 8003e4e:	4013      	ands	r3, r2
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003e54:	3a01      	subs	r2, #1
 8003e56:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003e5e:	3a01      	subs	r2, #1
 8003e60:	0252      	lsls	r2, r2, #9
 8003e62:	b292      	uxth	r2, r2
 8003e64:	4311      	orrs	r1, r2
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e6a:	3a01      	subs	r2, #1
 8003e6c:	0412      	lsls	r2, r2, #16
 8003e6e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8003e72:	4311      	orrs	r1, r2
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003e78:	3a01      	subs	r2, #1
 8003e7a:	0612      	lsls	r2, r2, #24
 8003e7c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003e80:	430a      	orrs	r2, r1
 8003e82:	493e      	ldr	r1, [pc, #248]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003e88:	4b3c      	ldr	r3, [pc, #240]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8c:	4a3b      	ldr	r2, [pc, #236]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003e8e:	f023 0310 	bic.w	r3, r3, #16
 8003e92:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003e94:	4b39      	ldr	r3, [pc, #228]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e9c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ea4:	00d2      	lsls	r2, r2, #3
 8003ea6:	4935      	ldr	r1, [pc, #212]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003eac:	4b33      	ldr	r3, [pc, #204]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb0:	4a32      	ldr	r2, [pc, #200]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003eb2:	f043 0310 	orr.w	r3, r3, #16
 8003eb6:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8003eb8:	4b30      	ldr	r3, [pc, #192]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebc:	f023 020c 	bic.w	r2, r3, #12
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec4:	492d      	ldr	r1, [pc, #180]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8003eca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d105      	bne.n	8003ede <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003ed2:	4b2b      	ldr	r3, [pc, #172]	; (8003f80 <HAL_RCC_OscConfig+0xd08>)
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	4a2a      	ldr	r2, [pc, #168]	; (8003f80 <HAL_RCC_OscConfig+0xd08>)
 8003ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003edc:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8003ede:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d107      	bne.n	8003ef6 <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8003ee6:	4b25      	ldr	r3, [pc, #148]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003ee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eec:	4a23      	ldr	r2, [pc, #140]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003eee:	f023 0304 	bic.w	r3, r3, #4
 8003ef2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003ef6:	4b21      	ldr	r3, [pc, #132]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efa:	4a20      	ldr	r2, [pc, #128]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f00:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8003f02:	4b1e      	ldr	r3, [pc, #120]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a1d      	ldr	r2, [pc, #116]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003f08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f0c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003f0e:	f7fd f939 	bl	8001184 <HAL_GetTick>
 8003f12:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003f14:	e008      	b.n	8003f28 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f16:	f7fd f935 	bl	8001184 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e077      	b.n	8004018 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003f28:	4b14      	ldr	r3, [pc, #80]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0f0      	beq.n	8003f16 <HAL_RCC_OscConfig+0xc9e>
 8003f34:	e06f      	b.n	8004016 <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003f36:	4b11      	ldr	r3, [pc, #68]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a10      	ldr	r2, [pc, #64]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003f3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f40:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003f42:	f7fd f91f 	bl	8001184 <HAL_GetTick>
 8003f46:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003f48:	e008      	b.n	8003f5c <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f4a:	f7fd f91b 	bl	8001184 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e05d      	b.n	8004018 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003f5c:	4b07      	ldr	r3, [pc, #28]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1f0      	bne.n	8003f4a <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003f68:	4b04      	ldr	r3, [pc, #16]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6c:	4a03      	ldr	r2, [pc, #12]	; (8003f7c <HAL_RCC_OscConfig+0xd04>)
 8003f6e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003f72:	f023 0303 	bic.w	r3, r3, #3
 8003f76:	6293      	str	r3, [r2, #40]	; 0x28
 8003f78:	e04d      	b.n	8004016 <HAL_RCC_OscConfig+0xd9e>
 8003f7a:	bf00      	nop
 8003f7c:	46020c00 	.word	0x46020c00
 8003f80:	46020800 	.word	0x46020800
 8003f84:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003f88:	4b25      	ldr	r3, [pc, #148]	; (8004020 <HAL_RCC_OscConfig+0xda8>)
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003f8e:	4b24      	ldr	r3, [pc, #144]	; (8004020 <HAL_RCC_OscConfig+0xda8>)
 8003f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f92:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d03a      	beq.n	8004012 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f003 0203 	and.w	r2, r3, #3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d133      	bne.n	8004012 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	0a1b      	lsrs	r3, r3, #8
 8003fae:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d12a      	bne.n	8004012 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	0b1b      	lsrs	r3, r3, #12
 8003fc0:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d122      	bne.n	8004012 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fd6:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d11a      	bne.n	8004012 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	0a5b      	lsrs	r3, r3, #9
 8003fe0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d111      	bne.n	8004012 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	0c1b      	lsrs	r3, r3, #16
 8003ff2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ffa:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d108      	bne.n	8004012 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	0e1b      	lsrs	r3, r3, #24
 8004004:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800400e:	429a      	cmp	r2, r3
 8004010:	d001      	beq.n	8004016 <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e000      	b.n	8004018 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3738      	adds	r7, #56	; 0x38
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	46020c00 	.word	0x46020c00

08004024 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e1d9      	b.n	80043ec <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004038:	4b9b      	ldr	r3, [pc, #620]	; (80042a8 <HAL_RCC_ClockConfig+0x284>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 030f 	and.w	r3, r3, #15
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	429a      	cmp	r2, r3
 8004044:	d910      	bls.n	8004068 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004046:	4b98      	ldr	r3, [pc, #608]	; (80042a8 <HAL_RCC_ClockConfig+0x284>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f023 020f 	bic.w	r2, r3, #15
 800404e:	4996      	ldr	r1, [pc, #600]	; (80042a8 <HAL_RCC_ClockConfig+0x284>)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	4313      	orrs	r3, r2
 8004054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004056:	4b94      	ldr	r3, [pc, #592]	; (80042a8 <HAL_RCC_ClockConfig+0x284>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	429a      	cmp	r2, r3
 8004062:	d001      	beq.n	8004068 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e1c1      	b.n	80043ec <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0310 	and.w	r3, r3, #16
 8004070:	2b00      	cmp	r3, #0
 8004072:	d010      	beq.n	8004096 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	695a      	ldr	r2, [r3, #20]
 8004078:	4b8c      	ldr	r3, [pc, #560]	; (80042ac <HAL_RCC_ClockConfig+0x288>)
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004080:	429a      	cmp	r2, r3
 8004082:	d908      	bls.n	8004096 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004084:	4b89      	ldr	r3, [pc, #548]	; (80042ac <HAL_RCC_ClockConfig+0x288>)
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	4986      	ldr	r1, [pc, #536]	; (80042ac <HAL_RCC_ClockConfig+0x288>)
 8004092:	4313      	orrs	r3, r2
 8004094:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d012      	beq.n	80040c8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	691a      	ldr	r2, [r3, #16]
 80040a6:	4b81      	ldr	r3, [pc, #516]	; (80042ac <HAL_RCC_ClockConfig+0x288>)
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	091b      	lsrs	r3, r3, #4
 80040ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d909      	bls.n	80040c8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80040b4:	4b7d      	ldr	r3, [pc, #500]	; (80042ac <HAL_RCC_ClockConfig+0x288>)
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	011b      	lsls	r3, r3, #4
 80040c2:	497a      	ldr	r1, [pc, #488]	; (80042ac <HAL_RCC_ClockConfig+0x288>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d010      	beq.n	80040f6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	4b74      	ldr	r3, [pc, #464]	; (80042ac <HAL_RCC_ClockConfig+0x288>)
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d908      	bls.n	80040f6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80040e4:	4b71      	ldr	r3, [pc, #452]	; (80042ac <HAL_RCC_ClockConfig+0x288>)
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	496e      	ldr	r1, [pc, #440]	; (80042ac <HAL_RCC_ClockConfig+0x288>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d010      	beq.n	8004124 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689a      	ldr	r2, [r3, #8]
 8004106:	4b69      	ldr	r3, [pc, #420]	; (80042ac <HAL_RCC_ClockConfig+0x288>)
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	429a      	cmp	r2, r3
 8004110:	d908      	bls.n	8004124 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004112:	4b66      	ldr	r3, [pc, #408]	; (80042ac <HAL_RCC_ClockConfig+0x288>)
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	f023 020f 	bic.w	r2, r3, #15
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	4963      	ldr	r1, [pc, #396]	; (80042ac <HAL_RCC_ClockConfig+0x288>)
 8004120:	4313      	orrs	r3, r2
 8004122:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 80d2 	beq.w	80042d6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004132:	2300      	movs	r3, #0
 8004134:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2b03      	cmp	r3, #3
 800413c:	d143      	bne.n	80041c6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800413e:	4b5b      	ldr	r3, [pc, #364]	; (80042ac <HAL_RCC_ClockConfig+0x288>)
 8004140:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b00      	cmp	r3, #0
 800414a:	d110      	bne.n	800416e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800414c:	4b57      	ldr	r3, [pc, #348]	; (80042ac <HAL_RCC_ClockConfig+0x288>)
 800414e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004152:	4a56      	ldr	r2, [pc, #344]	; (80042ac <HAL_RCC_ClockConfig+0x288>)
 8004154:	f043 0304 	orr.w	r3, r3, #4
 8004158:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800415c:	4b53      	ldr	r3, [pc, #332]	; (80042ac <HAL_RCC_ClockConfig+0x288>)
 800415e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004162:	f003 0304 	and.w	r3, r3, #4
 8004166:	60bb      	str	r3, [r7, #8]
 8004168:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800416a:	2301      	movs	r3, #1
 800416c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800416e:	f7fd f809 	bl	8001184 <HAL_GetTick>
 8004172:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004174:	4b4e      	ldr	r3, [pc, #312]	; (80042b0 <HAL_RCC_ClockConfig+0x28c>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00f      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004180:	e008      	b.n	8004194 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004182:	f7fc ffff 	bl	8001184 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d901      	bls.n	8004194 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e12b      	b.n	80043ec <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004194:	4b46      	ldr	r3, [pc, #280]	; (80042b0 <HAL_RCC_ClockConfig+0x28c>)
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0f0      	beq.n	8004182 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80041a0:	7dfb      	ldrb	r3, [r7, #23]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d107      	bne.n	80041b6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80041a6:	4b41      	ldr	r3, [pc, #260]	; (80042ac <HAL_RCC_ClockConfig+0x288>)
 80041a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ac:	4a3f      	ldr	r2, [pc, #252]	; (80042ac <HAL_RCC_ClockConfig+0x288>)
 80041ae:	f023 0304 	bic.w	r3, r3, #4
 80041b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80041b6:	4b3d      	ldr	r3, [pc, #244]	; (80042ac <HAL_RCC_ClockConfig+0x288>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d121      	bne.n	8004206 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e112      	b.n	80043ec <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d107      	bne.n	80041de <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041ce:	4b37      	ldr	r3, [pc, #220]	; (80042ac <HAL_RCC_ClockConfig+0x288>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d115      	bne.n	8004206 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e106      	b.n	80043ec <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d107      	bne.n	80041f6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80041e6:	4b31      	ldr	r3, [pc, #196]	; (80042ac <HAL_RCC_ClockConfig+0x288>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0304 	and.w	r3, r3, #4
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d109      	bne.n	8004206 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e0fa      	b.n	80043ec <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041f6:	4b2d      	ldr	r3, [pc, #180]	; (80042ac <HAL_RCC_ClockConfig+0x288>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e0f2      	b.n	80043ec <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004206:	4b29      	ldr	r3, [pc, #164]	; (80042ac <HAL_RCC_ClockConfig+0x288>)
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	f023 0203 	bic.w	r2, r3, #3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	4926      	ldr	r1, [pc, #152]	; (80042ac <HAL_RCC_ClockConfig+0x288>)
 8004214:	4313      	orrs	r3, r2
 8004216:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004218:	f7fc ffb4 	bl	8001184 <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2b03      	cmp	r3, #3
 8004224:	d112      	bne.n	800424c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004226:	e00a      	b.n	800423e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004228:	f7fc ffac 	bl	8001184 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	f241 3288 	movw	r2, #5000	; 0x1388
 8004236:	4293      	cmp	r3, r2
 8004238:	d901      	bls.n	800423e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e0d6      	b.n	80043ec <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800423e:	4b1b      	ldr	r3, [pc, #108]	; (80042ac <HAL_RCC_ClockConfig+0x288>)
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	f003 030c 	and.w	r3, r3, #12
 8004246:	2b0c      	cmp	r3, #12
 8004248:	d1ee      	bne.n	8004228 <HAL_RCC_ClockConfig+0x204>
 800424a:	e044      	b.n	80042d6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2b02      	cmp	r3, #2
 8004252:	d112      	bne.n	800427a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004254:	e00a      	b.n	800426c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004256:	f7fc ff95 	bl	8001184 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	f241 3288 	movw	r2, #5000	; 0x1388
 8004264:	4293      	cmp	r3, r2
 8004266:	d901      	bls.n	800426c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e0bf      	b.n	80043ec <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800426c:	4b0f      	ldr	r3, [pc, #60]	; (80042ac <HAL_RCC_ClockConfig+0x288>)
 800426e:	69db      	ldr	r3, [r3, #28]
 8004270:	f003 030c 	and.w	r3, r3, #12
 8004274:	2b08      	cmp	r3, #8
 8004276:	d1ee      	bne.n	8004256 <HAL_RCC_ClockConfig+0x232>
 8004278:	e02d      	b.n	80042d6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d123      	bne.n	80042ca <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004282:	e00a      	b.n	800429a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004284:	f7fc ff7e 	bl	8001184 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004292:	4293      	cmp	r3, r2
 8004294:	d901      	bls.n	800429a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e0a8      	b.n	80043ec <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800429a:	4b04      	ldr	r3, [pc, #16]	; (80042ac <HAL_RCC_ClockConfig+0x288>)
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	f003 030c 	and.w	r3, r3, #12
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1ee      	bne.n	8004284 <HAL_RCC_ClockConfig+0x260>
 80042a6:	e016      	b.n	80042d6 <HAL_RCC_ClockConfig+0x2b2>
 80042a8:	40022000 	.word	0x40022000
 80042ac:	46020c00 	.word	0x46020c00
 80042b0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042b4:	f7fc ff66 	bl	8001184 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e090      	b.n	80043ec <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80042ca:	4b4a      	ldr	r3, [pc, #296]	; (80043f4 <HAL_RCC_ClockConfig+0x3d0>)
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	f003 030c 	and.w	r3, r3, #12
 80042d2:	2b04      	cmp	r3, #4
 80042d4:	d1ee      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d010      	beq.n	8004304 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689a      	ldr	r2, [r3, #8]
 80042e6:	4b43      	ldr	r3, [pc, #268]	; (80043f4 <HAL_RCC_ClockConfig+0x3d0>)
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	f003 030f 	and.w	r3, r3, #15
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d208      	bcs.n	8004304 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80042f2:	4b40      	ldr	r3, [pc, #256]	; (80043f4 <HAL_RCC_ClockConfig+0x3d0>)
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	f023 020f 	bic.w	r2, r3, #15
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	493d      	ldr	r1, [pc, #244]	; (80043f4 <HAL_RCC_ClockConfig+0x3d0>)
 8004300:	4313      	orrs	r3, r2
 8004302:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004304:	4b3c      	ldr	r3, [pc, #240]	; (80043f8 <HAL_RCC_ClockConfig+0x3d4>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 030f 	and.w	r3, r3, #15
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d210      	bcs.n	8004334 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004312:	4b39      	ldr	r3, [pc, #228]	; (80043f8 <HAL_RCC_ClockConfig+0x3d4>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f023 020f 	bic.w	r2, r3, #15
 800431a:	4937      	ldr	r1, [pc, #220]	; (80043f8 <HAL_RCC_ClockConfig+0x3d4>)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	4313      	orrs	r3, r2
 8004320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004322:	4b35      	ldr	r3, [pc, #212]	; (80043f8 <HAL_RCC_ClockConfig+0x3d4>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	429a      	cmp	r2, r3
 800432e:	d001      	beq.n	8004334 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e05b      	b.n	80043ec <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d010      	beq.n	8004362 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	4b2b      	ldr	r3, [pc, #172]	; (80043f4 <HAL_RCC_ClockConfig+0x3d0>)
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800434c:	429a      	cmp	r2, r3
 800434e:	d208      	bcs.n	8004362 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004350:	4b28      	ldr	r3, [pc, #160]	; (80043f4 <HAL_RCC_ClockConfig+0x3d0>)
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	4925      	ldr	r1, [pc, #148]	; (80043f4 <HAL_RCC_ClockConfig+0x3d0>)
 800435e:	4313      	orrs	r3, r2
 8004360:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0308 	and.w	r3, r3, #8
 800436a:	2b00      	cmp	r3, #0
 800436c:	d012      	beq.n	8004394 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691a      	ldr	r2, [r3, #16]
 8004372:	4b20      	ldr	r3, [pc, #128]	; (80043f4 <HAL_RCC_ClockConfig+0x3d0>)
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	091b      	lsrs	r3, r3, #4
 8004378:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800437c:	429a      	cmp	r2, r3
 800437e:	d209      	bcs.n	8004394 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004380:	4b1c      	ldr	r3, [pc, #112]	; (80043f4 <HAL_RCC_ClockConfig+0x3d0>)
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	4919      	ldr	r1, [pc, #100]	; (80043f4 <HAL_RCC_ClockConfig+0x3d0>)
 8004390:	4313      	orrs	r3, r2
 8004392:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0310 	and.w	r3, r3, #16
 800439c:	2b00      	cmp	r3, #0
 800439e:	d010      	beq.n	80043c2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	695a      	ldr	r2, [r3, #20]
 80043a4:	4b13      	ldr	r3, [pc, #76]	; (80043f4 <HAL_RCC_ClockConfig+0x3d0>)
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d208      	bcs.n	80043c2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80043b0:	4b10      	ldr	r3, [pc, #64]	; (80043f4 <HAL_RCC_ClockConfig+0x3d0>)
 80043b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	490d      	ldr	r1, [pc, #52]	; (80043f4 <HAL_RCC_ClockConfig+0x3d0>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80043c2:	f000 f821 	bl	8004408 <HAL_RCC_GetSysClockFreq>
 80043c6:	4602      	mov	r2, r0
 80043c8:	4b0a      	ldr	r3, [pc, #40]	; (80043f4 <HAL_RCC_ClockConfig+0x3d0>)
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	f003 030f 	and.w	r3, r3, #15
 80043d0:	490a      	ldr	r1, [pc, #40]	; (80043fc <HAL_RCC_ClockConfig+0x3d8>)
 80043d2:	5ccb      	ldrb	r3, [r1, r3]
 80043d4:	fa22 f303 	lsr.w	r3, r2, r3
 80043d8:	4a09      	ldr	r2, [pc, #36]	; (8004400 <HAL_RCC_ClockConfig+0x3dc>)
 80043da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80043dc:	4b09      	ldr	r3, [pc, #36]	; (8004404 <HAL_RCC_ClockConfig+0x3e0>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7fc fe85 	bl	80010f0 <HAL_InitTick>
 80043e6:	4603      	mov	r3, r0
 80043e8:	73fb      	strb	r3, [r7, #15]

  return status;
 80043ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3718      	adds	r7, #24
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	46020c00 	.word	0x46020c00
 80043f8:	40022000 	.word	0x40022000
 80043fc:	08008ccc 	.word	0x08008ccc
 8004400:	20000000 	.word	0x20000000
 8004404:	20000004 	.word	0x20000004

08004408 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004408:	b480      	push	{r7}
 800440a:	b08b      	sub	sp, #44	; 0x2c
 800440c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800440e:	2300      	movs	r3, #0
 8004410:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004412:	2300      	movs	r3, #0
 8004414:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004416:	4b7b      	ldr	r3, [pc, #492]	; (8004604 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	f003 030c 	and.w	r3, r3, #12
 800441e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004420:	4b78      	ldr	r3, [pc, #480]	; (8004604 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004424:	f003 0303 	and.w	r3, r3, #3
 8004428:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d005      	beq.n	800443c <HAL_RCC_GetSysClockFreq+0x34>
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	2b0c      	cmp	r3, #12
 8004434:	d121      	bne.n	800447a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d11e      	bne.n	800447a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800443c:	4b71      	ldr	r3, [pc, #452]	; (8004604 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d107      	bne.n	8004458 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004448:	4b6e      	ldr	r3, [pc, #440]	; (8004604 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800444a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800444e:	0b1b      	lsrs	r3, r3, #12
 8004450:	f003 030f 	and.w	r3, r3, #15
 8004454:	627b      	str	r3, [r7, #36]	; 0x24
 8004456:	e005      	b.n	8004464 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004458:	4b6a      	ldr	r3, [pc, #424]	; (8004604 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	0f1b      	lsrs	r3, r3, #28
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004464:	4a68      	ldr	r2, [pc, #416]	; (8004608 <HAL_RCC_GetSysClockFreq+0x200>)
 8004466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800446c:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d110      	bne.n	8004496 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004478:	e00d      	b.n	8004496 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800447a:	4b62      	ldr	r3, [pc, #392]	; (8004604 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	f003 030c 	and.w	r3, r3, #12
 8004482:	2b04      	cmp	r3, #4
 8004484:	d102      	bne.n	800448c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004486:	4b61      	ldr	r3, [pc, #388]	; (800460c <HAL_RCC_GetSysClockFreq+0x204>)
 8004488:	623b      	str	r3, [r7, #32]
 800448a:	e004      	b.n	8004496 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	2b08      	cmp	r3, #8
 8004490:	d101      	bne.n	8004496 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004492:	4b5e      	ldr	r3, [pc, #376]	; (800460c <HAL_RCC_GetSysClockFreq+0x204>)
 8004494:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	2b0c      	cmp	r3, #12
 800449a:	f040 80ac 	bne.w	80045f6 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800449e:	4b59      	ldr	r3, [pc, #356]	; (8004604 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80044a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a2:	f003 0303 	and.w	r3, r3, #3
 80044a6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80044a8:	4b56      	ldr	r3, [pc, #344]	; (8004604 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80044aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ac:	0a1b      	lsrs	r3, r3, #8
 80044ae:	f003 030f 	and.w	r3, r3, #15
 80044b2:	3301      	adds	r3, #1
 80044b4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80044b6:	4b53      	ldr	r3, [pc, #332]	; (8004604 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80044b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ba:	091b      	lsrs	r3, r3, #4
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80044c2:	4b50      	ldr	r3, [pc, #320]	; (8004604 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80044c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c6:	08db      	lsrs	r3, r3, #3
 80044c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	fb02 f303 	mul.w	r3, r2, r3
 80044d2:	ee07 3a90 	vmov	s15, r3
 80044d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044da:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 8086 	beq.w	80045f2 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d003      	beq.n	80044f4 <HAL_RCC_GetSysClockFreq+0xec>
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	2b03      	cmp	r3, #3
 80044f0:	d022      	beq.n	8004538 <HAL_RCC_GetSysClockFreq+0x130>
 80044f2:	e043      	b.n	800457c <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	ee07 3a90 	vmov	s15, r3
 80044fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044fe:	eddf 6a44 	vldr	s13, [pc, #272]	; 8004610 <HAL_RCC_GetSysClockFreq+0x208>
 8004502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004506:	4b3f      	ldr	r3, [pc, #252]	; (8004604 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800450e:	ee07 3a90 	vmov	s15, r3
 8004512:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004516:	ed97 6a01 	vldr	s12, [r7, #4]
 800451a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004614 <HAL_RCC_GetSysClockFreq+0x20c>
 800451e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004522:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004526:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800452a:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800452e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004532:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8004536:	e046      	b.n	80045c6 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	ee07 3a90 	vmov	s15, r3
 800453e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004542:	eddf 6a33 	vldr	s13, [pc, #204]	; 8004610 <HAL_RCC_GetSysClockFreq+0x208>
 8004546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800454a:	4b2e      	ldr	r3, [pc, #184]	; (8004604 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800454c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004552:	ee07 3a90 	vmov	s15, r3
 8004556:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800455a:	ed97 6a01 	vldr	s12, [r7, #4]
 800455e:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004614 <HAL_RCC_GetSysClockFreq+0x20c>
 8004562:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004566:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800456a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800456e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004576:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800457a:	e024      	b.n	80045c6 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457e:	ee07 3a90 	vmov	s15, r3
 8004582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	ee07 3a90 	vmov	s15, r3
 800458c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004590:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004594:	4b1b      	ldr	r3, [pc, #108]	; (8004604 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800459c:	ee07 3a90 	vmov	s15, r3
 80045a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80045a4:	ed97 6a01 	vldr	s12, [r7, #4]
 80045a8:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8004614 <HAL_RCC_GetSysClockFreq+0x20c>
 80045ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80045b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045c0:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80045c4:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80045c6:	4b0f      	ldr	r3, [pc, #60]	; (8004604 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80045c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ca:	0e1b      	lsrs	r3, r3, #24
 80045cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045d0:	3301      	adds	r3, #1
 80045d2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	ee07 3a90 	vmov	s15, r3
 80045da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80045de:	edd7 6a07 	vldr	s13, [r7, #28]
 80045e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045ea:	ee17 3a90 	vmov	r3, s15
 80045ee:	623b      	str	r3, [r7, #32]
 80045f0:	e001      	b.n	80045f6 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 80045f2:	2300      	movs	r3, #0
 80045f4:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 80045f6:	6a3b      	ldr	r3, [r7, #32]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	372c      	adds	r7, #44	; 0x2c
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	46020c00 	.word	0x46020c00
 8004608:	08008ce4 	.word	0x08008ce4
 800460c:	00f42400 	.word	0x00f42400
 8004610:	4b742400 	.word	0x4b742400
 8004614:	46000000 	.word	0x46000000

08004618 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800461c:	f7ff fef4 	bl	8004408 <HAL_RCC_GetSysClockFreq>
 8004620:	4602      	mov	r2, r0
 8004622:	4b07      	ldr	r3, [pc, #28]	; (8004640 <HAL_RCC_GetHCLKFreq+0x28>)
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	4906      	ldr	r1, [pc, #24]	; (8004644 <HAL_RCC_GetHCLKFreq+0x2c>)
 800462c:	5ccb      	ldrb	r3, [r1, r3]
 800462e:	fa22 f303 	lsr.w	r3, r2, r3
 8004632:	4a05      	ldr	r2, [pc, #20]	; (8004648 <HAL_RCC_GetHCLKFreq+0x30>)
 8004634:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004636:	4b04      	ldr	r3, [pc, #16]	; (8004648 <HAL_RCC_GetHCLKFreq+0x30>)
 8004638:	681b      	ldr	r3, [r3, #0]
}
 800463a:	4618      	mov	r0, r3
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	46020c00 	.word	0x46020c00
 8004644:	08008ccc 	.word	0x08008ccc
 8004648:	20000000 	.word	0x20000000

0800464c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004650:	f7ff ffe2 	bl	8004618 <HAL_RCC_GetHCLKFreq>
 8004654:	4602      	mov	r2, r0
 8004656:	4b05      	ldr	r3, [pc, #20]	; (800466c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	091b      	lsrs	r3, r3, #4
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	4903      	ldr	r1, [pc, #12]	; (8004670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004662:	5ccb      	ldrb	r3, [r1, r3]
 8004664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004668:	4618      	mov	r0, r3
 800466a:	bd80      	pop	{r7, pc}
 800466c:	46020c00 	.word	0x46020c00
 8004670:	08008cdc 	.word	0x08008cdc

08004674 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004678:	f7ff ffce 	bl	8004618 <HAL_RCC_GetHCLKFreq>
 800467c:	4602      	mov	r2, r0
 800467e:	4b05      	ldr	r3, [pc, #20]	; (8004694 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	0a1b      	lsrs	r3, r3, #8
 8004684:	f003 0307 	and.w	r3, r3, #7
 8004688:	4903      	ldr	r1, [pc, #12]	; (8004698 <HAL_RCC_GetPCLK2Freq+0x24>)
 800468a:	5ccb      	ldrb	r3, [r1, r3]
 800468c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004690:	4618      	mov	r0, r3
 8004692:	bd80      	pop	{r7, pc}
 8004694:	46020c00 	.word	0x46020c00
 8004698:	08008cdc 	.word	0x08008cdc

0800469c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80046a0:	f7ff ffba 	bl	8004618 <HAL_RCC_GetHCLKFreq>
 80046a4:	4602      	mov	r2, r0
 80046a6:	4b05      	ldr	r3, [pc, #20]	; (80046bc <HAL_RCC_GetPCLK3Freq+0x20>)
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	091b      	lsrs	r3, r3, #4
 80046ac:	f003 0307 	and.w	r3, r3, #7
 80046b0:	4903      	ldr	r1, [pc, #12]	; (80046c0 <HAL_RCC_GetPCLK3Freq+0x24>)
 80046b2:	5ccb      	ldrb	r3, [r1, r3]
 80046b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	46020c00 	.word	0x46020c00
 80046c0:	08008cdc 	.word	0x08008cdc

080046c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80046cc:	4b3e      	ldr	r3, [pc, #248]	; (80047c8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80046ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046d2:	f003 0304 	and.w	r3, r3, #4
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80046da:	f7fe fd4f 	bl	800317c <HAL_PWREx_GetVoltageRange>
 80046de:	6178      	str	r0, [r7, #20]
 80046e0:	e019      	b.n	8004716 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80046e2:	4b39      	ldr	r3, [pc, #228]	; (80047c8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80046e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046e8:	4a37      	ldr	r2, [pc, #220]	; (80047c8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80046ea:	f043 0304 	orr.w	r3, r3, #4
 80046ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80046f2:	4b35      	ldr	r3, [pc, #212]	; (80047c8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80046f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	60fb      	str	r3, [r7, #12]
 80046fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004700:	f7fe fd3c 	bl	800317c <HAL_PWREx_GetVoltageRange>
 8004704:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004706:	4b30      	ldr	r3, [pc, #192]	; (80047c8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004708:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800470c:	4a2e      	ldr	r2, [pc, #184]	; (80047c8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800470e:	f023 0304 	bic.w	r3, r3, #4
 8004712:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800471c:	d003      	beq.n	8004726 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004724:	d109      	bne.n	800473a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800472c:	d202      	bcs.n	8004734 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800472e:	2301      	movs	r3, #1
 8004730:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004732:	e033      	b.n	800479c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004734:	2300      	movs	r3, #0
 8004736:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004738:	e030      	b.n	800479c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004740:	d208      	bcs.n	8004754 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004748:	d102      	bne.n	8004750 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800474a:	2303      	movs	r3, #3
 800474c:	613b      	str	r3, [r7, #16]
 800474e:	e025      	b.n	800479c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e035      	b.n	80047c0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800475a:	d90f      	bls.n	800477c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d109      	bne.n	8004776 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004768:	d902      	bls.n	8004770 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800476a:	2300      	movs	r3, #0
 800476c:	613b      	str	r3, [r7, #16]
 800476e:	e015      	b.n	800479c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004770:	2301      	movs	r3, #1
 8004772:	613b      	str	r3, [r7, #16]
 8004774:	e012      	b.n	800479c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004776:	2300      	movs	r3, #0
 8004778:	613b      	str	r3, [r7, #16]
 800477a:	e00f      	b.n	800479c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004782:	d109      	bne.n	8004798 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800478a:	d102      	bne.n	8004792 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800478c:	2301      	movs	r3, #1
 800478e:	613b      	str	r3, [r7, #16]
 8004790:	e004      	b.n	800479c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004792:	2302      	movs	r3, #2
 8004794:	613b      	str	r3, [r7, #16]
 8004796:	e001      	b.n	800479c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004798:	2301      	movs	r3, #1
 800479a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800479c:	4b0b      	ldr	r3, [pc, #44]	; (80047cc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f023 020f 	bic.w	r2, r3, #15
 80047a4:	4909      	ldr	r1, [pc, #36]	; (80047cc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80047ac:	4b07      	ldr	r3, [pc, #28]	; (80047cc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 030f 	and.w	r3, r3, #15
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d001      	beq.n	80047be <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e000      	b.n	80047c0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	46020c00 	.word	0x46020c00
 80047cc:	40022000 	.word	0x40022000

080047d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80047d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047d4:	b0ba      	sub	sp, #232	; 0xe8
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047dc:	2300      	movs	r3, #0
 80047de:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047e2:	2300      	movs	r3, #0
 80047e4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f0:	f002 0401 	and.w	r4, r2, #1
 80047f4:	2500      	movs	r5, #0
 80047f6:	ea54 0305 	orrs.w	r3, r4, r5
 80047fa:	d00b      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80047fc:	4bcb      	ldr	r3, [pc, #812]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004802:	f023 0103 	bic.w	r1, r3, #3
 8004806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800480a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800480c:	4ac7      	ldr	r2, [pc, #796]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800480e:	430b      	orrs	r3, r1
 8004810:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004814:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481c:	f002 0802 	and.w	r8, r2, #2
 8004820:	f04f 0900 	mov.w	r9, #0
 8004824:	ea58 0309 	orrs.w	r3, r8, r9
 8004828:	d00b      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800482a:	4bc0      	ldr	r3, [pc, #768]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800482c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004830:	f023 010c 	bic.w	r1, r3, #12
 8004834:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483a:	4abc      	ldr	r2, [pc, #752]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800483c:	430b      	orrs	r3, r1
 800483e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004842:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484a:	f002 0a04 	and.w	sl, r2, #4
 800484e:	f04f 0b00 	mov.w	fp, #0
 8004852:	ea5a 030b 	orrs.w	r3, sl, fp
 8004856:	d00b      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004858:	4bb4      	ldr	r3, [pc, #720]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800485a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800485e:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004862:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004868:	4ab0      	ldr	r2, [pc, #704]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800486a:	430b      	orrs	r3, r1
 800486c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004870:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004878:	f002 0308 	and.w	r3, r2, #8
 800487c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004880:	2300      	movs	r3, #0
 8004882:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004886:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800488a:	460b      	mov	r3, r1
 800488c:	4313      	orrs	r3, r2
 800488e:	d00b      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004890:	4ba6      	ldr	r3, [pc, #664]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004896:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800489a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800489e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a0:	4aa2      	ldr	r2, [pc, #648]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048a2:	430b      	orrs	r3, r1
 80048a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b0:	f002 0310 	and.w	r3, r2, #16
 80048b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048b8:	2300      	movs	r3, #0
 80048ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80048be:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80048c2:	460b      	mov	r3, r1
 80048c4:	4313      	orrs	r3, r2
 80048c6:	d00b      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80048c8:	4b98      	ldr	r3, [pc, #608]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80048d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048d8:	4a94      	ldr	r2, [pc, #592]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048da:	430b      	orrs	r3, r1
 80048dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e8:	f002 0320 	and.w	r3, r2, #32
 80048ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048f0:	2300      	movs	r3, #0
 80048f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80048f6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80048fa:	460b      	mov	r3, r1
 80048fc:	4313      	orrs	r3, r2
 80048fe:	d00b      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004900:	4b8a      	ldr	r3, [pc, #552]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004902:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004906:	f023 0107 	bic.w	r1, r3, #7
 800490a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800490e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004910:	4a86      	ldr	r2, [pc, #536]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004912:	430b      	orrs	r3, r1
 8004914:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004918:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800491c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004920:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004924:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004928:	2300      	movs	r3, #0
 800492a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800492e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004932:	460b      	mov	r3, r1
 8004934:	4313      	orrs	r3, r2
 8004936:	d00b      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004938:	4b7c      	ldr	r3, [pc, #496]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800493a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800493e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8004942:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004946:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004948:	4a78      	ldr	r2, [pc, #480]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800494a:	430b      	orrs	r3, r1
 800494c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004950:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004958:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800495c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004960:	2300      	movs	r3, #0
 8004962:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004966:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800496a:	460b      	mov	r3, r1
 800496c:	4313      	orrs	r3, r2
 800496e:	d00b      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004970:	4b6e      	ldr	r3, [pc, #440]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004976:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800497a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800497e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004980:	4a6a      	ldr	r2, [pc, #424]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004982:	430b      	orrs	r3, r1
 8004984:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004988:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800498c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004990:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8004994:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004998:	2300      	movs	r3, #0
 800499a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800499e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80049a2:	460b      	mov	r3, r1
 80049a4:	4313      	orrs	r3, r2
 80049a6:	d00b      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80049a8:	4b60      	ldr	r3, [pc, #384]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80049ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80049b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b8:	4a5c      	ldr	r2, [pc, #368]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049ba:	430b      	orrs	r3, r1
 80049bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80049cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049d0:	2300      	movs	r3, #0
 80049d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80049d6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80049da:	460b      	mov	r3, r1
 80049dc:	4313      	orrs	r3, r2
 80049de:	d00b      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80049e0:	4b52      	ldr	r3, [pc, #328]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049e6:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 80049ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049f0:	4a4e      	ldr	r2, [pc, #312]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049f2:	430b      	orrs	r3, r1
 80049f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80049f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a00:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8004a04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a08:	2300      	movs	r3, #0
 8004a0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a0e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004a12:	460b      	mov	r3, r1
 8004a14:	4313      	orrs	r3, r2
 8004a16:	d00b      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004a18:	4b44      	ldr	r3, [pc, #272]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a1e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8004a22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a28:	4a40      	ldr	r2, [pc, #256]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a2a:	430b      	orrs	r3, r1
 8004a2c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a38:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004a3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a40:	2300      	movs	r3, #0
 8004a42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004a46:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	d00b      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004a50:	4b36      	ldr	r3, [pc, #216]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a56:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8004a5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a60:	4a32      	ldr	r2, [pc, #200]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a62:	430b      	orrs	r3, r1
 8004a64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004a68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a70:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004a74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a78:	2300      	movs	r3, #0
 8004a7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a7e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004a82:	460b      	mov	r3, r1
 8004a84:	4313      	orrs	r3, r2
 8004a86:	d00c      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004a88:	4b28      	ldr	r3, [pc, #160]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a9a:	4a24      	ldr	r2, [pc, #144]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a9c:	430b      	orrs	r3, r1
 8004a9e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004aa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aaa:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004aae:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ab4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4313      	orrs	r3, r2
 8004abc:	d04f      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004abe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac6:	2b80      	cmp	r3, #128	; 0x80
 8004ac8:	d02d      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004aca:	2b80      	cmp	r3, #128	; 0x80
 8004acc:	d827      	bhi.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004ace:	2b60      	cmp	r3, #96	; 0x60
 8004ad0:	d02e      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004ad2:	2b60      	cmp	r3, #96	; 0x60
 8004ad4:	d823      	bhi.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004ad6:	2b40      	cmp	r3, #64	; 0x40
 8004ad8:	d006      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004ada:	2b40      	cmp	r3, #64	; 0x40
 8004adc:	d81f      	bhi.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d009      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8004ae2:	2b20      	cmp	r3, #32
 8004ae4:	d011      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004ae6:	e01a      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004ae8:	4b10      	ldr	r3, [pc, #64]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aec:	4a0f      	ldr	r2, [pc, #60]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004af2:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004af4:	e01d      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004af6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004afa:	3308      	adds	r3, #8
 8004afc:	4618      	mov	r0, r3
 8004afe:	f002 f981 	bl	8006e04 <RCCEx_PLL2_Config>
 8004b02:	4603      	mov	r3, r0
 8004b04:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004b08:	e013      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b0e:	332c      	adds	r3, #44	; 0x2c
 8004b10:	4618      	mov	r0, r3
 8004b12:	f002 fa0f 	bl	8006f34 <RCCEx_PLL3_Config>
 8004b16:	4603      	mov	r3, r0
 8004b18:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004b1c:	e009      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004b24:	e005      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8004b26:	bf00      	nop
 8004b28:	e003      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004b2a:	bf00      	nop
 8004b2c:	46020c00 	.word	0x46020c00
        break;
 8004b30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b32:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10d      	bne.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004b3a:	4bb6      	ldr	r3, [pc, #728]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004b3c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004b40:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8004b44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b4c:	4ab1      	ldr	r2, [pc, #708]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004b4e:	430b      	orrs	r3, r1
 8004b50:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004b54:	e003      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b56:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004b5a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004b5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b66:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004b6a:	673b      	str	r3, [r7, #112]	; 0x70
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	677b      	str	r3, [r7, #116]	; 0x74
 8004b70:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004b74:	460b      	mov	r3, r1
 8004b76:	4313      	orrs	r3, r2
 8004b78:	d053      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004b7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b86:	d033      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b8c:	d82c      	bhi.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004b8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b92:	d02f      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004b94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b98:	d826      	bhi.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004b9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b9e:	d008      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8004ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ba4:	d820      	bhi.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00a      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8004baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bae:	d011      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004bb0:	e01a      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004bb2:	4b98      	ldr	r3, [pc, #608]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb6:	4a97      	ldr	r2, [pc, #604]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bbc:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004bbe:	e01a      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004bc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bc4:	3308      	adds	r3, #8
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f002 f91c 	bl	8006e04 <RCCEx_PLL2_Config>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004bd2:	e010      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bd8:	332c      	adds	r3, #44	; 0x2c
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f002 f9aa 	bl	8006f34 <RCCEx_PLL3_Config>
 8004be0:	4603      	mov	r3, r0
 8004be2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004be6:	e006      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004bee:	e002      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8004bf0:	bf00      	nop
 8004bf2:	e000      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8004bf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bf6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10d      	bne.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004bfe:	4b85      	ldr	r3, [pc, #532]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004c00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004c04:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004c08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c10:	4a80      	ldr	r2, [pc, #512]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004c12:	430b      	orrs	r3, r1
 8004c14:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004c18:	e003      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c1a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004c1e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004c22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004c2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c30:	2300      	movs	r3, #0
 8004c32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c34:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004c38:	460b      	mov	r3, r1
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	d046      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004c3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004c46:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004c4a:	d028      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004c4c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004c50:	d821      	bhi.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004c52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c56:	d022      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004c58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c5c:	d81b      	bhi.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004c5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c62:	d01c      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004c64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c68:	d815      	bhi.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c6e:	d008      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004c70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c74:	d80f      	bhi.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d011      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c7e:	d00e      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004c80:	e009      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c86:	3308      	adds	r3, #8
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f002 f8bb 	bl	8006e04 <RCCEx_PLL2_Config>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004c94:	e004      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004c9c:	e000      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8004c9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ca0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10d      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004ca8:	4b5a      	ldr	r3, [pc, #360]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004caa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004cae:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004cb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cb6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004cba:	4a56      	ldr	r2, [pc, #344]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004cbc:	430b      	orrs	r3, r1
 8004cbe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004cc2:	e003      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004cc8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8004ccc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd4:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004cd8:	663b      	str	r3, [r7, #96]	; 0x60
 8004cda:	2300      	movs	r3, #0
 8004cdc:	667b      	str	r3, [r7, #100]	; 0x64
 8004cde:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	d03f      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8004ce8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf0:	2b04      	cmp	r3, #4
 8004cf2:	d81e      	bhi.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8004cf4:	a201      	add	r2, pc, #4	; (adr r2, 8004cfc <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8004cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfa:	bf00      	nop
 8004cfc:	08004d3b 	.word	0x08004d3b
 8004d00:	08004d11 	.word	0x08004d11
 8004d04:	08004d1f 	.word	0x08004d1f
 8004d08:	08004d3b 	.word	0x08004d3b
 8004d0c:	08004d3b 	.word	0x08004d3b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004d10:	4b40      	ldr	r3, [pc, #256]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d14:	4a3f      	ldr	r2, [pc, #252]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004d16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d1a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004d1c:	e00e      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d22:	332c      	adds	r3, #44	; 0x2c
 8004d24:	4618      	mov	r0, r3
 8004d26:	f002 f905 	bl	8006f34 <RCCEx_PLL3_Config>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004d30:	e004      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004d38:	e000      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8004d3a:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004d3c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10d      	bne.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8004d44:	4b33      	ldr	r3, [pc, #204]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004d46:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004d4a:	f023 0107 	bic.w	r1, r3, #7
 8004d4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d56:	4a2f      	ldr	r2, [pc, #188]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004d58:	430b      	orrs	r3, r1
 8004d5a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004d5e:	e003      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d60:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004d64:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8004d68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d70:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004d74:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d76:	2300      	movs	r3, #0
 8004d78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d7a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004d7e:	460b      	mov	r3, r1
 8004d80:	4313      	orrs	r3, r2
 8004d82:	d04d      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8004d84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d8c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d90:	d028      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8004d92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d96:	d821      	bhi.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8004d98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d9c:	d024      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8004d9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004da2:	d81b      	bhi.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8004da4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004da8:	d00e      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8004daa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dae:	d815      	bhi.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d01b      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8004db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db8:	d110      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004dba:	4b16      	ldr	r3, [pc, #88]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbe:	4a15      	ldr	r2, [pc, #84]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dc4:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004dc6:	e012      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004dc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004dcc:	332c      	adds	r3, #44	; 0x2c
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f002 f8b0 	bl	8006f34 <RCCEx_PLL3_Config>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004dda:	e008      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004de2:	e004      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8004de4:	bf00      	nop
 8004de6:	e002      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8004de8:	bf00      	nop
 8004dea:	e000      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8004dec:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004dee:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d110      	bne.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8004df6:	4b07      	ldr	r3, [pc, #28]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004df8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004dfc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004e00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e08:	4a02      	ldr	r2, [pc, #8]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004e0a:	430b      	orrs	r3, r1
 8004e0c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004e10:	e006      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8004e12:	bf00      	nop
 8004e14:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e18:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004e1c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e28:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004e2c:	653b      	str	r3, [r7, #80]	; 0x50
 8004e2e:	2300      	movs	r3, #0
 8004e30:	657b      	str	r3, [r7, #84]	; 0x54
 8004e32:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004e36:	460b      	mov	r3, r1
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	f000 80b5 	beq.w	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e44:	4b9d      	ldr	r3, [pc, #628]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e4a:	f003 0304 	and.w	r3, r3, #4
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d113      	bne.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e52:	4b9a      	ldr	r3, [pc, #616]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004e54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e58:	4a98      	ldr	r2, [pc, #608]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004e5a:	f043 0304 	orr.w	r3, r3, #4
 8004e5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004e62:	4b96      	ldr	r3, [pc, #600]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8004e74:	2301      	movs	r3, #1
 8004e76:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004e7a:	4b91      	ldr	r3, [pc, #580]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7e:	4a90      	ldr	r2, [pc, #576]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004e80:	f043 0301 	orr.w	r3, r3, #1
 8004e84:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e86:	f7fc f97d 	bl	8001184 <HAL_GetTick>
 8004e8a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004e8e:	e00b      	b.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e90:	f7fc f978 	bl	8001184 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d903      	bls.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004ea6:	e005      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004ea8:	4b85      	ldr	r3, [pc, #532]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0ed      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8004eb4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d165      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ebc:	4b7f      	ldr	r3, [pc, #508]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004ebe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ec6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d023      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8004ed2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ed6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d01b      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ee2:	4b76      	ldr	r3, [pc, #472]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004ee4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ef0:	4b72      	ldr	r3, [pc, #456]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004ef2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ef6:	4a71      	ldr	r2, [pc, #452]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004efc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f00:	4b6e      	ldr	r3, [pc, #440]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f06:	4a6d      	ldr	r2, [pc, #436]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f0c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f10:	4a6a      	ldr	r2, [pc, #424]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f16:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d019      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f26:	f7fc f92d 	bl	8001184 <HAL_GetTick>
 8004f2a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f2e:	e00d      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f30:	f7fc f928 	bl	8001184 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f3a:	1ad2      	subs	r2, r2, r3
 8004f3c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d903      	bls.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8004f4a:	e006      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f4c:	4b5b      	ldr	r3, [pc, #364]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0ea      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8004f5a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10d      	bne.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004f62:	4b56      	ldr	r3, [pc, #344]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f68:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004f74:	4a51      	ldr	r2, [pc, #324]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f76:	430b      	orrs	r3, r1
 8004f78:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004f7c:	e008      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f7e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004f82:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8004f86:	e003      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f88:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004f8c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f90:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d107      	bne.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f98:	4b48      	ldr	r3, [pc, #288]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f9e:	4a47      	ldr	r2, [pc, #284]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004fa0:	f023 0304 	bic.w	r3, r3, #4
 8004fa4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8004fa8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004fb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fba:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	d042      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8004fc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004fcc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004fd0:	d022      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8004fd2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004fd6:	d81b      	bhi.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8004fd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fdc:	d011      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8004fde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fe2:	d815      	bhi.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d019      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8004fe8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fec:	d110      	bne.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004fee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ff2:	3308      	adds	r3, #8
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f001 ff05 	bl	8006e04 <RCCEx_PLL2_Config>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005000:	e00d      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005002:	4b2e      	ldr	r3, [pc, #184]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005006:	4a2d      	ldr	r2, [pc, #180]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800500c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800500e:	e006      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005016:	e002      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005018:	bf00      	nop
 800501a:	e000      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800501c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800501e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10d      	bne.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005026:	4b25      	ldr	r3, [pc, #148]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800502c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005030:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005034:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005038:	4a20      	ldr	r2, [pc, #128]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800503a:	430b      	orrs	r3, r1
 800503c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005040:	e003      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005042:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005046:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800504a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800504e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005052:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005056:	643b      	str	r3, [r7, #64]	; 0x40
 8005058:	2300      	movs	r3, #0
 800505a:	647b      	str	r3, [r7, #68]	; 0x44
 800505c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005060:	460b      	mov	r3, r1
 8005062:	4313      	orrs	r3, r2
 8005064:	d032      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005066:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800506a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800506e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005072:	d00b      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005074:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005078:	d804      	bhi.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800507a:	2b00      	cmp	r3, #0
 800507c:	d008      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800507e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005082:	d007      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800508a:	e004      	b.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800508c:	bf00      	nop
 800508e:	e002      	b.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005090:	bf00      	nop
 8005092:	e000      	b.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005094:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005096:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d112      	bne.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800509e:	4b07      	ldr	r3, [pc, #28]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80050a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80050a4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050b0:	4a02      	ldr	r2, [pc, #8]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80050b2:	430b      	orrs	r3, r1
 80050b4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80050b8:	e008      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 80050ba:	bf00      	nop
 80050bc:	46020c00 	.word	0x46020c00
 80050c0:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80050c8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 80050cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d4:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80050d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80050da:	2300      	movs	r3, #0
 80050dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050de:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80050e2:	460b      	mov	r3, r1
 80050e4:	4313      	orrs	r3, r2
 80050e6:	d00c      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80050e8:	4b98      	ldr	r3, [pc, #608]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80050ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80050ee:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 80050f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050fa:	4a94      	ldr	r2, [pc, #592]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80050fc:	430b      	orrs	r3, r1
 80050fe:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800510e:	633b      	str	r3, [r7, #48]	; 0x30
 8005110:	2300      	movs	r3, #0
 8005112:	637b      	str	r3, [r7, #52]	; 0x34
 8005114:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005118:	460b      	mov	r3, r1
 800511a:	4313      	orrs	r3, r2
 800511c:	d019      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800511e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005122:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005126:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800512a:	d105      	bne.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800512c:	4b87      	ldr	r3, [pc, #540]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800512e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005130:	4a86      	ldr	r2, [pc, #536]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005132:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005136:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005138:	4b84      	ldr	r3, [pc, #528]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800513a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800513e:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005142:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005146:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800514a:	4a80      	ldr	r2, [pc, #512]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800514c:	430b      	orrs	r3, r1
 800514e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005152:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800515e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005160:	2300      	movs	r3, #0
 8005162:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005164:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005168:	460b      	mov	r3, r1
 800516a:	4313      	orrs	r3, r2
 800516c:	d00c      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800516e:	4b77      	ldr	r3, [pc, #476]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005174:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005178:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800517c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005180:	4972      	ldr	r1, [pc, #456]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005182:	4313      	orrs	r3, r2
 8005184:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005188:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800518c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005190:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005194:	623b      	str	r3, [r7, #32]
 8005196:	2300      	movs	r3, #0
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
 800519a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800519e:	460b      	mov	r3, r1
 80051a0:	4313      	orrs	r3, r2
 80051a2:	d00c      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80051a4:	4b69      	ldr	r3, [pc, #420]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80051a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051b2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80051b6:	4965      	ldr	r1, [pc, #404]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80051be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c6:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80051ca:	61bb      	str	r3, [r7, #24]
 80051cc:	2300      	movs	r3, #0
 80051ce:	61fb      	str	r3, [r7, #28]
 80051d0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80051d4:	460b      	mov	r3, r1
 80051d6:	4313      	orrs	r3, r2
 80051d8:	d00c      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80051da:	4b5c      	ldr	r3, [pc, #368]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80051dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051e0:	f023 0218 	bic.w	r2, r3, #24
 80051e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051e8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80051ec:	4957      	ldr	r1, [pc, #348]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80051f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fc:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8005200:	613b      	str	r3, [r7, #16]
 8005202:	2300      	movs	r3, #0
 8005204:	617b      	str	r3, [r7, #20]
 8005206:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800520a:	460b      	mov	r3, r1
 800520c:	4313      	orrs	r3, r2
 800520e:	d032      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005210:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005214:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005218:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800521c:	d105      	bne.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800521e:	4b4b      	ldr	r3, [pc, #300]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005222:	4a4a      	ldr	r2, [pc, #296]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005228:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800522a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800522e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005232:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005236:	d108      	bne.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005238:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800523c:	3308      	adds	r3, #8
 800523e:	4618      	mov	r0, r3
 8005240:	f001 fde0 	bl	8006e04 <RCCEx_PLL2_Config>
 8005244:	4603      	mov	r3, r0
 8005246:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 800524a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10d      	bne.n	800526e <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005252:	4b3e      	ldr	r3, [pc, #248]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005254:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005258:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800525c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005260:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005264:	4939      	ldr	r1, [pc, #228]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005266:	4313      	orrs	r3, r2
 8005268:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800526c:	e003      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800526e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005272:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005276:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800527a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527e:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8005282:	60bb      	str	r3, [r7, #8]
 8005284:	2300      	movs	r3, #0
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800528c:	460b      	mov	r3, r1
 800528e:	4313      	orrs	r3, r2
 8005290:	d03a      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005292:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800529a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800529e:	d00e      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xaee>
 80052a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052a4:	d815      	bhi.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d017      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80052aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052ae:	d110      	bne.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052b0:	4b26      	ldr	r3, [pc, #152]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80052b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b4:	4a25      	ldr	r2, [pc, #148]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80052b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052ba:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80052bc:	e00e      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052c2:	3308      	adds	r3, #8
 80052c4:	4618      	mov	r0, r3
 80052c6:	f001 fd9d 	bl	8006e04 <RCCEx_PLL2_Config>
 80052ca:	4603      	mov	r3, r0
 80052cc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80052d0:	e004      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80052d8:	e000      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 80052da:	bf00      	nop
    }
    if (ret == HAL_OK)
 80052dc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10d      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80052e4:	4b19      	ldr	r3, [pc, #100]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80052e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80052ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052f6:	4915      	ldr	r1, [pc, #84]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80052fe:	e003      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005300:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005304:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005308:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800530c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005310:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005314:	603b      	str	r3, [r7, #0]
 8005316:	2300      	movs	r3, #0
 8005318:	607b      	str	r3, [r7, #4]
 800531a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800531e:	460b      	mov	r3, r1
 8005320:	4313      	orrs	r3, r2
 8005322:	d00c      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005324:	4b09      	ldr	r3, [pc, #36]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005326:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800532a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800532e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005332:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005336:	4905      	ldr	r1, [pc, #20]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005338:	4313      	orrs	r3, r2
 800533a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800533e:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8005342:	4618      	mov	r0, r3
 8005344:	37e8      	adds	r7, #232	; 0xe8
 8005346:	46bd      	mov	sp, r7
 8005348:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800534c:	46020c00 	.word	0x46020c00

08005350 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005350:	b480      	push	{r7}
 8005352:	b089      	sub	sp, #36	; 0x24
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005358:	4bac      	ldr	r3, [pc, #688]	; (800560c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800535a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800535c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005360:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005362:	4baa      	ldr	r3, [pc, #680]	; (800560c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005366:	f003 0303 	and.w	r3, r3, #3
 800536a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800536c:	4ba7      	ldr	r3, [pc, #668]	; (800560c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800536e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005370:	0a1b      	lsrs	r3, r3, #8
 8005372:	f003 030f 	and.w	r3, r3, #15
 8005376:	3301      	adds	r3, #1
 8005378:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 800537a:	4ba4      	ldr	r3, [pc, #656]	; (800560c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800537c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537e:	f003 0310 	and.w	r3, r3, #16
 8005382:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005384:	4ba1      	ldr	r3, [pc, #644]	; (800560c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005388:	08db      	lsrs	r3, r3, #3
 800538a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	fb02 f303 	mul.w	r3, r2, r3
 8005394:	ee07 3a90 	vmov	s15, r3
 8005398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800539c:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f000 8123 	beq.w	80055ee <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	2b03      	cmp	r3, #3
 80053ac:	d062      	beq.n	8005474 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2b03      	cmp	r3, #3
 80053b2:	f200 8081 	bhi.w	80054b8 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d024      	beq.n	8005406 <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d17a      	bne.n	80054b8 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	ee07 3a90 	vmov	s15, r3
 80053c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053cc:	eddf 6a90 	vldr	s13, [pc, #576]	; 8005610 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 80053d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053d4:	4b8d      	ldr	r3, [pc, #564]	; (800560c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80053d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053dc:	ee07 3a90 	vmov	s15, r3
 80053e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80053e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80053e8:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8005614 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80053ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80053f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005400:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005404:	e08f      	b.n	8005526 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005406:	4b81      	ldr	r3, [pc, #516]	; (800560c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d005      	beq.n	800541e <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 8005412:	4b7e      	ldr	r3, [pc, #504]	; (800560c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	0f1b      	lsrs	r3, r3, #28
 8005418:	f003 030f 	and.w	r3, r3, #15
 800541c:	e006      	b.n	800542c <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 800541e:	4b7b      	ldr	r3, [pc, #492]	; (800560c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005420:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005424:	041b      	lsls	r3, r3, #16
 8005426:	0f1b      	lsrs	r3, r3, #28
 8005428:	f003 030f 	and.w	r3, r3, #15
 800542c:	4a7a      	ldr	r2, [pc, #488]	; (8005618 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800542e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005432:	ee07 3a90 	vmov	s15, r3
 8005436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	ee07 3a90 	vmov	s15, r3
 8005440:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005444:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	ee07 3a90 	vmov	s15, r3
 800544e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005452:	ed97 6a02 	vldr	s12, [r7, #8]
 8005456:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8005614 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800545a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800545e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005462:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005466:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800546a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800546e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005472:	e058      	b.n	8005526 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	ee07 3a90 	vmov	s15, r3
 800547a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800547e:	eddf 6a64 	vldr	s13, [pc, #400]	; 8005610 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8005482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005486:	4b61      	ldr	r3, [pc, #388]	; (800560c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800548a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800548e:	ee07 3a90 	vmov	s15, r3
 8005492:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005496:	ed97 6a02 	vldr	s12, [r7, #8]
 800549a:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8005614 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800549e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80054a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80054a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80054ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054b6:	e036      	b.n	8005526 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80054b8:	4b54      	ldr	r3, [pc, #336]	; (800560c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d005      	beq.n	80054d0 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 80054c4:	4b51      	ldr	r3, [pc, #324]	; (800560c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	0f1b      	lsrs	r3, r3, #28
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	e006      	b.n	80054de <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 80054d0:	4b4e      	ldr	r3, [pc, #312]	; (800560c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80054d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80054d6:	041b      	lsls	r3, r3, #16
 80054d8:	0f1b      	lsrs	r3, r3, #28
 80054da:	f003 030f 	and.w	r3, r3, #15
 80054de:	4a4e      	ldr	r2, [pc, #312]	; (8005618 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80054e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054e4:	ee07 3a90 	vmov	s15, r3
 80054e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	ee07 3a90 	vmov	s15, r3
 80054f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	ee07 3a90 	vmov	s15, r3
 8005500:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005504:	ed97 6a02 	vldr	s12, [r7, #8]
 8005508:	eddf 5a42 	vldr	s11, [pc, #264]	; 8005614 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800550c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005510:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005514:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005518:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800551c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005520:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005524:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005526:	4b39      	ldr	r3, [pc, #228]	; (800560c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d017      	beq.n	8005562 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005532:	4b36      	ldr	r3, [pc, #216]	; (800560c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005536:	0a5b      	lsrs	r3, r3, #9
 8005538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800553c:	ee07 3a90 	vmov	s15, r3
 8005540:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005544:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005548:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800554c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005550:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005554:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005558:	ee17 2a90 	vmov	r2, s15
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	e002      	b.n	8005568 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005568:	4b28      	ldr	r3, [pc, #160]	; (800560c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800556a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d017      	beq.n	80055a4 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005574:	4b25      	ldr	r3, [pc, #148]	; (800560c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005578:	0c1b      	lsrs	r3, r3, #16
 800557a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800557e:	ee07 3a90 	vmov	s15, r3
 8005582:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005586:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800558a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800558e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005592:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800559a:	ee17 2a90 	vmov	r2, s15
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	605a      	str	r2, [r3, #4]
 80055a2:	e002      	b.n	80055aa <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80055aa:	4b18      	ldr	r3, [pc, #96]	; (800560c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80055ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d017      	beq.n	80055e6 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80055b6:	4b15      	ldr	r3, [pc, #84]	; (800560c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80055b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ba:	0e1b      	lsrs	r3, r3, #24
 80055bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055c0:	ee07 3a90 	vmov	s15, r3
 80055c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80055c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055cc:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80055d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80055d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055dc:	ee17 2a90 	vmov	r2, s15
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80055e4:	e00c      	b.n	8005600 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	609a      	str	r2, [r3, #8]
}
 80055ec:	e008      	b.n	8005600 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	609a      	str	r2, [r3, #8]
}
 8005600:	bf00      	nop
 8005602:	3724      	adds	r7, #36	; 0x24
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	46020c00 	.word	0x46020c00
 8005610:	4b742400 	.word	0x4b742400
 8005614:	46000000 	.word	0x46000000
 8005618:	08008ce4 	.word	0x08008ce4

0800561c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800561c:	b480      	push	{r7}
 800561e:	b089      	sub	sp, #36	; 0x24
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005624:	4bac      	ldr	r3, [pc, #688]	; (80058d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800562c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800562e:	4baa      	ldr	r3, [pc, #680]	; (80058d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005632:	f003 0303 	and.w	r3, r3, #3
 8005636:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005638:	4ba7      	ldr	r3, [pc, #668]	; (80058d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800563a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563c:	0a1b      	lsrs	r3, r3, #8
 800563e:	f003 030f 	and.w	r3, r3, #15
 8005642:	3301      	adds	r3, #1
 8005644:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8005646:	4ba4      	ldr	r3, [pc, #656]	; (80058d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564a:	f003 0310 	and.w	r3, r3, #16
 800564e:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005650:	4ba1      	ldr	r3, [pc, #644]	; (80058d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005654:	08db      	lsrs	r3, r3, #3
 8005656:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	fb02 f303 	mul.w	r3, r2, r3
 8005660:	ee07 3a90 	vmov	s15, r3
 8005664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005668:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	f000 8123 	beq.w	80058ba <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	2b03      	cmp	r3, #3
 8005678:	d062      	beq.n	8005740 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	2b03      	cmp	r3, #3
 800567e:	f200 8081 	bhi.w	8005784 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d024      	beq.n	80056d2 <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	2b02      	cmp	r3, #2
 800568c:	d17a      	bne.n	8005784 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	ee07 3a90 	vmov	s15, r3
 8005694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005698:	eddf 6a90 	vldr	s13, [pc, #576]	; 80058dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800569c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056a0:	4b8d      	ldr	r3, [pc, #564]	; (80058d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80056a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056a8:	ee07 3a90 	vmov	s15, r3
 80056ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80056b0:	ed97 6a02 	vldr	s12, [r7, #8]
 80056b4:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80058e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80056b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80056bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80056c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80056c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056d0:	e08f      	b.n	80057f2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80056d2:	4b81      	ldr	r3, [pc, #516]	; (80058d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d005      	beq.n	80056ea <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 80056de:	4b7e      	ldr	r3, [pc, #504]	; (80058d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	0f1b      	lsrs	r3, r3, #28
 80056e4:	f003 030f 	and.w	r3, r3, #15
 80056e8:	e006      	b.n	80056f8 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 80056ea:	4b7b      	ldr	r3, [pc, #492]	; (80058d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80056ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056f0:	041b      	lsls	r3, r3, #16
 80056f2:	0f1b      	lsrs	r3, r3, #28
 80056f4:	f003 030f 	and.w	r3, r3, #15
 80056f8:	4a7a      	ldr	r2, [pc, #488]	; (80058e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80056fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056fe:	ee07 3a90 	vmov	s15, r3
 8005702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	ee07 3a90 	vmov	s15, r3
 800570c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005710:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	ee07 3a90 	vmov	s15, r3
 800571a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800571e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005722:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80058e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8005726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800572a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800572e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005732:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800573a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800573e:	e058      	b.n	80057f2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	ee07 3a90 	vmov	s15, r3
 8005746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800574a:	eddf 6a64 	vldr	s13, [pc, #400]	; 80058dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800574e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005752:	4b61      	ldr	r3, [pc, #388]	; (80058d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800575a:	ee07 3a90 	vmov	s15, r3
 800575e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005762:	ed97 6a02 	vldr	s12, [r7, #8]
 8005766:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80058e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800576a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800576e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005776:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800577a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800577e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005782:	e036      	b.n	80057f2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005784:	4b54      	ldr	r3, [pc, #336]	; (80058d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d005      	beq.n	800579c <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8005790:	4b51      	ldr	r3, [pc, #324]	; (80058d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	0f1b      	lsrs	r3, r3, #28
 8005796:	f003 030f 	and.w	r3, r3, #15
 800579a:	e006      	b.n	80057aa <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 800579c:	4b4e      	ldr	r3, [pc, #312]	; (80058d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800579e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80057a2:	041b      	lsls	r3, r3, #16
 80057a4:	0f1b      	lsrs	r3, r3, #28
 80057a6:	f003 030f 	and.w	r3, r3, #15
 80057aa:	4a4e      	ldr	r2, [pc, #312]	; (80058e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80057ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057b0:	ee07 3a90 	vmov	s15, r3
 80057b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	ee07 3a90 	vmov	s15, r3
 80057be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	ee07 3a90 	vmov	s15, r3
 80057cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80057d4:	eddf 5a42 	vldr	s11, [pc, #264]	; 80058e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80057d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80057e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057f0:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80057f2:	4b39      	ldr	r3, [pc, #228]	; (80058d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80057f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d017      	beq.n	800582e <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80057fe:	4b36      	ldr	r3, [pc, #216]	; (80058d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005802:	0a5b      	lsrs	r3, r3, #9
 8005804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005808:	ee07 3a90 	vmov	s15, r3
 800580c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8005810:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005814:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005818:	edd7 6a07 	vldr	s13, [r7, #28]
 800581c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005824:	ee17 2a90 	vmov	r2, s15
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	601a      	str	r2, [r3, #0]
 800582c:	e002      	b.n	8005834 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005834:	4b28      	ldr	r3, [pc, #160]	; (80058d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d017      	beq.n	8005870 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005840:	4b25      	ldr	r3, [pc, #148]	; (80058d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005844:	0c1b      	lsrs	r3, r3, #16
 8005846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800584a:	ee07 3a90 	vmov	s15, r3
 800584e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005852:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005856:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800585a:	edd7 6a07 	vldr	s13, [r7, #28]
 800585e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005862:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005866:	ee17 2a90 	vmov	r2, s15
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	605a      	str	r2, [r3, #4]
 800586e:	e002      	b.n	8005876 <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005876:	4b18      	ldr	r3, [pc, #96]	; (80058d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d017      	beq.n	80058b2 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005882:	4b15      	ldr	r3, [pc, #84]	; (80058d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005886:	0e1b      	lsrs	r3, r3, #24
 8005888:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800588c:	ee07 3a90 	vmov	s15, r3
 8005890:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8005894:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005898:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800589c:	edd7 6a07 	vldr	s13, [r7, #28]
 80058a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058a8:	ee17 2a90 	vmov	r2, s15
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80058b0:	e00c      	b.n	80058cc <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	609a      	str	r2, [r3, #8]
}
 80058b8:	e008      	b.n	80058cc <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	609a      	str	r2, [r3, #8]
}
 80058cc:	bf00      	nop
 80058ce:	3724      	adds	r7, #36	; 0x24
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	46020c00 	.word	0x46020c00
 80058dc:	4b742400 	.word	0x4b742400
 80058e0:	46000000 	.word	0x46000000
 80058e4:	08008ce4 	.word	0x08008ce4

080058e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b089      	sub	sp, #36	; 0x24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80058f0:	4bac      	ldr	r3, [pc, #688]	; (8005ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80058f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058f8:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80058fa:	4baa      	ldr	r3, [pc, #680]	; (8005ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80058fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fe:	f003 0303 	and.w	r3, r3, #3
 8005902:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005904:	4ba7      	ldr	r3, [pc, #668]	; (8005ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005908:	0a1b      	lsrs	r3, r3, #8
 800590a:	f003 030f 	and.w	r3, r3, #15
 800590e:	3301      	adds	r3, #1
 8005910:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8005912:	4ba4      	ldr	r3, [pc, #656]	; (8005ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005916:	f003 0310 	and.w	r3, r3, #16
 800591a:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800591c:	4ba1      	ldr	r3, [pc, #644]	; (8005ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800591e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005920:	08db      	lsrs	r3, r3, #3
 8005922:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	fb02 f303 	mul.w	r3, r2, r3
 800592c:	ee07 3a90 	vmov	s15, r3
 8005930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005934:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 8123 	beq.w	8005b86 <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	2b03      	cmp	r3, #3
 8005944:	d062      	beq.n	8005a0c <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2b03      	cmp	r3, #3
 800594a:	f200 8081 	bhi.w	8005a50 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d024      	beq.n	800599e <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	2b02      	cmp	r3, #2
 8005958:	d17a      	bne.n	8005a50 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	ee07 3a90 	vmov	s15, r3
 8005960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005964:	eddf 6a90 	vldr	s13, [pc, #576]	; 8005ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8005968:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800596c:	4b8d      	ldr	r3, [pc, #564]	; (8005ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800596e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005974:	ee07 3a90 	vmov	s15, r3
 8005978:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800597c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005980:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8005bac <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8005984:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005988:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800598c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005990:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005994:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005998:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 800599c:	e08f      	b.n	8005abe <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800599e:	4b81      	ldr	r3, [pc, #516]	; (8005ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d005      	beq.n	80059b6 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 80059aa:	4b7e      	ldr	r3, [pc, #504]	; (8005ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	0f1b      	lsrs	r3, r3, #28
 80059b0:	f003 030f 	and.w	r3, r3, #15
 80059b4:	e006      	b.n	80059c4 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 80059b6:	4b7b      	ldr	r3, [pc, #492]	; (8005ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80059b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80059bc:	041b      	lsls	r3, r3, #16
 80059be:	0f1b      	lsrs	r3, r3, #28
 80059c0:	f003 030f 	and.w	r3, r3, #15
 80059c4:	4a7a      	ldr	r2, [pc, #488]	; (8005bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80059c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059ca:	ee07 3a90 	vmov	s15, r3
 80059ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	ee07 3a90 	vmov	s15, r3
 80059d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	ee07 3a90 	vmov	s15, r3
 80059e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80059ee:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8005bac <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80059f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a0a:	e058      	b.n	8005abe <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	ee07 3a90 	vmov	s15, r3
 8005a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a16:	eddf 6a64 	vldr	s13, [pc, #400]	; 8005ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8005a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a1e:	4b61      	ldr	r3, [pc, #388]	; (8005ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a26:	ee07 3a90 	vmov	s15, r3
 8005a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a32:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8005bac <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8005a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a4e:	e036      	b.n	8005abe <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005a50:	4b54      	ldr	r3, [pc, #336]	; (8005ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d005      	beq.n	8005a68 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 8005a5c:	4b51      	ldr	r3, [pc, #324]	; (8005ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	0f1b      	lsrs	r3, r3, #28
 8005a62:	f003 030f 	and.w	r3, r3, #15
 8005a66:	e006      	b.n	8005a76 <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 8005a68:	4b4e      	ldr	r3, [pc, #312]	; (8005ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005a6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a6e:	041b      	lsls	r3, r3, #16
 8005a70:	0f1b      	lsrs	r3, r3, #28
 8005a72:	f003 030f 	and.w	r3, r3, #15
 8005a76:	4a4e      	ldr	r2, [pc, #312]	; (8005bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8005a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a7c:	ee07 3a90 	vmov	s15, r3
 8005a80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	ee07 3a90 	vmov	s15, r3
 8005a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	ee07 3a90 	vmov	s15, r3
 8005a98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a9c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005aa0:	eddf 5a42 	vldr	s11, [pc, #264]	; 8005bac <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8005aa4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ab0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ab8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005abc:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005abe:	4b39      	ldr	r3, [pc, #228]	; (8005ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d017      	beq.n	8005afa <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005aca:	4b36      	ldr	r3, [pc, #216]	; (8005ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ace:	0a5b      	lsrs	r3, r3, #9
 8005ad0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ad4:	ee07 3a90 	vmov	s15, r3
 8005ad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8005adc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ae0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005ae4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ae8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005aec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005af0:	ee17 2a90 	vmov	r2, s15
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	601a      	str	r2, [r3, #0]
 8005af8:	e002      	b.n	8005b00 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005b00:	4b28      	ldr	r3, [pc, #160]	; (8005ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d017      	beq.n	8005b3c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005b0c:	4b25      	ldr	r3, [pc, #148]	; (8005ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b10:	0c1b      	lsrs	r3, r3, #16
 8005b12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b16:	ee07 3a90 	vmov	s15, r3
 8005b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005b1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b22:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005b26:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b32:	ee17 2a90 	vmov	r2, s15
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	605a      	str	r2, [r3, #4]
 8005b3a:	e002      	b.n	8005b42 <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005b42:	4b18      	ldr	r3, [pc, #96]	; (8005ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d017      	beq.n	8005b7e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005b4e:	4b15      	ldr	r3, [pc, #84]	; (8005ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b52:	0e1b      	lsrs	r3, r3, #24
 8005b54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b58:	ee07 3a90 	vmov	s15, r3
 8005b5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8005b60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b64:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005b68:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b74:	ee17 2a90 	vmov	r2, s15
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8005b7c:	e00c      	b.n	8005b98 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	609a      	str	r2, [r3, #8]
}
 8005b84:	e008      	b.n	8005b98 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	609a      	str	r2, [r3, #8]
}
 8005b98:	bf00      	nop
 8005b9a:	3724      	adds	r7, #36	; 0x24
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr
 8005ba4:	46020c00 	.word	0x46020c00
 8005ba8:	4b742400 	.word	0x4b742400
 8005bac:	46000000 	.word	0x46000000
 8005bb0:	08008ce4 	.word	0x08008ce4

08005bb4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b08e      	sub	sp, #56	; 0x38
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005bbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bc2:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8005bc6:	430b      	orrs	r3, r1
 8005bc8:	d145      	bne.n	8005c56 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005bca:	4ba7      	ldr	r3, [pc, #668]	; (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005bcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005bd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bd4:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005bd6:	4ba4      	ldr	r3, [pc, #656]	; (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005bd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005bdc:	f003 0302 	and.w	r3, r3, #2
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d108      	bne.n	8005bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bea:	d104      	bne.n	8005bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005bec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8005bf2:	f001 b8fc 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005bf6:	4b9c      	ldr	r3, [pc, #624]	; (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005bf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005bfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c04:	d114      	bne.n	8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8005c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c0c:	d110      	bne.n	8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005c0e:	4b96      	ldr	r3, [pc, #600]	; (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005c10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c1c:	d103      	bne.n	8005c26 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8005c1e:	23fa      	movs	r3, #250	; 0xfa
 8005c20:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005c22:	f001 b8e4 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8005c26:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005c2a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005c2c:	f001 b8df 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005c30:	4b8d      	ldr	r3, [pc, #564]	; (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c3c:	d107      	bne.n	8005c4e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c44:	d103      	bne.n	8005c4e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8005c46:	4b89      	ldr	r3, [pc, #548]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005c48:	637b      	str	r3, [r7, #52]	; 0x34
 8005c4a:	f001 b8d0 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	637b      	str	r3, [r7, #52]	; 0x34
 8005c52:	f001 b8cc 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005c56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c5a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8005c5e:	430b      	orrs	r3, r1
 8005c60:	d151      	bne.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005c62:	4b81      	ldr	r3, [pc, #516]	; (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005c64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005c68:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8005c6c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c70:	2b80      	cmp	r3, #128	; 0x80
 8005c72:	d035      	beq.n	8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8005c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c76:	2b80      	cmp	r3, #128	; 0x80
 8005c78:	d841      	bhi.n	8005cfe <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7c:	2b60      	cmp	r3, #96	; 0x60
 8005c7e:	d02a      	beq.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8005c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c82:	2b60      	cmp	r3, #96	; 0x60
 8005c84:	d83b      	bhi.n	8005cfe <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c88:	2b40      	cmp	r3, #64	; 0x40
 8005c8a:	d009      	beq.n	8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8e:	2b40      	cmp	r3, #64	; 0x40
 8005c90:	d835      	bhi.n	8005cfe <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00c      	beq.n	8005cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8005c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9a:	2b20      	cmp	r3, #32
 8005c9c:	d012      	beq.n	8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005c9e:	e02e      	b.n	8005cfe <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7ff fb53 	bl	8005350 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cae:	f001 b89e 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cb2:	f107 0318 	add.w	r3, r7, #24
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7ff fcb0 	bl	800561c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cc0:	f001 b895 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cc4:	f107 030c 	add.w	r3, r7, #12
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7ff fe0d 	bl	80058e8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cd2:	f001 b88c 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005cd6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005cda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cdc:	f001 b887 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ce0:	4b61      	ldr	r3, [pc, #388]	; (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cec:	d103      	bne.n	8005cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8005cee:	4b60      	ldr	r3, [pc, #384]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005cf0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005cf2:	f001 b87c 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cfa:	f001 b878 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d02:	f001 b874 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005d06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d0a:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8005d0e:	430b      	orrs	r3, r1
 8005d10:	d158      	bne.n	8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005d12:	4b55      	ldr	r3, [pc, #340]	; (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005d14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005d18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d1c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d24:	d03b      	beq.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8005d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d2c:	d846      	bhi.n	8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d34:	d02e      	beq.n	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8005d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d3c:	d83e      	bhi.n	8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d44:	d00b      	beq.n	8005d5e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8005d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d4c:	d836      	bhi.n	8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00d      	beq.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8005d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d5a:	d012      	beq.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8005d5c:	e02e      	b.n	8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7ff faf4 	bl	8005350 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d6c:	f001 b83f 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d70:	f107 0318 	add.w	r3, r7, #24
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7ff fc51 	bl	800561c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d7e:	f001 b836 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d82:	f107 030c 	add.w	r3, r7, #12
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7ff fdae 	bl	80058e8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d90:	f001 b82d 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005d94:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005d98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d9a:	f001 b828 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d9e:	4b32      	ldr	r3, [pc, #200]	; (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005daa:	d103      	bne.n	8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8005dac:	4b30      	ldr	r3, [pc, #192]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005dae:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005db0:	f001 b81d 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8005db4:	2300      	movs	r3, #0
 8005db6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005db8:	f001 b819 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005dc0:	f001 b815 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8005dc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dc8:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8005dcc:	430b      	orrs	r3, r1
 8005dce:	d126      	bne.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8005dd0:	4b25      	ldr	r3, [pc, #148]	; (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005dd2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005dd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dda:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8005ddc:	4b22      	ldr	r3, [pc, #136]	; (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005de8:	d106      	bne.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8005dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d103      	bne.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8005df0:	4b1f      	ldr	r3, [pc, #124]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005df2:	637b      	str	r3, [r7, #52]	; 0x34
 8005df4:	f000 bffb 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8005df8:	4b1b      	ldr	r3, [pc, #108]	; (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e04:	d107      	bne.n	8005e16 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8005e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e0c:	d103      	bne.n	8005e16 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8005e0e:	4b19      	ldr	r3, [pc, #100]	; (8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005e10:	637b      	str	r3, [r7, #52]	; 0x34
 8005e12:	f000 bfec 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8005e16:	2300      	movs	r3, #0
 8005e18:	637b      	str	r3, [r7, #52]	; 0x34
 8005e1a:	f000 bfe8 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8005e1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e22:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8005e26:	430b      	orrs	r3, r1
 8005e28:	d164      	bne.n	8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005e2a:	4b0f      	ldr	r3, [pc, #60]	; (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e30:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005e34:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e38:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005e3c:	d03d      	beq.n	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e40:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005e44:	d852      	bhi.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e4c:	d014      	beq.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8005e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e54:	d84a      	bhi.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d01f      	beq.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8005e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e62:	d012      	beq.n	8005e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8005e64:	e042      	b.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005e66:	bf00      	nop
 8005e68:	46020c00 	.word	0x46020c00
 8005e6c:	0007a120 	.word	0x0007a120
 8005e70:	00f42400 	.word	0x00f42400
 8005e74:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7ff fa67 	bl	8005350 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e86:	f000 bfb2 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e8a:	f107 0318 	add.w	r3, r7, #24
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7ff fbc4 	bl	800561c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e98:	f000 bfa9 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005e9c:	4bab      	ldr	r3, [pc, #684]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ea8:	d103      	bne.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8005eaa:	4ba9      	ldr	r3, [pc, #676]	; (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005eac:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005eae:	f000 bf9e 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005eb6:	f000 bf9a 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005eba:	4ba4      	ldr	r3, [pc, #656]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d005      	beq.n	8005ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8005ec6:	4ba1      	ldr	r3, [pc, #644]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	0e1b      	lsrs	r3, r3, #24
 8005ecc:	f003 030f 	and.w	r3, r3, #15
 8005ed0:	e006      	b.n	8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 8005ed2:	4b9e      	ldr	r3, [pc, #632]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005ed4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ed8:	041b      	lsls	r3, r3, #16
 8005eda:	0e1b      	lsrs	r3, r3, #24
 8005edc:	f003 030f 	and.w	r3, r3, #15
 8005ee0:	4a9c      	ldr	r2, [pc, #624]	; (8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8005ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ee6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ee8:	f000 bf81 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8005eec:	2300      	movs	r3, #0
 8005eee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ef0:	f000 bf7d 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005ef4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ef8:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8005efc:	430b      	orrs	r3, r1
 8005efe:	d175      	bne.n	8005fec <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005f00:	4b92      	ldr	r3, [pc, #584]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005f02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f0a:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8005f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d15b      	bne.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005f12:	4b8e      	ldr	r3, [pc, #568]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f18:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005f1c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f20:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005f24:	d034      	beq.n	8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f28:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005f2c:	d849      	bhi.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8005f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f34:	d00b      	beq.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8005f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f3c:	d841      	bhi.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d016      	beq.n	8005f72 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f4a:	d009      	beq.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8005f4c:	e039      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7ff f9fc 	bl	8005350 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005f5c:	f000 bf47 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f60:	f107 0318 	add.w	r3, r7, #24
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7ff fb59 	bl	800561c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005f6e:	f000 bf3e 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005f72:	4b76      	ldr	r3, [pc, #472]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f7e:	d103      	bne.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 8005f80:	4b73      	ldr	r3, [pc, #460]	; (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005f82:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8005f84:	f000 bf33 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005f8c:	f000 bf2f 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005f90:	4b6e      	ldr	r3, [pc, #440]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d005      	beq.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 8005f9c:	4b6b      	ldr	r3, [pc, #428]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	0e1b      	lsrs	r3, r3, #24
 8005fa2:	f003 030f 	and.w	r3, r3, #15
 8005fa6:	e006      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 8005fa8:	4b68      	ldr	r3, [pc, #416]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005faa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005fae:	041b      	lsls	r3, r3, #16
 8005fb0:	0e1b      	lsrs	r3, r3, #24
 8005fb2:	f003 030f 	and.w	r3, r3, #15
 8005fb6:	4a67      	ldr	r2, [pc, #412]	; (8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8005fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fbc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005fbe:	f000 bf16 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005fc6:	f000 bf12 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8005fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fd0:	d108      	bne.n	8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7ff f9ba 	bl	8005350 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	637b      	str	r3, [r7, #52]	; 0x34
 8005fe0:	f000 bf05 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	637b      	str	r3, [r7, #52]	; 0x34
 8005fe8:	f000 bf01 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8005fec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ff0:	1e51      	subs	r1, r2, #1
 8005ff2:	430b      	orrs	r3, r1
 8005ff4:	d136      	bne.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005ff6:	4b55      	ldr	r3, [pc, #340]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ffc:	f003 0303 	and.w	r3, r3, #3
 8006000:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006004:	2b00      	cmp	r3, #0
 8006006:	d104      	bne.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006008:	f7fe fb34 	bl	8004674 <HAL_RCC_GetPCLK2Freq>
 800600c:	6378      	str	r0, [r7, #52]	; 0x34
 800600e:	f000 beee 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006014:	2b01      	cmp	r3, #1
 8006016:	d104      	bne.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006018:	f7fe f9f6 	bl	8004408 <HAL_RCC_GetSysClockFreq>
 800601c:	6378      	str	r0, [r7, #52]	; 0x34
 800601e:	f000 bee6 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006022:	4b4a      	ldr	r3, [pc, #296]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800602a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800602e:	d106      	bne.n	800603e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006032:	2b02      	cmp	r3, #2
 8006034:	d103      	bne.n	800603e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 8006036:	4b48      	ldr	r3, [pc, #288]	; (8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006038:	637b      	str	r3, [r7, #52]	; 0x34
 800603a:	f000 bed8 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800603e:	4b43      	ldr	r3, [pc, #268]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006040:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	2b02      	cmp	r3, #2
 800604a:	d107      	bne.n	800605c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 800604c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604e:	2b03      	cmp	r3, #3
 8006050:	d104      	bne.n	800605c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 8006052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006056:	637b      	str	r3, [r7, #52]	; 0x34
 8006058:	f000 bec9 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800605c:	2300      	movs	r3, #0
 800605e:	637b      	str	r3, [r7, #52]	; 0x34
 8006060:	f000 bec5 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006064:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006068:	1e91      	subs	r1, r2, #2
 800606a:	430b      	orrs	r3, r1
 800606c:	d136      	bne.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800606e:	4b37      	ldr	r3, [pc, #220]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006074:	f003 030c 	and.w	r3, r3, #12
 8006078:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800607a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607c:	2b00      	cmp	r3, #0
 800607e:	d104      	bne.n	800608a <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006080:	f7fe fae4 	bl	800464c <HAL_RCC_GetPCLK1Freq>
 8006084:	6378      	str	r0, [r7, #52]	; 0x34
 8006086:	f000 beb2 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608c:	2b04      	cmp	r3, #4
 800608e:	d104      	bne.n	800609a <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006090:	f7fe f9ba 	bl	8004408 <HAL_RCC_GetSysClockFreq>
 8006094:	6378      	str	r0, [r7, #52]	; 0x34
 8006096:	f000 beaa 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800609a:	4b2c      	ldr	r3, [pc, #176]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060a6:	d106      	bne.n	80060b6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 80060a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060aa:	2b08      	cmp	r3, #8
 80060ac:	d103      	bne.n	80060b6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 80060ae:	4b2a      	ldr	r3, [pc, #168]	; (8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80060b0:	637b      	str	r3, [r7, #52]	; 0x34
 80060b2:	f000 be9c 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80060b6:	4b25      	ldr	r3, [pc, #148]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80060b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80060bc:	f003 0302 	and.w	r3, r3, #2
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d107      	bne.n	80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 80060c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c6:	2b0c      	cmp	r3, #12
 80060c8:	d104      	bne.n	80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 80060ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060ce:	637b      	str	r3, [r7, #52]	; 0x34
 80060d0:	f000 be8d 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80060d4:	2300      	movs	r3, #0
 80060d6:	637b      	str	r3, [r7, #52]	; 0x34
 80060d8:	f000 be89 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80060dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060e0:	1f11      	subs	r1, r2, #4
 80060e2:	430b      	orrs	r3, r1
 80060e4:	d13e      	bne.n	8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80060e6:	4b19      	ldr	r3, [pc, #100]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80060e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80060f0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80060f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d104      	bne.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80060f8:	f7fe faa8 	bl	800464c <HAL_RCC_GetPCLK1Freq>
 80060fc:	6378      	str	r0, [r7, #52]	; 0x34
 80060fe:	f000 be76 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006104:	2b10      	cmp	r3, #16
 8006106:	d104      	bne.n	8006112 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006108:	f7fe f97e 	bl	8004408 <HAL_RCC_GetSysClockFreq>
 800610c:	6378      	str	r0, [r7, #52]	; 0x34
 800610e:	f000 be6e 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006112:	4b0e      	ldr	r3, [pc, #56]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800611a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800611e:	d106      	bne.n	800612e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8006120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006122:	2b20      	cmp	r3, #32
 8006124:	d103      	bne.n	800612e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 8006126:	4b0c      	ldr	r3, [pc, #48]	; (8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006128:	637b      	str	r3, [r7, #52]	; 0x34
 800612a:	f000 be60 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800612e:	4b07      	ldr	r3, [pc, #28]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006130:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006134:	f003 0302 	and.w	r3, r3, #2
 8006138:	2b02      	cmp	r3, #2
 800613a:	d10f      	bne.n	800615c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800613c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613e:	2b30      	cmp	r3, #48	; 0x30
 8006140:	d10c      	bne.n	800615c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 8006142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006146:	637b      	str	r3, [r7, #52]	; 0x34
 8006148:	f000 be51 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800614c:	46020c00 	.word	0x46020c00
 8006150:	02dc6c00 	.word	0x02dc6c00
 8006154:	08008ce4 	.word	0x08008ce4
 8006158:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800615c:	2300      	movs	r3, #0
 800615e:	637b      	str	r3, [r7, #52]	; 0x34
 8006160:	f000 be45 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006164:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006168:	f1a2 0108 	sub.w	r1, r2, #8
 800616c:	430b      	orrs	r3, r1
 800616e:	d136      	bne.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006170:	4b9f      	ldr	r3, [pc, #636]	; (80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006176:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800617a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800617c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617e:	2b00      	cmp	r3, #0
 8006180:	d104      	bne.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006182:	f7fe fa63 	bl	800464c <HAL_RCC_GetPCLK1Freq>
 8006186:	6378      	str	r0, [r7, #52]	; 0x34
 8006188:	f000 be31 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800618c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618e:	2b40      	cmp	r3, #64	; 0x40
 8006190:	d104      	bne.n	800619c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006192:	f7fe f939 	bl	8004408 <HAL_RCC_GetSysClockFreq>
 8006196:	6378      	str	r0, [r7, #52]	; 0x34
 8006198:	f000 be29 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800619c:	4b94      	ldr	r3, [pc, #592]	; (80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061a8:	d106      	bne.n	80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 80061aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ac:	2b80      	cmp	r3, #128	; 0x80
 80061ae:	d103      	bne.n	80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 80061b0:	4b90      	ldr	r3, [pc, #576]	; (80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80061b2:	637b      	str	r3, [r7, #52]	; 0x34
 80061b4:	f000 be1b 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80061b8:	4b8d      	ldr	r3, [pc, #564]	; (80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80061ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80061be:	f003 0302 	and.w	r3, r3, #2
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d107      	bne.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 80061c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c8:	2bc0      	cmp	r3, #192	; 0xc0
 80061ca:	d104      	bne.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 80061cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061d0:	637b      	str	r3, [r7, #52]	; 0x34
 80061d2:	f000 be0c 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80061d6:	2300      	movs	r3, #0
 80061d8:	637b      	str	r3, [r7, #52]	; 0x34
 80061da:	f000 be08 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80061de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061e2:	f1a2 0110 	sub.w	r1, r2, #16
 80061e6:	430b      	orrs	r3, r1
 80061e8:	d139      	bne.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80061ea:	4b81      	ldr	r3, [pc, #516]	; (80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80061ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061f4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80061f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d104      	bne.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80061fc:	f7fe fa26 	bl	800464c <HAL_RCC_GetPCLK1Freq>
 8006200:	6378      	str	r0, [r7, #52]	; 0x34
 8006202:	f000 bdf4 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800620c:	d104      	bne.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800620e:	f7fe f8fb 	bl	8004408 <HAL_RCC_GetSysClockFreq>
 8006212:	6378      	str	r0, [r7, #52]	; 0x34
 8006214:	f000 bdeb 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006218:	4b75      	ldr	r3, [pc, #468]	; (80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006220:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006224:	d107      	bne.n	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8006226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800622c:	d103      	bne.n	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 800622e:	4b71      	ldr	r3, [pc, #452]	; (80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006230:	637b      	str	r3, [r7, #52]	; 0x34
 8006232:	f000 bddc 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006236:	4b6e      	ldr	r3, [pc, #440]	; (80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006238:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800623c:	f003 0302 	and.w	r3, r3, #2
 8006240:	2b02      	cmp	r3, #2
 8006242:	d108      	bne.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8006244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006246:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800624a:	d104      	bne.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 800624c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006250:	637b      	str	r3, [r7, #52]	; 0x34
 8006252:	f000 bdcc 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006256:	2300      	movs	r3, #0
 8006258:	637b      	str	r3, [r7, #52]	; 0x34
 800625a:	f000 bdc8 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800625e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006262:	f1a2 0120 	sub.w	r1, r2, #32
 8006266:	430b      	orrs	r3, r1
 8006268:	d158      	bne.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800626a:	4b61      	ldr	r3, [pc, #388]	; (80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800626c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006270:	f003 0307 	and.w	r3, r3, #7
 8006274:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006278:	2b00      	cmp	r3, #0
 800627a:	d104      	bne.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800627c:	f7fe fa0e 	bl	800469c <HAL_RCC_GetPCLK3Freq>
 8006280:	6378      	str	r0, [r7, #52]	; 0x34
 8006282:	f000 bdb4 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006288:	2b01      	cmp	r3, #1
 800628a:	d104      	bne.n	8006296 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800628c:	f7fe f8bc 	bl	8004408 <HAL_RCC_GetSysClockFreq>
 8006290:	6378      	str	r0, [r7, #52]	; 0x34
 8006292:	f000 bdac 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006296:	4b56      	ldr	r3, [pc, #344]	; (80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800629e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062a2:	d106      	bne.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 80062a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d103      	bne.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 80062aa:	4b52      	ldr	r3, [pc, #328]	; (80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80062ac:	637b      	str	r3, [r7, #52]	; 0x34
 80062ae:	f000 bd9e 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80062b2:	4b4f      	ldr	r3, [pc, #316]	; (80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80062b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062b8:	f003 0302 	and.w	r3, r3, #2
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d107      	bne.n	80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 80062c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c2:	2b03      	cmp	r3, #3
 80062c4:	d104      	bne.n	80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 80062c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ca:	637b      	str	r3, [r7, #52]	; 0x34
 80062cc:	f000 bd8f 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80062d0:	4b47      	ldr	r3, [pc, #284]	; (80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0320 	and.w	r3, r3, #32
 80062d8:	2b20      	cmp	r3, #32
 80062da:	d11b      	bne.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 80062dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062de:	2b04      	cmp	r3, #4
 80062e0:	d118      	bne.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80062e2:	4b43      	ldr	r3, [pc, #268]	; (80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d005      	beq.n	80062fa <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80062ee:	4b40      	ldr	r3, [pc, #256]	; (80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	0e1b      	lsrs	r3, r3, #24
 80062f4:	f003 030f 	and.w	r3, r3, #15
 80062f8:	e006      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 80062fa:	4b3d      	ldr	r3, [pc, #244]	; (80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80062fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006300:	041b      	lsls	r3, r3, #16
 8006302:	0e1b      	lsrs	r3, r3, #24
 8006304:	f003 030f 	and.w	r3, r3, #15
 8006308:	4a3b      	ldr	r2, [pc, #236]	; (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800630a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800630e:	637b      	str	r3, [r7, #52]	; 0x34
 8006310:	f000 bd6d 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8006314:	2300      	movs	r3, #0
 8006316:	637b      	str	r3, [r7, #52]	; 0x34
 8006318:	f000 bd69 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800631c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006320:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006324:	430b      	orrs	r3, r1
 8006326:	d169      	bne.n	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006328:	4b31      	ldr	r3, [pc, #196]	; (80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800632a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800632e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006332:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800633a:	d104      	bne.n	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800633c:	f7fe f864 	bl	8004408 <HAL_RCC_GetSysClockFreq>
 8006340:	6378      	str	r0, [r7, #52]	; 0x34
 8006342:	f000 bd54 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8006346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006348:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800634c:	d108      	bne.n	8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800634e:	f107 0318 	add.w	r3, r7, #24
 8006352:	4618      	mov	r0, r3
 8006354:	f7ff f962 	bl	800561c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006358:	6a3b      	ldr	r3, [r7, #32]
 800635a:	637b      	str	r3, [r7, #52]	; 0x34
 800635c:	f000 bd47 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006362:	2b00      	cmp	r3, #0
 8006364:	d104      	bne.n	8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8006366:	f7fe f957 	bl	8004618 <HAL_RCC_GetHCLKFreq>
 800636a:	6378      	str	r0, [r7, #52]	; 0x34
 800636c:	f000 bd3f 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006372:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006376:	d118      	bne.n	80063aa <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8006378:	4b1d      	ldr	r3, [pc, #116]	; (80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d005      	beq.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8006384:	4b1a      	ldr	r3, [pc, #104]	; (80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	0f1b      	lsrs	r3, r3, #28
 800638a:	f003 030f 	and.w	r3, r3, #15
 800638e:	e006      	b.n	800639e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8006390:	4b17      	ldr	r3, [pc, #92]	; (80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006392:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006396:	041b      	lsls	r3, r3, #16
 8006398:	0f1b      	lsrs	r3, r3, #28
 800639a:	f003 030f 	and.w	r3, r3, #15
 800639e:	4a16      	ldr	r2, [pc, #88]	; (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80063a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063a4:	637b      	str	r3, [r7, #52]	; 0x34
 80063a6:	f000 bd22 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80063aa:	4b11      	ldr	r3, [pc, #68]	; (80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063b6:	d107      	bne.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 80063b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063be:	d103      	bne.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 80063c0:	4b0c      	ldr	r3, [pc, #48]	; (80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80063c2:	637b      	str	r3, [r7, #52]	; 0x34
 80063c4:	f000 bd13 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80063c8:	4b09      	ldr	r3, [pc, #36]	; (80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063d4:	d107      	bne.n	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 80063d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063dc:	d103      	bne.n	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 80063de:	4b05      	ldr	r3, [pc, #20]	; (80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80063e0:	637b      	str	r3, [r7, #52]	; 0x34
 80063e2:	f000 bd04 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	637b      	str	r3, [r7, #52]	; 0x34
 80063ea:	f000 bd00 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80063ee:	bf00      	nop
 80063f0:	46020c00 	.word	0x46020c00
 80063f4:	00f42400 	.word	0x00f42400
 80063f8:	08008ce4 	.word	0x08008ce4
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80063fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006400:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006404:	430b      	orrs	r3, r1
 8006406:	d14e      	bne.n	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006408:	4ba8      	ldr	r3, [pc, #672]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800640a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800640e:	f003 0307 	and.w	r3, r3, #7
 8006412:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006416:	2b04      	cmp	r3, #4
 8006418:	d841      	bhi.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800641a:	a201      	add	r2, pc, #4	; (adr r2, 8006420 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 800641c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006420:	08006459 	.word	0x08006459
 8006424:	08006435 	.word	0x08006435
 8006428:	08006447 	.word	0x08006447
 800642c:	08006463 	.word	0x08006463
 8006430:	0800646d 	.word	0x0800646d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006438:	4618      	mov	r0, r3
 800643a:	f7fe ff89 	bl	8005350 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800643e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006440:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006442:	f000 bcd4 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006446:	f107 030c 	add.w	r3, r7, #12
 800644a:	4618      	mov	r0, r3
 800644c:	f7ff fa4c 	bl	80058e8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006454:	f000 bccb 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006458:	f7fe f8de 	bl	8004618 <HAL_RCC_GetHCLKFreq>
 800645c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800645e:	f000 bcc6 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006462:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006466:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006468:	f000 bcc1 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800646c:	4b8f      	ldr	r3, [pc, #572]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d005      	beq.n	8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8006478:	4b8c      	ldr	r3, [pc, #560]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	0e1b      	lsrs	r3, r3, #24
 800647e:	f003 030f 	and.w	r3, r3, #15
 8006482:	e006      	b.n	8006492 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006484:	4b89      	ldr	r3, [pc, #548]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006486:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800648a:	041b      	lsls	r3, r3, #16
 800648c:	0e1b      	lsrs	r3, r3, #24
 800648e:	f003 030f 	and.w	r3, r3, #15
 8006492:	4a87      	ldr	r2, [pc, #540]	; (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006498:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800649a:	f000 bca8 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800649e:	2300      	movs	r3, #0
 80064a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064a2:	f000 bca4 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80064a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064aa:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 80064ae:	430b      	orrs	r3, r1
 80064b0:	d15d      	bne.n	800656e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80064b2:	4b7e      	ldr	r3, [pc, #504]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80064b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80064b8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80064bc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80064be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064c4:	d036      	beq.n	8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80064c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064cc:	d84b      	bhi.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 80064ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80064d4:	d029      	beq.n	800652a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 80064d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80064dc:	d843      	bhi.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 80064de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064e4:	d013      	beq.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 80064e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064ec:	d83b      	bhi.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 80064ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d015      	beq.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 80064f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064fa:	d134      	bne.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006500:	4618      	mov	r0, r3
 8006502:	f7fe ff25 	bl	8005350 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800650a:	f000 bc70 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800650e:	f107 030c 	add.w	r3, r7, #12
 8006512:	4618      	mov	r0, r3
 8006514:	f7ff f9e8 	bl	80058e8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800651c:	f000 bc67 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006520:	f7fe f87a 	bl	8004618 <HAL_RCC_GetHCLKFreq>
 8006524:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006526:	f000 bc62 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800652a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800652e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006530:	f000 bc5d 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006534:	4b5d      	ldr	r3, [pc, #372]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d005      	beq.n	800654c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8006540:	4b5a      	ldr	r3, [pc, #360]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	0e1b      	lsrs	r3, r3, #24
 8006546:	f003 030f 	and.w	r3, r3, #15
 800654a:	e006      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800654c:	4b57      	ldr	r3, [pc, #348]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800654e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006552:	041b      	lsls	r3, r3, #16
 8006554:	0e1b      	lsrs	r3, r3, #24
 8006556:	f003 030f 	and.w	r3, r3, #15
 800655a:	4a55      	ldr	r2, [pc, #340]	; (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800655c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006560:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006562:	f000 bc44 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006566:	2300      	movs	r3, #0
 8006568:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800656a:	f000 bc40 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800656e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006572:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8006576:	430b      	orrs	r3, r1
 8006578:	d14a      	bne.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800657a:	4b4c      	ldr	r3, [pc, #304]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800657c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006580:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006584:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006588:	2b00      	cmp	r3, #0
 800658a:	d104      	bne.n	8006596 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800658c:	f7fe f85e 	bl	800464c <HAL_RCC_GetPCLK1Freq>
 8006590:	6378      	str	r0, [r7, #52]	; 0x34
 8006592:	f000 bc2c 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800659c:	d104      	bne.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800659e:	f7fd ff33 	bl	8004408 <HAL_RCC_GetSysClockFreq>
 80065a2:	6378      	str	r0, [r7, #52]	; 0x34
 80065a4:	f000 bc23 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80065a8:	4b40      	ldr	r3, [pc, #256]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065b4:	d107      	bne.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 80065b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065bc:	d103      	bne.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 80065be:	4b3d      	ldr	r3, [pc, #244]	; (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80065c0:	637b      	str	r3, [r7, #52]	; 0x34
 80065c2:	f000 bc14 	b.w	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80065c6:	4b39      	ldr	r3, [pc, #228]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0320 	and.w	r3, r3, #32
 80065ce:	2b20      	cmp	r3, #32
 80065d0:	d11b      	bne.n	800660a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 80065d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065d8:	d117      	bne.n	800660a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80065da:	4b34      	ldr	r3, [pc, #208]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d005      	beq.n	80065f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 80065e6:	4b31      	ldr	r3, [pc, #196]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	0e1b      	lsrs	r3, r3, #24
 80065ec:	f003 030f 	and.w	r3, r3, #15
 80065f0:	e006      	b.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80065f2:	4b2e      	ldr	r3, [pc, #184]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80065f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80065f8:	041b      	lsls	r3, r3, #16
 80065fa:	0e1b      	lsrs	r3, r3, #24
 80065fc:	f003 030f 	and.w	r3, r3, #15
 8006600:	4a2b      	ldr	r2, [pc, #172]	; (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006606:	637b      	str	r3, [r7, #52]	; 0x34
 8006608:	e3f1      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800660a:	2300      	movs	r3, #0
 800660c:	637b      	str	r3, [r7, #52]	; 0x34
 800660e:	e3ee      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8006610:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006614:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8006618:	430b      	orrs	r3, r1
 800661a:	d14d      	bne.n	80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800661c:	4b23      	ldr	r3, [pc, #140]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800661e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006622:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006626:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662a:	2b00      	cmp	r3, #0
 800662c:	d103      	bne.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800662e:	f7fe f80d 	bl	800464c <HAL_RCC_GetPCLK1Freq>
 8006632:	6378      	str	r0, [r7, #52]	; 0x34
 8006634:	e3db      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800663c:	d103      	bne.n	8006646 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800663e:	f7fd fee3 	bl	8004408 <HAL_RCC_GetSysClockFreq>
 8006642:	6378      	str	r0, [r7, #52]	; 0x34
 8006644:	e3d3      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006646:	4b19      	ldr	r3, [pc, #100]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800664e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006652:	d106      	bne.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8006654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800665a:	d102      	bne.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 800665c:	4b15      	ldr	r3, [pc, #84]	; (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800665e:	637b      	str	r3, [r7, #52]	; 0x34
 8006660:	e3c5      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006662:	4b12      	ldr	r3, [pc, #72]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0320 	and.w	r3, r3, #32
 800666a:	2b20      	cmp	r3, #32
 800666c:	d11b      	bne.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 800666e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006670:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006674:	d117      	bne.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006676:	4b0d      	ldr	r3, [pc, #52]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d005      	beq.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 8006682:	4b0a      	ldr	r3, [pc, #40]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	0e1b      	lsrs	r3, r3, #24
 8006688:	f003 030f 	and.w	r3, r3, #15
 800668c:	e006      	b.n	800669c <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800668e:	4b07      	ldr	r3, [pc, #28]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006690:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006694:	041b      	lsls	r3, r3, #16
 8006696:	0e1b      	lsrs	r3, r3, #24
 8006698:	f003 030f 	and.w	r3, r3, #15
 800669c:	4a04      	ldr	r2, [pc, #16]	; (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800669e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066a2:	637b      	str	r3, [r7, #52]	; 0x34
 80066a4:	e3a3      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80066a6:	2300      	movs	r3, #0
 80066a8:	637b      	str	r3, [r7, #52]	; 0x34
 80066aa:	e3a0      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80066ac:	46020c00 	.word	0x46020c00
 80066b0:	08008ce4 	.word	0x08008ce4
 80066b4:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80066b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066bc:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80066c0:	430b      	orrs	r3, r1
 80066c2:	d148      	bne.n	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80066c4:	4b9d      	ldr	r3, [pc, #628]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80066c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80066ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80066ce:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80066d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d2:	2bc0      	cmp	r3, #192	; 0xc0
 80066d4:	d024      	beq.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 80066d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d8:	2bc0      	cmp	r3, #192	; 0xc0
 80066da:	d839      	bhi.n	8006750 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 80066dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066de:	2b80      	cmp	r3, #128	; 0x80
 80066e0:	d00d      	beq.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 80066e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e4:	2b80      	cmp	r3, #128	; 0x80
 80066e6:	d833      	bhi.n	8006750 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 80066e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 80066ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f0:	2b40      	cmp	r3, #64	; 0x40
 80066f2:	d011      	beq.n	8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80066f4:	e02c      	b.n	8006750 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80066f6:	f7fd ffd1 	bl	800469c <HAL_RCC_GetPCLK3Freq>
 80066fa:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80066fc:	e377      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80066fe:	4b8f      	ldr	r3, [pc, #572]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800670a:	d102      	bne.n	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 800670c:	4b8c      	ldr	r3, [pc, #560]	; (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800670e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006710:	e36d      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006712:	2300      	movs	r3, #0
 8006714:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006716:	e36a      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8006718:	f7fd fe76 	bl	8004408 <HAL_RCC_GetSysClockFreq>
 800671c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800671e:	e366      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8006720:	4b86      	ldr	r3, [pc, #536]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d005      	beq.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 800672c:	4b83      	ldr	r3, [pc, #524]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	0f1b      	lsrs	r3, r3, #28
 8006732:	f003 030f 	and.w	r3, r3, #15
 8006736:	e006      	b.n	8006746 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8006738:	4b80      	ldr	r3, [pc, #512]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800673a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800673e:	041b      	lsls	r3, r3, #16
 8006740:	0f1b      	lsrs	r3, r3, #28
 8006742:	f003 030f 	and.w	r3, r3, #15
 8006746:	4a7f      	ldr	r2, [pc, #508]	; (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8006748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800674c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800674e:	e34e      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 8006750:	2300      	movs	r3, #0
 8006752:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006754:	e34b      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8006756:	e9d7 2300 	ldrd	r2, r3, [r7]
 800675a:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800675e:	430b      	orrs	r3, r1
 8006760:	d147      	bne.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006762:	4b76      	ldr	r3, [pc, #472]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006768:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800676c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800676e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006770:	2b00      	cmp	r3, #0
 8006772:	d103      	bne.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006774:	f7fd ff6a 	bl	800464c <HAL_RCC_GetPCLK1Freq>
 8006778:	6378      	str	r0, [r7, #52]	; 0x34
 800677a:	e338      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800677c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006782:	d103      	bne.n	800678c <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006784:	f7fd fe40 	bl	8004408 <HAL_RCC_GetSysClockFreq>
 8006788:	6378      	str	r0, [r7, #52]	; 0x34
 800678a:	e330      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800678c:	4b6b      	ldr	r3, [pc, #428]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006798:	d106      	bne.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 800679a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067a0:	d102      	bne.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 80067a2:	4b67      	ldr	r3, [pc, #412]	; (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80067a4:	637b      	str	r3, [r7, #52]	; 0x34
 80067a6:	e322      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80067a8:	4b64      	ldr	r3, [pc, #400]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0320 	and.w	r3, r3, #32
 80067b0:	2b20      	cmp	r3, #32
 80067b2:	d11b      	bne.n	80067ec <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 80067b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80067ba:	d117      	bne.n	80067ec <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80067bc:	4b5f      	ldr	r3, [pc, #380]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d005      	beq.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 80067c8:	4b5c      	ldr	r3, [pc, #368]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	0e1b      	lsrs	r3, r3, #24
 80067ce:	f003 030f 	and.w	r3, r3, #15
 80067d2:	e006      	b.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 80067d4:	4b59      	ldr	r3, [pc, #356]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80067d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80067da:	041b      	lsls	r3, r3, #16
 80067dc:	0e1b      	lsrs	r3, r3, #24
 80067de:	f003 030f 	and.w	r3, r3, #15
 80067e2:	4a58      	ldr	r2, [pc, #352]	; (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 80067e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067e8:	637b      	str	r3, [r7, #52]	; 0x34
 80067ea:	e300      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80067ec:	2300      	movs	r3, #0
 80067ee:	637b      	str	r3, [r7, #52]	; 0x34
 80067f0:	e2fd      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80067f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067f6:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80067fa:	430b      	orrs	r3, r1
 80067fc:	d15b      	bne.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80067fe:	4b4f      	ldr	r3, [pc, #316]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006800:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006804:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006808:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800680a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680c:	2b00      	cmp	r3, #0
 800680e:	d117      	bne.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006810:	4b4a      	ldr	r3, [pc, #296]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d005      	beq.n	8006828 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 800681c:	4b47      	ldr	r3, [pc, #284]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	0e1b      	lsrs	r3, r3, #24
 8006822:	f003 030f 	and.w	r3, r3, #15
 8006826:	e006      	b.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 8006828:	4b44      	ldr	r3, [pc, #272]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800682a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800682e:	041b      	lsls	r3, r3, #16
 8006830:	0e1b      	lsrs	r3, r3, #24
 8006832:	f003 030f 	and.w	r3, r3, #15
 8006836:	4a43      	ldr	r2, [pc, #268]	; (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8006838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800683c:	637b      	str	r3, [r7, #52]	; 0x34
 800683e:	e2d6      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8006840:	4b3e      	ldr	r3, [pc, #248]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006842:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006846:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800684a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800684e:	d112      	bne.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8006850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006856:	d10e      	bne.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006858:	4b38      	ldr	r3, [pc, #224]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800685a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800685e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006862:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006866:	d102      	bne.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 8006868:	23fa      	movs	r3, #250	; 0xfa
 800686a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800686c:	e2bf      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800686e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006872:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006874:	e2bb      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006876:	4b31      	ldr	r3, [pc, #196]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800687e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006882:	d106      	bne.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 8006884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006886:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800688a:	d102      	bne.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 800688c:	4b2c      	ldr	r3, [pc, #176]	; (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800688e:	637b      	str	r3, [r7, #52]	; 0x34
 8006890:	e2ad      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8006892:	4b2a      	ldr	r3, [pc, #168]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006894:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006898:	f003 0302 	and.w	r3, r3, #2
 800689c:	2b02      	cmp	r3, #2
 800689e:	d107      	bne.n	80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 80068a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068a6:	d103      	bne.n	80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 80068a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068ac:	637b      	str	r3, [r7, #52]	; 0x34
 80068ae:	e29e      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80068b0:	2300      	movs	r3, #0
 80068b2:	637b      	str	r3, [r7, #52]	; 0x34
 80068b4:	e29b      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80068b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068ba:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80068be:	430b      	orrs	r3, r1
 80068c0:	d162      	bne.n	8006988 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80068c2:	4b1e      	ldr	r3, [pc, #120]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80068c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80068c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80068cc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80068ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d117      	bne.n	8006904 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80068d4:	4b19      	ldr	r3, [pc, #100]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d005      	beq.n	80068ec <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 80068e0:	4b16      	ldr	r3, [pc, #88]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	0e1b      	lsrs	r3, r3, #24
 80068e6:	f003 030f 	and.w	r3, r3, #15
 80068ea:	e006      	b.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 80068ec:	4b13      	ldr	r3, [pc, #76]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80068ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80068f2:	041b      	lsls	r3, r3, #16
 80068f4:	0e1b      	lsrs	r3, r3, #24
 80068f6:	f003 030f 	and.w	r3, r3, #15
 80068fa:	4a12      	ldr	r2, [pc, #72]	; (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 80068fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006900:	637b      	str	r3, [r7, #52]	; 0x34
 8006902:	e274      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006904:	4b0d      	ldr	r3, [pc, #52]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006906:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800690a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800690e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006912:	d119      	bne.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 8006914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800691a:	d115      	bne.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800691c:	4b07      	ldr	r3, [pc, #28]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800691e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006926:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800692a:	d102      	bne.n	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 800692c:	23fa      	movs	r3, #250	; 0xfa
 800692e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006930:	e25d      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8006932:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006936:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006938:	e259      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800693a:	bf00      	nop
 800693c:	46020c00 	.word	0x46020c00
 8006940:	00f42400 	.word	0x00f42400
 8006944:	08008ce4 	.word	0x08008ce4
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006948:	4b9d      	ldr	r3, [pc, #628]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006954:	d106      	bne.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8006956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006958:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800695c:	d102      	bne.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 800695e:	4b99      	ldr	r3, [pc, #612]	; (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8006960:	637b      	str	r3, [r7, #52]	; 0x34
 8006962:	e244      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006964:	4b96      	ldr	r3, [pc, #600]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006966:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800696a:	f003 0302 	and.w	r3, r3, #2
 800696e:	2b02      	cmp	r3, #2
 8006970:	d107      	bne.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 8006972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006974:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006978:	d103      	bne.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 800697a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800697e:	637b      	str	r3, [r7, #52]	; 0x34
 8006980:	e235      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8006982:	2300      	movs	r3, #0
 8006984:	637b      	str	r3, [r7, #52]	; 0x34
 8006986:	e232      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800698c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006990:	430b      	orrs	r3, r1
 8006992:	d147      	bne.n	8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006994:	4b8a      	ldr	r3, [pc, #552]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800699a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800699e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80069a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d103      	bne.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80069a6:	f7fd fe51 	bl	800464c <HAL_RCC_GetPCLK1Freq>
 80069aa:	6378      	str	r0, [r7, #52]	; 0x34
 80069ac:	e21f      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80069ae:	4b84      	ldr	r3, [pc, #528]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80069b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069bc:	d112      	bne.n	80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 80069be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069c4:	d10e      	bne.n	80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80069c6:	4b7e      	ldr	r3, [pc, #504]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80069c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069d4:	d102      	bne.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 80069d6:	23fa      	movs	r3, #250	; 0xfa
 80069d8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80069da:	e208      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80069dc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80069e0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80069e2:	e204      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80069e4:	4b76      	ldr	r3, [pc, #472]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069f0:	d106      	bne.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 80069f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80069f8:	d102      	bne.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 80069fa:	4b72      	ldr	r3, [pc, #456]	; (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80069fc:	637b      	str	r3, [r7, #52]	; 0x34
 80069fe:	e1f6      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006a00:	4b6f      	ldr	r3, [pc, #444]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006a02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a06:	f003 0302 	and.w	r3, r3, #2
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d107      	bne.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a10:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006a14:	d103      	bne.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 8006a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a1a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a1c:	e1e7      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	637b      	str	r3, [r7, #52]	; 0x34
 8006a22:	e1e4      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006a24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a28:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8006a2c:	430b      	orrs	r3, r1
 8006a2e:	d12d      	bne.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8006a30:	4b63      	ldr	r3, [pc, #396]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a36:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006a3a:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8006a3c:	4b60      	ldr	r3, [pc, #384]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a48:	d105      	bne.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 8006a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d102      	bne.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 8006a50:	4b5c      	ldr	r3, [pc, #368]	; (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8006a52:	637b      	str	r3, [r7, #52]	; 0x34
 8006a54:	e1cb      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a5c:	d107      	bne.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7fe fc74 	bl	8005350 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a6c:	e1bf      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a74:	d107      	bne.n	8006a86 <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a76:	f107 0318 	add.w	r3, r7, #24
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7fe fdce 	bl	800561c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	637b      	str	r3, [r7, #52]	; 0x34
 8006a84:	e1b3      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006a86:	2300      	movs	r3, #0
 8006a88:	637b      	str	r3, [r7, #52]	; 0x34
 8006a8a:	e1b0      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8006a8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a90:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8006a94:	430b      	orrs	r3, r1
 8006a96:	d14d      	bne.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006a98:	4b49      	ldr	r3, [pc, #292]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a9e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006aa2:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006aaa:	d028      	beq.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8006aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ab2:	d83c      	bhi.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8006ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006aba:	d013      	beq.n	8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 8006abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ac2:	d834      	bhi.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8006ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d004      	beq.n	8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8006aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006acc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ad0:	d004      	beq.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8006ad2:	e02c      	b.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8006ad4:	f7fd fdce 	bl	8004674 <HAL_RCC_GetPCLK2Freq>
 8006ad8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006ada:	e188      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006adc:	f7fd fc94 	bl	8004408 <HAL_RCC_GetSysClockFreq>
 8006ae0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006ae2:	e184      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ae4:	4b36      	ldr	r3, [pc, #216]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006af0:	d102      	bne.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 8006af2:	4b34      	ldr	r3, [pc, #208]	; (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8006af4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006af6:	e17a      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006af8:	2300      	movs	r3, #0
 8006afa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006afc:	e177      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006afe:	4b30      	ldr	r3, [pc, #192]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d005      	beq.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8006b0a:	4b2d      	ldr	r3, [pc, #180]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	0e1b      	lsrs	r3, r3, #24
 8006b10:	f003 030f 	and.w	r3, r3, #15
 8006b14:	e006      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8006b16:	4b2a      	ldr	r3, [pc, #168]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006b18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b1c:	041b      	lsls	r3, r3, #16
 8006b1e:	0e1b      	lsrs	r3, r3, #24
 8006b20:	f003 030f 	and.w	r3, r3, #15
 8006b24:	4a28      	ldr	r2, [pc, #160]	; (8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 8006b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b2c:	e15f      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b32:	e15c      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8006b34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b38:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8006b3c:	430b      	orrs	r3, r1
 8006b3e:	d154      	bne.n	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006b40:	4b1f      	ldr	r3, [pc, #124]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006b4a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b52:	d028      	beq.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8006b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b56:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b5a:	d843      	bhi.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8006b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b62:	d013      	beq.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8006b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b6a:	d83b      	bhi.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8006b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d004      	beq.n	8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8006b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b78:	d004      	beq.n	8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8006b7a:	e033      	b.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8006b7c:	f7fd fd66 	bl	800464c <HAL_RCC_GetPCLK1Freq>
 8006b80:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006b82:	e134      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006b84:	f7fd fc40 	bl	8004408 <HAL_RCC_GetSysClockFreq>
 8006b88:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006b8a:	e130      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b8c:	4b0c      	ldr	r3, [pc, #48]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b98:	d102      	bne.n	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8006b9a:	4b0a      	ldr	r3, [pc, #40]	; (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8006b9c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006b9e:	e126      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ba4:	e123      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ba6:	4b06      	ldr	r3, [pc, #24]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00c      	beq.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 8006bb2:	4b03      	ldr	r3, [pc, #12]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	0e1b      	lsrs	r3, r3, #24
 8006bb8:	f003 030f 	and.w	r3, r3, #15
 8006bbc:	e00d      	b.n	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 8006bbe:	bf00      	nop
 8006bc0:	46020c00 	.word	0x46020c00
 8006bc4:	00f42400 	.word	0x00f42400
 8006bc8:	08008ce4 	.word	0x08008ce4
 8006bcc:	4b8a      	ldr	r3, [pc, #552]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006bce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006bd2:	041b      	lsls	r3, r3, #16
 8006bd4:	0e1b      	lsrs	r3, r3, #24
 8006bd6:	f003 030f 	and.w	r3, r3, #15
 8006bda:	4a88      	ldr	r2, [pc, #544]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8006bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006be0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006be2:	e104      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006be4:	2300      	movs	r3, #0
 8006be6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006be8:	e101      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8006bea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bee:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8006bf2:	430b      	orrs	r3, r1
 8006bf4:	d16e      	bne.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006bf6:	4b80      	ldr	r3, [pc, #512]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006bf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006bfc:	f003 0318 	and.w	r3, r3, #24
 8006c00:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c04:	2b18      	cmp	r3, #24
 8006c06:	d862      	bhi.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8006c08:	a201      	add	r2, pc, #4	; (adr r2, 8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8006c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0e:	bf00      	nop
 8006c10:	08006c75 	.word	0x08006c75
 8006c14:	08006ccf 	.word	0x08006ccf
 8006c18:	08006ccf 	.word	0x08006ccf
 8006c1c:	08006ccf 	.word	0x08006ccf
 8006c20:	08006ccf 	.word	0x08006ccf
 8006c24:	08006ccf 	.word	0x08006ccf
 8006c28:	08006ccf 	.word	0x08006ccf
 8006c2c:	08006ccf 	.word	0x08006ccf
 8006c30:	08006c7d 	.word	0x08006c7d
 8006c34:	08006ccf 	.word	0x08006ccf
 8006c38:	08006ccf 	.word	0x08006ccf
 8006c3c:	08006ccf 	.word	0x08006ccf
 8006c40:	08006ccf 	.word	0x08006ccf
 8006c44:	08006ccf 	.word	0x08006ccf
 8006c48:	08006ccf 	.word	0x08006ccf
 8006c4c:	08006ccf 	.word	0x08006ccf
 8006c50:	08006c85 	.word	0x08006c85
 8006c54:	08006ccf 	.word	0x08006ccf
 8006c58:	08006ccf 	.word	0x08006ccf
 8006c5c:	08006ccf 	.word	0x08006ccf
 8006c60:	08006ccf 	.word	0x08006ccf
 8006c64:	08006ccf 	.word	0x08006ccf
 8006c68:	08006ccf 	.word	0x08006ccf
 8006c6c:	08006ccf 	.word	0x08006ccf
 8006c70:	08006c9f 	.word	0x08006c9f
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8006c74:	f7fd fd12 	bl	800469c <HAL_RCC_GetPCLK3Freq>
 8006c78:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006c7a:	e0b8      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006c7c:	f7fd fbc4 	bl	8004408 <HAL_RCC_GetSysClockFreq>
 8006c80:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006c82:	e0b4      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c84:	4b5c      	ldr	r3, [pc, #368]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c90:	d102      	bne.n	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 8006c92:	4b5b      	ldr	r3, [pc, #364]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 8006c94:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006c96:	e0aa      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c9c:	e0a7      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c9e:	4b56      	ldr	r3, [pc, #344]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d005      	beq.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 8006caa:	4b53      	ldr	r3, [pc, #332]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	0e1b      	lsrs	r3, r3, #24
 8006cb0:	f003 030f 	and.w	r3, r3, #15
 8006cb4:	e006      	b.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 8006cb6:	4b50      	ldr	r3, [pc, #320]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006cb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006cbc:	041b      	lsls	r3, r3, #16
 8006cbe:	0e1b      	lsrs	r3, r3, #24
 8006cc0:	f003 030f 	and.w	r3, r3, #15
 8006cc4:	4a4d      	ldr	r2, [pc, #308]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8006cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ccc:	e08f      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006cd2:	e08c      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8006cd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cd8:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8006cdc:	430b      	orrs	r3, r1
 8006cde:	d14c      	bne.n	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006ce0:	4b45      	ldr	r3, [pc, #276]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006ce2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006ce6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006cea:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006cf2:	d013      	beq.n	8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 8006cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006cfa:	d83b      	bhi.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8006cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d02:	d013      	beq.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 8006d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d0a:	d833      	bhi.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d014      	beq.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 8006d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d18:	d014      	beq.n	8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8006d1a:	e02b      	b.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d1c:	f107 0318 	add.w	r3, r7, #24
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7fe fc7b 	bl	800561c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d2a:	e060      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7fe fb0d 	bl	8005350 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d3a:	e058      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006d3c:	f7fd fb64 	bl	8004408 <HAL_RCC_GetSysClockFreq>
 8006d40:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006d42:	e054      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d44:	4b2c      	ldr	r3, [pc, #176]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d005      	beq.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 8006d50:	4b29      	ldr	r3, [pc, #164]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	0e1b      	lsrs	r3, r3, #24
 8006d56:	f003 030f 	and.w	r3, r3, #15
 8006d5a:	e006      	b.n	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8006d5c:	4b26      	ldr	r3, [pc, #152]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006d5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d62:	041b      	lsls	r3, r3, #16
 8006d64:	0e1b      	lsrs	r3, r3, #24
 8006d66:	f003 030f 	and.w	r3, r3, #15
 8006d6a:	4a24      	ldr	r2, [pc, #144]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8006d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d72:	e03c      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006d74:	2300      	movs	r3, #0
 8006d76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d78:	e039      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8006d7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d7e:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8006d82:	430b      	orrs	r3, r1
 8006d84:	d131      	bne.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8006d86:	4b1c      	ldr	r3, [pc, #112]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006d88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d90:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8006d92:	4b19      	ldr	r3, [pc, #100]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006d94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d98:	f003 0302 	and.w	r3, r3, #2
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d106      	bne.n	8006dae <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 8006da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d103      	bne.n	8006dae <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 8006da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006daa:	637b      	str	r3, [r7, #52]	; 0x34
 8006dac:	e01f      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8006dae:	4b12      	ldr	r3, [pc, #72]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006db0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006db4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006db8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dbc:	d112      	bne.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dc4:	d10e      	bne.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006dc6:	4b0c      	ldr	r3, [pc, #48]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006dc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006dd4:	d102      	bne.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 8006dd6:	23fa      	movs	r3, #250	; 0xfa
 8006dd8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006dda:	e008      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8006ddc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006de0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006de2:	e004      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8006de4:	2300      	movs	r3, #0
 8006de6:	637b      	str	r3, [r7, #52]	; 0x34
 8006de8:	e001      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 8006dea:	2300      	movs	r3, #0
 8006dec:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8006dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3738      	adds	r7, #56	; 0x38
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	46020c00 	.word	0x46020c00
 8006dfc:	08008ce4 	.word	0x08008ce4
 8006e00:	00f42400 	.word	0x00f42400

08006e04 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8006e0c:	4b47      	ldr	r3, [pc, #284]	; (8006f2c <RCCEx_PLL2_Config+0x128>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a46      	ldr	r2, [pc, #280]	; (8006f2c <RCCEx_PLL2_Config+0x128>)
 8006e12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e16:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006e18:	f7fa f9b4 	bl	8001184 <HAL_GetTick>
 8006e1c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e1e:	e008      	b.n	8006e32 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006e20:	f7fa f9b0 	bl	8001184 <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d901      	bls.n	8006e32 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e077      	b.n	8006f22 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e32:	4b3e      	ldr	r3, [pc, #248]	; (8006f2c <RCCEx_PLL2_Config+0x128>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1f0      	bne.n	8006e20 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8006e3e:	4b3b      	ldr	r3, [pc, #236]	; (8006f2c <RCCEx_PLL2_Config+0x128>)
 8006e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e42:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006e46:	f023 0303 	bic.w	r3, r3, #3
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	6811      	ldr	r1, [r2, #0]
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	6852      	ldr	r2, [r2, #4]
 8006e52:	3a01      	subs	r2, #1
 8006e54:	0212      	lsls	r2, r2, #8
 8006e56:	430a      	orrs	r2, r1
 8006e58:	4934      	ldr	r1, [pc, #208]	; (8006f2c <RCCEx_PLL2_Config+0x128>)
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	62cb      	str	r3, [r1, #44]	; 0x2c
 8006e5e:	4b33      	ldr	r3, [pc, #204]	; (8006f2c <RCCEx_PLL2_Config+0x128>)
 8006e60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e62:	4b33      	ldr	r3, [pc, #204]	; (8006f30 <RCCEx_PLL2_Config+0x12c>)
 8006e64:	4013      	ands	r3, r2
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	6892      	ldr	r2, [r2, #8]
 8006e6a:	3a01      	subs	r2, #1
 8006e6c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	68d2      	ldr	r2, [r2, #12]
 8006e74:	3a01      	subs	r2, #1
 8006e76:	0252      	lsls	r2, r2, #9
 8006e78:	b292      	uxth	r2, r2
 8006e7a:	4311      	orrs	r1, r2
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	6912      	ldr	r2, [r2, #16]
 8006e80:	3a01      	subs	r2, #1
 8006e82:	0412      	lsls	r2, r2, #16
 8006e84:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006e88:	4311      	orrs	r1, r2
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	6952      	ldr	r2, [r2, #20]
 8006e8e:	3a01      	subs	r2, #1
 8006e90:	0612      	lsls	r2, r2, #24
 8006e92:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006e96:	430a      	orrs	r2, r1
 8006e98:	4924      	ldr	r1, [pc, #144]	; (8006f2c <RCCEx_PLL2_Config+0x128>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8006e9e:	4b23      	ldr	r3, [pc, #140]	; (8006f2c <RCCEx_PLL2_Config+0x128>)
 8006ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea2:	f023 020c 	bic.w	r2, r3, #12
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	4920      	ldr	r1, [pc, #128]	; (8006f2c <RCCEx_PLL2_Config+0x128>)
 8006eac:	4313      	orrs	r3, r2
 8006eae:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006eb0:	4b1e      	ldr	r3, [pc, #120]	; (8006f2c <RCCEx_PLL2_Config+0x128>)
 8006eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a1b      	ldr	r3, [r3, #32]
 8006eb8:	491c      	ldr	r1, [pc, #112]	; (8006f2c <RCCEx_PLL2_Config+0x128>)
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8006ebe:	4b1b      	ldr	r3, [pc, #108]	; (8006f2c <RCCEx_PLL2_Config+0x128>)
 8006ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec2:	4a1a      	ldr	r2, [pc, #104]	; (8006f2c <RCCEx_PLL2_Config+0x128>)
 8006ec4:	f023 0310 	bic.w	r3, r3, #16
 8006ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006eca:	4b18      	ldr	r3, [pc, #96]	; (8006f2c <RCCEx_PLL2_Config+0x128>)
 8006ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ece:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ed2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	69d2      	ldr	r2, [r2, #28]
 8006eda:	00d2      	lsls	r2, r2, #3
 8006edc:	4913      	ldr	r1, [pc, #76]	; (8006f2c <RCCEx_PLL2_Config+0x128>)
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8006ee2:	4b12      	ldr	r3, [pc, #72]	; (8006f2c <RCCEx_PLL2_Config+0x128>)
 8006ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee6:	4a11      	ldr	r2, [pc, #68]	; (8006f2c <RCCEx_PLL2_Config+0x128>)
 8006ee8:	f043 0310 	orr.w	r3, r3, #16
 8006eec:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8006eee:	4b0f      	ldr	r3, [pc, #60]	; (8006f2c <RCCEx_PLL2_Config+0x128>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a0e      	ldr	r2, [pc, #56]	; (8006f2c <RCCEx_PLL2_Config+0x128>)
 8006ef4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ef8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006efa:	f7fa f943 	bl	8001184 <HAL_GetTick>
 8006efe:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f00:	e008      	b.n	8006f14 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006f02:	f7fa f93f 	bl	8001184 <HAL_GetTick>
 8006f06:	4602      	mov	r2, r0
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d901      	bls.n	8006f14 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e006      	b.n	8006f22 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f14:	4b05      	ldr	r3, [pc, #20]	; (8006f2c <RCCEx_PLL2_Config+0x128>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d0f0      	beq.n	8006f02 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8006f20:	2300      	movs	r3, #0

}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	46020c00 	.word	0x46020c00
 8006f30:	80800000 	.word	0x80800000

08006f34 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8006f3c:	4b47      	ldr	r3, [pc, #284]	; (800705c <RCCEx_PLL3_Config+0x128>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a46      	ldr	r2, [pc, #280]	; (800705c <RCCEx_PLL3_Config+0x128>)
 8006f42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f46:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006f48:	f7fa f91c 	bl	8001184 <HAL_GetTick>
 8006f4c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f4e:	e008      	b.n	8006f62 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f50:	f7fa f918 	bl	8001184 <HAL_GetTick>
 8006f54:	4602      	mov	r2, r0
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d901      	bls.n	8006f62 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e077      	b.n	8007052 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f62:	4b3e      	ldr	r3, [pc, #248]	; (800705c <RCCEx_PLL3_Config+0x128>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1f0      	bne.n	8006f50 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8006f6e:	4b3b      	ldr	r3, [pc, #236]	; (800705c <RCCEx_PLL3_Config+0x128>)
 8006f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f72:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006f76:	f023 0303 	bic.w	r3, r3, #3
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	6811      	ldr	r1, [r2, #0]
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	6852      	ldr	r2, [r2, #4]
 8006f82:	3a01      	subs	r2, #1
 8006f84:	0212      	lsls	r2, r2, #8
 8006f86:	430a      	orrs	r2, r1
 8006f88:	4934      	ldr	r1, [pc, #208]	; (800705c <RCCEx_PLL3_Config+0x128>)
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	630b      	str	r3, [r1, #48]	; 0x30
 8006f8e:	4b33      	ldr	r3, [pc, #204]	; (800705c <RCCEx_PLL3_Config+0x128>)
 8006f90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f92:	4b33      	ldr	r3, [pc, #204]	; (8007060 <RCCEx_PLL3_Config+0x12c>)
 8006f94:	4013      	ands	r3, r2
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	6892      	ldr	r2, [r2, #8]
 8006f9a:	3a01      	subs	r2, #1
 8006f9c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	68d2      	ldr	r2, [r2, #12]
 8006fa4:	3a01      	subs	r2, #1
 8006fa6:	0252      	lsls	r2, r2, #9
 8006fa8:	b292      	uxth	r2, r2
 8006faa:	4311      	orrs	r1, r2
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	6912      	ldr	r2, [r2, #16]
 8006fb0:	3a01      	subs	r2, #1
 8006fb2:	0412      	lsls	r2, r2, #16
 8006fb4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006fb8:	4311      	orrs	r1, r2
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	6952      	ldr	r2, [r2, #20]
 8006fbe:	3a01      	subs	r2, #1
 8006fc0:	0612      	lsls	r2, r2, #24
 8006fc2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006fc6:	430a      	orrs	r2, r1
 8006fc8:	4924      	ldr	r1, [pc, #144]	; (800705c <RCCEx_PLL3_Config+0x128>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8006fce:	4b23      	ldr	r3, [pc, #140]	; (800705c <RCCEx_PLL3_Config+0x128>)
 8006fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd2:	f023 020c 	bic.w	r2, r3, #12
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	4920      	ldr	r1, [pc, #128]	; (800705c <RCCEx_PLL3_Config+0x128>)
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8006fe0:	4b1e      	ldr	r3, [pc, #120]	; (800705c <RCCEx_PLL3_Config+0x128>)
 8006fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a1b      	ldr	r3, [r3, #32]
 8006fe8:	491c      	ldr	r1, [pc, #112]	; (800705c <RCCEx_PLL3_Config+0x128>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8006fee:	4b1b      	ldr	r3, [pc, #108]	; (800705c <RCCEx_PLL3_Config+0x128>)
 8006ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff2:	4a1a      	ldr	r2, [pc, #104]	; (800705c <RCCEx_PLL3_Config+0x128>)
 8006ff4:	f023 0310 	bic.w	r3, r3, #16
 8006ff8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006ffa:	4b18      	ldr	r3, [pc, #96]	; (800705c <RCCEx_PLL3_Config+0x128>)
 8006ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ffe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007002:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	69d2      	ldr	r2, [r2, #28]
 800700a:	00d2      	lsls	r2, r2, #3
 800700c:	4913      	ldr	r1, [pc, #76]	; (800705c <RCCEx_PLL3_Config+0x128>)
 800700e:	4313      	orrs	r3, r2
 8007010:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007012:	4b12      	ldr	r3, [pc, #72]	; (800705c <RCCEx_PLL3_Config+0x128>)
 8007014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007016:	4a11      	ldr	r2, [pc, #68]	; (800705c <RCCEx_PLL3_Config+0x128>)
 8007018:	f043 0310 	orr.w	r3, r3, #16
 800701c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800701e:	4b0f      	ldr	r3, [pc, #60]	; (800705c <RCCEx_PLL3_Config+0x128>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a0e      	ldr	r2, [pc, #56]	; (800705c <RCCEx_PLL3_Config+0x128>)
 8007024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007028:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800702a:	f7fa f8ab 	bl	8001184 <HAL_GetTick>
 800702e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007030:	e008      	b.n	8007044 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007032:	f7fa f8a7 	bl	8001184 <HAL_GetTick>
 8007036:	4602      	mov	r2, r0
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	2b02      	cmp	r3, #2
 800703e:	d901      	bls.n	8007044 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007040:	2303      	movs	r3, #3
 8007042:	e006      	b.n	8007052 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007044:	4b05      	ldr	r3, [pc, #20]	; (800705c <RCCEx_PLL3_Config+0x128>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d0f0      	beq.n	8007032 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	46020c00 	.word	0x46020c00
 8007060:	80800000 	.word	0x80800000

08007064 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d101      	bne.n	800707a <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e03e      	b.n	80070f8 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d106      	bne.n	8007094 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800708e:	68f8      	ldr	r0, [r7, #12]
 8007090:	f7f9 ff60 	bl	8000f54 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	3308      	adds	r3, #8
 800709c:	4619      	mov	r1, r3
 800709e:	4610      	mov	r0, r2
 80070a0:	f000 fcda 	bl	8007a58 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6818      	ldr	r0, [r3, #0]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	461a      	mov	r2, r3
 80070ae:	68b9      	ldr	r1, [r7, #8]
 80070b0:	f000 fda2 	bl	8007bf8 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6858      	ldr	r0, [r3, #4]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	689a      	ldr	r2, [r3, #8]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c0:	6879      	ldr	r1, [r7, #4]
 80070c2:	f000 fdeb 	bl	8007c9c <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	6892      	ldr	r2, [r2, #8]
 80070ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	6892      	ldr	r2, [r2, #8]
 80070da:	f041 0101 	orr.w	r1, r1, #1
 80070de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80070e2:	4b07      	ldr	r3, [pc, #28]	; (8007100 <HAL_SRAM_Init+0x9c>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a06      	ldr	r2, [pc, #24]	; (8007100 <HAL_SRAM_Init+0x9c>)
 80070e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070ec:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2201      	movs	r2, #1
 80070f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	420d0400 	.word	0x420d0400

08007104 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d101      	bne.n	8007116 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e042      	b.n	800719c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800711c:	2b00      	cmp	r3, #0
 800711e:	d106      	bne.n	800712e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f7f9 fdb7 	bl	8000c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2224      	movs	r2, #36	; 0x24
 8007132:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f022 0201 	bic.w	r2, r2, #1
 8007144:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f82c 	bl	80071a4 <UART_SetConfig>
 800714c:	4603      	mov	r3, r0
 800714e:	2b01      	cmp	r3, #1
 8007150:	d101      	bne.n	8007156 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e022      	b.n	800719c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715a:	2b00      	cmp	r3, #0
 800715c:	d002      	beq.n	8007164 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f9c2 	bl	80074e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007172:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689a      	ldr	r2, [r3, #8]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007182:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f042 0201 	orr.w	r2, r2, #1
 8007192:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 fa49 	bl	800762c <UART_CheckIdleState>
 800719a:	4603      	mov	r3, r0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3708      	adds	r7, #8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071a8:	b094      	sub	sp, #80	; 0x50
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80071b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	4b7e      	ldr	r3, [pc, #504]	; (80073b4 <UART_SetConfig+0x210>)
 80071ba:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071be:	689a      	ldr	r2, [r3, #8]
 80071c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	431a      	orrs	r2, r3
 80071c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	431a      	orrs	r2, r3
 80071cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ce:	69db      	ldr	r3, [r3, #28]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4977      	ldr	r1, [pc, #476]	; (80073b8 <UART_SetConfig+0x214>)
 80071dc:	4019      	ands	r1, r3
 80071de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071e4:	430b      	orrs	r3, r1
 80071e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80071f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f4:	68d9      	ldr	r1, [r3, #12]
 80071f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	ea40 0301 	orr.w	r3, r0, r1
 80071fe:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007202:	699b      	ldr	r3, [r3, #24]
 8007204:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	4b6a      	ldr	r3, [pc, #424]	; (80073b4 <UART_SetConfig+0x210>)
 800720c:	429a      	cmp	r2, r3
 800720e:	d009      	beq.n	8007224 <UART_SetConfig+0x80>
 8007210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	4b69      	ldr	r3, [pc, #420]	; (80073bc <UART_SetConfig+0x218>)
 8007216:	429a      	cmp	r2, r3
 8007218:	d004      	beq.n	8007224 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800721a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800721c:	6a1a      	ldr	r2, [r3, #32]
 800721e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007220:	4313      	orrs	r3, r2
 8007222:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800722e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8007232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007238:	430b      	orrs	r3, r1
 800723a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800723c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007242:	f023 000f 	bic.w	r0, r3, #15
 8007246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007248:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800724a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	ea40 0301 	orr.w	r3, r0, r1
 8007252:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	4b59      	ldr	r3, [pc, #356]	; (80073c0 <UART_SetConfig+0x21c>)
 800725a:	429a      	cmp	r2, r3
 800725c:	d102      	bne.n	8007264 <UART_SetConfig+0xc0>
 800725e:	2301      	movs	r3, #1
 8007260:	64bb      	str	r3, [r7, #72]	; 0x48
 8007262:	e029      	b.n	80072b8 <UART_SetConfig+0x114>
 8007264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	4b56      	ldr	r3, [pc, #344]	; (80073c4 <UART_SetConfig+0x220>)
 800726a:	429a      	cmp	r2, r3
 800726c:	d102      	bne.n	8007274 <UART_SetConfig+0xd0>
 800726e:	2302      	movs	r3, #2
 8007270:	64bb      	str	r3, [r7, #72]	; 0x48
 8007272:	e021      	b.n	80072b8 <UART_SetConfig+0x114>
 8007274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	4b53      	ldr	r3, [pc, #332]	; (80073c8 <UART_SetConfig+0x224>)
 800727a:	429a      	cmp	r2, r3
 800727c:	d102      	bne.n	8007284 <UART_SetConfig+0xe0>
 800727e:	2304      	movs	r3, #4
 8007280:	64bb      	str	r3, [r7, #72]	; 0x48
 8007282:	e019      	b.n	80072b8 <UART_SetConfig+0x114>
 8007284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	4b50      	ldr	r3, [pc, #320]	; (80073cc <UART_SetConfig+0x228>)
 800728a:	429a      	cmp	r2, r3
 800728c:	d102      	bne.n	8007294 <UART_SetConfig+0xf0>
 800728e:	2308      	movs	r3, #8
 8007290:	64bb      	str	r3, [r7, #72]	; 0x48
 8007292:	e011      	b.n	80072b8 <UART_SetConfig+0x114>
 8007294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	4b4d      	ldr	r3, [pc, #308]	; (80073d0 <UART_SetConfig+0x22c>)
 800729a:	429a      	cmp	r2, r3
 800729c:	d102      	bne.n	80072a4 <UART_SetConfig+0x100>
 800729e:	2310      	movs	r3, #16
 80072a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80072a2:	e009      	b.n	80072b8 <UART_SetConfig+0x114>
 80072a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	4b42      	ldr	r3, [pc, #264]	; (80073b4 <UART_SetConfig+0x210>)
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d102      	bne.n	80072b4 <UART_SetConfig+0x110>
 80072ae:	2320      	movs	r3, #32
 80072b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80072b2:	e001      	b.n	80072b8 <UART_SetConfig+0x114>
 80072b4:	2300      	movs	r3, #0
 80072b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	4b3d      	ldr	r3, [pc, #244]	; (80073b4 <UART_SetConfig+0x210>)
 80072be:	429a      	cmp	r2, r3
 80072c0:	d005      	beq.n	80072ce <UART_SetConfig+0x12a>
 80072c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	4b3d      	ldr	r3, [pc, #244]	; (80073bc <UART_SetConfig+0x218>)
 80072c8:	429a      	cmp	r2, r3
 80072ca:	f040 8085 	bne.w	80073d8 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80072ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072d0:	2200      	movs	r2, #0
 80072d2:	623b      	str	r3, [r7, #32]
 80072d4:	627a      	str	r2, [r7, #36]	; 0x24
 80072d6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80072da:	f7fe fc6b 	bl	8005bb4 <HAL_RCCEx_GetPeriphCLKFreq>
 80072de:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80072e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	f000 80e8 	beq.w	80074b8 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80072e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ec:	4a39      	ldr	r2, [pc, #228]	; (80073d4 <UART_SetConfig+0x230>)
 80072ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072f2:	461a      	mov	r2, r3
 80072f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80072fa:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fe:	685a      	ldr	r2, [r3, #4]
 8007300:	4613      	mov	r3, r2
 8007302:	005b      	lsls	r3, r3, #1
 8007304:	4413      	add	r3, r2
 8007306:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007308:	429a      	cmp	r2, r3
 800730a:	d305      	bcc.n	8007318 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800730c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007312:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007314:	429a      	cmp	r2, r3
 8007316:	d903      	bls.n	8007320 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800731e:	e048      	b.n	80073b2 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007322:	2200      	movs	r2, #0
 8007324:	61bb      	str	r3, [r7, #24]
 8007326:	61fa      	str	r2, [r7, #28]
 8007328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732c:	4a29      	ldr	r2, [pc, #164]	; (80073d4 <UART_SetConfig+0x230>)
 800732e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007332:	b29b      	uxth	r3, r3
 8007334:	2200      	movs	r2, #0
 8007336:	613b      	str	r3, [r7, #16]
 8007338:	617a      	str	r2, [r7, #20]
 800733a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800733e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007342:	f7f8 ff97 	bl	8000274 <__aeabi_uldivmod>
 8007346:	4602      	mov	r2, r0
 8007348:	460b      	mov	r3, r1
 800734a:	4610      	mov	r0, r2
 800734c:	4619      	mov	r1, r3
 800734e:	f04f 0200 	mov.w	r2, #0
 8007352:	f04f 0300 	mov.w	r3, #0
 8007356:	020b      	lsls	r3, r1, #8
 8007358:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800735c:	0202      	lsls	r2, r0, #8
 800735e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007360:	6849      	ldr	r1, [r1, #4]
 8007362:	0849      	lsrs	r1, r1, #1
 8007364:	2000      	movs	r0, #0
 8007366:	460c      	mov	r4, r1
 8007368:	4605      	mov	r5, r0
 800736a:	eb12 0804 	adds.w	r8, r2, r4
 800736e:	eb43 0905 	adc.w	r9, r3, r5
 8007372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	60bb      	str	r3, [r7, #8]
 800737a:	60fa      	str	r2, [r7, #12]
 800737c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007380:	4640      	mov	r0, r8
 8007382:	4649      	mov	r1, r9
 8007384:	f7f8 ff76 	bl	8000274 <__aeabi_uldivmod>
 8007388:	4602      	mov	r2, r0
 800738a:	460b      	mov	r3, r1
 800738c:	4613      	mov	r3, r2
 800738e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007392:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007396:	d308      	bcc.n	80073aa <UART_SetConfig+0x206>
 8007398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800739a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800739e:	d204      	bcs.n	80073aa <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 80073a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80073a6:	60da      	str	r2, [r3, #12]
 80073a8:	e003      	b.n	80073b2 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 80073b0:	e082      	b.n	80074b8 <UART_SetConfig+0x314>
 80073b2:	e081      	b.n	80074b8 <UART_SetConfig+0x314>
 80073b4:	46002400 	.word	0x46002400
 80073b8:	cfff69f3 	.word	0xcfff69f3
 80073bc:	56002400 	.word	0x56002400
 80073c0:	40013800 	.word	0x40013800
 80073c4:	40004400 	.word	0x40004400
 80073c8:	40004800 	.word	0x40004800
 80073cc:	40004c00 	.word	0x40004c00
 80073d0:	40005000 	.word	0x40005000
 80073d4:	08008da4 	.word	0x08008da4
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073da:	69db      	ldr	r3, [r3, #28]
 80073dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073e0:	d13c      	bne.n	800745c <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80073e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073e4:	2200      	movs	r2, #0
 80073e6:	603b      	str	r3, [r7, #0]
 80073e8:	607a      	str	r2, [r7, #4]
 80073ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073ee:	f7fe fbe1 	bl	8005bb4 <HAL_RCCEx_GetPeriphCLKFreq>
 80073f2:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d05e      	beq.n	80074b8 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fe:	4a39      	ldr	r2, [pc, #228]	; (80074e4 <UART_SetConfig+0x340>)
 8007400:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007404:	461a      	mov	r2, r3
 8007406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007408:	fbb3 f3f2 	udiv	r3, r3, r2
 800740c:	005a      	lsls	r2, r3, #1
 800740e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	085b      	lsrs	r3, r3, #1
 8007414:	441a      	add	r2, r3
 8007416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	fbb2 f3f3 	udiv	r3, r2, r3
 800741e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007422:	2b0f      	cmp	r3, #15
 8007424:	d916      	bls.n	8007454 <UART_SetConfig+0x2b0>
 8007426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800742c:	d212      	bcs.n	8007454 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800742e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007430:	b29b      	uxth	r3, r3
 8007432:	f023 030f 	bic.w	r3, r3, #15
 8007436:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800743a:	085b      	lsrs	r3, r3, #1
 800743c:	b29b      	uxth	r3, r3
 800743e:	f003 0307 	and.w	r3, r3, #7
 8007442:	b29a      	uxth	r2, r3
 8007444:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007446:	4313      	orrs	r3, r2
 8007448:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800744a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8007450:	60da      	str	r2, [r3, #12]
 8007452:	e031      	b.n	80074b8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800745a:	e02d      	b.n	80074b8 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800745c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800745e:	2200      	movs	r2, #0
 8007460:	469a      	mov	sl, r3
 8007462:	4693      	mov	fp, r2
 8007464:	4650      	mov	r0, sl
 8007466:	4659      	mov	r1, fp
 8007468:	f7fe fba4 	bl	8005bb4 <HAL_RCCEx_GetPeriphCLKFreq>
 800746c:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800746e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007470:	2b00      	cmp	r3, #0
 8007472:	d021      	beq.n	80074b8 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007478:	4a1a      	ldr	r2, [pc, #104]	; (80074e4 <UART_SetConfig+0x340>)
 800747a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800747e:	461a      	mov	r2, r3
 8007480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007482:	fbb3 f2f2 	udiv	r2, r3, r2
 8007486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	085b      	lsrs	r3, r3, #1
 800748c:	441a      	add	r2, r3
 800748e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	fbb2 f3f3 	udiv	r3, r2, r3
 8007496:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800749a:	2b0f      	cmp	r3, #15
 800749c:	d909      	bls.n	80074b2 <UART_SetConfig+0x30e>
 800749e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074a4:	d205      	bcs.n	80074b2 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	60da      	str	r2, [r3, #12]
 80074b0:	e002      	b.n	80074b8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80074b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ba:	2201      	movs	r2, #1
 80074bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80074c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c2:	2201      	movs	r2, #1
 80074c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ca:	2200      	movs	r2, #0
 80074cc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80074ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d0:	2200      	movs	r2, #0
 80074d2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80074d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3750      	adds	r7, #80	; 0x50
 80074dc:	46bd      	mov	sp, r7
 80074de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074e2:	bf00      	nop
 80074e4:	08008da4 	.word	0x08008da4

080074e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f4:	f003 0301 	and.w	r3, r3, #1
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00a      	beq.n	8007512 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	430a      	orrs	r2, r1
 8007510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007516:	f003 0302 	and.w	r3, r3, #2
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00a      	beq.n	8007534 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	430a      	orrs	r2, r1
 8007532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007538:	f003 0304 	and.w	r3, r3, #4
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00a      	beq.n	8007556 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	430a      	orrs	r2, r1
 8007554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800755a:	f003 0308 	and.w	r3, r3, #8
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00a      	beq.n	8007578 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	430a      	orrs	r2, r1
 8007576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757c:	f003 0310 	and.w	r3, r3, #16
 8007580:	2b00      	cmp	r3, #0
 8007582:	d00a      	beq.n	800759a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	430a      	orrs	r2, r1
 8007598:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800759e:	f003 0320 	and.w	r3, r3, #32
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00a      	beq.n	80075bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	430a      	orrs	r2, r1
 80075ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d01a      	beq.n	80075fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	430a      	orrs	r2, r1
 80075dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075e6:	d10a      	bne.n	80075fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	430a      	orrs	r2, r1
 80075fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007606:	2b00      	cmp	r3, #0
 8007608:	d00a      	beq.n	8007620 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	430a      	orrs	r2, r1
 800761e:	605a      	str	r2, [r3, #4]
  }
}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b086      	sub	sp, #24
 8007630:	af02      	add	r7, sp, #8
 8007632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800763c:	f7f9 fda2 	bl	8001184 <HAL_GetTick>
 8007640:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 0308 	and.w	r3, r3, #8
 800764c:	2b08      	cmp	r3, #8
 800764e:	d10e      	bne.n	800766e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007650:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 f82f 	bl	80076c2 <UART_WaitOnFlagUntilTimeout>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d001      	beq.n	800766e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e025      	b.n	80076ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 0304 	and.w	r3, r3, #4
 8007678:	2b04      	cmp	r3, #4
 800767a:	d10e      	bne.n	800769a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800767c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007680:	9300      	str	r3, [sp, #0]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2200      	movs	r2, #0
 8007686:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 f819 	bl	80076c2 <UART_WaitOnFlagUntilTimeout>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d001      	beq.n	800769a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	e00f      	b.n	80076ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2220      	movs	r2, #32
 800769e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2220      	movs	r2, #32
 80076a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b09c      	sub	sp, #112	; 0x70
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	60f8      	str	r0, [r7, #12]
 80076ca:	60b9      	str	r1, [r7, #8]
 80076cc:	603b      	str	r3, [r7, #0]
 80076ce:	4613      	mov	r3, r2
 80076d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076d2:	e0a9      	b.n	8007828 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076da:	f000 80a5 	beq.w	8007828 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076de:	f7f9 fd51 	bl	8001184 <HAL_GetTick>
 80076e2:	4602      	mov	r2, r0
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d302      	bcc.n	80076f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80076ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d140      	bne.n	8007776 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076fc:	e853 3f00 	ldrex	r3, [r3]
 8007700:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007704:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007708:	667b      	str	r3, [r7, #100]	; 0x64
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	461a      	mov	r2, r3
 8007710:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007712:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007714:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007716:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007718:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800771a:	e841 2300 	strex	r3, r2, [r1]
 800771e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1e6      	bne.n	80076f4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	3308      	adds	r3, #8
 800772c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007730:	e853 3f00 	ldrex	r3, [r3]
 8007734:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007738:	f023 0301 	bic.w	r3, r3, #1
 800773c:	663b      	str	r3, [r7, #96]	; 0x60
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	3308      	adds	r3, #8
 8007744:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007746:	64ba      	str	r2, [r7, #72]	; 0x48
 8007748:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800774c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800774e:	e841 2300 	strex	r3, r2, [r1]
 8007752:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1e5      	bne.n	8007726 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2220      	movs	r2, #32
 800775e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2220      	movs	r2, #32
 8007766:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e069      	b.n	800784a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f003 0304 	and.w	r3, r3, #4
 8007780:	2b00      	cmp	r3, #0
 8007782:	d051      	beq.n	8007828 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	69db      	ldr	r3, [r3, #28]
 800778a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800778e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007792:	d149      	bne.n	8007828 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800779c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a6:	e853 3f00 	ldrex	r3, [r3]
 80077aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80077b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	461a      	mov	r2, r3
 80077ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077bc:	637b      	str	r3, [r7, #52]	; 0x34
 80077be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077c4:	e841 2300 	strex	r3, r2, [r1]
 80077c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80077ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d1e6      	bne.n	800779e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3308      	adds	r3, #8
 80077d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	e853 3f00 	ldrex	r3, [r3]
 80077de:	613b      	str	r3, [r7, #16]
   return(result);
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	f023 0301 	bic.w	r3, r3, #1
 80077e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	3308      	adds	r3, #8
 80077ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80077f0:	623a      	str	r2, [r7, #32]
 80077f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f4:	69f9      	ldr	r1, [r7, #28]
 80077f6:	6a3a      	ldr	r2, [r7, #32]
 80077f8:	e841 2300 	strex	r3, r2, [r1]
 80077fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1e5      	bne.n	80077d0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2220      	movs	r2, #32
 8007808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2220      	movs	r2, #32
 8007810:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2220      	movs	r2, #32
 8007818:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e010      	b.n	800784a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	69da      	ldr	r2, [r3, #28]
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	4013      	ands	r3, r2
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	429a      	cmp	r2, r3
 8007836:	bf0c      	ite	eq
 8007838:	2301      	moveq	r3, #1
 800783a:	2300      	movne	r3, #0
 800783c:	b2db      	uxtb	r3, r3
 800783e:	461a      	mov	r2, r3
 8007840:	79fb      	ldrb	r3, [r7, #7]
 8007842:	429a      	cmp	r2, r3
 8007844:	f43f af46 	beq.w	80076d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3770      	adds	r7, #112	; 0x70
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007852:	b480      	push	{r7}
 8007854:	b085      	sub	sp, #20
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007860:	2b01      	cmp	r3, #1
 8007862:	d101      	bne.n	8007868 <HAL_UARTEx_DisableFifoMode+0x16>
 8007864:	2302      	movs	r3, #2
 8007866:	e027      	b.n	80078b8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2224      	movs	r2, #36	; 0x24
 8007874:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f022 0201 	bic.w	r2, r2, #1
 800788e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007896:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2220      	movs	r2, #32
 80078aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3714      	adds	r7, #20
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d101      	bne.n	80078dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80078d8:	2302      	movs	r3, #2
 80078da:	e02d      	b.n	8007938 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2224      	movs	r2, #36	; 0x24
 80078e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f022 0201 	bic.w	r2, r2, #1
 8007902:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	683a      	ldr	r2, [r7, #0]
 8007914:	430a      	orrs	r2, r1
 8007916:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 f84f 	bl	80079bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2220      	movs	r2, #32
 800792a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007950:	2b01      	cmp	r3, #1
 8007952:	d101      	bne.n	8007958 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007954:	2302      	movs	r3, #2
 8007956:	e02d      	b.n	80079b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2224      	movs	r2, #36	; 0x24
 8007964:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f022 0201 	bic.w	r2, r2, #1
 800797e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	683a      	ldr	r2, [r7, #0]
 8007990:	430a      	orrs	r2, r1
 8007992:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 f811 	bl	80079bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2220      	movs	r2, #32
 80079a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3710      	adds	r7, #16
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d108      	bne.n	80079de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80079dc:	e031      	b.n	8007a42 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80079de:	2308      	movs	r3, #8
 80079e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80079e2:	2308      	movs	r3, #8
 80079e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	0e5b      	lsrs	r3, r3, #25
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	f003 0307 	and.w	r3, r3, #7
 80079f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	0f5b      	lsrs	r3, r3, #29
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	f003 0307 	and.w	r3, r3, #7
 8007a04:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a06:	7bbb      	ldrb	r3, [r7, #14]
 8007a08:	7b3a      	ldrb	r2, [r7, #12]
 8007a0a:	4911      	ldr	r1, [pc, #68]	; (8007a50 <UARTEx_SetNbDataToProcess+0x94>)
 8007a0c:	5c8a      	ldrb	r2, [r1, r2]
 8007a0e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a12:	7b3a      	ldrb	r2, [r7, #12]
 8007a14:	490f      	ldr	r1, [pc, #60]	; (8007a54 <UARTEx_SetNbDataToProcess+0x98>)
 8007a16:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a18:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a24:	7bfb      	ldrb	r3, [r7, #15]
 8007a26:	7b7a      	ldrb	r2, [r7, #13]
 8007a28:	4909      	ldr	r1, [pc, #36]	; (8007a50 <UARTEx_SetNbDataToProcess+0x94>)
 8007a2a:	5c8a      	ldrb	r2, [r1, r2]
 8007a2c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a30:	7b7a      	ldrb	r2, [r7, #13]
 8007a32:	4908      	ldr	r1, [pc, #32]	; (8007a54 <UARTEx_SetNbDataToProcess+0x98>)
 8007a34:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a36:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007a42:	bf00      	nop
 8007a44:	3714      	adds	r7, #20
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	08008dbc 	.word	0x08008dbc
 8007a54:	08008dc4 	.word	0x08008dc4

08007a58 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b087      	sub	sp, #28
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a6c:	683a      	ldr	r2, [r7, #0]
 8007a6e:	6812      	ldr	r2, [r2, #0]
 8007a70:	f023 0101 	bic.w	r1, r3, #1
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	2b08      	cmp	r3, #8
 8007a80:	d102      	bne.n	8007a88 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007a82:	2340      	movs	r3, #64	; 0x40
 8007a84:	617b      	str	r3, [r7, #20]
 8007a86:	e001      	b.n	8007a8c <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8007a98:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8007a9e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8007aa4:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8007aaa:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8007ab0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8007ab6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8007abc:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8007ac2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8007ac8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad6:	693a      	ldr	r2, [r7, #16]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ae0:	693a      	ldr	r2, [r7, #16]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aea:	693a      	ldr	r2, [r7, #16]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8007afa:	4b3e      	ldr	r3, [pc, #248]	; (8007bf4 <FMC_NORSRAM_Init+0x19c>)
 8007afc:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b04:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b0c:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8007b14:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8007b1c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	43db      	mvns	r3, r3
 8007b2c:	ea02 0103 	and.w	r1, r2, r3
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	4319      	orrs	r1, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b46:	d10c      	bne.n	8007b62 <FMC_NORSRAM_Init+0x10a>
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d008      	beq.n	8007b62 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5c:	431a      	orrs	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d006      	beq.n	8007b78 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b72:	431a      	orrs	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d12f      	bne.n	8007be2 <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	0c1b      	lsrs	r3, r3, #16
 8007b88:	041b      	lsls	r3, r3, #16
 8007b8a:	683a      	ldr	r2, [r7, #0]
 8007b8c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007b8e:	431a      	orrs	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b04      	cmp	r3, #4
 8007b9a:	d014      	beq.n	8007bc6 <FMC_NORSRAM_Init+0x16e>
 8007b9c:	2b04      	cmp	r3, #4
 8007b9e:	d819      	bhi.n	8007bd4 <FMC_NORSRAM_Init+0x17c>
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d002      	beq.n	8007baa <FMC_NORSRAM_Init+0x152>
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d007      	beq.n	8007bb8 <FMC_NORSRAM_Init+0x160>
 8007ba8:	e014      	b.n	8007bd4 <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a1b      	ldr	r3, [r3, #32]
 8007bae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	621a      	str	r2, [r3, #32]
        break;
 8007bb6:	e015      	b.n	8007be4 <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a1b      	ldr	r3, [r3, #32]
 8007bbc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	621a      	str	r2, [r3, #32]
        break;
 8007bc4:	e00e      	b.n	8007be4 <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a1b      	ldr	r3, [r3, #32]
 8007bca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	621a      	str	r2, [r3, #32]
        break;
 8007bd2:	e007      	b.n	8007be4 <FMC_NORSRAM_Init+0x18c>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6a1b      	ldr	r3, [r3, #32]
 8007bd8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	621a      	str	r2, [r3, #32]
        break;
 8007be0:	e000      	b.n	8007be4 <FMC_NORSRAM_Init+0x18c>
    }
  }
 8007be2:	bf00      	nop

  return HAL_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	371c      	adds	r7, #28
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	0008fb7f 	.word	0x0008fb7f

08007bf8 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b087      	sub	sp, #28
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	1c5a      	adds	r2, r3, #1
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	011b      	lsls	r3, r3, #4
 8007c18:	431a      	orrs	r2, r3
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	021b      	lsls	r3, r3, #8
 8007c20:	431a      	orrs	r2, r3
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	079b      	lsls	r3, r3, #30
 8007c28:	431a      	orrs	r2, r3
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	041b      	lsls	r3, r3, #16
 8007c30:	431a      	orrs	r2, r3
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	695b      	ldr	r3, [r3, #20]
 8007c36:	3b01      	subs	r3, #1
 8007c38:	051b      	lsls	r3, r3, #20
 8007c3a:	431a      	orrs	r2, r3
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	699b      	ldr	r3, [r3, #24]
 8007c40:	3b02      	subs	r3, #2
 8007c42:	061b      	lsls	r3, r3, #24
 8007c44:	ea42 0103 	orr.w	r1, r2, r3
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	69db      	ldr	r3, [r3, #28]
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	3201      	adds	r2, #1
 8007c50:	4319      	orrs	r1, r3
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c64:	d113      	bne.n	8007c8e <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007c6e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	695b      	ldr	r3, [r3, #20]
 8007c74:	3b01      	subs	r3, #1
 8007c76:	051b      	lsls	r3, r3, #20
 8007c78:	697a      	ldr	r2, [r7, #20]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	431a      	orrs	r2, r3
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	371c      	adds	r7, #28
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b085      	sub	sp, #20
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	60b9      	str	r1, [r7, #8]
 8007ca6:	607a      	str	r2, [r7, #4]
 8007ca8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cb0:	d121      	bne.n	8007cf6 <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cba:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	6819      	ldr	r1, [r3, #0]
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	011b      	lsls	r3, r3, #4
 8007cc8:	4319      	orrs	r1, r3
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	021b      	lsls	r3, r3, #8
 8007cd0:	4319      	orrs	r1, r3
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	079b      	lsls	r3, r3, #30
 8007cd8:	4319      	orrs	r1, r3
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	69db      	ldr	r3, [r3, #28]
 8007cde:	4319      	orrs	r1, r3
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	041b      	lsls	r3, r3, #16
 8007ce6:	430b      	orrs	r3, r1
 8007ce8:	ea42 0103 	orr.w	r1, r2, r3
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007cf4:	e005      	b.n	8007d02 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007cfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3714      	adds	r7, #20
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b08b      	sub	sp, #44	; 0x2c
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	fa93 f3a3 	rbit	r3, r3
 8007d2a:	613b      	str	r3, [r7, #16]
  return result;
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d101      	bne.n	8007d3a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8007d36:	2320      	movs	r3, #32
 8007d38:	e003      	b.n	8007d42 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	fab3 f383 	clz	r3, r3
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	005b      	lsls	r3, r3, #1
 8007d44:	2103      	movs	r1, #3
 8007d46:	fa01 f303 	lsl.w	r3, r1, r3
 8007d4a:	43db      	mvns	r3, r3
 8007d4c:	401a      	ands	r2, r3
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d52:	6a3b      	ldr	r3, [r7, #32]
 8007d54:	fa93 f3a3 	rbit	r3, r3
 8007d58:	61fb      	str	r3, [r7, #28]
  return result;
 8007d5a:	69fb      	ldr	r3, [r7, #28]
 8007d5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d101      	bne.n	8007d68 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8007d64:	2320      	movs	r3, #32
 8007d66:	e003      	b.n	8007d70 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8007d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6a:	fab3 f383 	clz	r3, r3
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	005b      	lsls	r3, r3, #1
 8007d72:	6879      	ldr	r1, [r7, #4]
 8007d74:	fa01 f303 	lsl.w	r3, r1, r3
 8007d78:	431a      	orrs	r2, r3
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	601a      	str	r2, [r3, #0]
}
 8007d7e:	bf00      	nop
 8007d80:	372c      	adds	r7, #44	; 0x2c
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b085      	sub	sp, #20
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	60f8      	str	r0, [r7, #12]
 8007d92:	60b9      	str	r1, [r7, #8]
 8007d94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	685a      	ldr	r2, [r3, #4]
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	43db      	mvns	r3, r3
 8007d9e:	401a      	ands	r2, r3
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	6879      	ldr	r1, [r7, #4]
 8007da4:	fb01 f303 	mul.w	r3, r1, r3
 8007da8:	431a      	orrs	r2, r3
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	605a      	str	r2, [r3, #4]
}
 8007dae:	bf00      	nop
 8007db0:	3714      	adds	r7, #20
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b08b      	sub	sp, #44	; 0x2c
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	60f8      	str	r0, [r7, #12]
 8007dc2:	60b9      	str	r1, [r7, #8]
 8007dc4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	689a      	ldr	r2, [r3, #8]
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	fa93 f3a3 	rbit	r3, r3
 8007dd4:	613b      	str	r3, [r7, #16]
  return result;
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d101      	bne.n	8007de4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8007de0:	2320      	movs	r3, #32
 8007de2:	e003      	b.n	8007dec <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8007de4:	69bb      	ldr	r3, [r7, #24]
 8007de6:	fab3 f383 	clz	r3, r3
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	005b      	lsls	r3, r3, #1
 8007dee:	2103      	movs	r1, #3
 8007df0:	fa01 f303 	lsl.w	r3, r1, r3
 8007df4:	43db      	mvns	r3, r3
 8007df6:	401a      	ands	r2, r3
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dfc:	6a3b      	ldr	r3, [r7, #32]
 8007dfe:	fa93 f3a3 	rbit	r3, r3
 8007e02:	61fb      	str	r3, [r7, #28]
  return result;
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d101      	bne.n	8007e12 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8007e0e:	2320      	movs	r3, #32
 8007e10:	e003      	b.n	8007e1a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8007e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e14:	fab3 f383 	clz	r3, r3
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	005b      	lsls	r3, r3, #1
 8007e1c:	6879      	ldr	r1, [r7, #4]
 8007e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e22:	431a      	orrs	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8007e28:	bf00      	nop
 8007e2a:	372c      	adds	r7, #44	; 0x2c
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b08b      	sub	sp, #44	; 0x2c
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	68da      	ldr	r2, [r3, #12]
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	fa93 f3a3 	rbit	r3, r3
 8007e4e:	613b      	str	r3, [r7, #16]
  return result;
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d101      	bne.n	8007e5e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8007e5a:	2320      	movs	r3, #32
 8007e5c:	e003      	b.n	8007e66 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	fab3 f383 	clz	r3, r3
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	005b      	lsls	r3, r3, #1
 8007e68:	2103      	movs	r1, #3
 8007e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e6e:	43db      	mvns	r3, r3
 8007e70:	401a      	ands	r2, r3
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e76:	6a3b      	ldr	r3, [r7, #32]
 8007e78:	fa93 f3a3 	rbit	r3, r3
 8007e7c:	61fb      	str	r3, [r7, #28]
  return result;
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d101      	bne.n	8007e8c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8007e88:	2320      	movs	r3, #32
 8007e8a:	e003      	b.n	8007e94 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8007e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8e:	fab3 f383 	clz	r3, r3
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	005b      	lsls	r3, r3, #1
 8007e96:	6879      	ldr	r1, [r7, #4]
 8007e98:	fa01 f303 	lsl.w	r3, r1, r3
 8007e9c:	431a      	orrs	r2, r3
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	60da      	str	r2, [r3, #12]
}
 8007ea2:	bf00      	nop
 8007ea4:	372c      	adds	r7, #44	; 0x2c
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr

08007eae <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8007eae:	b480      	push	{r7}
 8007eb0:	b08b      	sub	sp, #44	; 0x2c
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	60f8      	str	r0, [r7, #12]
 8007eb6:	60b9      	str	r1, [r7, #8]
 8007eb8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6a1a      	ldr	r2, [r3, #32]
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	fa93 f3a3 	rbit	r3, r3
 8007ec8:	613b      	str	r3, [r7, #16]
  return result;
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d101      	bne.n	8007ed8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8007ed4:	2320      	movs	r3, #32
 8007ed6:	e003      	b.n	8007ee0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	fab3 f383 	clz	r3, r3
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	210f      	movs	r1, #15
 8007ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ee8:	43db      	mvns	r3, r3
 8007eea:	401a      	ands	r2, r3
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ef0:	6a3b      	ldr	r3, [r7, #32]
 8007ef2:	fa93 f3a3 	rbit	r3, r3
 8007ef6:	61fb      	str	r3, [r7, #28]
  return result;
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d101      	bne.n	8007f06 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8007f02:	2320      	movs	r3, #32
 8007f04:	e003      	b.n	8007f0e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8007f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f08:	fab3 f383 	clz	r3, r3
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	6879      	ldr	r1, [r7, #4]
 8007f12:	fa01 f303 	lsl.w	r3, r1, r3
 8007f16:	431a      	orrs	r2, r3
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8007f1c:	bf00      	nop
 8007f1e:	372c      	adds	r7, #44	; 0x2c
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b08b      	sub	sp, #44	; 0x2c
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	0a1b      	lsrs	r3, r3, #8
 8007f3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	fa93 f3a3 	rbit	r3, r3
 8007f44:	613b      	str	r3, [r7, #16]
  return result;
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d101      	bne.n	8007f54 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8007f50:	2320      	movs	r3, #32
 8007f52:	e003      	b.n	8007f5c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	fab3 f383 	clz	r3, r3
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	210f      	movs	r1, #15
 8007f60:	fa01 f303 	lsl.w	r3, r1, r3
 8007f64:	43db      	mvns	r3, r3
 8007f66:	401a      	ands	r2, r3
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	0a1b      	lsrs	r3, r3, #8
 8007f6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f6e:	6a3b      	ldr	r3, [r7, #32]
 8007f70:	fa93 f3a3 	rbit	r3, r3
 8007f74:	61fb      	str	r3, [r7, #28]
  return result;
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d101      	bne.n	8007f84 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8007f80:	2320      	movs	r3, #32
 8007f82:	e003      	b.n	8007f8c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8007f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f86:	fab3 f383 	clz	r3, r3
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	6879      	ldr	r1, [r7, #4]
 8007f90:	fa01 f303 	lsl.w	r3, r1, r3
 8007f94:	431a      	orrs	r2, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8007f9a:	bf00      	nop
 8007f9c:	372c      	adds	r7, #44	; 0x2c
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr

08007fa6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b08a      	sub	sp, #40	; 0x28
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
 8007fae:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	fa93 f3a3 	rbit	r3, r3
 8007fbc:	617b      	str	r3, [r7, #20]
  return result;
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d101      	bne.n	8007fcc <LL_GPIO_Init+0x26>
    return 32U;
 8007fc8:	2320      	movs	r3, #32
 8007fca:	e003      	b.n	8007fd4 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	fab3 f383 	clz	r3, r3
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8007fd6:	e050      	b.n	800807a <LL_GPIO_Init+0xd4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	2101      	movs	r1, #1
 8007fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8007fe4:	4013      	ands	r3, r2
 8007fe6:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 8007fe8:	6a3b      	ldr	r3, [r7, #32]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d042      	beq.n	8008074 <LL_GPIO_Init+0xce>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	6a39      	ldr	r1, [r7, #32]
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f7ff fe8a 	bl	8007d10 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d003      	beq.n	800800c <LL_GPIO_Init+0x66>
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	2b02      	cmp	r3, #2
 800800a:	d106      	bne.n	800801a <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	461a      	mov	r2, r3
 8008012:	6a39      	ldr	r1, [r7, #32]
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f7ff fed0 	bl	8007dba <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	461a      	mov	r2, r3
 8008020:	6a39      	ldr	r1, [r7, #32]
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f7ff ff06 	bl	8007e34 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	2b02      	cmp	r3, #2
 800802e:	d121      	bne.n	8008074 <LL_GPIO_Init+0xce>
 8008030:	6a3b      	ldr	r3, [r7, #32]
 8008032:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	fa93 f3a3 	rbit	r3, r3
 800803a:	60bb      	str	r3, [r7, #8]
  return result;
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d101      	bne.n	800804a <LL_GPIO_Init+0xa4>
    return 32U;
 8008046:	2320      	movs	r3, #32
 8008048:	e003      	b.n	8008052 <LL_GPIO_Init+0xac>
  return __builtin_clz(value);
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	fab3 f383 	clz	r3, r3
 8008050:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 8008052:	2b07      	cmp	r3, #7
 8008054:	d807      	bhi.n	8008066 <LL_GPIO_Init+0xc0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	695b      	ldr	r3, [r3, #20]
 800805a:	461a      	mov	r2, r3
 800805c:	6a39      	ldr	r1, [r7, #32]
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f7ff ff25 	bl	8007eae <LL_GPIO_SetAFPin_0_7>
 8008064:	e006      	b.n	8008074 <LL_GPIO_Init+0xce>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	461a      	mov	r2, r3
 800806c:	6a39      	ldr	r1, [r7, #32]
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f7ff ff5a 	bl	8007f28 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8008074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008076:	3301      	adds	r3, #1
 8008078:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008080:	fa22 f303 	lsr.w	r3, r2, r3
 8008084:	2b00      	cmp	r3, #0
 8008086:	d1a7      	bne.n	8007fd8 <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	2b01      	cmp	r3, #1
 800808e:	d003      	beq.n	8008098 <LL_GPIO_Init+0xf2>
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	2b02      	cmp	r3, #2
 8008096:	d107      	bne.n	80080a8 <LL_GPIO_Init+0x102>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	6819      	ldr	r1, [r3, #0]
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	461a      	mov	r2, r3
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f7ff fe71 	bl	8007d8a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3728      	adds	r7, #40	; 0x28
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080b2:	b084      	sub	sp, #16
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	f107 001c 	add.w	r0, r7, #28
 80080c0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 fd8f 	bl	8008bf4 <USB_CoreReset>
 80080d6:	4603      	mov	r3, r0
 80080d8:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80080da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d106      	bne.n	80080ee <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	639a      	str	r2, [r3, #56]	; 0x38
 80080ec:	e005      	b.n	80080fa <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

  return ret;
 80080fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008106:	b004      	add	sp, #16
 8008108:	4770      	bx	lr
	...

0800810c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800810c:	b480      	push	{r7}
 800810e:	b087      	sub	sp, #28
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	4613      	mov	r3, r2
 8008118:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800811a:	79fb      	ldrb	r3, [r7, #7]
 800811c:	2b02      	cmp	r3, #2
 800811e:	d165      	bne.n	80081ec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	4a41      	ldr	r2, [pc, #260]	; (8008228 <USB_SetTurnaroundTime+0x11c>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d906      	bls.n	8008136 <USB_SetTurnaroundTime+0x2a>
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	4a40      	ldr	r2, [pc, #256]	; (800822c <USB_SetTurnaroundTime+0x120>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d202      	bcs.n	8008136 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008130:	230f      	movs	r3, #15
 8008132:	617b      	str	r3, [r7, #20]
 8008134:	e062      	b.n	80081fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	4a3c      	ldr	r2, [pc, #240]	; (800822c <USB_SetTurnaroundTime+0x120>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d306      	bcc.n	800814c <USB_SetTurnaroundTime+0x40>
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	4a3b      	ldr	r2, [pc, #236]	; (8008230 <USB_SetTurnaroundTime+0x124>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d202      	bcs.n	800814c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008146:	230e      	movs	r3, #14
 8008148:	617b      	str	r3, [r7, #20]
 800814a:	e057      	b.n	80081fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	4a38      	ldr	r2, [pc, #224]	; (8008230 <USB_SetTurnaroundTime+0x124>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d306      	bcc.n	8008162 <USB_SetTurnaroundTime+0x56>
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	4a37      	ldr	r2, [pc, #220]	; (8008234 <USB_SetTurnaroundTime+0x128>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d202      	bcs.n	8008162 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800815c:	230d      	movs	r3, #13
 800815e:	617b      	str	r3, [r7, #20]
 8008160:	e04c      	b.n	80081fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	4a33      	ldr	r2, [pc, #204]	; (8008234 <USB_SetTurnaroundTime+0x128>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d306      	bcc.n	8008178 <USB_SetTurnaroundTime+0x6c>
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	4a32      	ldr	r2, [pc, #200]	; (8008238 <USB_SetTurnaroundTime+0x12c>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d802      	bhi.n	8008178 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008172:	230c      	movs	r3, #12
 8008174:	617b      	str	r3, [r7, #20]
 8008176:	e041      	b.n	80081fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	4a2f      	ldr	r2, [pc, #188]	; (8008238 <USB_SetTurnaroundTime+0x12c>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d906      	bls.n	800818e <USB_SetTurnaroundTime+0x82>
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	4a2e      	ldr	r2, [pc, #184]	; (800823c <USB_SetTurnaroundTime+0x130>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d802      	bhi.n	800818e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008188:	230b      	movs	r3, #11
 800818a:	617b      	str	r3, [r7, #20]
 800818c:	e036      	b.n	80081fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	4a2a      	ldr	r2, [pc, #168]	; (800823c <USB_SetTurnaroundTime+0x130>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d906      	bls.n	80081a4 <USB_SetTurnaroundTime+0x98>
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	4a29      	ldr	r2, [pc, #164]	; (8008240 <USB_SetTurnaroundTime+0x134>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d802      	bhi.n	80081a4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800819e:	230a      	movs	r3, #10
 80081a0:	617b      	str	r3, [r7, #20]
 80081a2:	e02b      	b.n	80081fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	4a26      	ldr	r2, [pc, #152]	; (8008240 <USB_SetTurnaroundTime+0x134>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d906      	bls.n	80081ba <USB_SetTurnaroundTime+0xae>
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	4a25      	ldr	r2, [pc, #148]	; (8008244 <USB_SetTurnaroundTime+0x138>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d202      	bcs.n	80081ba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80081b4:	2309      	movs	r3, #9
 80081b6:	617b      	str	r3, [r7, #20]
 80081b8:	e020      	b.n	80081fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	4a21      	ldr	r2, [pc, #132]	; (8008244 <USB_SetTurnaroundTime+0x138>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d306      	bcc.n	80081d0 <USB_SetTurnaroundTime+0xc4>
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	4a20      	ldr	r2, [pc, #128]	; (8008248 <USB_SetTurnaroundTime+0x13c>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d802      	bhi.n	80081d0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80081ca:	2308      	movs	r3, #8
 80081cc:	617b      	str	r3, [r7, #20]
 80081ce:	e015      	b.n	80081fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	4a1d      	ldr	r2, [pc, #116]	; (8008248 <USB_SetTurnaroundTime+0x13c>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d906      	bls.n	80081e6 <USB_SetTurnaroundTime+0xda>
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	4a1c      	ldr	r2, [pc, #112]	; (800824c <USB_SetTurnaroundTime+0x140>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d202      	bcs.n	80081e6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80081e0:	2307      	movs	r3, #7
 80081e2:	617b      	str	r3, [r7, #20]
 80081e4:	e00a      	b.n	80081fc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80081e6:	2306      	movs	r3, #6
 80081e8:	617b      	str	r3, [r7, #20]
 80081ea:	e007      	b.n	80081fc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80081ec:	79fb      	ldrb	r3, [r7, #7]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d102      	bne.n	80081f8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80081f2:	2309      	movs	r3, #9
 80081f4:	617b      	str	r3, [r7, #20]
 80081f6:	e001      	b.n	80081fc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80081f8:	2309      	movs	r3, #9
 80081fa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	68da      	ldr	r2, [r3, #12]
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	029b      	lsls	r3, r3, #10
 8008210:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008214:	431a      	orrs	r2, r3
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	371c      	adds	r7, #28
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr
 8008228:	00d8acbf 	.word	0x00d8acbf
 800822c:	00e4e1c0 	.word	0x00e4e1c0
 8008230:	00f42400 	.word	0x00f42400
 8008234:	01067380 	.word	0x01067380
 8008238:	011a499f 	.word	0x011a499f
 800823c:	01312cff 	.word	0x01312cff
 8008240:	014ca43f 	.word	0x014ca43f
 8008244:	016e3600 	.word	0x016e3600
 8008248:	01a6ab1f 	.word	0x01a6ab1f
 800824c:	01e84800 	.word	0x01e84800

08008250 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008250:	b480      	push	{r7}
 8008252:	b083      	sub	sp, #12
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	f023 0201 	bic.w	r2, r3, #1
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	370c      	adds	r7, #12
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr

08008272 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b084      	sub	sp, #16
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
 800827a:	460b      	mov	r3, r1
 800827c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800827e:	2300      	movs	r3, #0
 8008280:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800828e:	78fb      	ldrb	r3, [r7, #3]
 8008290:	2b01      	cmp	r3, #1
 8008292:	d115      	bne.n	80082c0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80082a0:	2001      	movs	r0, #1
 80082a2:	f7f8 ff7b 	bl	800119c <HAL_Delay>
      ms++;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	3301      	adds	r3, #1
 80082aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 fc11 	bl	8008ad4 <USB_GetMode>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d01e      	beq.n	80082f6 <USB_SetCurrentMode+0x84>
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2b31      	cmp	r3, #49	; 0x31
 80082bc:	d9f0      	bls.n	80082a0 <USB_SetCurrentMode+0x2e>
 80082be:	e01a      	b.n	80082f6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80082c0:	78fb      	ldrb	r3, [r7, #3]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d115      	bne.n	80082f2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80082d2:	2001      	movs	r0, #1
 80082d4:	f7f8 ff62 	bl	800119c <HAL_Delay>
      ms++;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	3301      	adds	r3, #1
 80082dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 fbf8 	bl	8008ad4 <USB_GetMode>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d005      	beq.n	80082f6 <USB_SetCurrentMode+0x84>
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2b31      	cmp	r3, #49	; 0x31
 80082ee:	d9f0      	bls.n	80082d2 <USB_SetCurrentMode+0x60>
 80082f0:	e001      	b.n	80082f6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e005      	b.n	8008302 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2b32      	cmp	r3, #50	; 0x32
 80082fa:	d101      	bne.n	8008300 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80082fc:	2301      	movs	r3, #1
 80082fe:	e000      	b.n	8008302 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
	...

0800830c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800830c:	b084      	sub	sp, #16
 800830e:	b580      	push	{r7, lr}
 8008310:	b086      	sub	sp, #24
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
 8008316:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800831a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800831e:	2300      	movs	r3, #0
 8008320:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008326:	2300      	movs	r3, #0
 8008328:	613b      	str	r3, [r7, #16]
 800832a:	e009      	b.n	8008340 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	3340      	adds	r3, #64	; 0x40
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	4413      	add	r3, r2
 8008336:	2200      	movs	r2, #0
 8008338:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	3301      	adds	r3, #1
 800833e:	613b      	str	r3, [r7, #16]
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	2b0e      	cmp	r3, #14
 8008344:	d9f2      	bls.n	800832c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008348:	2b00      	cmp	r3, #0
 800834a:	d11c      	bne.n	8008386 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800835a:	f043 0302 	orr.w	r3, r3, #2
 800835e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008364:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	639a      	str	r2, [r3, #56]	; 0x38
    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	e005      	b.n	8008392 <USB_DevInit+0x86>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800838a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008398:	461a      	mov	r2, r3
 800839a:	2300      	movs	r3, #0
 800839c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083a4:	4619      	mov	r1, r3
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ac:	461a      	mov	r2, r3
 80083ae:	680b      	ldr	r3, [r1, #0]
 80083b0:	6013      	str	r3, [r2, #0]
  }
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80083b2:	2103      	movs	r1, #3
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 f95b 	bl	8008670 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80083ba:	2110      	movs	r1, #16
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 f8f3 	bl	80085a8 <USB_FlushTxFifo>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d001      	beq.n	80083cc <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 f91f 	bl	8008610 <USB_FlushRxFifo>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d001      	beq.n	80083dc <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083e2:	461a      	mov	r2, r3
 80083e4:	2300      	movs	r3, #0
 80083e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ee:	461a      	mov	r2, r3
 80083f0:	2300      	movs	r3, #0
 80083f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083fa:	461a      	mov	r2, r3
 80083fc:	2300      	movs	r3, #0
 80083fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008400:	2300      	movs	r3, #0
 8008402:	613b      	str	r3, [r7, #16]
 8008404:	e043      	b.n	800848e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	015a      	lsls	r2, r3, #5
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	4413      	add	r3, r2
 800840e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008418:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800841c:	d118      	bne.n	8008450 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10a      	bne.n	800843a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	015a      	lsls	r2, r3, #5
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	4413      	add	r3, r2
 800842c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008430:	461a      	mov	r2, r3
 8008432:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008436:	6013      	str	r3, [r2, #0]
 8008438:	e013      	b.n	8008462 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	015a      	lsls	r2, r3, #5
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	4413      	add	r3, r2
 8008442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008446:	461a      	mov	r2, r3
 8008448:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800844c:	6013      	str	r3, [r2, #0]
 800844e:	e008      	b.n	8008462 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	015a      	lsls	r2, r3, #5
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	4413      	add	r3, r2
 8008458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800845c:	461a      	mov	r2, r3
 800845e:	2300      	movs	r3, #0
 8008460:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	015a      	lsls	r2, r3, #5
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	4413      	add	r3, r2
 800846a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800846e:	461a      	mov	r2, r3
 8008470:	2300      	movs	r3, #0
 8008472:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	015a      	lsls	r2, r3, #5
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	4413      	add	r3, r2
 800847c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008480:	461a      	mov	r2, r3
 8008482:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008486:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	3301      	adds	r3, #1
 800848c:	613b      	str	r3, [r7, #16]
 800848e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008490:	693a      	ldr	r2, [r7, #16]
 8008492:	429a      	cmp	r2, r3
 8008494:	d3b7      	bcc.n	8008406 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008496:	2300      	movs	r3, #0
 8008498:	613b      	str	r3, [r7, #16]
 800849a:	e043      	b.n	8008524 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	015a      	lsls	r2, r3, #5
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	4413      	add	r3, r2
 80084a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084b2:	d118      	bne.n	80084e6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d10a      	bne.n	80084d0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	015a      	lsls	r2, r3, #5
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	4413      	add	r3, r2
 80084c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c6:	461a      	mov	r2, r3
 80084c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80084cc:	6013      	str	r3, [r2, #0]
 80084ce:	e013      	b.n	80084f8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	015a      	lsls	r2, r3, #5
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	4413      	add	r3, r2
 80084d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084dc:	461a      	mov	r2, r3
 80084de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80084e2:	6013      	str	r3, [r2, #0]
 80084e4:	e008      	b.n	80084f8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	015a      	lsls	r2, r3, #5
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	4413      	add	r3, r2
 80084ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084f2:	461a      	mov	r2, r3
 80084f4:	2300      	movs	r3, #0
 80084f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	015a      	lsls	r2, r3, #5
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	4413      	add	r3, r2
 8008500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008504:	461a      	mov	r2, r3
 8008506:	2300      	movs	r3, #0
 8008508:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	015a      	lsls	r2, r3, #5
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	4413      	add	r3, r2
 8008512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008516:	461a      	mov	r2, r3
 8008518:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800851c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	3301      	adds	r3, #1
 8008522:	613b      	str	r3, [r7, #16]
 8008524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008526:	693a      	ldr	r2, [r7, #16]
 8008528:	429a      	cmp	r2, r3
 800852a:	d3b7      	bcc.n	800849c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008532:	691b      	ldr	r3, [r3, #16]
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800853a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800853e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800854c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800854e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008550:	2b00      	cmp	r3, #0
 8008552:	d105      	bne.n	8008560 <USB_DevInit+0x254>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	699b      	ldr	r3, [r3, #24]
 8008558:	f043 0210 	orr.w	r2, r3, #16
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	699a      	ldr	r2, [r3, #24]
 8008564:	4b0f      	ldr	r3, [pc, #60]	; (80085a4 <USB_DevInit+0x298>)
 8008566:	4313      	orrs	r3, r2
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800856c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800856e:	2b00      	cmp	r3, #0
 8008570:	d005      	beq.n	800857e <USB_DevInit+0x272>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	699b      	ldr	r3, [r3, #24]
 8008576:	f043 0208 	orr.w	r2, r3, #8
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800857e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008580:	2b01      	cmp	r3, #1
 8008582:	d107      	bne.n	8008594 <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	699b      	ldr	r3, [r3, #24]
 8008588:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800858c:	f043 0304 	orr.w	r3, r3, #4
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008594:	7dfb      	ldrb	r3, [r7, #23]
}
 8008596:	4618      	mov	r0, r3
 8008598:	3718      	adds	r7, #24
 800859a:	46bd      	mov	sp, r7
 800859c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80085a0:	b004      	add	sp, #16
 80085a2:	4770      	bx	lr
 80085a4:	803c3800 	.word	0x803c3800

080085a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b085      	sub	sp, #20
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80085b2:	2300      	movs	r3, #0
 80085b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	3301      	adds	r3, #1
 80085ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	4a13      	ldr	r2, [pc, #76]	; (800860c <USB_FlushTxFifo+0x64>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d901      	bls.n	80085c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80085c4:	2303      	movs	r3, #3
 80085c6:	e01b      	b.n	8008600 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	691b      	ldr	r3, [r3, #16]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	daf2      	bge.n	80085b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80085d0:	2300      	movs	r3, #0
 80085d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	019b      	lsls	r3, r3, #6
 80085d8:	f043 0220 	orr.w	r2, r3, #32
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	3301      	adds	r3, #1
 80085e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	4a08      	ldr	r2, [pc, #32]	; (800860c <USB_FlushTxFifo+0x64>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d901      	bls.n	80085f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e006      	b.n	8008600 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	f003 0320 	and.w	r3, r3, #32
 80085fa:	2b20      	cmp	r3, #32
 80085fc:	d0f0      	beq.n	80085e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	3714      	adds	r7, #20
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr
 800860c:	00030d40 	.word	0x00030d40

08008610 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008610:	b480      	push	{r7}
 8008612:	b085      	sub	sp, #20
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008618:	2300      	movs	r3, #0
 800861a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	3301      	adds	r3, #1
 8008620:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	4a11      	ldr	r2, [pc, #68]	; (800866c <USB_FlushRxFifo+0x5c>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d901      	bls.n	800862e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800862a:	2303      	movs	r3, #3
 800862c:	e018      	b.n	8008660 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	691b      	ldr	r3, [r3, #16]
 8008632:	2b00      	cmp	r3, #0
 8008634:	daf2      	bge.n	800861c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008636:	2300      	movs	r3, #0
 8008638:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2210      	movs	r2, #16
 800863e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	3301      	adds	r3, #1
 8008644:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	4a08      	ldr	r2, [pc, #32]	; (800866c <USB_FlushRxFifo+0x5c>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d901      	bls.n	8008652 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800864e:	2303      	movs	r3, #3
 8008650:	e006      	b.n	8008660 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	f003 0310 	and.w	r3, r3, #16
 800865a:	2b10      	cmp	r3, #16
 800865c:	d0f0      	beq.n	8008640 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	3714      	adds	r7, #20
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr
 800866c:	00030d40 	.word	0x00030d40

08008670 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	460b      	mov	r3, r1
 800867a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	78fb      	ldrb	r3, [r7, #3]
 800868a:	68f9      	ldr	r1, [r7, #12]
 800868c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008690:	4313      	orrs	r3, r2
 8008692:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3714      	adds	r7, #20
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr

080086a2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80086a2:	b480      	push	{r7}
 80086a4:	b087      	sub	sp, #28
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	f003 0306 	and.w	r3, r3, #6
 80086ba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d102      	bne.n	80086c8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80086c2:	2300      	movs	r3, #0
 80086c4:	75fb      	strb	r3, [r7, #23]
 80086c6:	e00a      	b.n	80086de <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2b02      	cmp	r3, #2
 80086cc:	d002      	beq.n	80086d4 <USB_GetDevSpeed+0x32>
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2b06      	cmp	r3, #6
 80086d2:	d102      	bne.n	80086da <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80086d4:	2302      	movs	r3, #2
 80086d6:	75fb      	strb	r3, [r7, #23]
 80086d8:	e001      	b.n	80086de <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80086da:	230f      	movs	r3, #15
 80086dc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80086de:	7dfb      	ldrb	r3, [r7, #23]
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	371c      	adds	r7, #28
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b087      	sub	sp, #28
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80086f6:	2300      	movs	r3, #0
 80086f8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80086fa:	2300      	movs	r3, #0
 80086fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	785b      	ldrb	r3, [r3, #1]
 8008706:	2b01      	cmp	r3, #1
 8008708:	d14a      	bne.n	80087a0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	015a      	lsls	r2, r3, #5
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	4413      	add	r3, r2
 8008714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800871e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008722:	f040 8086 	bne.w	8008832 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	015a      	lsls	r2, r3, #5
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	4413      	add	r3, r2
 8008730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	683a      	ldr	r2, [r7, #0]
 8008738:	7812      	ldrb	r2, [r2, #0]
 800873a:	0151      	lsls	r1, r2, #5
 800873c:	693a      	ldr	r2, [r7, #16]
 800873e:	440a      	add	r2, r1
 8008740:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008744:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008748:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	015a      	lsls	r2, r3, #5
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	4413      	add	r3, r2
 8008754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	683a      	ldr	r2, [r7, #0]
 800875c:	7812      	ldrb	r2, [r2, #0]
 800875e:	0151      	lsls	r1, r2, #5
 8008760:	693a      	ldr	r2, [r7, #16]
 8008762:	440a      	add	r2, r1
 8008764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008768:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800876c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	3301      	adds	r3, #1
 8008772:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f242 7210 	movw	r2, #10000	; 0x2710
 800877a:	4293      	cmp	r3, r2
 800877c:	d902      	bls.n	8008784 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	75fb      	strb	r3, [r7, #23]
          break;
 8008782:	e056      	b.n	8008832 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	015a      	lsls	r2, r3, #5
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	4413      	add	r3, r2
 800878e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008798:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800879c:	d0e7      	beq.n	800876e <USB_EPStopXfer+0x82>
 800879e:	e048      	b.n	8008832 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	015a      	lsls	r2, r3, #5
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	4413      	add	r3, r2
 80087aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087b8:	d13b      	bne.n	8008832 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	015a      	lsls	r2, r3, #5
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	4413      	add	r3, r2
 80087c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	683a      	ldr	r2, [r7, #0]
 80087cc:	7812      	ldrb	r2, [r2, #0]
 80087ce:	0151      	lsls	r1, r2, #5
 80087d0:	693a      	ldr	r2, [r7, #16]
 80087d2:	440a      	add	r2, r1
 80087d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80087dc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	015a      	lsls	r2, r3, #5
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	4413      	add	r3, r2
 80087e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	683a      	ldr	r2, [r7, #0]
 80087f0:	7812      	ldrb	r2, [r2, #0]
 80087f2:	0151      	lsls	r1, r2, #5
 80087f4:	693a      	ldr	r2, [r7, #16]
 80087f6:	440a      	add	r2, r1
 80087f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008800:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	3301      	adds	r3, #1
 8008806:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f242 7210 	movw	r2, #10000	; 0x2710
 800880e:	4293      	cmp	r3, r2
 8008810:	d902      	bls.n	8008818 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	75fb      	strb	r3, [r7, #23]
          break;
 8008816:	e00c      	b.n	8008832 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	015a      	lsls	r2, r3, #5
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	4413      	add	r3, r2
 8008822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800882c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008830:	d0e7      	beq.n	8008802 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008832:	7dfb      	ldrb	r3, [r7, #23]
}
 8008834:	4618      	mov	r0, r3
 8008836:	371c      	adds	r7, #28
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008840:	b480      	push	{r7}
 8008842:	b089      	sub	sp, #36	; 0x24
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	4611      	mov	r1, r2
 800884c:	461a      	mov	r2, r3
 800884e:	460b      	mov	r3, r1
 8008850:	71fb      	strb	r3, [r7, #7]
 8008852:	4613      	mov	r3, r2
 8008854:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800885e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008862:	2b00      	cmp	r3, #0
 8008864:	d123      	bne.n	80088ae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008866:	88bb      	ldrh	r3, [r7, #4]
 8008868:	3303      	adds	r3, #3
 800886a:	089b      	lsrs	r3, r3, #2
 800886c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800886e:	2300      	movs	r3, #0
 8008870:	61bb      	str	r3, [r7, #24]
 8008872:	e018      	b.n	80088a6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008874:	79fb      	ldrb	r3, [r7, #7]
 8008876:	031a      	lsls	r2, r3, #12
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	4413      	add	r3, r2
 800887c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008880:	461a      	mov	r2, r3
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008888:	69fb      	ldr	r3, [r7, #28]
 800888a:	3301      	adds	r3, #1
 800888c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	3301      	adds	r3, #1
 8008892:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	3301      	adds	r3, #1
 8008898:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	3301      	adds	r3, #1
 800889e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	3301      	adds	r3, #1
 80088a4:	61bb      	str	r3, [r7, #24]
 80088a6:	69ba      	ldr	r2, [r7, #24]
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d3e2      	bcc.n	8008874 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3724      	adds	r7, #36	; 0x24
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80088bc:	b480      	push	{r7}
 80088be:	b08b      	sub	sp, #44	; 0x2c
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	4613      	mov	r3, r2
 80088c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80088d2:	88fb      	ldrh	r3, [r7, #6]
 80088d4:	089b      	lsrs	r3, r3, #2
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80088da:	88fb      	ldrh	r3, [r7, #6]
 80088dc:	f003 0303 	and.w	r3, r3, #3
 80088e0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80088e2:	2300      	movs	r3, #0
 80088e4:	623b      	str	r3, [r7, #32]
 80088e6:	e014      	b.n	8008912 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80088e8:	69bb      	ldr	r3, [r7, #24]
 80088ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f2:	601a      	str	r2, [r3, #0]
    pDest++;
 80088f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f6:	3301      	adds	r3, #1
 80088f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80088fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fc:	3301      	adds	r3, #1
 80088fe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008902:	3301      	adds	r3, #1
 8008904:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008908:	3301      	adds	r3, #1
 800890a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800890c:	6a3b      	ldr	r3, [r7, #32]
 800890e:	3301      	adds	r3, #1
 8008910:	623b      	str	r3, [r7, #32]
 8008912:	6a3a      	ldr	r2, [r7, #32]
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	429a      	cmp	r2, r3
 8008918:	d3e6      	bcc.n	80088e8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800891a:	8bfb      	ldrh	r3, [r7, #30]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d01e      	beq.n	800895e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008920:	2300      	movs	r3, #0
 8008922:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008924:	69bb      	ldr	r3, [r7, #24]
 8008926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800892a:	461a      	mov	r2, r3
 800892c:	f107 0310 	add.w	r3, r7, #16
 8008930:	6812      	ldr	r2, [r2, #0]
 8008932:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008934:	693a      	ldr	r2, [r7, #16]
 8008936:	6a3b      	ldr	r3, [r7, #32]
 8008938:	b2db      	uxtb	r3, r3
 800893a:	00db      	lsls	r3, r3, #3
 800893c:	fa22 f303 	lsr.w	r3, r2, r3
 8008940:	b2da      	uxtb	r2, r3
 8008942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008944:	701a      	strb	r2, [r3, #0]
      i++;
 8008946:	6a3b      	ldr	r3, [r7, #32]
 8008948:	3301      	adds	r3, #1
 800894a:	623b      	str	r3, [r7, #32]
      pDest++;
 800894c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894e:	3301      	adds	r3, #1
 8008950:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008952:	8bfb      	ldrh	r3, [r7, #30]
 8008954:	3b01      	subs	r3, #1
 8008956:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008958:	8bfb      	ldrh	r3, [r7, #30]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d1ea      	bne.n	8008934 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800895e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008960:	4618      	mov	r0, r3
 8008962:	372c      	adds	r7, #44	; 0x2c
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008986:	f023 0303 	bic.w	r3, r3, #3
 800898a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	68fa      	ldr	r2, [r7, #12]
 8008996:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800899a:	f043 0302 	orr.w	r3, r3, #2
 800899e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3714      	adds	r7, #20
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr

080089ae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80089ae:	b480      	push	{r7}
 80089b0:	b085      	sub	sp, #20
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	695b      	ldr	r3, [r3, #20]
 80089ba:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	699b      	ldr	r3, [r3, #24]
 80089c0:	68fa      	ldr	r2, [r7, #12]
 80089c2:	4013      	ands	r3, r2
 80089c4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80089c6:	68fb      	ldr	r3, [r7, #12]
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3714      	adds	r7, #20
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089e6:	699b      	ldr	r3, [r3, #24]
 80089e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089f0:	69db      	ldr	r3, [r3, #28]
 80089f2:	68ba      	ldr	r2, [r7, #8]
 80089f4:	4013      	ands	r3, r2
 80089f6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	0c1b      	lsrs	r3, r3, #16
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3714      	adds	r7, #20
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a1a:	699b      	ldr	r3, [r3, #24]
 8008a1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a24:	69db      	ldr	r3, [r3, #28]
 8008a26:	68ba      	ldr	r2, [r7, #8]
 8008a28:	4013      	ands	r3, r2
 8008a2a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	b29b      	uxth	r3, r3
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3714      	adds	r7, #20
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b085      	sub	sp, #20
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	460b      	mov	r3, r1
 8008a46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008a4c:	78fb      	ldrb	r3, [r7, #3]
 8008a4e:	015a      	lsls	r2, r3, #5
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	4413      	add	r3, r2
 8008a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a62:	695b      	ldr	r3, [r3, #20]
 8008a64:	68ba      	ldr	r2, [r7, #8]
 8008a66:	4013      	ands	r3, r2
 8008a68:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008a6a:	68bb      	ldr	r3, [r7, #8]
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3714      	adds	r7, #20
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b087      	sub	sp, #28
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	460b      	mov	r3, r1
 8008a82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a8e:	691b      	ldr	r3, [r3, #16]
 8008a90:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a9a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008a9c:	78fb      	ldrb	r3, [r7, #3]
 8008a9e:	f003 030f 	and.w	r3, r3, #15
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8008aa8:	01db      	lsls	r3, r3, #7
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	693a      	ldr	r2, [r7, #16]
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008ab2:	78fb      	ldrb	r3, [r7, #3]
 8008ab4:	015a      	lsls	r2, r3, #5
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	4413      	add	r3, r2
 8008aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	693a      	ldr	r2, [r7, #16]
 8008ac2:	4013      	ands	r3, r2
 8008ac4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008ac6:	68bb      	ldr	r3, [r7, #8]
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	371c      	adds	r7, #28
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	695b      	ldr	r3, [r3, #20]
 8008ae0:	f003 0301 	and.w	r3, r3, #1
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	68fa      	ldr	r2, [r7, #12]
 8008b06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b0a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008b0e:	f023 0307 	bic.w	r3, r3, #7
 8008b12:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	68fa      	ldr	r2, [r7, #12]
 8008b1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b26:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3714      	adds	r7, #20
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr
	...

08008b38 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b087      	sub	sp, #28
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	460b      	mov	r3, r1
 8008b42:	607a      	str	r2, [r7, #4]
 8008b44:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	333c      	adds	r3, #60	; 0x3c
 8008b4e:	3304      	adds	r3, #4
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	4a26      	ldr	r2, [pc, #152]	; (8008bf0 <USB_EP0_OutStart+0xb8>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d90a      	bls.n	8008b72 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b6c:	d101      	bne.n	8008b72 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	e037      	b.n	8008be2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b78:	461a      	mov	r2, r3
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	697a      	ldr	r2, [r7, #20]
 8008b88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b98:	691b      	ldr	r3, [r3, #16]
 8008b9a:	697a      	ldr	r2, [r7, #20]
 8008b9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ba0:	f043 0318 	orr.w	r3, r3, #24
 8008ba4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bac:	691b      	ldr	r3, [r3, #16]
 8008bae:	697a      	ldr	r2, [r7, #20]
 8008bb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bb4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008bb8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008bba:	7afb      	ldrb	r3, [r7, #11]
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d10f      	bne.n	8008be0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	697a      	ldr	r2, [r7, #20]
 8008bd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bda:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008bde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008be0:	2300      	movs	r3, #0
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	371c      	adds	r7, #28
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr
 8008bee:	bf00      	nop
 8008bf0:	4f54300a 	.word	0x4f54300a

08008bf4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	3301      	adds	r3, #1
 8008c04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	4a13      	ldr	r2, [pc, #76]	; (8008c58 <USB_CoreReset+0x64>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d901      	bls.n	8008c12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008c0e:	2303      	movs	r3, #3
 8008c10:	e01b      	b.n	8008c4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	691b      	ldr	r3, [r3, #16]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	daf2      	bge.n	8008c00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	691b      	ldr	r3, [r3, #16]
 8008c22:	f043 0201 	orr.w	r2, r3, #1
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	4a09      	ldr	r2, [pc, #36]	; (8008c58 <USB_CoreReset+0x64>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d901      	bls.n	8008c3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008c38:	2303      	movs	r3, #3
 8008c3a:	e006      	b.n	8008c4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	691b      	ldr	r3, [r3, #16]
 8008c40:	f003 0301 	and.w	r3, r3, #1
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d0f0      	beq.n	8008c2a <USB_CoreReset+0x36>

  return HAL_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3714      	adds	r7, #20
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop
 8008c58:	00030d40 	.word	0x00030d40

08008c5c <__libc_init_array>:
 8008c5c:	b570      	push	{r4, r5, r6, lr}
 8008c5e:	4d0d      	ldr	r5, [pc, #52]	; (8008c94 <__libc_init_array+0x38>)
 8008c60:	2600      	movs	r6, #0
 8008c62:	4c0d      	ldr	r4, [pc, #52]	; (8008c98 <__libc_init_array+0x3c>)
 8008c64:	1b64      	subs	r4, r4, r5
 8008c66:	10a4      	asrs	r4, r4, #2
 8008c68:	42a6      	cmp	r6, r4
 8008c6a:	d109      	bne.n	8008c80 <__libc_init_array+0x24>
 8008c6c:	4d0b      	ldr	r5, [pc, #44]	; (8008c9c <__libc_init_array+0x40>)
 8008c6e:	2600      	movs	r6, #0
 8008c70:	4c0b      	ldr	r4, [pc, #44]	; (8008ca0 <__libc_init_array+0x44>)
 8008c72:	f000 f81f 	bl	8008cb4 <_init>
 8008c76:	1b64      	subs	r4, r4, r5
 8008c78:	10a4      	asrs	r4, r4, #2
 8008c7a:	42a6      	cmp	r6, r4
 8008c7c:	d105      	bne.n	8008c8a <__libc_init_array+0x2e>
 8008c7e:	bd70      	pop	{r4, r5, r6, pc}
 8008c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c84:	3601      	adds	r6, #1
 8008c86:	4798      	blx	r3
 8008c88:	e7ee      	b.n	8008c68 <__libc_init_array+0xc>
 8008c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c8e:	3601      	adds	r6, #1
 8008c90:	4798      	blx	r3
 8008c92:	e7f2      	b.n	8008c7a <__libc_init_array+0x1e>
 8008c94:	08008dd4 	.word	0x08008dd4
 8008c98:	08008dd4 	.word	0x08008dd4
 8008c9c:	08008dd4 	.word	0x08008dd4
 8008ca0:	08008dd8 	.word	0x08008dd8

08008ca4 <memset>:
 8008ca4:	4402      	add	r2, r0
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d100      	bne.n	8008cae <memset+0xa>
 8008cac:	4770      	bx	lr
 8008cae:	f803 1b01 	strb.w	r1, [r3], #1
 8008cb2:	e7f9      	b.n	8008ca8 <memset+0x4>

08008cb4 <_init>:
 8008cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cb6:	bf00      	nop
 8008cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cba:	bc08      	pop	{r3}
 8008cbc:	469e      	mov	lr, r3
 8008cbe:	4770      	bx	lr

08008cc0 <_fini>:
 8008cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cc2:	bf00      	nop
 8008cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cc6:	bc08      	pop	{r3}
 8008cc8:	469e      	mov	lr, r3
 8008cca:	4770      	bx	lr
