
W5300_BUS_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008900  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f7  08008b38  08008b38  00018b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008e30  08008e30  00018e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008e38  08008e38  00018e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008e3c  08008e3c  00018e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000c8  20000000  08008e40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000eec  200000c8  08008f08  000200c8  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  20000fb4  08008f08  00020fb4  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 10 .debug_info   000266f3  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000048f3  00000000  00000000  000467f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0001cb03  00000000  00000000  0004b0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001180  00000000  00000000  00067be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00002ef8  00000000  00000000  00068d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000386f9  00000000  00000000  0006bc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000274bc  00000000  00000000  000a4359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00162f3f  00000000  00000000  000cb815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0022e754  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003e08  00000000  00000000  0022e7a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200000c8 	.word	0x200000c8
 8000254:	00000000 	.word	0x00000000
 8000258:	08008b20 	.word	0x08008b20

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200000cc 	.word	0x200000cc
 8000274:	08008b20 	.word	0x08008b20

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b982 	b.w	8000594 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002ae:	4604      	mov	r4, r0
 80002b0:	460f      	mov	r7, r1
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d148      	bne.n	8000348 <__udivmoddi4+0xa0>
 80002b6:	428a      	cmp	r2, r1
 80002b8:	4694      	mov	ip, r2
 80002ba:	d961      	bls.n	8000380 <__udivmoddi4+0xd8>
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	b143      	cbz	r3, 80002d4 <__udivmoddi4+0x2c>
 80002c2:	f1c3 0120 	rsb	r1, r3, #32
 80002c6:	409f      	lsls	r7, r3
 80002c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002cc:	409c      	lsls	r4, r3
 80002ce:	fa20 f101 	lsr.w	r1, r0, r1
 80002d2:	430f      	orrs	r7, r1
 80002d4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002d8:	fa1f fe8c 	uxth.w	lr, ip
 80002dc:	0c22      	lsrs	r2, r4, #16
 80002de:	fbb7 f6f1 	udiv	r6, r7, r1
 80002e2:	fb01 7716 	mls	r7, r1, r6, r7
 80002e6:	fb06 f00e 	mul.w	r0, r6, lr
 80002ea:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ee:	4290      	cmp	r0, r2
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0x5c>
 80002f2:	eb1c 0202 	adds.w	r2, ip, r2
 80002f6:	f106 37ff 	add.w	r7, r6, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x5a>
 80002fc:	4290      	cmp	r0, r2
 80002fe:	f200 8137 	bhi.w	8000570 <__udivmoddi4+0x2c8>
 8000302:	463e      	mov	r6, r7
 8000304:	1a12      	subs	r2, r2, r0
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb2 f0f1 	udiv	r0, r2, r1
 800030c:	fb01 2210 	mls	r2, r1, r0, r2
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000318:	45a6      	cmp	lr, r4
 800031a:	d908      	bls.n	800032e <__udivmoddi4+0x86>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 32ff 	add.w	r2, r0, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x84>
 8000326:	45a6      	cmp	lr, r4
 8000328:	f200 811c 	bhi.w	8000564 <__udivmoddi4+0x2bc>
 800032c:	4610      	mov	r0, r2
 800032e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000332:	eba4 040e 	sub.w	r4, r4, lr
 8000336:	2600      	movs	r6, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0x9a>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c5 4300 	strd	r4, r3, [r5]
 8000342:	4631      	mov	r1, r6
 8000344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000348:	428b      	cmp	r3, r1
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0xb8>
 800034c:	2d00      	cmp	r5, #0
 800034e:	f000 80fd 	beq.w	800054c <__udivmoddi4+0x2a4>
 8000352:	2600      	movs	r6, #0
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	4630      	mov	r0, r6
 800035a:	4631      	mov	r1, r6
 800035c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000360:	fab3 f683 	clz	r6, r3
 8000364:	2e00      	cmp	r6, #0
 8000366:	d14b      	bne.n	8000400 <__udivmoddi4+0x158>
 8000368:	428b      	cmp	r3, r1
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4282      	cmp	r2, r0
 8000370:	f240 80ef 	bls.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4630      	mov	r0, r6
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0e3      	beq.n	8000342 <__udivmoddi4+0x9a>
 800037a:	e9c5 4700 	strd	r4, r7, [r5]
 800037e:	e7e0      	b.n	8000342 <__udivmoddi4+0x9a>
 8000380:	b902      	cbnz	r2, 8000384 <__udivmoddi4+0xdc>
 8000382:	deff      	udf	#255	; 0xff
 8000384:	fab2 f382 	clz	r3, r2
 8000388:	2b00      	cmp	r3, #0
 800038a:	f040 809d 	bne.w	80004c8 <__udivmoddi4+0x220>
 800038e:	1a89      	subs	r1, r1, r2
 8000390:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000394:	b297      	uxth	r7, r2
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f2fe 	udiv	r2, r1, lr
 800039e:	fb0e 1112 	mls	r1, lr, r2, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb07 f002 	mul.w	r0, r7, r2
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f102 38ff 	add.w	r8, r2, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4288      	cmp	r0, r1
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80cf 	beq.w	800056a <__udivmoddi4+0x2c2>
 80003cc:	4642      	mov	r2, r8
 80003ce:	1a09      	subs	r1, r1, r0
 80003d0:	b2a4      	uxth	r4, r4
 80003d2:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003da:	fb00 f707 	mul.w	r7, r0, r7
 80003de:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e2:	42a7      	cmp	r7, r4
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x150>
 80003e6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x14e>
 80003f0:	42a7      	cmp	r7, r4
 80003f2:	f200 80b4 	bhi.w	800055e <__udivmoddi4+0x2b6>
 80003f6:	4608      	mov	r0, r1
 80003f8:	1be4      	subs	r4, r4, r7
 80003fa:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003fe:	e79b      	b.n	8000338 <__udivmoddi4+0x90>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa01 f406 	lsl.w	r4, r1, r6
 800040a:	fa22 fc07 	lsr.w	ip, r2, r7
 800040e:	40f9      	lsrs	r1, r7
 8000410:	40b2      	lsls	r2, r6
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa20 f307 	lsr.w	r3, r0, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	431c      	orrs	r4, r3
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	0c20      	lsrs	r0, r4, #16
 800042a:	fbb1 f8f9 	udiv	r8, r1, r9
 800042e:	fb09 1118 	mls	r1, r9, r8, r1
 8000432:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000436:	fb08 f00e 	mul.w	r0, r8, lr
 800043a:	4288      	cmp	r0, r1
 800043c:	d90f      	bls.n	800045e <__udivmoddi4+0x1b6>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f108 3aff 	add.w	sl, r8, #4294967295
 8000446:	bf2c      	ite	cs
 8000448:	f04f 0b01 	movcs.w	fp, #1
 800044c:	f04f 0b00 	movcc.w	fp, #0
 8000450:	4288      	cmp	r0, r1
 8000452:	d903      	bls.n	800045c <__udivmoddi4+0x1b4>
 8000454:	f1bb 0f00 	cmp.w	fp, #0
 8000458:	f000 808d 	beq.w	8000576 <__udivmoddi4+0x2ce>
 800045c:	46d0      	mov	r8, sl
 800045e:	1a09      	subs	r1, r1, r0
 8000460:	b2a4      	uxth	r4, r4
 8000462:	fbb1 f0f9 	udiv	r0, r1, r9
 8000466:	fb09 1110 	mls	r1, r9, r0, r1
 800046a:	fb00 fe0e 	mul.w	lr, r0, lr
 800046e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000472:	458e      	cmp	lr, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1de>
 8000476:	eb1c 0101 	adds.w	r1, ip, r1
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d201      	bcs.n	8000484 <__udivmoddi4+0x1dc>
 8000480:	458e      	cmp	lr, r1
 8000482:	d87f      	bhi.n	8000584 <__udivmoddi4+0x2dc>
 8000484:	4620      	mov	r0, r4
 8000486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	fba0 9802 	umull	r9, r8, r0, r2
 8000492:	4541      	cmp	r1, r8
 8000494:	464c      	mov	r4, r9
 8000496:	46c6      	mov	lr, r8
 8000498:	d302      	bcc.n	80004a0 <__udivmoddi4+0x1f8>
 800049a:	d106      	bne.n	80004aa <__udivmoddi4+0x202>
 800049c:	454b      	cmp	r3, r9
 800049e:	d204      	bcs.n	80004aa <__udivmoddi4+0x202>
 80004a0:	3801      	subs	r0, #1
 80004a2:	ebb9 0402 	subs.w	r4, r9, r2
 80004a6:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004aa:	2d00      	cmp	r5, #0
 80004ac:	d070      	beq.n	8000590 <__udivmoddi4+0x2e8>
 80004ae:	1b1a      	subs	r2, r3, r4
 80004b0:	eb61 010e 	sbc.w	r1, r1, lr
 80004b4:	fa22 f306 	lsr.w	r3, r2, r6
 80004b8:	fa01 f707 	lsl.w	r7, r1, r7
 80004bc:	40f1      	lsrs	r1, r6
 80004be:	2600      	movs	r6, #0
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	e73c      	b.n	8000342 <__udivmoddi4+0x9a>
 80004c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004cc:	f1c3 0020 	rsb	r0, r3, #32
 80004d0:	fa01 f203 	lsl.w	r2, r1, r3
 80004d4:	fa21 f600 	lsr.w	r6, r1, r0
 80004d8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004dc:	fa24 f100 	lsr.w	r1, r4, r0
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	409c      	lsls	r4, r3
 80004e6:	4311      	orrs	r1, r2
 80004e8:	fbb6 f0fe 	udiv	r0, r6, lr
 80004ec:	0c0a      	lsrs	r2, r1, #16
 80004ee:	fb0e 6610 	mls	r6, lr, r0, r6
 80004f2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004f6:	fb00 f607 	mul.w	r6, r0, r7
 80004fa:	4296      	cmp	r6, r2
 80004fc:	d90e      	bls.n	800051c <__udivmoddi4+0x274>
 80004fe:	eb1c 0202 	adds.w	r2, ip, r2
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	bf2c      	ite	cs
 8000508:	f04f 0901 	movcs.w	r9, #1
 800050c:	f04f 0900 	movcc.w	r9, #0
 8000510:	4296      	cmp	r6, r2
 8000512:	d902      	bls.n	800051a <__udivmoddi4+0x272>
 8000514:	f1b9 0f00 	cmp.w	r9, #0
 8000518:	d031      	beq.n	800057e <__udivmoddi4+0x2d6>
 800051a:	4640      	mov	r0, r8
 800051c:	1b92      	subs	r2, r2, r6
 800051e:	b289      	uxth	r1, r1
 8000520:	fbb2 f6fe 	udiv	r6, r2, lr
 8000524:	fb0e 2216 	mls	r2, lr, r6, r2
 8000528:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800052c:	fb06 f207 	mul.w	r2, r6, r7
 8000530:	428a      	cmp	r2, r1
 8000532:	d907      	bls.n	8000544 <__udivmoddi4+0x29c>
 8000534:	eb1c 0101 	adds.w	r1, ip, r1
 8000538:	f106 38ff 	add.w	r8, r6, #4294967295
 800053c:	d201      	bcs.n	8000542 <__udivmoddi4+0x29a>
 800053e:	428a      	cmp	r2, r1
 8000540:	d823      	bhi.n	800058a <__udivmoddi4+0x2e2>
 8000542:	4646      	mov	r6, r8
 8000544:	1a89      	subs	r1, r1, r2
 8000546:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800054a:	e725      	b.n	8000398 <__udivmoddi4+0xf0>
 800054c:	462e      	mov	r6, r5
 800054e:	4628      	mov	r0, r5
 8000550:	e6f7      	b.n	8000342 <__udivmoddi4+0x9a>
 8000552:	1a84      	subs	r4, r0, r2
 8000554:	eb61 0303 	sbc.w	r3, r1, r3
 8000558:	2001      	movs	r0, #1
 800055a:	461f      	mov	r7, r3
 800055c:	e70b      	b.n	8000376 <__udivmoddi4+0xce>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e749      	b.n	80003f8 <__udivmoddi4+0x150>
 8000564:	4464      	add	r4, ip
 8000566:	3802      	subs	r0, #2
 8000568:	e6e1      	b.n	800032e <__udivmoddi4+0x86>
 800056a:	3a02      	subs	r2, #2
 800056c:	4461      	add	r1, ip
 800056e:	e72e      	b.n	80003ce <__udivmoddi4+0x126>
 8000570:	3e02      	subs	r6, #2
 8000572:	4462      	add	r2, ip
 8000574:	e6c6      	b.n	8000304 <__udivmoddi4+0x5c>
 8000576:	f1a8 0802 	sub.w	r8, r8, #2
 800057a:	4461      	add	r1, ip
 800057c:	e76f      	b.n	800045e <__udivmoddi4+0x1b6>
 800057e:	3802      	subs	r0, #2
 8000580:	4462      	add	r2, ip
 8000582:	e7cb      	b.n	800051c <__udivmoddi4+0x274>
 8000584:	3802      	subs	r0, #2
 8000586:	4461      	add	r1, ip
 8000588:	e77d      	b.n	8000486 <__udivmoddi4+0x1de>
 800058a:	3e02      	subs	r6, #2
 800058c:	4461      	add	r1, ip
 800058e:	e7d9      	b.n	8000544 <__udivmoddi4+0x29c>
 8000590:	462e      	mov	r6, r5
 8000592:	e6d6      	b.n	8000342 <__udivmoddi4+0x9a>

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <W5300_write>:
	HAL_Delay(100);
}

void W5300_write(uint32_t addr, iodata_t wd)
{
	_W5300_DATA(addr) = wd;
 8000598:	0040      	lsls	r0, r0, #1
 800059a:	f100 40c0 	add.w	r0, r0, #1610612736	; 0x60000000
 800059e:	8001      	strh	r1, [r0, #0]
}
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <W5300_read>:

iodata_t W5300_read(uint32_t addr)
{
	return _W5300_DATA(addr);
 80005a4:	0040      	lsls	r0, r0, #1
 80005a6:	f100 40c0 	add.w	r0, r0, #1610612736	; 0x60000000
 80005aa:	8800      	ldrh	r0, [r0, #0]
}
 80005ac:	b280      	uxth	r0, r0
 80005ae:	4770      	bx	lr

080005b0 <W5300CsEnable>:
void W5300CsEnable(void)
{

}
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <W5300CsDisable>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <_write>:
{
 80005b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for(int i=0; i<len; i++)
 80005ba:	1e17      	subs	r7, r2, #0
 80005bc:	dd0c      	ble.n	80005d8 <_write+0x20>
 80005be:	460c      	mov	r4, r1
		HAL_UART_Transmit(&huart1, (uint8_t *)&str[i], 1, 0xFFFF);
 80005c0:	4e06      	ldr	r6, [pc, #24]	; (80005dc <_write+0x24>)
 80005c2:	19cd      	adds	r5, r1, r7
 80005c4:	2201      	movs	r2, #1
 80005c6:	4621      	mov	r1, r4
 80005c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
	for(int i=0; i<len; i++)
 80005cc:	4414      	add	r4, r2
		HAL_UART_Transmit(&huart1, (uint8_t *)&str[i], 1, 0xFFFF);
 80005ce:	4630      	mov	r0, r6
 80005d0:	f005 fa82 	bl	8005ad8 <HAL_UART_Transmit>
	for(int i=0; i<len; i++)
 80005d4:	42ac      	cmp	r4, r5
 80005d6:	d1f5      	bne.n	80005c4 <_write+0xc>
}
 80005d8:	4638      	mov	r0, r7
 80005da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005dc:	20000ed8 	.word	0x20000ed8

080005e0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80005e0:	b510      	push	{r4, lr}
     HAL_UART_Receive_IT(&huart1, rxData, 1);
 80005e2:	4c07      	ldr	r4, [pc, #28]	; (8000600 <HAL_UART_RxCpltCallback+0x20>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	4620      	mov	r0, r4
 80005e8:	4906      	ldr	r1, [pc, #24]	; (8000604 <HAL_UART_RxCpltCallback+0x24>)
 80005ea:	f004 fdaf 	bl	800514c <HAL_UART_Receive_IT>
     HAL_UART_Transmit(&huart1, rxData, 1, 1000);
 80005ee:	4620      	mov	r0, r4
}
 80005f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     HAL_UART_Transmit(&huart1, rxData, 1, 1000);
 80005f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f8:	2201      	movs	r2, #1
 80005fa:	4902      	ldr	r1, [pc, #8]	; (8000604 <HAL_UART_RxCpltCallback+0x24>)
 80005fc:	f005 ba6c 	b.w	8005ad8 <HAL_UART_Transmit>
 8000600:	20000ed8 	.word	0x20000ed8
 8000604:	20000f68 	.word	0x20000f68

08000608 <print_network_information>:
void W5300CsDisable(void)
{

}
void print_network_information(void)
{
 8000608:	b510      	push	{r4, lr}
    wizchip_getnetinfo(&gWIZNETINFO);
 800060a:	4c19      	ldr	r4, [pc, #100]	; (8000670 <print_network_information+0x68>)
{
 800060c:	b084      	sub	sp, #16
    wizchip_getnetinfo(&gWIZNETINFO);
 800060e:	4620      	mov	r0, r4
 8000610:	f007 f98a 	bl	8007928 <wizchip_getnetinfo>
    printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 8000614:	7961      	ldrb	r1, [r4, #5]
 8000616:	7922      	ldrb	r2, [r4, #4]
 8000618:	78e0      	ldrb	r0, [r4, #3]
 800061a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800061e:	78a3      	ldrb	r3, [r4, #2]
 8000620:	7862      	ldrb	r2, [r4, #1]
 8000622:	7821      	ldrb	r1, [r4, #0]
 8000624:	9000      	str	r0, [sp, #0]
 8000626:	4813      	ldr	r0, [pc, #76]	; (8000674 <print_network_information+0x6c>)
 8000628:	f007 fb48 	bl	8007cbc <iprintf>
    printf("IP address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 800062c:	7a60      	ldrb	r0, [r4, #9]
 800062e:	7a23      	ldrb	r3, [r4, #8]
 8000630:	79e2      	ldrb	r2, [r4, #7]
 8000632:	79a1      	ldrb	r1, [r4, #6]
 8000634:	9000      	str	r0, [sp, #0]
 8000636:	4810      	ldr	r0, [pc, #64]	; (8000678 <print_network_information+0x70>)
 8000638:	f007 fb40 	bl	8007cbc <iprintf>
    printf("SM Mask    : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 800063c:	7b60      	ldrb	r0, [r4, #13]
 800063e:	7b23      	ldrb	r3, [r4, #12]
 8000640:	7ae2      	ldrb	r2, [r4, #11]
 8000642:	7aa1      	ldrb	r1, [r4, #10]
 8000644:	9000      	str	r0, [sp, #0]
 8000646:	480d      	ldr	r0, [pc, #52]	; (800067c <print_network_information+0x74>)
 8000648:	f007 fb38 	bl	8007cbc <iprintf>
    printf("Gate way   : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 800064c:	7c60      	ldrb	r0, [r4, #17]
 800064e:	7c23      	ldrb	r3, [r4, #16]
 8000650:	7be2      	ldrb	r2, [r4, #15]
 8000652:	7ba1      	ldrb	r1, [r4, #14]
 8000654:	9000      	str	r0, [sp, #0]
 8000656:	480a      	ldr	r0, [pc, #40]	; (8000680 <print_network_information+0x78>)
 8000658:	f007 fb30 	bl	8007cbc <iprintf>
    printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 800065c:	7d60      	ldrb	r0, [r4, #21]
 800065e:	7d23      	ldrb	r3, [r4, #20]
 8000660:	9000      	str	r0, [sp, #0]
 8000662:	7ce2      	ldrb	r2, [r4, #19]
 8000664:	7ca1      	ldrb	r1, [r4, #18]
 8000666:	4807      	ldr	r0, [pc, #28]	; (8000684 <print_network_information+0x7c>)
 8000668:	f007 fb28 	bl	8007cbc <iprintf>
}
 800066c:	b004      	add	sp, #16
 800066e:	bd10      	pop	{r4, pc}
 8000670:	20000000 	.word	0x20000000
 8000674:	08008b38 	.word	0x08008b38
 8000678:	08008b68 	.word	0x08008b68
 800067c:	08008b84 	.word	0x08008b84
 8000680:	08008ba0 	.word	0x08008ba0
 8000684:	08008bbc 	.word	0x08008bbc

08000688 <_InitW5300>:

void _InitW5300(void)
{
 8000688:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(RESET_W5300_GPIO_Port, RESET_W5300_Pin, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2180      	movs	r1, #128	; 0x80
 800068e:	4817      	ldr	r0, [pc, #92]	; (80006ec <_InitW5300+0x64>)
 8000690:	f001 f84a 	bl	8001728 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000694:	200a      	movs	r0, #10
 8000696:	f000 fceb 	bl	8001070 <HAL_Delay>
	HAL_GPIO_WritePin(RESET_W5300_GPIO_Port, RESET_W5300_Pin, GPIO_PIN_SET);
 800069a:	2201      	movs	r2, #1
 800069c:	2180      	movs	r1, #128	; 0x80
 800069e:	4813      	ldr	r0, [pc, #76]	; (80006ec <_InitW5300+0x64>)
 80006a0:	f001 f842 	bl	8001728 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80006a4:	2064      	movs	r0, #100	; 0x64
 80006a6:	f000 fce3 	bl	8001070 <HAL_Delay>
	unsigned int tmpaddr[4];

	Reset_W5300();
	reg_wizchip_bus_cbfunc(W5300_read, W5300_write);
 80006aa:	4911      	ldr	r1, [pc, #68]	; (80006f0 <_InitW5300+0x68>)
 80006ac:	4811      	ldr	r0, [pc, #68]	; (80006f4 <_InitW5300+0x6c>)
 80006ae:	f006 ff73 	bl	8007598 <reg_wizchip_bus_cbfunc>
	reg_wizchip_cs_cbfunc(W5300CsEnable, W5300CsDisable);
 80006b2:	4911      	ldr	r1, [pc, #68]	; (80006f8 <_InitW5300+0x70>)
 80006b4:	4811      	ldr	r0, [pc, #68]	; (80006fc <_InitW5300+0x74>)
 80006b6:	f006 ff5d 	bl	8007574 <reg_wizchip_cs_cbfunc>
	printf("getMR() = %04X\r\n", getMR());
 80006ba:	2000      	movs	r0, #0
 80006bc:	f006 f982 	bl	80069c4 <WIZCHIP_READ>
 80006c0:	4601      	mov	r1, r0
 80006c2:	480f      	ldr	r0, [pc, #60]	; (8000700 <_InitW5300+0x78>)
 80006c4:	f007 fafa 	bl	8007cbc <iprintf>

	if (ctlwizchip(CW_INIT_WIZCHIP, (void*)wiznet_memsize) == -1)
 80006c8:	2001      	movs	r0, #1
 80006ca:	490e      	ldr	r1, [pc, #56]	; (8000704 <_InitW5300+0x7c>)
 80006cc:	f007 f82c 	bl	8007728 <ctlwizchip>
 80006d0:	3001      	adds	r0, #1
 80006d2:	d007      	beq.n	80006e4 <_InitW5300+0x5c>
	{
		printf("W5300 memory initialization failed\r\n");
	}

	ctlnetwork(CN_SET_NETINFO, (void *)&gWIZNETINFO);
 80006d4:	2000      	movs	r0, #0
 80006d6:	490c      	ldr	r1, [pc, #48]	; (8000708 <_InitW5300+0x80>)
 80006d8:	f007 f99c 	bl	8007a14 <ctlnetwork>
	print_network_information();
}
 80006dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	print_network_information();
 80006e0:	f7ff bf92 	b.w	8000608 <print_network_information>
		printf("W5300 memory initialization failed\r\n");
 80006e4:	4809      	ldr	r0, [pc, #36]	; (800070c <_InitW5300+0x84>)
 80006e6:	f007 fb6f 	bl	8007dc8 <puts>
 80006ea:	e7f3      	b.n	80006d4 <_InitW5300+0x4c>
 80006ec:	42021400 	.word	0x42021400
 80006f0:	08000599 	.word	0x08000599
 80006f4:	080005a5 	.word	0x080005a5
 80006f8:	080005b5 	.word	0x080005b5
 80006fc:	080005b1 	.word	0x080005b1
 8000700:	08008bd8 	.word	0x08008bd8
 8000704:	20000018 	.word	0x20000018
 8000708:	20000000 	.word	0x20000000
 800070c:	08008bec 	.word	0x08008bec

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b530      	push	{r4, r5, lr}
 8000712:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000714:	2260      	movs	r2, #96	; 0x60
 8000716:	2100      	movs	r1, #0
 8000718:	a806      	add	r0, sp, #24
 800071a:	f007 f9e7 	bl	8007aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071e:	2300      	movs	r3, #0

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000720:	f44f 3040 	mov.w	r0, #196608	; 0x30000
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	e9cd 3300 	strd	r3, r3, [sp]
 8000728:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800072c:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000730:	f001 fe70 	bl	8002414 <HAL_PWREx_ControlVoltageScaling>
 8000734:	b108      	cbz	r0, 800073a <SystemClock_Config+0x2a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000736:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000738:	e7fe      	b.n	8000738 <SystemClock_Config+0x28>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073a:	f44f 7280 	mov.w	r2, #256	; 0x100
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800073e:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000742:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000744:	2500      	movs	r5, #0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000746:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000748:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074a:	2401      	movs	r4, #1
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800074c:	2201      	movs	r2, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800074e:	2132      	movs	r1, #50	; 0x32
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000750:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000754:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
 8000758:	2202      	movs	r2, #2
 800075a:	2402      	movs	r4, #2
 800075c:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800075e:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000760:	2301      	movs	r3, #1
 8000762:	e9cd 451a 	strd	r4, r5, [sp, #104]	; 0x68
 8000766:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800076a:	2400      	movs	r4, #0
 800076c:	2250      	movs	r2, #80	; 0x50
 800076e:	2302      	movs	r3, #2
 8000770:	2500      	movs	r5, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000772:	9106      	str	r1, [sp, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000774:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000778:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077a:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 800077e:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000782:	910f      	str	r1, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f002 f932 	bl	80029ec <HAL_RCC_OscConfig>
 8000788:	b108      	cbz	r0, 800078e <SystemClock_Config+0x7e>
 800078a:	b672      	cpsid	i
  while (1)
 800078c:	e7fe      	b.n	800078c <SystemClock_Config+0x7c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078e:	221f      	movs	r2, #31
 8000790:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000792:	4668      	mov	r0, sp
 8000794:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000796:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800079a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800079e:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007a2:	f001 ffbf 	bl	8002724 <HAL_RCC_ClockConfig>
 80007a6:	b108      	cbz	r0, 80007ac <SystemClock_Config+0x9c>
 80007a8:	b672      	cpsid	i
  while (1)
 80007aa:	e7fe      	b.n	80007aa <SystemClock_Config+0x9a>
}
 80007ac:	b01f      	add	sp, #124	; 0x7c
 80007ae:	bd30      	pop	{r4, r5, pc}

080007b0 <main>:
{
 80007b0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80007b4:	b093      	sub	sp, #76	; 0x4c
  HAL_Init();
 80007b6:	f000 fc1f 	bl	8000ff8 <HAL_Init>
  SystemClock_Config();
 80007ba:	f7ff ffa9 	bl	8000710 <SystemClock_Config>
  HAL_PWREx_EnableVddIO2();
 80007be:	f001 feb7 	bl	8002530 <HAL_PWREx_EnableVddIO2>
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80007c2:	2002      	movs	r0, #2
 80007c4:	f001 fe70 	bl	80024a8 <HAL_PWREx_ConfigSupply>
 80007c8:	b108      	cbz	r0, 80007ce <main+0x1e>
 80007ca:	b672      	cpsid	i
  while (1)
 80007cc:	e7fe      	b.n	80007cc <main+0x1c>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 80007d2:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d6:	4dc0      	ldr	r5, [pc, #768]	; (8000ad8 <main+0x328>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	900e      	str	r0, [sp, #56]	; 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80007de:	4604      	mov	r4, r0
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 80007e8:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 80007ec:	4622      	mov	r2, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	9303      	str	r3, [sp, #12]
 80007f4:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007f6:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 80007fa:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007fc:	f043 0320 	orr.w	r3, r3, #32
 8000800:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 8000804:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 8000808:	48b4      	ldr	r0, [pc, #720]	; (8000adc <main+0x32c>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800080a:	f003 0320 	and.w	r3, r3, #32
 800080e:	9304      	str	r3, [sp, #16]
 8000810:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000812:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000816:	f04f 0a80 	mov.w	sl, #128	; 0x80
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800081a:	f043 0310 	orr.w	r3, r3, #16
 800081e:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 8000822:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000826:	f04f 0b01 	mov.w	fp, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800082a:	f003 0310 	and.w	r3, r3, #16
 800082e:	9305      	str	r3, [sp, #20]
 8000830:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000836:	ed9f 8ba4 	vldr	d8, [pc, #656]	; 8000ac8 <main+0x318>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	f043 0302 	orr.w	r3, r3, #2
 800083e:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 8000842:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000846:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000848:	f003 0302 	and.w	r3, r3, #2
 800084c:	9306      	str	r3, [sp, #24]
 800084e:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000850:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000854:	2702      	movs	r7, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000856:	f043 0308 	orr.w	r3, r3, #8
 800085a:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 800085e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  hadc1.Init.NbrOfConversion = 1;
 8000862:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000866:	f003 0308 	and.w	r3, r3, #8
 800086a:	9307      	str	r3, [sp, #28]
 800086c:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800086e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8000872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000876:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 800087a:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800087e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000882:	9308      	str	r3, [sp, #32]
 8000884:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 8000892:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	9309      	str	r3, [sp, #36]	; 0x24
 800089c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 800089e:	f000 ff43 	bl	8001728 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80008a2:	4622      	mov	r2, r4
 80008a4:	2104      	movs	r1, #4
 80008a6:	488e      	ldr	r0, [pc, #568]	; (8000ae0 <main+0x330>)
 80008a8:	f000 ff3e 	bl	8001728 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80008ac:	4622      	mov	r2, r4
 80008ae:	2180      	movs	r1, #128	; 0x80
 80008b0:	488c      	ldr	r0, [pc, #560]	; (8000ae4 <main+0x334>)
 80008b2:	f000 ff39 	bl	8001728 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80008b6:	4622      	mov	r2, r4
 80008b8:	21a0      	movs	r1, #160	; 0xa0
 80008ba:	488b      	ldr	r0, [pc, #556]	; (8000ae8 <main+0x338>)
 80008bc:	f000 ff34 	bl	8001728 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80008c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008c4:	4b89      	ldr	r3, [pc, #548]	; (8000aec <main+0x33c>)
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80008c6:	4887      	ldr	r0, [pc, #540]	; (8000ae4 <main+0x334>)
 80008c8:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80008ca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f000 fe28 	bl	8001524 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008d4:	4881      	ldr	r0, [pc, #516]	; (8000adc <main+0x32c>)
 80008d6:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008d8:	ed8d 8b0c 	vstr	d8, [sp, #48]	; 0x30
 80008dc:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008e0:	f000 fe20 	bl	8001524 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80008e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008e8:	2300      	movs	r3, #0
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80008ea:	487f      	ldr	r0, [pc, #508]	; (8000ae8 <main+0x338>)
 80008ec:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80008ee:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f000 fe16 	bl	8001524 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80008f8:	2204      	movs	r2, #4
 80008fa:	2301      	movs	r3, #1
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80008fc:	4878      	ldr	r0, [pc, #480]	; (8000ae0 <main+0x330>)
 80008fe:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000900:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000904:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000908:	f000 fe0c 	bl	8001524 <HAL_GPIO_Init>
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800090c:	4875      	ldr	r0, [pc, #468]	; (8000ae4 <main+0x334>)
 800090e:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000910:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8000914:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000918:	f000 fe04 	bl	8001524 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 800091c:	2220      	movs	r2, #32
 800091e:	2301      	movs	r3, #1
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8000920:	4871      	ldr	r0, [pc, #452]	; (8000ae8 <main+0x338>)
 8000922:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8000924:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000928:	ed8d 8b0c 	vstr	d8, [sp, #48]	; 0x30
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 800092c:	f000 fdfa 	bl	8001524 <HAL_GPIO_Init>
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000930:	486d      	ldr	r0, [pc, #436]	; (8000ae8 <main+0x338>)
 8000932:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000934:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8000938:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 800093c:	f000 fdf2 	bl	8001524 <HAL_GPIO_Init>
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000940:	2304      	movs	r3, #4
  hadc1.Instance = ADC1;
 8000942:	486b      	ldr	r0, [pc, #428]	; (8000af0 <main+0x340>)
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000944:	6183      	str	r3, [r0, #24]
  hadc1.Instance = ADC1;
 8000946:	4b6b      	ldr	r3, [pc, #428]	; (8000af4 <main+0x344>)
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000948:	e9c0 4401 	strd	r4, r4, [r0, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800094c:	e9c0 4403 	strd	r4, r4, [r0, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000950:	7704      	strb	r4, [r0, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000952:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000956:	f880 402c 	strb.w	r4, [r0, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800095a:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800095e:	6684      	str	r4, [r0, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000960:	6444      	str	r4, [r0, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000962:	6504      	str	r4, [r0, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000964:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000966:	f880 4054 	strb.w	r4, [r0, #84]	; 0x54
  hadc1.Init.NbrOfConversion = 1;
 800096a:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
  hadc1.Instance = ADC1;
 800096e:	6003      	str	r3, [r0, #0]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000970:	f000 fb90 	bl	8001094 <HAL_ADC_Init>
 8000974:	4604      	mov	r4, r0
 8000976:	b108      	cbz	r0, 800097c <main+0x1cc>
 8000978:	b672      	cpsid	i
  while (1)
 800097a:	e7fe      	b.n	800097a <main+0x1ca>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800097c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 8000980:	2703      	movs	r7, #3
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000982:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
 8000986:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800098a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098e:	a90a      	add	r1, sp, #40	; 0x28
 8000990:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000994:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000998:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 800099c:	4852      	ldr	r0, [pc, #328]	; (8000ae8 <main+0x338>)
 800099e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80009a2:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80009a4:	9b00      	ldr	r3, [sp, #0]
  SET_BIT(RCC->AHB2ENR1, Periphs);
 80009a6:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80009aa:	f043 0302 	orr.w	r3, r3, #2
 80009ae:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 80009b2:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80009bc:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(RCC->AHB2ENR1, Periphs);
 80009be:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80009c2:	f043 0301 	orr.w	r3, r3, #1
 80009c6:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 80009ca:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80009ce:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80009d8:	9b02      	ldr	r3, [sp, #8]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009da:	f005 fb31 	bl	8006040 <LL_GPIO_Init>
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	4846      	ldr	r0, [pc, #280]	; (8000af8 <main+0x348>)
 80009e0:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80009e2:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009e6:	940e      	str	r4, [sp, #56]	; 0x38
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e8:	f005 fb2a 	bl	8006040 <LL_GPIO_Init>
  huart1.Init.BaudRate = 115200;
 80009ec:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 80009f0:	4d42      	ldr	r5, [pc, #264]	; (8000afc <main+0x34c>)
  huart1.Init.BaudRate = 115200;
 80009f2:	606b      	str	r3, [r5, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009f4:	230c      	movs	r3, #12
 80009f6:	616b      	str	r3, [r5, #20]
  huart1.Instance = USART1;
 80009f8:	4b41      	ldr	r3, [pc, #260]	; (8000b00 <main+0x350>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009fa:	4628      	mov	r0, r5
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009fc:	e9c5 4402 	strd	r4, r4, [r5, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a00:	e9c5 4406 	strd	r4, r4, [r5, #24]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a04:	e9c5 4408 	strd	r4, r4, [r5, #32]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a08:	612c      	str	r4, [r5, #16]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a0a:	62ac      	str	r4, [r5, #40]	; 0x28
  huart1.Instance = USART1;
 8000a0c:	602b      	str	r3, [r5, #0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a0e:	f005 f937 	bl	8005c80 <HAL_UART_Init>
 8000a12:	b108      	cbz	r0, 8000a18 <main+0x268>
 8000a14:	b672      	cpsid	i
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <main+0x266>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a18:	4601      	mov	r1, r0
 8000a1a:	4628      	mov	r0, r5
 8000a1c:	f005 f9ba 	bl	8005d94 <HAL_UARTEx_SetTxFifoThreshold>
 8000a20:	4601      	mov	r1, r0
 8000a22:	b108      	cbz	r0, 8000a28 <main+0x278>
 8000a24:	b672      	cpsid	i
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <main+0x276>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a28:	4628      	mov	r0, r5
 8000a2a:	f005 f9f5 	bl	8005e18 <HAL_UARTEx_SetRxFifoThreshold>
 8000a2e:	b108      	cbz	r0, 8000a34 <main+0x284>
 8000a30:	b672      	cpsid	i
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <main+0x282>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a34:	4628      	mov	r0, r5
 8000a36:	f005 f98f 	bl	8005d58 <HAL_UARTEx_DisableFifoMode>
 8000a3a:	b108      	cbz	r0, 8000a40 <main+0x290>
 8000a3c:	b672      	cpsid	i
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <main+0x28e>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a40:	4b30      	ldr	r3, [pc, #192]	; (8000b04 <main+0x354>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a42:	2206      	movs	r2, #6
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a44:	2100      	movs	r1, #0
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a46:	6318      	str	r0, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a48:	2002      	movs	r0, #2
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a4a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a4c:	4a2e      	ldr	r2, [pc, #184]	; (8000b08 <main+0x358>)
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a4e:	e9c3 0106 	strd	r0, r1, [r3, #24]
 8000a52:	ed83 8b08 	vstr	d8, [r3, #32]
 8000a56:	ed83 8b0a 	vstr	d8, [r3, #40]	; 0x28
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a5a:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a5c:	601a      	str	r2, [r3, #0]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a5e:	f000 fe69 	bl	8001734 <HAL_PCD_Init>
 8000a62:	4602      	mov	r2, r0
 8000a64:	b108      	cbz	r0, 8000a6a <main+0x2ba>
 8000a66:	b672      	cpsid	i
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <main+0x2b8>
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000a6a:	2310      	movs	r3, #16
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000a6c:	4827      	ldr	r0, [pc, #156]	; (8000b0c <main+0x35c>)
  Timing.AddressSetupTime = 15;
 8000a6e:	260f      	movs	r6, #15
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000a70:	6143      	str	r3, [r0, #20]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  Timing.AddressSetupTime = 15;
 8000a76:	270f      	movs	r7, #15
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000a78:	6243      	str	r3, [r0, #36]	; 0x24
  Timing.DataSetupTime = 255;
 8000a7a:	23ff      	movs	r3, #255	; 0xff
  Timing.AddressSetupTime = 15;
 8000a7c:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  Timing.BusTurnAroundDuration = 15;
 8000a80:	260f      	movs	r6, #15
 8000a82:	2710      	movs	r7, #16
  Timing.DataSetupTime = 255;
 8000a84:	930c      	str	r3, [sp, #48]	; 0x30
  Timing.DataLatency = 17;
 8000a86:	2311      	movs	r3, #17
  Timing.BusTurnAroundDuration = 15;
 8000a88:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000a8c:	a710      	add	r7, pc, #64	; (adr r7, 8000ad0 <main+0x320>)
 8000a8e:	e9d7 6700 	ldrd	r6, r7, [r7]
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000a92:	a90a      	add	r1, sp, #40	; 0x28
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000a94:	e9c0 6700 	strd	r6, r7, [r0]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000a98:	e9c0 2202 	strd	r2, r2, [r0, #8]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000a9c:	e9c0 2206 	strd	r2, r2, [r0, #24]
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000aa0:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000aa4:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000aa8:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000aac:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000ab0:	920d      	str	r2, [sp, #52]	; 0x34
 8000ab2:	9211      	str	r2, [sp, #68]	; 0x44
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000ab4:	6102      	str	r2, [r0, #16]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000ab6:	6202      	str	r2, [r0, #32]
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 8000ab8:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
  Timing.DataLatency = 17;
 8000abc:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000abe:	f004 fb0f 	bl	80050e0 <HAL_SRAM_Init>
 8000ac2:	b328      	cbz	r0, 8000b10 <main+0x360>
 8000ac4:	b672      	cpsid	i
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <main+0x316>
	...
 8000ad0:	420d0400 	.word	0x420d0400
 8000ad4:	420d0504 	.word	0x420d0504
 8000ad8:	46020c00 	.word	0x46020c00
 8000adc:	42021400 	.word	0x42021400
 8000ae0:	42021800 	.word	0x42021800
 8000ae4:	42020800 	.word	0x42020800
 8000ae8:	42020400 	.word	0x42020400
 8000aec:	10210000 	.word	0x10210000
 8000af0:	200008e4 	.word	0x200008e4
 8000af4:	42028000 	.word	0x42028000
 8000af8:	42020000 	.word	0x42020000
 8000afc:	20000ed8 	.word	0x20000ed8
 8000b00:	40013800 	.word	0x40013800
 8000b04:	20000970 	.word	0x20000970
 8000b08:	42040000 	.word	0x42040000
 8000b0c:	20000e80 	.word	0x20000e80
  printf("Hello! W5300 BUS loopback System \r\n");
 8000b10:	4808      	ldr	r0, [pc, #32]	; (8000b34 <main+0x384>)
 8000b12:	f007 f959 	bl	8007dc8 <puts>
  HAL_UART_Receive_IT(&huart1, rxData, 1);
 8000b16:	4642      	mov	r2, r8
 8000b18:	4907      	ldr	r1, [pc, #28]	; (8000b38 <main+0x388>)
 8000b1a:	4628      	mov	r0, r5
 8000b1c:	f004 fb16 	bl	800514c <HAL_UART_Receive_IT>
  _InitW5300();
 8000b20:	f7ff fdb2 	bl	8000688 <_InitW5300>
	  loopback_tcps(0, ethBuf0, 3000);
 8000b24:	4c05      	ldr	r4, [pc, #20]	; (8000b3c <main+0x38c>)
 8000b26:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000b2a:	4621      	mov	r1, r4
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f005 fe87 	bl	8006840 <loopback_tcps>
  while (1)
 8000b32:	e7f8      	b.n	8000b26 <main+0x376>
 8000b34:	08008c10 	.word	0x08008c10
 8000b38:	20000f68 	.word	0x20000f68
 8000b3c:	200000e4 	.word	0x200000e4

08000b40 <Error_Handler>:
 8000b40:	b672      	cpsid	i
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <Error_Handler+0x2>

08000b44 <HAL_MspInit>:

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000b44:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b46:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <HAL_MspInit+0x20>)
{
 8000b48:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8000b4e:	4302      	orrs	r2, r0
 8000b50:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8000b54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b58:	4003      	ands	r3, r0
 8000b5a:	9301      	str	r3, [sp, #4]
 8000b5c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5e:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000b60:	f000 bc68 	b.w	8001434 <HAL_NVIC_SetPriorityGrouping>
 8000b64:	46020c00 	.word	0x46020c00

08000b68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b68:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	2100      	movs	r1, #0
{
 8000b6c:	4604      	mov	r4, r0
 8000b6e:	b0ba      	sub	sp, #232	; 0xe8
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b70:	22c8      	movs	r2, #200	; 0xc8
 8000b72:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8000b78:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8000b7c:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b7e:	f006 ffb5 	bl	8007aec <memset>
  if(hadc->Instance==ADC1)
 8000b82:	4b21      	ldr	r3, [pc, #132]	; (8000c08 <HAL_ADC_MspInit+0xa0>)
 8000b84:	6822      	ldr	r2, [r4, #0]
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d001      	beq.n	8000b8e <HAL_ADC_MspInit+0x26>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b8a:	b03a      	add	sp, #232	; 0xe8
 8000b8c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000b8e:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 8000bf8 <HAL_ADC_MspInit+0x90>
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8000b92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b96:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000b98:	ed8d 7b08 	vstr	d7, [sp, #32]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8000b9c:	9332      	str	r3, [sp, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b9e:	f002 ff99 	bl	8003ad4 <HAL_RCCEx_PeriphCLKConfig>
 8000ba2:	bb20      	cbnz	r0, 8000bee <HAL_ADC_MspInit+0x86>
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000ba4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8000c00 <HAL_ADC_MspInit+0x98>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2400      	movs	r4, #0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000baa:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <HAL_ADC_MspInit+0xa4>)
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000bac:	4818      	ldr	r0, [pc, #96]	; (8000c10 <HAL_ADC_MspInit+0xa8>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bae:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000bb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8000bbc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8000bc0:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8000bc4:	9200      	str	r2, [sp, #0]
 8000bc6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8000bcc:	f042 0204 	orr.w	r2, r2, #4
 8000bd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8000bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000bd8:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bdc:	f003 0304 	and.w	r3, r3, #4
 8000be0:	9301      	str	r3, [sp, #4]
 8000be2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f000 fc9d 	bl	8001524 <HAL_GPIO_Init>
}
 8000bea:	b03a      	add	sp, #232	; 0xe8
 8000bec:	bd10      	pop	{r4, pc}
      Error_Handler();
 8000bee:	f7ff ffa7 	bl	8000b40 <Error_Handler>
 8000bf2:	e7d7      	b.n	8000ba4 <HAL_ADC_MspInit+0x3c>
 8000bf4:	f3af 8000 	nop.w
 8000bf8:	00008000 	.word	0x00008000
 8000bfc:	00000000 	.word	0x00000000
 8000c00:	00000004 	.word	0x00000004
 8000c04:	00000003 	.word	0x00000003
 8000c08:	42028000 	.word	0x42028000
 8000c0c:	46020c00 	.word	0x46020c00
 8000c10:	42020800 	.word	0x42020800
 8000c14:	00000000 	.word	0x00000000

08000c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c18:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1a:	2100      	movs	r1, #0
{
 8000c1c:	4604      	mov	r4, r0
 8000c1e:	b0ba      	sub	sp, #232	; 0xe8
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c20:	22c8      	movs	r2, #200	; 0xc8
 8000c22:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8000c28:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8000c2c:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c2e:	f006 ff5d 	bl	8007aec <memset>
  if(huart->Instance==USART1)
 8000c32:	4b21      	ldr	r3, [pc, #132]	; (8000cb8 <HAL_UART_MspInit+0xa0>)
 8000c34:	6822      	ldr	r2, [r4, #0]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d001      	beq.n	8000c3e <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c3a:	b03a      	add	sp, #232	; 0xe8
 8000c3c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c3e:	2201      	movs	r2, #1
 8000c40:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c42:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c44:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c48:	f002 ff44 	bl	8003ad4 <HAL_RCCEx_PeriphCLKConfig>
 8000c4c:	bb40      	cbnz	r0, 8000ca0 <HAL_UART_MspInit+0x88>
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8000c4e:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8000ca8 <HAL_UART_MspInit+0x90>
 8000c52:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8000cb0 <HAL_UART_MspInit+0x98>
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c56:	2407      	movs	r4, #7
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c58:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <HAL_UART_MspInit+0xa4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	4819      	ldr	r0, [pc, #100]	; (8000cc0 <HAL_UART_MspInit+0xa8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c5c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c60:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c66:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8000c6a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8000c6e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000c72:	9200      	str	r2, [sp, #0]
 8000c74:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8000c7a:	f042 0201 	orr.w	r2, r2, #1
 8000c7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8000c82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8000c86:	ed8d 6b02 	vstr	d6, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8000c90:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c94:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c96:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c98:	f000 fc44 	bl	8001524 <HAL_GPIO_Init>
}
 8000c9c:	b03a      	add	sp, #232	; 0xe8
 8000c9e:	bd10      	pop	{r4, pc}
      Error_Handler();
 8000ca0:	f7ff ff4e 	bl	8000b40 <Error_Handler>
 8000ca4:	e7d3      	b.n	8000c4e <HAL_UART_MspInit+0x36>
 8000ca6:	bf00      	nop
 8000ca8:	00000600 	.word	0x00000600
 8000cac:	00000002 	.word	0x00000002
 8000cb0:	00000002 	.word	0x00000002
 8000cb4:	00000003 	.word	0x00000003
 8000cb8:	40013800 	.word	0x40013800
 8000cbc:	46020c00 	.word	0x46020c00
 8000cc0:	42020000 	.word	0x42020000
 8000cc4:	00000000 	.word	0x00000000

08000cc8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000cc8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cca:	2100      	movs	r1, #0
{
 8000ccc:	4604      	mov	r4, r0
 8000cce:	b0bc      	sub	sp, #240	; 0xf0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cd0:	22c8      	movs	r2, #200	; 0xc8
 8000cd2:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8000cd8:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8000cdc:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cde:	f006 ff05 	bl	8007aec <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000ce2:	4b33      	ldr	r3, [pc, #204]	; (8000db0 <HAL_PCD_MspInit+0xe8>)
 8000ce4:	6822      	ldr	r2, [r4, #0]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d001      	beq.n	8000cee <HAL_PCD_MspInit+0x26>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000cea:	b03c      	add	sp, #240	; 0xf0
 8000cec:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000cee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000cf2:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cf4:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000cf6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cfa:	f002 feeb 	bl	8003ad4 <HAL_RCCEx_PeriphCLKConfig>
 8000cfe:	2800      	cmp	r0, #0
 8000d00:	d14b      	bne.n	8000d9a <HAL_PCD_MspInit+0xd2>
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000d02:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8000da0 <HAL_PCD_MspInit+0xd8>
 8000d06:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8000da8 <HAL_PCD_MspInit+0xe0>
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000d0a:	220a      	movs	r2, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0c:	4c29      	ldr	r4, [pc, #164]	; (8000db4 <HAL_PCD_MspInit+0xec>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	482a      	ldr	r0, [pc, #168]	; (8000db8 <HAL_PCD_MspInit+0xf0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d10:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d14:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8000d1e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000d22:	ed8d 6b04 	vstr	d6, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	9301      	str	r3, [sp, #4]
 8000d2c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000d2e:	ed8d 7b06 	vstr	d7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000d32:	9208      	str	r2, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d34:	f000 fbf6 	bl	8001524 <HAL_GPIO_Init>
    __HAL_RCC_USB_CLK_ENABLE();
 8000d38:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8000d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d40:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8000d44:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8000d48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d4c:	9302      	str	r3, [sp, #8]
 8000d4e:	9b02      	ldr	r3, [sp, #8]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d50:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000d54:	075b      	lsls	r3, r3, #29
 8000d56:	d41d      	bmi.n	8000d94 <HAL_PCD_MspInit+0xcc>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d58:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000d5c:	f043 0304 	orr.w	r3, r3, #4
 8000d60:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8000d64:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000d68:	f003 0304 	and.w	r3, r3, #4
 8000d6c:	9303      	str	r3, [sp, #12]
 8000d6e:	9b03      	ldr	r3, [sp, #12]
      HAL_PWREx_EnableVddUSB();
 8000d70:	f001 fbd6 	bl	8002520 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d74:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000d78:	f023 0304 	bic.w	r3, r3, #4
 8000d7c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2049      	movs	r0, #73	; 0x49
 8000d84:	4611      	mov	r1, r2
 8000d86:	f000 fb67 	bl	8001458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000d8a:	2049      	movs	r0, #73	; 0x49
 8000d8c:	f000 fba2 	bl	80014d4 <HAL_NVIC_EnableIRQ>
}
 8000d90:	b03c      	add	sp, #240	; 0xf0
 8000d92:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 8000d94:	f001 fbc4 	bl	8002520 <HAL_PWREx_EnableVddUSB>
 8000d98:	e7f2      	b.n	8000d80 <HAL_PCD_MspInit+0xb8>
      Error_Handler();
 8000d9a:	f7ff fed1 	bl	8000b40 <Error_Handler>
 8000d9e:	e7b0      	b.n	8000d02 <HAL_PCD_MspInit+0x3a>
 8000da0:	00001800 	.word	0x00001800
 8000da4:	00000002 	.word	0x00000002
 8000da8:	00000000 	.word	0x00000000
 8000dac:	00000003 	.word	0x00000003
 8000db0:	42040000 	.word	0x42040000
 8000db4:	46020c00 	.word	0x46020c00
 8000db8:	42020000 	.word	0x42020000
 8000dbc:	00000000 	.word	0x00000000

08000dc0 <HAL_SRAM_MspInit>:

static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000dc0:	2100      	movs	r1, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000dc2:	b5d0      	push	{r4, r6, r7, lr}
  if (FMC_Initialized) {
 8000dc4:	4b20      	ldr	r3, [pc, #128]	; (8000e48 <HAL_SRAM_MspInit+0x88>)
void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000dc6:	b088      	sub	sp, #32
  if (FMC_Initialized) {
 8000dc8:	681a      	ldr	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000dca:	9104      	str	r1, [sp, #16]
  if (FMC_Initialized) {
 8000dcc:	2a00      	cmp	r2, #0
 8000dce:	d132      	bne.n	8000e36 <HAL_SRAM_MspInit+0x76>
  FMC_Initialized = 1;
 8000dd0:	2701      	movs	r7, #1
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dd2:	240c      	movs	r4, #12
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000dd4:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 8000e40 <HAL_SRAM_MspInit+0x80>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	2603      	movs	r6, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8000dda:	4a1c      	ldr	r2, [pc, #112]	; (8000e4c <HAL_SRAM_MspInit+0x8c>)
  FMC_Initialized = 1;
 8000ddc:	601f      	str	r7, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 8000dde:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000de2:	481b      	ldr	r0, [pc, #108]	; (8000e50 <HAL_SRAM_MspInit+0x90>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8000de4:	433b      	orrs	r3, r7
 8000de6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000dea:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dee:	a902      	add	r1, sp, #8
  __HAL_RCC_FMC_CLK_ENABLE();
 8000df0:	403b      	ands	r3, r7
 8000df2:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000df4:	ed8d 7b02 	vstr	d7, [sp, #8]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000df8:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8000dfa:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfc:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dfe:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000e00:	2600      	movs	r6, #0
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e02:	f000 fb8f 	bl	8001524 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000e06:	f64f 7280 	movw	r2, #65408	; 0xff80
 8000e0a:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e0c:	4811      	ldr	r0, [pc, #68]	; (8000e54 <HAL_SRAM_MspInit+0x94>)
 8000e0e:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000e10:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000e14:	e9cd 6704 	strd	r6, r7, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e18:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e1a:	f000 fb83 	bl	8001524 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000e1e:	f24c 72b3 	movw	r2, #51123	; 0xc7b3
 8000e22:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e24:	480c      	ldr	r0, [pc, #48]	; (8000e58 <HAL_SRAM_MspInit+0x98>)
 8000e26:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000e28:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8000e2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e30:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e32:	f000 fb77 	bl	8001524 <HAL_GPIO_Init>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000e36:	b008      	add	sp, #32
 8000e38:	bdd0      	pop	{r4, r6, r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	f3af 8000 	nop.w
 8000e40:	0000f03f 	.word	0x0000f03f
 8000e44:	00000002 	.word	0x00000002
 8000e48:	20000f6c 	.word	0x20000f6c
 8000e4c:	46020c00 	.word	0x46020c00
 8000e50:	42021400 	.word	0x42021400
 8000e54:	42021000 	.word	0x42021000
 8000e58:	42020c00 	.word	0x42020c00

08000e5c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <NMI_Handler>
 8000e5e:	bf00      	nop

08000e60 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <HardFault_Handler>
 8000e62:	bf00      	nop

08000e64 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <MemManage_Handler>
 8000e66:	bf00      	nop

08000e68 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <BusFault_Handler>
 8000e6a:	bf00      	nop

08000e6c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <UsageFault_Handler>
 8000e6e:	bf00      	nop

08000e70 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop

08000e74 <DebugMon_Handler>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <PendSV_Handler>:
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e7c:	f000 b8e6 	b.w	800104c <HAL_IncTick>

08000e80 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e80:	4801      	ldr	r0, [pc, #4]	; (8000e88 <OTG_FS_IRQHandler+0x8>)
 8000e82:	f000 bd03 	b.w	800188c <HAL_PCD_IRQHandler>
 8000e86:	bf00      	nop
 8000e88:	20000970 	.word	0x20000970

08000e8c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e8c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8e:	1e16      	subs	r6, r2, #0
 8000e90:	dd07      	ble.n	8000ea2 <_read+0x16>
 8000e92:	460c      	mov	r4, r1
 8000e94:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8000e96:	e000      	b.n	8000e9a <_read+0xe>
 8000e98:	bf00      	nop
 8000e9a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9e:	42a5      	cmp	r5, r4
 8000ea0:	d1f9      	bne.n	8000e96 <_read+0xa>
	}

return len;
}
 8000ea2:	4630      	mov	r0, r6
 8000ea4:	bd70      	pop	{r4, r5, r6, pc}
 8000ea6:	bf00      	nop

08000ea8 <_close>:
}

int _close(int file)
{
	return -1;
}
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000eb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8000eb4:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8000eb6:	604b      	str	r3, [r1, #4]
}
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	4770      	bx	lr

08000ec0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	4770      	bx	lr

08000ec4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec4:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec6:	480d      	ldr	r0, [pc, #52]	; (8000efc <_sbrk+0x38>)
{
 8000ec8:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eca:	490d      	ldr	r1, [pc, #52]	; (8000f00 <_sbrk+0x3c>)
 8000ecc:	4c0d      	ldr	r4, [pc, #52]	; (8000f04 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8000ece:	6802      	ldr	r2, [r0, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed0:	1b09      	subs	r1, r1, r4
  if (NULL == __sbrk_heap_end)
 8000ed2:	b12a      	cbz	r2, 8000ee0 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ed4:	4413      	add	r3, r2
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d808      	bhi.n	8000eec <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000eda:	6003      	str	r3, [r0, #0]

  return (void *)prev_heap_end;
}
 8000edc:	4610      	mov	r0, r2
 8000ede:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000ee0:	4c09      	ldr	r4, [pc, #36]	; (8000f08 <_sbrk+0x44>)
 8000ee2:	4622      	mov	r2, r4
  if (__sbrk_heap_end + incr > max_heap)
 8000ee4:	4413      	add	r3, r2
 8000ee6:	428b      	cmp	r3, r1
    __sbrk_heap_end = &_end;
 8000ee8:	6004      	str	r4, [r0, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8000eea:	d9f6      	bls.n	8000eda <_sbrk+0x16>
    errno = ENOMEM;
 8000eec:	f006 fdd4 	bl	8007a98 <__errno>
 8000ef0:	230c      	movs	r3, #12
    return (void *)-1;
 8000ef2:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8000ef6:	6003      	str	r3, [r0, #0]
}
 8000ef8:	4610      	mov	r0, r2
 8000efa:	bd10      	pop	{r4, pc}
 8000efc:	20000f70 	.word	0x20000f70
 8000f00:	200c0000 	.word	0x200c0000
 8000f04:	00000400 	.word	0x00000400
 8000f08:	20000fb8 	.word	0x20000fb8

08000f0c <SystemInit>:
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000f0c:	2200      	movs	r2, #0
  RCC->CR = RCC_CR_MSISON;
 8000f0e:	2101      	movs	r1, #1
{
 8000f10:	b410      	push	{r4}

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f12:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f16:	480e      	ldr	r0, [pc, #56]	; (8000f50 <SystemInit+0x44>)
 8000f18:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8000f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f20:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  RCC->CR = RCC_CR_MSISON;
 8000f24:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <SystemInit+0x48>)
 8000f26:	6019      	str	r1, [r3, #0]
  RCC->CFGR1 = 0U;
 8000f28:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000f2a:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000f2c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000f2e:	6819      	ldr	r1, [r3, #0]
 8000f30:	f021 51a8 	bic.w	r1, r1, #352321536	; 0x15000000
 8000f34:	f421 2110 	bic.w	r1, r1, #589824	; 0x90000
 8000f38:	6019      	str	r1, [r3, #0]
  RCC->PLL1CFGR = 0U;
 8000f3a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000f3c:	6819      	ldr	r1, [r3, #0]
 8000f3e:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000f42:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0U;
 8000f44:	651a      	str	r2, [r3, #80]	; 0x50
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f46:	6084      	str	r4, [r0, #8]
  #endif
}
 8000f48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000ed00 	.word	0xe000ed00
 8000f54:	46020c00 	.word	0x46020c00

08000f58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000f58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f90 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f5c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f5e:	e003      	b.n	8000f68 <LoopCopyDataInit>

08000f60 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f62:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f64:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f66:	3104      	adds	r1, #4

08000f68 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f68:	480b      	ldr	r0, [pc, #44]	; (8000f98 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f6c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f6e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f70:	d3f6      	bcc.n	8000f60 <CopyDataInit>
	ldr	r2, =_sbss
 8000f72:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f74:	e002      	b.n	8000f7c <LoopFillZerobss>

08000f76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f76:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f78:	f842 3b04 	str.w	r3, [r2], #4

08000f7c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <LoopForever+0x16>)
	cmp	r2, r3
 8000f7e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f80:	d3f9      	bcc.n	8000f76 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f82:	f7ff ffc3 	bl	8000f0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f86:	f006 fd8d 	bl	8007aa4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f8a:	f7ff fc11 	bl	80007b0 <main>

08000f8e <LoopForever>:

LoopForever:
    b LoopForever
 8000f8e:	e7fe      	b.n	8000f8e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000f90:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000f94:	08008e40 	.word	0x08008e40
	ldr	r0, =_sdata
 8000f98:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f9c:	200000c8 	.word	0x200000c8
	ldr	r2, =_sbss
 8000fa0:	200000c8 	.word	0x200000c8
	ldr	r3, = _ebss
 8000fa4:	20000fb4 	.word	0x20000fb4

08000fa8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fa8:	e7fe      	b.n	8000fa8 <ADC1_IRQHandler>
	...

08000fac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fac:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <HAL_InitTick+0x40>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b90b      	cbnz	r3, 8000fb8 <HAL_InitTick+0xc>
  {
    return HAL_ERROR;
 8000fb4:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000fb6:	bd38      	pop	{r3, r4, r5, pc}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000fb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc0:	490b      	ldr	r1, [pc, #44]	; (8000ff0 <HAL_InitTick+0x44>)
 8000fc2:	4605      	mov	r5, r0
 8000fc4:	6808      	ldr	r0, [r1, #0]
 8000fc6:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fca:	f000 fa91 	bl	80014f0 <HAL_SYSTICK_Config>
 8000fce:	4604      	mov	r4, r0
 8000fd0:	2800      	cmp	r0, #0
 8000fd2:	d1ef      	bne.n	8000fb4 <HAL_InitTick+0x8>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd4:	2d0f      	cmp	r5, #15
 8000fd6:	d8ed      	bhi.n	8000fb4 <HAL_InitTick+0x8>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd8:	4602      	mov	r2, r0
 8000fda:	4629      	mov	r1, r5
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f000 fa3a 	bl	8001458 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe4:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <HAL_InitTick+0x48>)
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	601d      	str	r5, [r3, #0]
}
 8000fea:	bd38      	pop	{r3, r4, r5, pc}
 8000fec:	2000002c 	.word	0x2000002c
 8000ff0:	20000028 	.word	0x20000028
 8000ff4:	20000030 	.word	0x20000030

08000ff8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff8:	4a10      	ldr	r2, [pc, #64]	; (800103c <HAL_Init+0x44>)
{
 8000ffa:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ffc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffe:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001004:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001006:	f000 fa15 	bl	8001434 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800100a:	f001 faf7 	bl	80025fc <HAL_RCC_GetSysClockFreq>
 800100e:	4603      	mov	r3, r0
 8001010:	4a0b      	ldr	r2, [pc, #44]	; (8001040 <HAL_Init+0x48>)
 8001012:	480c      	ldr	r0, [pc, #48]	; (8001044 <HAL_Init+0x4c>)
 8001014:	6a12      	ldr	r2, [r2, #32]
 8001016:	490c      	ldr	r1, [pc, #48]	; (8001048 <HAL_Init+0x50>)
 8001018:	f002 020f 	and.w	r2, r2, #15
 800101c:	5c82      	ldrb	r2, [r0, r2]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800101e:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001020:	40d3      	lsrs	r3, r2
 8001022:	600b      	str	r3, [r1, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001024:	f7ff ffc2 	bl	8000fac <HAL_InitTick>
 8001028:	b110      	cbz	r0, 8001030 <HAL_Init+0x38>
    return HAL_ERROR;
 800102a:	2401      	movs	r4, #1
}
 800102c:	4620      	mov	r0, r4
 800102e:	bd10      	pop	{r4, pc}
 8001030:	4604      	mov	r4, r0
  HAL_MspInit();
 8001032:	f7ff fd87 	bl	8000b44 <HAL_MspInit>
}
 8001036:	4620      	mov	r0, r4
 8001038:	bd10      	pop	{r4, pc}
 800103a:	bf00      	nop
 800103c:	40022000 	.word	0x40022000
 8001040:	46020c00 	.word	0x46020c00
 8001044:	08008c34 	.word	0x08008c34
 8001048:	20000028 	.word	0x20000028

0800104c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800104c:	4a03      	ldr	r2, [pc, #12]	; (800105c <HAL_IncTick+0x10>)
 800104e:	4b04      	ldr	r3, [pc, #16]	; (8001060 <HAL_IncTick+0x14>)
 8001050:	6811      	ldr	r1, [r2, #0]
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	440b      	add	r3, r1
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000f74 	.word	0x20000f74
 8001060:	2000002c 	.word	0x2000002c

08001064 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001064:	4b01      	ldr	r3, [pc, #4]	; (800106c <HAL_GetTick+0x8>)
 8001066:	6818      	ldr	r0, [r3, #0]
}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	20000f74 	.word	0x20000f74

08001070 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001070:	b538      	push	{r3, r4, r5, lr}
 8001072:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001074:	f7ff fff6 	bl	8001064 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001078:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800107a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800107c:	d002      	beq.n	8001084 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800107e:	4b04      	ldr	r3, [pc, #16]	; (8001090 <HAL_Delay+0x20>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001084:	f7ff ffee 	bl	8001064 <HAL_GetTick>
 8001088:	1b43      	subs	r3, r0, r5
 800108a:	42a3      	cmp	r3, r4
 800108c:	d3fa      	bcc.n	8001084 <HAL_Delay+0x14>
  {
  }
}
 800108e:	bd38      	pop	{r3, r4, r5, pc}
 8001090:	2000002c 	.word	0x2000002c

08001094 <HAL_ADC_Init>:
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001094:	2800      	cmp	r0, #0
 8001096:	f000 80a4 	beq.w	80011e2 <HAL_ADC_Init+0x14e>
{
 800109a:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800109c:	6f85      	ldr	r5, [r0, #120]	; 0x78
 800109e:	4604      	mov	r4, r0
{
 80010a0:	b083      	sub	sp, #12
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010a2:	2d00      	cmp	r5, #0
 80010a4:	f000 8086 	beq.w	80011b4 <HAL_ADC_Init+0x120>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80010a8:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80010aa:	6893      	ldr	r3, [r2, #8]
 80010ac:	0098      	lsls	r0, r3, #2
 80010ae:	d505      	bpl.n	80010bc <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80010b0:	6893      	ldr	r3, [r2, #8]
 80010b2:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80010b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010ba:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80010bc:	6893      	ldr	r3, [r2, #8]
 80010be:	00d9      	lsls	r1, r3, #3
 80010c0:	d419      	bmi.n	80010f6 <HAL_ADC_Init+0x62>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80010c2:	4b61      	ldr	r3, [pc, #388]	; (8001248 <HAL_ADC_Init+0x1b4>)
 80010c4:	4861      	ldr	r0, [pc, #388]	; (800124c <HAL_ADC_Init+0x1b8>)
 80010c6:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 80010c8:	6891      	ldr	r1, [r2, #8]
 80010ca:	099b      	lsrs	r3, r3, #6
 80010cc:	fba0 0303 	umull	r0, r3, r0, r3
 80010d0:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 80010d4:	099b      	lsrs	r3, r3, #6
 80010d6:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80010da:	3301      	adds	r3, #1
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80010e2:	6091      	str	r1, [r2, #8]
 80010e4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80010e6:	9b01      	ldr	r3, [sp, #4]
 80010e8:	b12b      	cbz	r3, 80010f6 <HAL_ADC_Init+0x62>
    {
      wait_loop_index--;
 80010ea:	9b01      	ldr	r3, [sp, #4]
 80010ec:	3b01      	subs	r3, #1
 80010ee:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80010f0:	9b01      	ldr	r3, [sp, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f9      	bne.n	80010ea <HAL_ADC_Init+0x56>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80010f6:	6893      	ldr	r3, [r2, #8]
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	d44e      	bmi.n	800119a <HAL_ADC_Init+0x106>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);

    tmp_hal_status = HAL_ERROR;
 80010fc:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010fe:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8001100:	f043 0310 	orr.w	r3, r3, #16
 8001104:	67a3      	str	r3, [r4, #120]	; 0x78
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001106:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001108:	4303      	orrs	r3, r0
 800110a:	67e3      	str	r3, [r4, #124]	; 0x7c
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800110c:	6893      	ldr	r3, [r2, #8]
 800110e:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001112:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8001114:	d147      	bne.n	80011a6 <HAL_ADC_Init+0x112>
 8001116:	06df      	lsls	r7, r3, #27
 8001118:	d445      	bmi.n	80011a6 <HAL_ADC_Init+0x112>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800111a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800111c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	67a3      	str	r3, [r4, #120]	; 0x78
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001126:	6893      	ldr	r3, [r2, #8]
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001128:	f013 0f01 	tst.w	r3, #1
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800112c:	4b48      	ldr	r3, [pc, #288]	; (8001250 <HAL_ADC_Init+0x1bc>)
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800112e:	d047      	beq.n	80011c0 <HAL_ADC_Init+0x12c>
        MODIFY_REG(ADC4_COMMON->CCR,
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001130:	429a      	cmp	r2, r3
 8001132:	f000 80af 	beq.w	8001294 <HAL_ADC_Init+0x200>
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
                    hadc->Init.Overrun                                                    |
 8001136:	68a5      	ldr	r5, [r4, #8]
 8001138:	6c63      	ldr	r3, [r4, #68]	; 0x44
                    hadc->Init.Resolution                                                 |
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800113a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
                    hadc->Init.Overrun                                                    |
 800113e:	432b      	orrs	r3, r5
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001140:	f894 5024 	ldrb.w	r5, [r4, #36]	; 0x24
                   hadc->Init.DataAlign                                            |
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001144:	2901      	cmp	r1, #1
                    hadc->Init.Overrun                                                    |
 8001146:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 800114a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800114e:	f000 8134 	beq.w	80013ba <HAL_ADC_Init+0x326>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001152:	6925      	ldr	r5, [r4, #16]
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001154:	493e      	ldr	r1, [pc, #248]	; (8001250 <HAL_ADC_Init+0x1bc>)
 8001156:	428a      	cmp	r2, r1
 8001158:	f000 80c3 	beq.w	80012e2 <HAL_ADC_Init+0x24e>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800115c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800115e:	b121      	cbz	r1, 800116a <HAL_ADC_Init+0xd6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001160:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8001162:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
 8001166:	4331      	orrs	r1, r6
 8001168:	430b      	orrs	r3, r1
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 800116a:	68d6      	ldr	r6, [r2, #12]
 800116c:	4939      	ldr	r1, [pc, #228]	; (8001254 <HAL_ADC_Init+0x1c0>)
 800116e:	4031      	ands	r1, r6
 8001170:	430b      	orrs	r3, r1
 8001172:	60d3      	str	r3, [r2, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001174:	6893      	ldr	r3, [r2, #8]
 8001176:	0759      	lsls	r1, r3, #29
 8001178:	d535      	bpl.n	80011e6 <HAL_ADC_Init+0x152>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800117a:	6893      	ldr	r3, [r2, #8]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800117c:	2d01      	cmp	r5, #1
 800117e:	f000 8122 	beq.w	80013c6 <HAL_ADC_Init+0x332>
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001182:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001184:	f023 030f 	bic.w	r3, r3, #15
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800118a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800118c:	f023 0303 	bic.w	r3, r3, #3
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	67a3      	str	r3, [r4, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
  }

  return tmp_hal_status;
}
 8001196:	b003      	add	sp, #12
 8001198:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800119a:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800119c:	2000      	movs	r0, #0
 800119e:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80011a2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80011a4:	d0b7      	beq.n	8001116 <HAL_ADC_Init+0x82>
    tmp_hal_status = HAL_ERROR;
 80011a6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011a8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80011aa:	f043 0310 	orr.w	r3, r3, #16
 80011ae:	67a3      	str	r3, [r4, #120]	; 0x78
}
 80011b0:	b003      	add	sp, #12
 80011b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 80011b4:	f7ff fcd8 	bl	8000b68 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80011b8:	67e5      	str	r5, [r4, #124]	; 0x7c
    hadc->Lock = HAL_UNLOCKED;
 80011ba:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
 80011be:	e773      	b.n	80010a8 <HAL_ADC_Init+0x14>
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d04d      	beq.n	8001260 <HAL_ADC_Init+0x1cc>
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80011c4:	4924      	ldr	r1, [pc, #144]	; (8001258 <HAL_ADC_Init+0x1c4>)
 80011c6:	428a      	cmp	r2, r1
 80011c8:	f000 8105 	beq.w	80013d6 <HAL_ADC_Init+0x342>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	07dd      	lsls	r5, r3, #31
 80011d0:	d4b1      	bmi.n	8001136 <HAL_ADC_Init+0xa2>
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80011d2:	4922      	ldr	r1, [pc, #136]	; (800125c <HAL_ADC_Init+0x1c8>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 80011d4:	680b      	ldr	r3, [r1, #0]
 80011d6:	6865      	ldr	r5, [r4, #4]
 80011d8:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 80011dc:	432b      	orrs	r3, r5
 80011de:	600b      	str	r3, [r1, #0]
}
 80011e0:	e7a9      	b.n	8001136 <HAL_ADC_Init+0xa2>
    return HAL_ERROR;
 80011e2:	2001      	movs	r0, #1
}
 80011e4:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80011e6:	6893      	ldr	r3, [r2, #8]
 80011e8:	071b      	lsls	r3, r3, #28
 80011ea:	d4c7      	bmi.n	800117c <HAL_ADC_Init+0xe8>
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80011ec:	7f23      	ldrb	r3, [r4, #28]
 80011ee:	0399      	lsls	r1, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80011f0:	4b19      	ldr	r3, [pc, #100]	; (8001258 <HAL_ADC_Init+0x1c4>)
 80011f2:	429a      	cmp	r2, r3
 80011f4:	bf16      	itet	ne
 80011f6:	6be3      	ldrne	r3, [r4, #60]	; 0x3c
 80011f8:	6be6      	ldreq	r6, [r4, #60]	; 0x3c
 80011fa:	005e      	lslne	r6, r3, #1
        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80011fc:	68d3      	ldr	r3, [r2, #12]
 80011fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001202:	f023 0303 	bic.w	r3, r3, #3
 8001206:	430b      	orrs	r3, r1
        if (hadc->Init.GainCompensation != 0UL)
 8001208:	68e1      	ldr	r1, [r4, #12]
        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 800120a:	4333      	orrs	r3, r6
 800120c:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 800120e:	b151      	cbz	r1, 8001226 <HAL_ADC_Init+0x192>
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001210:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001212:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001216:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800121a:	430b      	orrs	r3, r1
 800121c:	6713      	str	r3, [r2, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 800121e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001220:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001224:	6713      	str	r3, [r2, #112]	; 0x70
        if (hadc->Init.OversamplingMode == ENABLE)
 8001226:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800122a:	2b01      	cmp	r3, #1
 800122c:	f000 80dc 	beq.w	80013e8 <HAL_ADC_Init+0x354>
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001230:	6913      	ldr	r3, [r2, #16]
 8001232:	f023 0301 	bic.w	r3, r3, #1
 8001236:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001238:	6913      	ldr	r3, [r2, #16]
 800123a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800123c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001240:	430b      	orrs	r3, r1
 8001242:	6113      	str	r3, [r2, #16]
 8001244:	e79a      	b.n	800117c <HAL_ADC_Init+0xe8>
 8001246:	bf00      	nop
 8001248:	20000028 	.word	0x20000028
 800124c:	053e2d63 	.word	0x053e2d63
 8001250:	46021000 	.word	0x46021000
 8001254:	fff0c013 	.word	0xfff0c013
 8001258:	42028000 	.word	0x42028000
 800125c:	46021308 	.word	0x46021308
        MODIFY_REG(hadc->Instance->CFGR1,
 8001260:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8001264:	68a1      	ldr	r1, [r4, #8]
 8001266:	68d3      	ldr	r3, [r2, #12]
 8001268:	42a9      	cmp	r1, r5
 800126a:	bf0e      	itee	eq
 800126c:	210c      	moveq	r1, #12
 800126e:	f101 31ff 	addne.w	r1, r1, #4294967295
 8001272:	f001 010c 	andne.w	r1, r1, #12
 8001276:	f023 030c 	bic.w	r3, r3, #12
 800127a:	430b      	orrs	r3, r1
 800127c:	4968      	ldr	r1, [pc, #416]	; (8001420 <HAL_ADC_Init+0x38c>)
 800127e:	60cb      	str	r3, [r1, #12]
        MODIFY_REG(ADC4_COMMON->CCR,
 8001280:	f8d1 5308 	ldr.w	r5, [r1, #776]	; 0x308
 8001284:	6863      	ldr	r3, [r4, #4]
 8001286:	f425 1570 	bic.w	r5, r5, #3932160	; 0x3c0000
 800128a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800128e:	432b      	orrs	r3, r5
 8001290:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001294:	f894 6024 	ldrb.w	r6, [r4, #36]	; 0x24
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001298:	6c61      	ldr	r1, [r4, #68]	; 0x44
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800129a:	7f27      	ldrb	r7, [r4, #28]
 800129c:	6965      	ldr	r5, [r4, #20]
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800129e:	0373      	lsls	r3, r6, #13
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80012a0:	2900      	cmp	r1, #0
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012a2:	ea43 3387 	orr.w	r3, r3, r7, lsl #14
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80012a6:	bf18      	it	ne
 80012a8:	f44f 5180 	movne.w	r1, #4096	; 0x1000
 80012ac:	432b      	orrs	r3, r5
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80012ae:	6925      	ldr	r5, [r4, #16]
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 80012b0:	f894 7040 	ldrb.w	r7, [r4, #64]	; 0x40
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80012b4:	2d00      	cmp	r5, #0
 80012b6:	bfa8      	it	ge
 80012b8:	f44f 1c00 	movge.w	ip, #2097152	; 0x200000
 80012bc:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
 80012c0:	ea43 0301 	orr.w	r3, r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012c4:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80012c8:	bfb8      	it	lt
 80012ca:	f025 4c00 	biclt.w	ip, r5, #2147483648	; 0x80000000
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012ce:	2901      	cmp	r1, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80012d0:	ea43 030c 	orr.w	r3, r3, ip
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012d4:	f47f af3e 	bne.w	8001154 <HAL_ADC_Init+0xc0>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80012d8:	2e00      	cmp	r6, #0
 80012da:	f040 8098 	bne.w	800140e <HAL_ADC_Init+0x37a>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80012de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012e2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80012e4:	b122      	cbz	r2, 80012f0 <HAL_ADC_Init+0x25c>
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80012e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80012e8:	f402 72e0 	and.w	r2, r2, #448	; 0x1c0
 80012ec:	430a      	orrs	r2, r1
 80012ee:	4313      	orrs	r3, r2
      MODIFY_REG(hadc->Instance->CFGR1,
 80012f0:	494b      	ldr	r1, [pc, #300]	; (8001420 <HAL_ADC_Init+0x38c>)
 80012f2:	68ca      	ldr	r2, [r1, #12]
 80012f4:	f422 32bf 	bic.w	r2, r2, #97792	; 0x17e00
 80012f8:	f422 72f9 	bic.w	r2, r2, #498	; 0x1f2
 80012fc:	431a      	orrs	r2, r3
 80012fe:	60ca      	str	r2, [r1, #12]
      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8001300:	6a22      	ldr	r2, [r4, #32]
 8001302:	b112      	cbz	r2, 800130a <HAL_ADC_Init+0x276>
        SET_BIT(hadc->Instance->PW, hadc->Init.LowPowerAutoPowerOff);
 8001304:	6c4e      	ldr	r6, [r1, #68]	; 0x44
 8001306:	4332      	orrs	r2, r6
 8001308:	644a      	str	r2, [r1, #68]	; 0x44
      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 800130a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800130c:	b11a      	cbz	r2, 8001316 <HAL_ADC_Init+0x282>
        SET_BIT(hadc->Instance->PW, hadc->Init.VrefProtection);
 800130e:	4944      	ldr	r1, [pc, #272]	; (8001420 <HAL_ADC_Init+0x38c>)
 8001310:	6c4e      	ldr	r6, [r1, #68]	; 0x44
 8001312:	4332      	orrs	r2, r6
 8001314:	644a      	str	r2, [r1, #68]	; 0x44
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001316:	e9d4 2116 	ldrd	r2, r1, [r4, #88]	; 0x58
 800131a:	430a      	orrs	r2, r1
                   hadc->Init.Oversampling.RightBitShift |
 800131c:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800131e:	430a      	orrs	r2, r1
                   hadc->Init.Oversampling.TriggeredMode |
 8001320:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001322:	430a      	orrs	r2, r1
      if (hadc->Init.OversamplingMode == ENABLE)
 8001324:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
 8001328:	2901      	cmp	r1, #1
 800132a:	d043      	beq.n	80013b4 <HAL_ADC_Init+0x320>
      MODIFY_REG(hadc->Instance->CFGR2,
 800132c:	493c      	ldr	r1, [pc, #240]	; (8001420 <HAL_ADC_Init+0x38c>)
 800132e:	4e3d      	ldr	r6, [pc, #244]	; (8001424 <HAL_ADC_Init+0x390>)
 8001330:	690f      	ldr	r7, [r1, #16]
 8001332:	403e      	ands	r6, r7
 8001334:	4332      	orrs	r2, r6
 8001336:	610a      	str	r2, [r1, #16]
  MODIFY_REG(ADCx->SMPR1,
 8001338:	694a      	ldr	r2, [r1, #20]
 800133a:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 800133c:	f022 0207 	bic.w	r2, r2, #7
 8001340:	4332      	orrs	r2, r6
 8001342:	614a      	str	r2, [r1, #20]
 8001344:	694a      	ldr	r2, [r1, #20]
 8001346:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8001348:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800134c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
 8001350:	614a      	str	r2, [r1, #20]
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8001352:	b1d5      	cbz	r5, 800138a <HAL_ADC_Init+0x2f6>
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8001354:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8001358:	d11b      	bne.n	8001392 <HAL_ADC_Init+0x2fe>
          if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800135a:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 800135e:	f005 020f 	and.w	r2, r5, #15
 8001362:	2a0f      	cmp	r2, #15
 8001364:	d003      	beq.n	800136e <HAL_ADC_Init+0x2da>
 8001366:	f3c5 1203 	ubfx	r2, r5, #4, #4
 800136a:	2a0f      	cmp	r2, #15
 800136c:	d00d      	beq.n	800138a <HAL_ADC_Init+0x2f6>
          MODIFY_REG(hadc->Instance->CHSELR,
 800136e:	f06f 010f 	mvn.w	r1, #15
 8001372:	4e2b      	ldr	r6, [pc, #172]	; (8001420 <HAL_ADC_Init+0x38c>)
 8001374:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8001376:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001378:	3a01      	subs	r2, #1
 800137a:	0092      	lsls	r2, r2, #2
 800137c:	f002 021c 	and.w	r2, r2, #28
 8001380:	fa01 f202 	lsl.w	r2, r1, r2
 8001384:	4315      	orrs	r5, r2
 8001386:	62b5      	str	r5, [r6, #40]	; 0x28
 8001388:	e003      	b.n	8001392 <HAL_ADC_Init+0x2fe>
          SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 800138a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800138c:	f062 020f 	orn	r2, r2, #15
 8001390:	628a      	str	r2, [r1, #40]	; 0x28
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001392:	4923      	ldr	r1, [pc, #140]	; (8001420 <HAL_ADC_Init+0x38c>)
 8001394:	4a24      	ldr	r2, [pc, #144]	; (8001428 <HAL_ADC_Init+0x394>)
 8001396:	68c9      	ldr	r1, [r1, #12]
 8001398:	400a      	ands	r2, r1
 800139a:	429a      	cmp	r2, r3
 800139c:	d021      	beq.n	80013e2 <HAL_ADC_Init+0x34e>
        tmp_hal_status = HAL_ERROR;
 800139e:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80013a0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80013a2:	f023 0312 	bic.w	r3, r3, #18
 80013a6:	f043 0310 	orr.w	r3, r3, #16
 80013aa:	67a3      	str	r3, [r4, #120]	; 0x78
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ac:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80013ae:	4303      	orrs	r3, r0
 80013b0:	67e3      	str	r3, [r4, #124]	; 0x7c
        tmp_hal_status = HAL_ERROR;
 80013b2:	e6fd      	b.n	80011b0 <HAL_ADC_Init+0x11c>
        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80013b4:	f042 0201 	orr.w	r2, r2, #1
 80013b8:	e7b8      	b.n	800132c <HAL_ADC_Init+0x298>
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80013ba:	6b21      	ldr	r1, [r4, #48]	; 0x30
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80013bc:	6925      	ldr	r5, [r4, #16]
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80013be:	3901      	subs	r1, #1
 80013c0:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80013c4:	e6ca      	b.n	800115c <HAL_ADC_Init+0xc8>
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80013c6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80013c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80013ca:	f021 010f 	bic.w	r1, r1, #15
 80013ce:	3b01      	subs	r3, #1
 80013d0:	430b      	orrs	r3, r1
 80013d2:	6313      	str	r3, [r2, #48]	; 0x30
 80013d4:	e6d9      	b.n	800118a <HAL_ADC_Init+0xf6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013d6:	6893      	ldr	r3, [r2, #8]
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013d8:	07de      	lsls	r6, r3, #31
 80013da:	f53f aeac 	bmi.w	8001136 <HAL_ADC_Init+0xa2>
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80013de:	4913      	ldr	r1, [pc, #76]	; (800142c <HAL_ADC_Init+0x398>)
 80013e0:	e6f8      	b.n	80011d4 <HAL_ADC_Init+0x140>
        ADC_CLEAR_ERRORCODE(hadc);
 80013e2:	2300      	movs	r3, #0
 80013e4:	67e3      	str	r3, [r4, #124]	; 0x7c
 80013e6:	e6d0      	b.n	800118a <HAL_ADC_Init+0xf6>
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80013e8:	e9d4 3117 	ldrd	r3, r1, [r4, #92]	; 0x5c
 80013ec:	6916      	ldr	r6, [r2, #16]
 80013ee:	430b      	orrs	r3, r1
 80013f0:	490f      	ldr	r1, [pc, #60]	; (8001430 <HAL_ADC_Init+0x39c>)
 80013f2:	4031      	ands	r1, r6
 80013f4:	430b      	orrs	r3, r1
 80013f6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80013f8:	430b      	orrs	r3, r1
 80013fa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80013fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001400:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001402:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6113      	str	r3, [r2, #16]
 800140c:	e714      	b.n	8001238 <HAL_ADC_Init+0x1a4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800140e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8001410:	f042 0220 	orr.w	r2, r2, #32
 8001414:	67a2      	str	r2, [r4, #120]	; 0x78
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001416:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8001418:	f042 0201 	orr.w	r2, r2, #1
 800141c:	67e2      	str	r2, [r4, #124]	; 0x7c
 800141e:	e760      	b.n	80012e2 <HAL_ADC_Init+0x24e>
 8001420:	46021000 	.word	0x46021000
 8001424:	f7fffc02 	.word	0xf7fffc02
 8001428:	833ffff3 	.word	0x833ffff3
 800142c:	42028308 	.word	0x42028308
 8001430:	fc00f81e 	.word	0xfc00f81e

08001434 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001434:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001438:	4906      	ldr	r1, [pc, #24]	; (8001454 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800143a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800143c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800143e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001442:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001448:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800144c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001450:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001452:	4770      	bx	lr
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001458:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800145a:	b500      	push	{lr}
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001462:	f1c3 0e07 	rsb	lr, r3, #7
 8001466:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800146e:	bf28      	it	cs
 8001470:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001474:	f1bc 0f06 	cmp.w	ip, #6
 8001478:	d91b      	bls.n	80014b2 <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800147a:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800147e:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001480:	fa0c fc03 	lsl.w	ip, ip, r3
 8001484:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	f04f 3cff 	mov.w	ip, #4294967295
 800148c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001490:	ea21 010c 	bic.w	r1, r1, ip
 8001494:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001496:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001498:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800149c:	db0c      	blt.n	80014b8 <HAL_NVIC_SetPriority+0x60>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149e:	0109      	lsls	r1, r1, #4
 80014a0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80014a4:	b2c9      	uxtb	r1, r1
 80014a6:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80014aa:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80014ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80014b2:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b4:	4613      	mov	r3, r2
 80014b6:	e7e7      	b.n	8001488 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <HAL_NVIC_SetPriority+0x78>)
 80014ba:	f000 000f 	and.w	r0, r0, #15
 80014be:	0109      	lsls	r1, r1, #4
 80014c0:	b2c9      	uxtb	r1, r1
 80014c2:	4403      	add	r3, r0
 80014c4:	7619      	strb	r1, [r3, #24]
 80014c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80014ca:	bf00      	nop
 80014cc:	e000ed00 	.word	0xe000ed00
 80014d0:	e000ecfc 	.word	0xe000ecfc

080014d4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80014d4:	2800      	cmp	r0, #0
 80014d6:	db07      	blt.n	80014e8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d8:	2301      	movs	r3, #1
 80014da:	f000 011f 	and.w	r1, r0, #31
 80014de:	4a03      	ldr	r2, [pc, #12]	; (80014ec <HAL_NVIC_EnableIRQ+0x18>)
 80014e0:	0940      	lsrs	r0, r0, #5
 80014e2:	408b      	lsls	r3, r1
 80014e4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000e100 	.word	0xe000e100

080014f0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f0:	3801      	subs	r0, #1
 80014f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80014f6:	d210      	bcs.n	800151a <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fc:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001500:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001502:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001504:	b410      	push	{r4}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001506:	4c06      	ldr	r4, [pc, #24]	; (8001520 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001508:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150a:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800150e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001510:	619a      	str	r2, [r3, #24]
  return SysTick_Config(TicksNumb);
}
 8001512:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001516:	6119      	str	r1, [r3, #16]
 8001518:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800151a:	2001      	movs	r0, #1
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Save GPIO port address */
  p_gpio = GPIOx;

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001528:	680c      	ldr	r4, [r1, #0]
{
 800152a:	b083      	sub	sp, #12
 800152c:	9000      	str	r0, [sp, #0]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800152e:	2c00      	cmp	r4, #0
 8001530:	f000 80ee 	beq.w	8001710 <HAL_GPIO_Init+0x1ec>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001534:	f04f 0c00 	mov.w	ip, #0
 8001538:	4b77      	ldr	r3, [pc, #476]	; (8001718 <HAL_GPIO_Init+0x1f4>)
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800153a:	f04f 0b01 	mov.w	fp, #1
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800153e:	ea03 2390 	and.w	r3, r3, r0, lsr #10
 8001542:	9301      	str	r3, [sp, #4]
  uint32_t position = 0U;
 8001544:	4688      	mov	r8, r1
 8001546:	4663      	mov	r3, ip
 8001548:	e069      	b.n	800161e <HAL_GPIO_Init+0xfa>
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800154a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800154e:	f022 0e10 	bic.w	lr, r2, #16
 8001552:	f1be 0f02 	cmp.w	lr, #2
 8001556:	f000 80a1 	beq.w	800169c <HAL_GPIO_Init+0x178>
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800155a:	2103      	movs	r1, #3
        p_gpio->MODER = tmp;
 800155c:	46e1      	mov	r9, ip
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800155e:	fa01 f70c 	lsl.w	r7, r1, ip
        p_gpio->MODER = tmp;
 8001562:	4619      	mov	r1, r3
        tmp = p_gpio->MODER;
 8001564:	6805      	ldr	r5, [r0, #0]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001566:	43fe      	mvns	r6, r7
 8001568:	ea25 0507 	bic.w	r5, r5, r7
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800156c:	f002 0703 	and.w	r7, r2, #3
 8001570:	fa07 f70c 	lsl.w	r7, r7, ip
 8001574:	432f      	orrs	r7, r5
        p_gpio->MODER = tmp;
 8001576:	6007      	str	r7, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001578:	f10e 3eff 	add.w	lr, lr, #4294967295
 800157c:	f1be 0f01 	cmp.w	lr, #1
 8001580:	f240 80af 	bls.w	80016e2 <HAL_GPIO_Init+0x1be>
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001584:	2a03      	cmp	r2, #3
 8001586:	d044      	beq.n	8001612 <HAL_GPIO_Init+0xee>
        tmp = p_gpio->PUPDR;
 8001588:	68c7      	ldr	r7, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800158a:	403e      	ands	r6, r7
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800158c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8001590:	fa07 f709 	lsl.w	r7, r7, r9
 8001594:	4337      	orrs	r7, r6
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001596:	00d6      	lsls	r6, r2, #3
        p_gpio->PUPDR = tmp;
 8001598:	60c7      	str	r7, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800159a:	d53a      	bpl.n	8001612 <HAL_GPIO_Init+0xee>
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800159c:	250f      	movs	r5, #15
 800159e:	f023 0603 	bic.w	r6, r3, #3
 80015a2:	f106 468c 	add.w	r6, r6, #1174405120	; 0x46000000
 80015a6:	f003 0103 	and.w	r1, r3, #3
 80015aa:	f506 3608 	add.w	r6, r6, #139264	; 0x22000
 80015ae:	00c9      	lsls	r1, r1, #3
        tmp = EXTI->EXTICR[position >> 2U];
 80015b0:	6e37      	ldr	r7, [r6, #96]	; 0x60
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80015b2:	fa05 fe01 	lsl.w	lr, r5, r1
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80015b6:	9d01      	ldr	r5, [sp, #4]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80015b8:	ea27 070e 	bic.w	r7, r7, lr
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80015bc:	fa05 f101 	lsl.w	r1, r5, r1
 80015c0:	4339      	orrs	r1, r7
        EXTI->EXTICR[position >> 2U] = tmp;
 80015c2:	6631      	str	r1, [r6, #96]	; 0x60

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
        tmp &= ~((uint32_t)iocurrent);
 80015c4:	ea6f 060a 	mvn.w	r6, sl
        tmp = EXTI->RTSR1;
 80015c8:	4954      	ldr	r1, [pc, #336]	; (800171c <HAL_GPIO_Init+0x1f8>)
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015ca:	02d5      	lsls	r5, r2, #11
        tmp = EXTI->RTSR1;
 80015cc:	6809      	ldr	r1, [r1, #0]
        {
          tmp |= iocurrent;
        }
        EXTI->RTSR1 = tmp;
 80015ce:	4d53      	ldr	r5, [pc, #332]	; (800171c <HAL_GPIO_Init+0x1f8>)
        tmp &= ~((uint32_t)iocurrent);
 80015d0:	bf54      	ite	pl
 80015d2:	4031      	andpl	r1, r6
          tmp |= iocurrent;
 80015d4:	ea4a 0101 	orrmi.w	r1, sl, r1
        EXTI->RTSR1 = tmp;
 80015d8:	6029      	str	r1, [r5, #0]

        tmp = EXTI->FTSR1;
 80015da:	6869      	ldr	r1, [r5, #4]
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015dc:	0297      	lsls	r7, r2, #10
        {
          tmp |= iocurrent;
        }
        EXTI->FTSR1 = tmp;
 80015de:	4d4f      	ldr	r5, [pc, #316]	; (800171c <HAL_GPIO_Init+0x1f8>)
        tmp &= ~((uint32_t)iocurrent);
 80015e0:	bf54      	ite	pl
 80015e2:	4031      	andpl	r1, r6
          tmp |= iocurrent;
 80015e4:	ea4a 0101 	orrmi.w	r1, sl, r1
        EXTI->FTSR1 = tmp;
 80015e8:	6069      	str	r1, [r5, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80015ea:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015ee:	0395      	lsls	r5, r2, #14
        {
          tmp |= iocurrent;
        }
        EXTI->EMR1 = tmp;
 80015f0:	4d4a      	ldr	r5, [pc, #296]	; (800171c <HAL_GPIO_Init+0x1f8>)
        tmp &= ~((uint32_t)iocurrent);
 80015f2:	bf54      	ite	pl
 80015f4:	4031      	andpl	r1, r6
          tmp |= iocurrent;
 80015f6:	ea4a 0101 	orrmi.w	r1, sl, r1
        EXTI->EMR1 = tmp;
 80015fa:	f8c5 1084 	str.w	r1, [r5, #132]	; 0x84

        tmp = EXTI->IMR1;
 80015fe:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001602:	03d2      	lsls	r2, r2, #15
        {
          tmp |= iocurrent;
        }
        EXTI->IMR1 = tmp;
 8001604:	4a45      	ldr	r2, [pc, #276]	; (800171c <HAL_GPIO_Init+0x1f8>)
        tmp &= ~((uint32_t)iocurrent);
 8001606:	bf54      	ite	pl
 8001608:	4031      	andpl	r1, r6
          tmp |= iocurrent;
 800160a:	ea4a 0101 	orrmi.w	r1, sl, r1
        EXTI->IMR1 = tmp;
 800160e:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      }
    }
    position++;
 8001612:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001614:	fa34 f203 	lsrs.w	r2, r4, r3
 8001618:	f10c 0c02 	add.w	ip, ip, #2
 800161c:	d078      	beq.n	8001710 <HAL_GPIO_Init+0x1ec>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800161e:	fa0b f103 	lsl.w	r1, fp, r3
    if (iocurrent != 0U)
 8001622:	ea11 0a04 	ands.w	sl, r1, r4
 8001626:	d0f4      	beq.n	8001612 <HAL_GPIO_Init+0xee>
      if (GPIOx == LPGPIO1)
 8001628:	9a00      	ldr	r2, [sp, #0]
 800162a:	4e3d      	ldr	r6, [pc, #244]	; (8001720 <HAL_GPIO_Init+0x1fc>)
 800162c:	42b2      	cmp	r2, r6
 800162e:	d18c      	bne.n	800154a <HAL_GPIO_Init+0x26>
        tmp = GPIOx->MODER;
 8001630:	4615      	mov	r5, r2
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001632:	f8d8 2004 	ldr.w	r2, [r8, #4]
        tmp = GPIOx->MODER;
 8001636:	682e      	ldr	r6, [r5, #0]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001638:	f002 0001 	and.w	r0, r2, #1
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800163c:	ea26 0601 	bic.w	r6, r6, r1
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001640:	4098      	lsls	r0, r3
 8001642:	4330      	orrs	r0, r6
        GPIOx->MODER = tmp;
 8001644:	6028      	str	r0, [r5, #0]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001646:	250f      	movs	r5, #15
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001648:	4f36      	ldr	r7, [pc, #216]	; (8001724 <HAL_GPIO_Init+0x200>)
 800164a:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 800164e:	6849      	ldr	r1, [r1, #4]
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001650:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001654:	f001 0607 	and.w	r6, r1, #7
 8001658:	00b6      	lsls	r6, r6, #2
 800165a:	fa05 f906 	lsl.w	r9, r5, r6
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800165e:	250b      	movs	r5, #11
 8001660:	fa05 f606 	lsl.w	r6, r5, r6
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001664:	2503      	movs	r5, #3
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001666:	08cf      	lsrs	r7, r1, #3
 8001668:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800166c:	f8d7 e020 	ldr.w	lr, [r7, #32]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001670:	ea2e 0e09 	bic.w	lr, lr, r9
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001674:	ea46 060e 	orr.w	r6, r6, lr
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001678:	ea4f 0941 	mov.w	r9, r1, lsl #1
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800167c:	623e      	str	r6, [r7, #32]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800167e:	fa05 f609 	lsl.w	r6, r5, r9
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8001682:	2502      	movs	r5, #2
        tmp = p_gpio->MODER;
 8001684:	6807      	ldr	r7, [r0, #0]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001686:	ea27 0e06 	bic.w	lr, r7, r6
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 800168a:	fa05 f709 	lsl.w	r7, r5, r9
 800168e:	ea47 070e 	orr.w	r7, r7, lr
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001692:	43f6      	mvns	r6, r6
        p_gpio->MODER = tmp;
 8001694:	6007      	str	r7, [r0, #0]
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001696:	f022 0e10 	bic.w	lr, r2, #16
 800169a:	e76d      	b.n	8001578 <HAL_GPIO_Init+0x54>
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800169c:	250f      	movs	r5, #15
 800169e:	9900      	ldr	r1, [sp, #0]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80016a0:	f8d8 6010 	ldr.w	r6, [r8, #16]
        tmp = GPIOx->AFR[position >> 3U];
 80016a4:	08df      	lsrs	r7, r3, #3
 80016a6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80016aa:	f003 0107 	and.w	r1, r3, #7
        tmp = GPIOx->AFR[position >> 3U];
 80016ae:	f8d7 e020 	ldr.w	lr, [r7, #32]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80016b2:	0089      	lsls	r1, r1, #2
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80016b4:	f006 060f 	and.w	r6, r6, #15
 80016b8:	408e      	lsls	r6, r1
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80016ba:	fa05 f101 	lsl.w	r1, r5, r1
 80016be:	ea2e 0101 	bic.w	r1, lr, r1
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80016c2:	430e      	orrs	r6, r1
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80016c4:	2103      	movs	r1, #3
        GPIOx->AFR[position >> 3U] = tmp;
 80016c6:	623e      	str	r6, [r7, #32]
        tmp = p_gpio->MODER;
 80016c8:	6807      	ldr	r7, [r0, #0]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80016ca:	fa01 f60c 	lsl.w	r6, r1, ip
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80016ce:	4011      	ands	r1, r2
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80016d0:	ea27 0706 	bic.w	r7, r7, r6
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80016d4:	fa01 f10c 	lsl.w	r1, r1, ip
 80016d8:	4339      	orrs	r1, r7
        p_gpio->MODER = tmp;
 80016da:	6001      	str	r1, [r0, #0]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80016dc:	43f6      	mvns	r6, r6
        p_gpio->MODER = tmp;
 80016de:	46e1      	mov	r9, ip
 80016e0:	4619      	mov	r1, r3
        tmp = p_gpio->OSPEEDR;
 80016e2:	6887      	ldr	r7, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80016e4:	ea07 0e06 	and.w	lr, r7, r6
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80016e8:	f8d8 700c 	ldr.w	r7, [r8, #12]
 80016ec:	fa07 f709 	lsl.w	r7, r7, r9
 80016f0:	ea47 070e 	orr.w	r7, r7, lr
        p_gpio->OSPEEDR = tmp;
 80016f4:	6087      	str	r7, [r0, #8]
        tmp = p_gpio->OTYPER;
 80016f6:	6847      	ldr	r7, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80016f8:	fa0b fe01 	lsl.w	lr, fp, r1
 80016fc:	ea27 0e0e 	bic.w	lr, r7, lr
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001700:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8001704:	fa07 f101 	lsl.w	r1, r7, r1
 8001708:	ea41 010e 	orr.w	r1, r1, lr
        p_gpio->OTYPER = tmp;
 800170c:	6041      	str	r1, [r0, #4]
 800170e:	e739      	b.n	8001584 <HAL_GPIO_Init+0x60>
  }
}
 8001710:	b003      	add	sp, #12
 8001712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001716:	bf00      	nop
 8001718:	002f7f7f 	.word	0x002f7f7f
 800171c:	46022000 	.word	0x46022000
 8001720:	46020000 	.word	0x46020000
 8001724:	08008c8c 	.word	0x08008c8c

08001728 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001728:	b10a      	cbz	r2, 800172e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800172a:	6181      	str	r1, [r0, #24]
 800172c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800172e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop

08001734 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001736:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001738:	2800      	cmp	r0, #0
 800173a:	f000 8088 	beq.w	800184e <HAL_PCD_Init+0x11a>

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800173e:	f890 34bd 	ldrb.w	r3, [r0, #1213]	; 0x4bd
 8001742:	4605      	mov	r5, r0
  USBx = hpcd->Instance;
 8001744:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001746:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800174a:	2b00      	cmp	r3, #0
 800174c:	d079      	beq.n	8001842 <HAL_PCD_Init+0x10e>
 800174e:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001750:	2303      	movs	r3, #3
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001752:	462e      	mov	r6, r5
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001754:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001758:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800175a:	466c      	mov	r4, sp
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800175c:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 8001760:	bf08      	it	eq
 8001762:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 8001764:	f004 fdf4 	bl	8006350 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001768:	f856 eb10 	ldr.w	lr, [r6], #16
 800176c:	1d2f      	adds	r7, r5, #4
 800176e:	46b4      	mov	ip, r6
 8001770:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001774:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001776:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800177a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800177c:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8001780:	e884 0003 	stmia.w	r4, {r0, r1}
 8001784:	4670      	mov	r0, lr
 8001786:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800178a:	f004 fd23 	bl	80061d4 <USB_CoreInit>
 800178e:	4604      	mov	r4, r0
 8001790:	b130      	cbz	r0, 80017a0 <HAL_PCD_Init+0x6c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 8001792:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001794:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8001796:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001798:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
}
 800179c:	b00b      	add	sp, #44	; 0x2c
 800179e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80017a0:	4601      	mov	r1, r0
 80017a2:	6828      	ldr	r0, [r5, #0]
 80017a4:	f004 fddc 	bl	8006360 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017a8:	6868      	ldr	r0, [r5, #4]
 80017aa:	b358      	cbz	r0, 8001804 <HAL_PCD_Init+0xd0>
 80017ac:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 80017ae:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017b2:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 80017b4:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 80017b8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017bc:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].num = i;
 80017c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80017c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017c8:	fa5f f28c 	uxtb.w	r2, ip
 80017cc:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017ce:	e9c3 1112 	strd	r1, r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].is_in = 1U;
 80017d2:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017d6:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    hpcd->IN_ep[i].xfer_len = 0U;
 80017da:	6559      	str	r1, [r3, #84]	; 0x54
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017dc:	d3ea      	bcc.n	80017b4 <HAL_PCD_Init+0x80>
    hpcd->OUT_ep[i].is_in = 0U;
 80017de:	2200      	movs	r2, #0
 80017e0:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 80017e4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017e8:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].num = i;
 80017ea:	f883 427c 	strb.w	r4, [r3, #636]	; 0x27c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ee:	b2cc      	uxtb	r4, r1
 80017f0:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80017f2:	e9c3 22a2 	strd	r2, r2, [r3, #648]	; 0x288
    hpcd->OUT_ep[i].is_in = 0U;
 80017f6:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017fa:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
    hpcd->OUT_ep[i].xfer_len = 0U;
 80017fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001802:	d3ed      	bcc.n	80017e0 <HAL_PCD_Init+0xac>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001804:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001806:	466c      	mov	r4, sp
 8001808:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800180a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800180c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800180e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8001812:	e884 0003 	stmia.w	r4, {r0, r1}
 8001816:	6828      	ldr	r0, [r5, #0]
 8001818:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800181c:	f004 fdd6 	bl	80063cc <USB_DevInit>
 8001820:	4604      	mov	r4, r0
 8001822:	2800      	cmp	r0, #0
 8001824:	d1b5      	bne.n	8001792 <HAL_PCD_Init+0x5e>
  hpcd->State = HAL_PCD_STATE_READY;
 8001826:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 8001828:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 800182a:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 800182e:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 8001830:	f885 24bd 	strb.w	r2, [r5, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
 8001834:	d00f      	beq.n	8001856 <HAL_PCD_Init+0x122>
  (void)USB_DevDisconnect(hpcd->Instance);
 8001836:	6828      	ldr	r0, [r5, #0]
 8001838:	f004 ff82 	bl	8006740 <USB_DevDisconnect>
}
 800183c:	4620      	mov	r0, r4
 800183e:	b00b      	add	sp, #44	; 0x2c
 8001840:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8001842:	f880 24bc 	strb.w	r2, [r0, #1212]	; 0x4bc
    HAL_PCD_MspInit(hpcd);
 8001846:	f7ff fa3f 	bl	8000cc8 <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 800184a:	6828      	ldr	r0, [r5, #0]
 800184c:	e780      	b.n	8001750 <HAL_PCD_Init+0x1c>
    return HAL_ERROR;
 800184e:	2401      	movs	r4, #1
}
 8001850:	4620      	mov	r0, r4
 8001852:	b00b      	add	sp, #44	; 0x2c
 8001854:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001856:	4628      	mov	r0, r5
 8001858:	f000 fdc2 	bl	80023e0 <HAL_PCDEx_ActivateLPM>
 800185c:	e7eb      	b.n	8001836 <HAL_PCD_Init+0x102>
 800185e:	bf00      	nop

08001860 <HAL_PCD_DataOutStageCallback>:
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop

08001864 <HAL_PCD_DataInStageCallback>:
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop

08001868 <HAL_PCD_SetupStageCallback>:
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop

0800186c <HAL_PCD_SOFCallback>:
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop

08001870 <HAL_PCD_ResetCallback>:
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop

08001874 <HAL_PCD_SuspendCallback>:
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop

08001878 <HAL_PCD_ResumeCallback>:
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop

0800187c <HAL_PCD_ISOOUTIncompleteCallback>:
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop

08001880 <HAL_PCD_ISOINIncompleteCallback>:
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop

08001884 <HAL_PCD_ConnectCallback>:
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop

08001888 <HAL_PCD_DisconnectCallback>:
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop

0800188c <HAL_PCD_IRQHandler>:
{
 800188c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001890:	6805      	ldr	r5, [r0, #0]
{
 8001892:	4604      	mov	r4, r0
 8001894:	b089      	sub	sp, #36	; 0x24
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001896:	4628      	mov	r0, r5
 8001898:	f004 ff90 	bl	80067bc <USB_GetMode>
 800189c:	b110      	cbz	r0, 80018a4 <HAL_PCD_IRQHandler+0x18>
}
 800189e:	b009      	add	sp, #36	; 0x24
 80018a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80018a4:	4683      	mov	fp, r0
 80018a6:	6820      	ldr	r0, [r4, #0]
 80018a8:	f004 ff5a 	bl	8006760 <USB_ReadInterrupts>
 80018ac:	2800      	cmp	r0, #0
 80018ae:	d0f6      	beq.n	800189e <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80018b0:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80018b4:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80018b6:	f3c3 230d 	ubfx	r3, r3, #8, #14
 80018ba:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80018be:	f004 ff4f 	bl	8006760 <USB_ReadInterrupts>
 80018c2:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80018c6:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80018c8:	f505 6300 	add.w	r3, r5, #2048	; 0x800
 80018cc:	9303      	str	r3, [sp, #12]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80018ce:	bf1e      	ittt	ne
 80018d0:	6943      	ldrne	r3, [r0, #20]
 80018d2:	f003 0302 	andne.w	r3, r3, #2
 80018d6:	6143      	strne	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80018d8:	f004 ff42 	bl	8006760 <USB_ReadInterrupts>
 80018dc:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80018e0:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80018e2:	d012      	beq.n	800190a <HAL_PCD_IRQHandler+0x7e>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80018e4:	6983      	ldr	r3, [r0, #24]
 80018e6:	f023 0310 	bic.w	r3, r3, #16
 80018ea:	6183      	str	r3, [r0, #24]
      RegVal = USBx->GRXSTSP;
 80018ec:	6a2e      	ldr	r6, [r5, #32]
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80018ee:	f3c6 4343 	ubfx	r3, r6, #17, #4
 80018f2:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80018f4:	f006 070f 	and.w	r7, r6, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80018f8:	f000 83e7 	beq.w	80020ca <HAL_PCD_IRQHandler+0x83e>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80018fc:	2b06      	cmp	r3, #6
 80018fe:	f000 8325 	beq.w	8001f4c <HAL_PCD_IRQHandler+0x6c0>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001902:	6983      	ldr	r3, [r0, #24]
 8001904:	f043 0310 	orr.w	r3, r3, #16
 8001908:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800190a:	f004 ff29 	bl	8006760 <USB_ReadInterrupts>
 800190e:	0307      	lsls	r7, r0, #12
 8001910:	f100 8283 	bmi.w	8001e1a <HAL_PCD_IRQHandler+0x58e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001914:	6820      	ldr	r0, [r4, #0]
 8001916:	f004 ff23 	bl	8006760 <USB_ReadInterrupts>
 800191a:	0346      	lsls	r6, r0, #13
 800191c:	f100 822b 	bmi.w	8001d76 <HAL_PCD_IRQHandler+0x4ea>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001920:	6820      	ldr	r0, [r4, #0]
 8001922:	f004 ff1d 	bl	8006760 <USB_ReadInterrupts>
 8001926:	2800      	cmp	r0, #0
 8001928:	f2c0 819c 	blt.w	8001c64 <HAL_PCD_IRQHandler+0x3d8>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800192c:	6820      	ldr	r0, [r4, #0]
 800192e:	f004 ff17 	bl	8006760 <USB_ReadInterrupts>
 8001932:	0503      	lsls	r3, r0, #20
 8001934:	f100 8157 	bmi.w	8001be6 <HAL_PCD_IRQHandler+0x35a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001938:	6820      	ldr	r0, [r4, #0]
 800193a:	f004 ff11 	bl	8006760 <USB_ReadInterrupts>
 800193e:	0106      	lsls	r6, r0, #4
 8001940:	d514      	bpl.n	800196c <HAL_PCD_IRQHandler+0xe0>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001942:	6822      	ldr	r2, [r4, #0]
 8001944:	6953      	ldr	r3, [r2, #20]
 8001946:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800194a:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 800194c:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 8001950:	2b00      	cmp	r3, #0
 8001952:	f040 82ae 	bne.w	8001eb2 <HAL_PCD_IRQHandler+0x626>
        hpcd->LPM_State = LPM_L1;
 8001956:	2101      	movs	r1, #1
 8001958:	f884 14f4 	strb.w	r1, [r4, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800195c:	6d53      	ldr	r3, [r2, #84]	; 0x54
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800195e:	4620      	mov	r0, r4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001960:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8001964:	f8c4 34f8 	str.w	r3, [r4, #1272]	; 0x4f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001968:	f000 fd52 	bl	8002410 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800196c:	6820      	ldr	r0, [r4, #0]
 800196e:	f004 fef7 	bl	8006760 <USB_ReadInterrupts>
 8001972:	04c0      	lsls	r0, r0, #19
 8001974:	f100 81a0 	bmi.w	8001cb8 <HAL_PCD_IRQHandler+0x42c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001978:	6820      	ldr	r0, [r4, #0]
 800197a:	f004 fef1 	bl	8006760 <USB_ReadInterrupts>
 800197e:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 8001982:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001984:	f040 8181 	bne.w	8001c8a <HAL_PCD_IRQHandler+0x3fe>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001988:	f004 feea 	bl	8006760 <USB_ReadInterrupts>
 800198c:	0701      	lsls	r1, r0, #28
 800198e:	f100 81e9 	bmi.w	8001d64 <HAL_PCD_IRQHandler+0x4d8>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001992:	6820      	ldr	r0, [r4, #0]
 8001994:	f004 fee4 	bl	8006760 <USB_ReadInterrupts>
 8001998:	0602      	lsls	r2, r0, #24
 800199a:	d571      	bpl.n	8001a80 <HAL_PCD_IRQHandler+0x1f4>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800199c:	69aa      	ldr	r2, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800199e:	6863      	ldr	r3, [r4, #4]
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80019a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019a4:	2b01      	cmp	r3, #1
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80019a6:	61aa      	str	r2, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019a8:	d96a      	bls.n	8001a80 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80019aa:	f894 22a3 	ldrb.w	r2, [r4, #675]	; 0x2a3
 80019ae:	2a01      	cmp	r2, #1
 80019b0:	f000 83ee 	beq.w	8002190 <HAL_PCD_IRQHandler+0x904>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d963      	bls.n	8001a80 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80019b8:	f894 22c7 	ldrb.w	r2, [r4, #711]	; 0x2c7
 80019bc:	2a01      	cmp	r2, #1
 80019be:	f000 8402 	beq.w	80021c6 <HAL_PCD_IRQHandler+0x93a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019c2:	2b03      	cmp	r3, #3
 80019c4:	d95c      	bls.n	8001a80 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80019c6:	f894 22eb 	ldrb.w	r2, [r4, #747]	; 0x2eb
 80019ca:	2a01      	cmp	r2, #1
 80019cc:	f000 82b7 	beq.w	8001f3e <HAL_PCD_IRQHandler+0x6b2>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	d955      	bls.n	8001a80 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80019d4:	f894 230f 	ldrb.w	r2, [r4, #783]	; 0x30f
 80019d8:	2a01      	cmp	r2, #1
 80019da:	f000 82ca 	beq.w	8001f72 <HAL_PCD_IRQHandler+0x6e6>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019de:	2b05      	cmp	r3, #5
 80019e0:	d94e      	bls.n	8001a80 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80019e2:	f894 2333 	ldrb.w	r2, [r4, #819]	; 0x333
 80019e6:	2a01      	cmp	r2, #1
 80019e8:	f000 842a 	beq.w	8002240 <HAL_PCD_IRQHandler+0x9b4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019ec:	2b06      	cmp	r3, #6
 80019ee:	d947      	bls.n	8001a80 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80019f0:	f894 2357 	ldrb.w	r2, [r4, #855]	; 0x357
 80019f4:	2a01      	cmp	r2, #1
 80019f6:	f000 8437 	beq.w	8002268 <HAL_PCD_IRQHandler+0x9dc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019fa:	2b07      	cmp	r3, #7
 80019fc:	d940      	bls.n	8001a80 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80019fe:	f894 237b 	ldrb.w	r2, [r4, #891]	; 0x37b
 8001a02:	2a01      	cmp	r2, #1
 8001a04:	f000 844e 	beq.w	80022a4 <HAL_PCD_IRQHandler+0xa18>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	d939      	bls.n	8001a80 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a0c:	f894 239f 	ldrb.w	r2, [r4, #927]	; 0x39f
 8001a10:	2a01      	cmp	r2, #1
 8001a12:	f000 845b 	beq.w	80022cc <HAL_PCD_IRQHandler+0xa40>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a16:	2b09      	cmp	r3, #9
 8001a18:	d932      	bls.n	8001a80 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a1a:	f894 23c3 	ldrb.w	r2, [r4, #963]	; 0x3c3
 8001a1e:	2a01      	cmp	r2, #1
 8001a20:	f000 8468 	beq.w	80022f4 <HAL_PCD_IRQHandler+0xa68>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a24:	2b0a      	cmp	r3, #10
 8001a26:	d92b      	bls.n	8001a80 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a28:	f894 23e7 	ldrb.w	r2, [r4, #999]	; 0x3e7
 8001a2c:	2a01      	cmp	r2, #1
 8001a2e:	f000 8475 	beq.w	800231c <HAL_PCD_IRQHandler+0xa90>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a32:	2b0b      	cmp	r3, #11
 8001a34:	d924      	bls.n	8001a80 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a36:	f894 240b 	ldrb.w	r2, [r4, #1035]	; 0x40b
 8001a3a:	2a01      	cmp	r2, #1
 8001a3c:	f000 8482 	beq.w	8002344 <HAL_PCD_IRQHandler+0xab8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a40:	2b0c      	cmp	r3, #12
 8001a42:	d91d      	bls.n	8001a80 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a44:	f894 242f 	ldrb.w	r2, [r4, #1071]	; 0x42f
 8001a48:	2a01      	cmp	r2, #1
 8001a4a:	f000 8483 	beq.w	8002354 <HAL_PCD_IRQHandler+0xac8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a4e:	2b0d      	cmp	r3, #13
 8001a50:	d916      	bls.n	8001a80 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a52:	f894 2453 	ldrb.w	r2, [r4, #1107]	; 0x453
 8001a56:	2a01      	cmp	r2, #1
 8001a58:	f000 84a3 	beq.w	80023a2 <HAL_PCD_IRQHandler+0xb16>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a5c:	2b0e      	cmp	r3, #14
 8001a5e:	d90f      	bls.n	8001a80 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a60:	f894 2477 	ldrb.w	r2, [r4, #1143]	; 0x477
 8001a64:	2a01      	cmp	r2, #1
 8001a66:	f000 84aa 	beq.w	80023be <HAL_PCD_IRQHandler+0xb32>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a6a:	2b0f      	cmp	r3, #15
 8001a6c:	d908      	bls.n	8001a80 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a6e:	f894 349b 	ldrb.w	r3, [r4, #1179]	; 0x49b
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d104      	bne.n	8001a80 <HAL_PCD_IRQHandler+0x1f4>
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001a76:	6820      	ldr	r0, [r4, #0]
 8001a78:	f504 6193 	add.w	r1, r4, #1176	; 0x498
 8001a7c:	f004 fdde 	bl	800663c <USB_EPStopXfer>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a80:	6820      	ldr	r0, [r4, #0]
 8001a82:	f004 fe6d 	bl	8006760 <USB_ReadInterrupts>
 8001a86:	02c3      	lsls	r3, r0, #11
 8001a88:	f140 80ab 	bpl.w	8001be2 <HAL_PCD_IRQHandler+0x356>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a8c:	6863      	ldr	r3, [r4, #4]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	f240 8089 	bls.w	8001ba6 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a94:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a98:	f8d5 1920 	ldr.w	r1, [r5, #2336]	; 0x920
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a9c:	2a01      	cmp	r2, #1
 8001a9e:	f000 8217 	beq.w	8001ed0 <HAL_PCD_IRQHandler+0x644>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d97f      	bls.n	8001ba6 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001aa6:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001aaa:	f8d5 1940 	ldr.w	r1, [r5, #2368]	; 0x940
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001aae:	2a01      	cmp	r2, #1
 8001ab0:	f000 8221 	beq.w	8001ef6 <HAL_PCD_IRQHandler+0x66a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d976      	bls.n	8001ba6 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ab8:	f894 20ac 	ldrb.w	r2, [r4, #172]	; 0xac
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001abc:	f8d5 1960 	ldr.w	r1, [r5, #2400]	; 0x960
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ac0:	2a01      	cmp	r2, #1
 8001ac2:	f000 8224 	beq.w	8001f0e <HAL_PCD_IRQHandler+0x682>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	d96d      	bls.n	8001ba6 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001aca:	f894 20d0 	ldrb.w	r2, [r4, #208]	; 0xd0
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001ace:	f8d5 1980 	ldr.w	r1, [r5, #2432]	; 0x980
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ad2:	2a01      	cmp	r2, #1
 8001ad4:	f000 8227 	beq.w	8001f26 <HAL_PCD_IRQHandler+0x69a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ad8:	2b05      	cmp	r3, #5
 8001ada:	d964      	bls.n	8001ba6 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001adc:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001ae0:	f8d5 19a0 	ldr.w	r1, [r5, #2464]	; 0x9a0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ae4:	2a01      	cmp	r2, #1
 8001ae6:	f000 8347 	beq.w	8002178 <HAL_PCD_IRQHandler+0x8ec>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aea:	2b06      	cmp	r3, #6
 8001aec:	d95b      	bls.n	8001ba6 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001aee:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001af2:	f8d5 19c0 	ldr.w	r1, [r5, #2496]	; 0x9c0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001af6:	2a01      	cmp	r2, #1
 8001af8:	f000 8359 	beq.w	80021ae <HAL_PCD_IRQHandler+0x922>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001afc:	2b07      	cmp	r3, #7
 8001afe:	d952      	bls.n	8001ba6 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b00:	f894 213c 	ldrb.w	r2, [r4, #316]	; 0x13c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001b04:	f8d5 19e0 	ldr.w	r1, [r5, #2528]	; 0x9e0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b08:	2a01      	cmp	r2, #1
 8001b0a:	f000 8364 	beq.w	80021d6 <HAL_PCD_IRQHandler+0x94a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b0e:	2b08      	cmp	r3, #8
 8001b10:	d949      	bls.n	8001ba6 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b12:	f894 2160 	ldrb.w	r2, [r4, #352]	; 0x160
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001b16:	f8d5 1a00 	ldr.w	r1, [r5, #2560]	; 0xa00
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b1a:	2a01      	cmp	r2, #1
 8001b1c:	f000 8367 	beq.w	80021ee <HAL_PCD_IRQHandler+0x962>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b20:	2b09      	cmp	r3, #9
 8001b22:	d940      	bls.n	8001ba6 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b24:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001b28:	f8d5 1a20 	ldr.w	r1, [r5, #2592]	; 0xa20
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b2c:	2a01      	cmp	r2, #1
 8001b2e:	f000 8372 	beq.w	8002216 <HAL_PCD_IRQHandler+0x98a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b32:	2b0a      	cmp	r3, #10
 8001b34:	d937      	bls.n	8001ba6 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b36:	f894 21a8 	ldrb.w	r2, [r4, #424]	; 0x1a8
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001b3a:	f8d5 1a40 	ldr.w	r1, [r5, #2624]	; 0xa40
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b3e:	2a01      	cmp	r2, #1
 8001b40:	f000 8386 	beq.w	8002250 <HAL_PCD_IRQHandler+0x9c4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b44:	2b0b      	cmp	r3, #11
 8001b46:	d92e      	bls.n	8001ba6 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b48:	f894 21cc 	ldrb.w	r2, [r4, #460]	; 0x1cc
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001b4c:	f8d5 1a60 	ldr.w	r1, [r5, #2656]	; 0xa60
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b50:	2a01      	cmp	r2, #1
 8001b52:	f000 839b 	beq.w	800228c <HAL_PCD_IRQHandler+0xa00>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b56:	2b0c      	cmp	r3, #12
 8001b58:	d925      	bls.n	8001ba6 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b5a:	f894 21f0 	ldrb.w	r2, [r4, #496]	; 0x1f0
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001b5e:	f8d5 1a80 	ldr.w	r1, [r5, #2688]	; 0xa80
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b62:	2a01      	cmp	r2, #1
 8001b64:	f000 83a6 	beq.w	80022b4 <HAL_PCD_IRQHandler+0xa28>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b68:	2b0d      	cmp	r3, #13
 8001b6a:	d91c      	bls.n	8001ba6 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b6c:	f894 2214 	ldrb.w	r2, [r4, #532]	; 0x214
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001b70:	f8d5 1aa0 	ldr.w	r1, [r5, #2720]	; 0xaa0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b74:	2a01      	cmp	r2, #1
 8001b76:	f000 83b1 	beq.w	80022dc <HAL_PCD_IRQHandler+0xa50>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b7a:	2b0e      	cmp	r3, #14
 8001b7c:	d913      	bls.n	8001ba6 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b7e:	f894 2238 	ldrb.w	r2, [r4, #568]	; 0x238
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001b82:	f8d5 1ac0 	ldr.w	r1, [r5, #2752]	; 0xac0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b86:	2a01      	cmp	r2, #1
 8001b88:	f000 83bc 	beq.w	8002304 <HAL_PCD_IRQHandler+0xa78>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b8c:	2b0f      	cmp	r3, #15
 8001b8e:	d90a      	bls.n	8001ba6 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b90:	f894 225c 	ldrb.w	r2, [r4, #604]	; 0x25c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001b94:	f8d5 1ae0 	ldr.w	r1, [r5, #2784]	; 0xae0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b98:	2a01      	cmp	r2, #1
 8001b9a:	f000 83c7 	beq.w	800232c <HAL_PCD_IRQHandler+0xaa0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b9e:	2b10      	cmp	r3, #16
 8001ba0:	d901      	bls.n	8001ba6 <HAL_PCD_IRQHandler+0x31a>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001ba2:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ba6:	6820      	ldr	r0, [r4, #0]
 8001ba8:	6943      	ldr	r3, [r0, #20]
 8001baa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bae:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001bb0:	f004 fdd6 	bl	8006760 <USB_ReadInterrupts>
 8001bb4:	0287      	lsls	r7, r0, #10
 8001bb6:	d421      	bmi.n	8001bfc <HAL_PCD_IRQHandler+0x370>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bb8:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001bba:	f004 fdd1 	bl	8006760 <USB_ReadInterrupts>
 8001bbe:	0040      	lsls	r0, r0, #1
 8001bc0:	f100 80c7 	bmi.w	8001d52 <HAL_PCD_IRQHandler+0x4c6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001bc4:	6820      	ldr	r0, [r4, #0]
 8001bc6:	f004 fdcb 	bl	8006760 <USB_ReadInterrupts>
 8001bca:	0741      	lsls	r1, r0, #29
 8001bcc:	f57f ae67 	bpl.w	800189e <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 8001bd0:	6823      	ldr	r3, [r4, #0]
 8001bd2:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001bd4:	076a      	lsls	r2, r5, #29
 8001bd6:	f100 829b 	bmi.w	8002110 <HAL_PCD_IRQHandler+0x884>
      hpcd->Instance->GOTGINT |= RegVal;
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	432a      	orrs	r2, r5
 8001bde:	605a      	str	r2, [r3, #4]
 8001be0:	e65d      	b.n	800189e <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001be2:	6820      	ldr	r0, [r4, #0]
 8001be4:	e7e4      	b.n	8001bb0 <HAL_PCD_IRQHandler+0x324>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001be6:	9b03      	ldr	r3, [sp, #12]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	07df      	lsls	r7, r3, #31
 8001bec:	f100 828c 	bmi.w	8002108 <HAL_PCD_IRQHandler+0x87c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001bf0:	6820      	ldr	r0, [r4, #0]
 8001bf2:	6943      	ldr	r3, [r0, #20]
 8001bf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bf8:	6143      	str	r3, [r0, #20]
 8001bfa:	e69e      	b.n	800193a <HAL_PCD_IRQHandler+0xae>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bfc:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8001c00:	f1bc 0f01 	cmp.w	ip, #1
 8001c04:	d928      	bls.n	8001c58 <HAL_PCD_IRQHandler+0x3cc>
 8001c06:	4623      	mov	r3, r4
 8001c08:	2101      	movs	r1, #1
 8001c0a:	f505 6232 	add.w	r2, r5, #2848	; 0xb20
 8001c0e:	e006      	b.n	8001c1e <HAL_PCD_IRQHandler+0x392>
 8001c10:	3101      	adds	r1, #1
 8001c12:	4561      	cmp	r1, ip
 8001c14:	f102 0220 	add.w	r2, r2, #32
 8001c18:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001c1c:	d01c      	beq.n	8001c58 <HAL_PCD_IRQHandler+0x3cc>
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c1e:	f893 02a4 	ldrb.w	r0, [r3, #676]	; 0x2a4
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001c22:	6816      	ldr	r6, [r2, #0]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c24:	2801      	cmp	r0, #1
 8001c26:	d1f3      	bne.n	8001c10 <HAL_PCD_IRQHandler+0x384>
 8001c28:	2e00      	cmp	r6, #0
 8001c2a:	daf1      	bge.n	8001c10 <HAL_PCD_IRQHandler+0x384>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001c2c:	f8d4 74fc 	ldr.w	r7, [r4, #1276]	; 0x4fc
 8001c30:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
 8001c34:	f007 0701 	and.w	r7, r7, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c38:	42be      	cmp	r6, r7
 8001c3a:	d1e9      	bne.n	8001c10 <HAL_PCD_IRQHandler+0x384>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001c3c:	f883 02a3 	strb.w	r0, [r3, #675]	; 0x2a3
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001c40:	69a8      	ldr	r0, [r5, #24]
 8001c42:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8001c46:	61a8      	str	r0, [r5, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001c48:	6968      	ldr	r0, [r5, #20]
 8001c4a:	0606      	lsls	r6, r0, #24
 8001c4c:	d4e0      	bmi.n	8001c10 <HAL_PCD_IRQHandler+0x384>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001c4e:	9a03      	ldr	r2, [sp, #12]
 8001c50:	6853      	ldr	r3, [r2, #4]
 8001c52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c56:	6053      	str	r3, [r2, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c58:	6820      	ldr	r0, [r4, #0]
 8001c5a:	6943      	ldr	r3, [r0, #20]
 8001c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c60:	6143      	str	r3, [r0, #20]
 8001c62:	e7aa      	b.n	8001bba <HAL_PCD_IRQHandler+0x32e>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c64:	9a03      	ldr	r2, [sp, #12]
 8001c66:	6853      	ldr	r3, [r2, #4]
 8001c68:	f023 0301 	bic.w	r3, r3, #1
 8001c6c:	6053      	str	r3, [r2, #4]
      if (hpcd->LPM_State == LPM_L1)
 8001c6e:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	f000 8138 	beq.w	8001ee8 <HAL_PCD_IRQHandler+0x65c>
        HAL_PCD_ResumeCallback(hpcd);
 8001c78:	4620      	mov	r0, r4
 8001c7a:	f7ff fdfd 	bl	8001878 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001c7e:	6820      	ldr	r0, [r4, #0]
 8001c80:	6943      	ldr	r3, [r0, #20]
 8001c82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001c86:	6143      	str	r3, [r0, #20]
 8001c88:	e651      	b.n	800192e <HAL_PCD_IRQHandler+0xa2>
      (void)USB_ActivateSetup(hpcd->Instance);
 8001c8a:	f004 fd9b 	bl	80067c4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001c8e:	6820      	ldr	r0, [r4, #0]
 8001c90:	f004 fcc8 	bl	8006624 <USB_GetDevSpeed>
 8001c94:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c96:	6826      	ldr	r6, [r4, #0]
 8001c98:	f001 fba0 	bl	80033dc <HAL_RCC_GetHCLKFreq>
 8001c9c:	7b22      	ldrb	r2, [r4, #12]
 8001c9e:	4601      	mov	r1, r0
 8001ca0:	4630      	mov	r0, r6
 8001ca2:	f004 fadb 	bl	800625c <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	f7ff fde2 	bl	8001870 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001cac:	6820      	ldr	r0, [r4, #0]
 8001cae:	6943      	ldr	r3, [r0, #20]
 8001cb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cb4:	6143      	str	r3, [r0, #20]
 8001cb6:	e667      	b.n	8001988 <HAL_PCD_IRQHandler+0xfc>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001cb8:	9a03      	ldr	r2, [sp, #12]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001cba:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001cbc:	6853      	ldr	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001cbe:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001cc0:	f023 0301 	bic.w	r3, r3, #1
 8001cc4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001cc6:	f004 fc83 	bl	80065d0 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cca:	6860      	ldr	r0, [r4, #4]
 8001ccc:	b1e0      	cbz	r0, 8001d08 <HAL_PCD_IRQHandler+0x47c>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001cce:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8001cd2:	f505 6310 	add.w	r3, r5, #2304	; 0x900
 8001cd6:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001cd8:	681a      	ldr	r2, [r3, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cda:	f10b 0b01 	add.w	fp, fp, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001cde:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001ce2:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001ce4:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001ce8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cec:	4583      	cmp	fp, r0
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001cee:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001cf2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001cf6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cfa:	f103 0320 	add.w	r3, r3, #32
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001cfe:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001d02:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d06:	d1e6      	bne.n	8001cd6 <HAL_PCD_IRQHandler+0x44a>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001d08:	9903      	ldr	r1, [sp, #12]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001d0a:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001d0c:	69cb      	ldr	r3, [r1, #28]
 8001d0e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001d12:	61cb      	str	r3, [r1, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001d14:	2a00      	cmp	r2, #0
 8001d16:	f040 80d0 	bne.w	8001eba <HAL_PCD_IRQHandler+0x62e>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001d1a:	694b      	ldr	r3, [r1, #20]
 8001d1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d20:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001d24:	614b      	str	r3, [r1, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001d26:	690b      	ldr	r3, [r1, #16]
 8001d28:	f043 030b 	orr.w	r3, r3, #11
 8001d2c:	610b      	str	r3, [r1, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001d2e:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d32:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001d34:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001d38:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d3c:	6820      	ldr	r0, [r4, #0]
 8001d3e:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8001d42:	f004 fd51 	bl	80067e8 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001d46:	6820      	ldr	r0, [r4, #0]
 8001d48:	6943      	ldr	r3, [r0, #20]
 8001d4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d4e:	6143      	str	r3, [r0, #20]
 8001d50:	e613      	b.n	800197a <HAL_PCD_IRQHandler+0xee>
      HAL_PCD_ConnectCallback(hpcd);
 8001d52:	4620      	mov	r0, r4
 8001d54:	f7ff fd96 	bl	8001884 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001d58:	6820      	ldr	r0, [r4, #0]
 8001d5a:	6943      	ldr	r3, [r0, #20]
 8001d5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001d60:	6143      	str	r3, [r0, #20]
 8001d62:	e730      	b.n	8001bc6 <HAL_PCD_IRQHandler+0x33a>
      HAL_PCD_SOFCallback(hpcd);
 8001d64:	4620      	mov	r0, r4
 8001d66:	f7ff fd81 	bl	800186c <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001d6a:	6820      	ldr	r0, [r4, #0]
 8001d6c:	6943      	ldr	r3, [r0, #20]
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	6143      	str	r3, [r0, #20]
 8001d74:	e60e      	b.n	8001994 <HAL_PCD_IRQHandler+0x108>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001d76:	6820      	ldr	r0, [r4, #0]
 8001d78:	f004 fcfe 	bl	8006778 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 8001d7c:	4680      	mov	r8, r0
 8001d7e:	2800      	cmp	r0, #0
 8001d80:	f43f adce 	beq.w	8001920 <HAL_PCD_IRQHandler+0x94>
      epnum = 0U;
 8001d84:	f04f 0a00 	mov.w	sl, #0
 8001d88:	4627      	mov	r7, r4
              ep->is_iso_incomplete = 0U;
 8001d8a:	4656      	mov	r6, sl
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d8c:	6820      	ldr	r0, [r4, #0]
 8001d8e:	f505 6910 	add.w	r9, r5, #2304	; 0x900
              ep->is_iso_incomplete = 0U;
 8001d92:	9504      	str	r5, [sp, #16]
 8001d94:	f8cd b014 	str.w	fp, [sp, #20]
 8001d98:	e009      	b.n	8001dae <HAL_PCD_IRQHandler+0x522>
      while (ep_intr != 0U)
 8001d9a:	ea5f 0858 	movs.w	r8, r8, lsr #1
        epnum++;
 8001d9e:	f106 0601 	add.w	r6, r6, #1
      while (ep_intr != 0U)
 8001da2:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8001da6:	f109 0920 	add.w	r9, r9, #32
 8001daa:	f000 80ec 	beq.w	8001f86 <HAL_PCD_IRQHandler+0x6fa>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001dae:	f018 0f01 	tst.w	r8, #1
 8001db2:	d0f2      	beq.n	8001d9a <HAL_PCD_IRQHandler+0x50e>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001db4:	fa5f fa86 	uxtb.w	sl, r6
 8001db8:	4651      	mov	r1, sl
 8001dba:	f004 fcef 	bl	800679c <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001dbe:	07c1      	lsls	r1, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001dc0:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001dc2:	d513      	bpl.n	8001dec <HAL_PCD_IRQHandler+0x560>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001dc4:	2001      	movs	r0, #1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001dc6:	9903      	ldr	r1, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001dc8:	f006 020f 	and.w	r2, r6, #15
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001dcc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001dce:	fa00 f202 	lsl.w	r2, r0, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001dd2:	ea23 0302 	bic.w	r3, r3, r2
 8001dd6:	634b      	str	r3, [r1, #52]	; 0x34
            if (hpcd->Init.dma_enable == 1U)
 8001dd8:	6921      	ldr	r1, [r4, #16]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001dda:	f8c9 0008 	str.w	r0, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 8001dde:	4281      	cmp	r1, r0
 8001de0:	f000 819b 	beq.w	800211a <HAL_PCD_IRQHandler+0x88e>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001de4:	4651      	mov	r1, sl
 8001de6:	4620      	mov	r0, r4
 8001de8:	f7ff fd3c 	bl	8001864 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001dec:	072a      	lsls	r2, r5, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001dee:	bf44      	itt	mi
 8001df0:	2308      	movmi	r3, #8
 8001df2:	f8c9 3008 	strmi.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001df6:	06eb      	lsls	r3, r5, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001df8:	bf44      	itt	mi
 8001dfa:	2310      	movmi	r3, #16
 8001dfc:	f8c9 3008 	strmi.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001e00:	0668      	lsls	r0, r5, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001e02:	bf44      	itt	mi
 8001e04:	2340      	movmi	r3, #64	; 0x40
 8001e06:	f8c9 3008 	strmi.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001e0a:	07a9      	lsls	r1, r5, #30
 8001e0c:	f100 8150 	bmi.w	80020b0 <HAL_PCD_IRQHandler+0x824>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001e10:	062a      	lsls	r2, r5, #24
 8001e12:	f100 80f9 	bmi.w	8002008 <HAL_PCD_IRQHandler+0x77c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001e16:	6820      	ldr	r0, [r4, #0]
 8001e18:	e7bf      	b.n	8001d9a <HAL_PCD_IRQHandler+0x50e>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001e1a:	6820      	ldr	r0, [r4, #0]
 8001e1c:	f004 fca4 	bl	8006768 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 8001e20:	4606      	mov	r6, r0
 8001e22:	2800      	cmp	r0, #0
 8001e24:	f43f ad76 	beq.w	8001914 <HAL_PCD_IRQHandler+0x88>
 8001e28:	46a2      	mov	sl, r4
      epnum = 0U;
 8001e2a:	f04f 0900 	mov.w	r9, #0
 8001e2e:	f505 6730 	add.w	r7, r5, #2816	; 0xb00
 8001e32:	f8cd b010 	str.w	fp, [sp, #16]
 8001e36:	e008      	b.n	8001e4a <HAL_PCD_IRQHandler+0x5be>
      while (ep_intr != 0U)
 8001e38:	0876      	lsrs	r6, r6, #1
        epnum++;
 8001e3a:	f109 0901 	add.w	r9, r9, #1
      while (ep_intr != 0U)
 8001e3e:	f107 0720 	add.w	r7, r7, #32
 8001e42:	f10a 0a24 	add.w	sl, sl, #36	; 0x24
 8001e46:	f000 809b 	beq.w	8001f80 <HAL_PCD_IRQHandler+0x6f4>
        if ((ep_intr & 0x1U) != 0U)
 8001e4a:	07f0      	lsls	r0, r6, #31
 8001e4c:	d5f4      	bpl.n	8001e38 <HAL_PCD_IRQHandler+0x5ac>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e4e:	fa5f fb89 	uxtb.w	fp, r9
 8001e52:	4659      	mov	r1, fp
 8001e54:	6820      	ldr	r0, [r4, #0]
 8001e56:	f004 fc97 	bl	8006788 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001e5a:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e5e:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001e60:	f040 80b3 	bne.w	8001fca <HAL_PCD_IRQHandler+0x73e>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001e64:	f018 0f08 	tst.w	r8, #8
 8001e68:	f040 8090 	bne.w	8001f8c <HAL_PCD_IRQHandler+0x700>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001e6c:	f018 0f10 	tst.w	r8, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001e70:	bf1c      	itt	ne
 8001e72:	2210      	movne	r2, #16
 8001e74:	60ba      	strne	r2, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001e76:	f018 0f02 	tst.w	r8, #2
 8001e7a:	d00e      	beq.n	8001e9a <HAL_PCD_IRQHandler+0x60e>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001e7c:	696a      	ldr	r2, [r5, #20]
 8001e7e:	0610      	lsls	r0, r2, #24
 8001e80:	d504      	bpl.n	8001e8c <HAL_PCD_IRQHandler+0x600>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001e82:	9b03      	ldr	r3, [sp, #12]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e8a:	605a      	str	r2, [r3, #4]
            if (ep->is_iso_incomplete == 1U)
 8001e8c:	f89a 227f 	ldrb.w	r2, [sl, #639]	; 0x27f
 8001e90:	2a01      	cmp	r2, #1
 8001e92:	f000 8184 	beq.w	800219e <HAL_PCD_IRQHandler+0x912>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001e96:	2302      	movs	r3, #2
 8001e98:	60bb      	str	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001e9a:	f018 0f20 	tst.w	r8, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e9e:	bf1c      	itt	ne
 8001ea0:	2320      	movne	r3, #32
 8001ea2:	60bb      	strne	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001ea4:	f418 5f00 	tst.w	r8, #8192	; 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001ea8:	bf1c      	itt	ne
 8001eaa:	f44f 5300 	movne.w	r3, #8192	; 0x2000
 8001eae:	60bb      	strne	r3, [r7, #8]
 8001eb0:	e7c2      	b.n	8001e38 <HAL_PCD_IRQHandler+0x5ac>
        HAL_PCD_SuspendCallback(hpcd);
 8001eb2:	4620      	mov	r0, r4
 8001eb4:	f7ff fcde 	bl	8001874 <HAL_PCD_SuspendCallback>
 8001eb8:	e558      	b.n	800196c <HAL_PCD_IRQHandler+0xe0>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001eba:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 8001ebe:	f043 030b 	orr.w	r3, r3, #11
 8001ec2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001ec6:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8001ec8:	f043 030b 	orr.w	r3, r3, #11
 8001ecc:	644b      	str	r3, [r1, #68]	; 0x44
 8001ece:	e72e      	b.n	8001d2e <HAL_PCD_IRQHandler+0x4a2>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ed0:	2900      	cmp	r1, #0
 8001ed2:	f6bf ade6 	bge.w	8001aa2 <HAL_PCD_IRQHandler+0x216>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ed6:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001ed8:	f884 2063 	strb.w	r2, [r4, #99]	; 0x63
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001edc:	f851 0b60 	ldr.w	r0, [r1], #96
 8001ee0:	f004 fbac 	bl	800663c <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ee4:	6863      	ldr	r3, [r4, #4]
 8001ee6:	e5dc      	b.n	8001aa2 <HAL_PCD_IRQHandler+0x216>
        hpcd->LPM_State = LPM_L0;
 8001ee8:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001eea:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 8001eec:	f884 14f4 	strb.w	r1, [r4, #1268]	; 0x4f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001ef0:	f000 fa8e 	bl	8002410 <HAL_PCDEx_LPM_Callback>
 8001ef4:	e6c3      	b.n	8001c7e <HAL_PCD_IRQHandler+0x3f2>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ef6:	2900      	cmp	r1, #0
 8001ef8:	f6bf addc 	bge.w	8001ab4 <HAL_PCD_IRQHandler+0x228>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001efc:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001efe:	f884 2087 	strb.w	r2, [r4, #135]	; 0x87
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001f02:	f851 0b84 	ldr.w	r0, [r1], #132
 8001f06:	f004 fb99 	bl	800663c <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f0a:	6863      	ldr	r3, [r4, #4]
 8001f0c:	e5d2      	b.n	8001ab4 <HAL_PCD_IRQHandler+0x228>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f0e:	2900      	cmp	r1, #0
 8001f10:	f6bf add9 	bge.w	8001ac6 <HAL_PCD_IRQHandler+0x23a>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f14:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001f16:	f884 20ab 	strb.w	r2, [r4, #171]	; 0xab
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001f1a:	f851 0ba8 	ldr.w	r0, [r1], #168
 8001f1e:	f004 fb8d 	bl	800663c <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f22:	6863      	ldr	r3, [r4, #4]
 8001f24:	e5cf      	b.n	8001ac6 <HAL_PCD_IRQHandler+0x23a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f26:	2900      	cmp	r1, #0
 8001f28:	f6bf add6 	bge.w	8001ad8 <HAL_PCD_IRQHandler+0x24c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f2c:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001f2e:	f884 20cf 	strb.w	r2, [r4, #207]	; 0xcf
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001f32:	f851 0bcc 	ldr.w	r0, [r1], #204
 8001f36:	f004 fb81 	bl	800663c <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f3a:	6863      	ldr	r3, [r4, #4]
 8001f3c:	e5cc      	b.n	8001ad8 <HAL_PCD_IRQHandler+0x24c>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001f3e:	6820      	ldr	r0, [r4, #0]
 8001f40:	f504 713a 	add.w	r1, r4, #744	; 0x2e8
 8001f44:	f004 fb7a 	bl	800663c <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f48:	6863      	ldr	r3, [r4, #4]
 8001f4a:	e541      	b.n	80019d0 <HAL_PCD_IRQHandler+0x144>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001f4c:	2208      	movs	r2, #8
 8001f4e:	f204 41c4 	addw	r1, r4, #1220	; 0x4c4
 8001f52:	4628      	mov	r0, r5
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f54:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001f58:	f004 fbca 	bl	80066f0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f5c:	eb04 0287 	add.w	r2, r4, r7, lsl #2
 8001f60:	f8d2 129c 	ldr.w	r1, [r2, #668]	; 0x29c
 8001f64:	f3c6 130a 	ubfx	r3, r6, #4, #11
 8001f68:	440b      	add	r3, r1
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f6a:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f6c:	f8c2 329c 	str.w	r3, [r2, #668]	; 0x29c
 8001f70:	e4c7      	b.n	8001902 <HAL_PCD_IRQHandler+0x76>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001f72:	6820      	ldr	r0, [r4, #0]
 8001f74:	f504 7143 	add.w	r1, r4, #780	; 0x30c
 8001f78:	f004 fb60 	bl	800663c <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f7c:	6863      	ldr	r3, [r4, #4]
 8001f7e:	e52e      	b.n	80019de <HAL_PCD_IRQHandler+0x152>
 8001f80:	f8dd b010 	ldr.w	fp, [sp, #16]
 8001f84:	e4c6      	b.n	8001914 <HAL_PCD_IRQHandler+0x88>
 8001f86:	e9dd 5b04 	ldrd	r5, fp, [sp, #16]
 8001f8a:	e4ca      	b.n	8001922 <HAL_PCD_IRQHandler+0x96>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001f8c:	2208      	movs	r2, #8
 8001f8e:	60ba      	str	r2, [r7, #8]
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f90:	6822      	ldr	r2, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f92:	4bbc      	ldr	r3, [pc, #752]	; (8002284 <HAL_PCD_IRQHandler+0x9f8>)
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001f94:	6c11      	ldr	r1, [r2, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001f96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f9a:	eb02 1249 	add.w	r2, r2, r9, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f9e:	4299      	cmp	r1, r3
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fa0:	6890      	ldr	r0, [r2, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fa2:	f240 80cb 	bls.w	800213c <HAL_PCD_IRQHandler+0x8b0>
 8001fa6:	0403      	lsls	r3, r0, #16
 8001fa8:	d502      	bpl.n	8001fb0 <HAL_PCD_IRQHandler+0x724>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001faa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fae:	6091      	str	r1, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001fb0:	4620      	mov	r0, r4
 8001fb2:	f7ff fc59 	bl	8001868 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001fb6:	6921      	ldr	r1, [r4, #16]
 8001fb8:	2901      	cmp	r1, #1
 8001fba:	f47f af57 	bne.w	8001e6c <HAL_PCD_IRQHandler+0x5e0>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001fbe:	6820      	ldr	r0, [r4, #0]
 8001fc0:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8001fc4:	f004 fc10 	bl	80067e8 <USB_EP0_OutStart>
 8001fc8:	e750      	b.n	8001e6c <HAL_PCD_IRQHandler+0x5e0>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001fca:	2201      	movs	r2, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fcc:	6820      	ldr	r0, [r4, #0]
  if (hpcd->Init.dma_enable == 1U)
 8001fce:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001fd0:	60ba      	str	r2, [r7, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fd2:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
 8001fd6:	eb02 1249 	add.w	r2, r2, r9, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 8001fda:	2901      	cmp	r1, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001fdc:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fe0:	6893      	ldr	r3, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 8001fe2:	f000 80af 	beq.w	8002144 <HAL_PCD_IRQHandler+0x8b8>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001fe6:	49a8      	ldr	r1, [pc, #672]	; (8002288 <HAL_PCD_IRQHandler+0x9fc>)
 8001fe8:	458c      	cmp	ip, r1
 8001fea:	f000 810c 	beq.w	8002206 <HAL_PCD_IRQHandler+0x97a>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001fee:	f1b9 0f00 	cmp.w	r9, #0
 8001ff2:	d104      	bne.n	8001ffe <HAL_PCD_IRQHandler+0x772>
 8001ff4:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
 8001ff8:	2a00      	cmp	r2, #0
 8001ffa:	f000 81da 	beq.w	80023b2 <HAL_PCD_IRQHandler+0xb26>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001ffe:	4659      	mov	r1, fp
 8002000:	4620      	mov	r0, r4
 8002002:	f7ff fc2d 	bl	8001860 <HAL_PCD_DataOutStageCallback>
 8002006:	e72d      	b.n	8001e64 <HAL_PCD_IRQHandler+0x5d8>
  if (ep->xfer_count > ep->xfer_len)
 8002008:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800200a:	6d7d      	ldr	r5, [r7, #84]	; 0x54
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800200c:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_count > ep->xfer_len)
 8002010:	42ab      	cmp	r3, r5
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002012:	4658      	mov	r0, fp
  if (ep->xfer_count > ep->xfer_len)
 8002014:	f63f aec1 	bhi.w	8001d9a <HAL_PCD_IRQHandler+0x50e>
  len32b = (len + 3U) / 4U;
 8002018:	6cba      	ldr	r2, [r7, #72]	; 0x48
  len = ep->xfer_len - ep->xfer_count;
 800201a:	1ae9      	subs	r1, r5, r3
  len32b = (len + 3U) / 4U;
 800201c:	4291      	cmp	r1, r2
 800201e:	bf28      	it	cs
 8002020:	4611      	movcs	r1, r2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002022:	f50b 6210 	add.w	r2, fp, #2304	; 0x900
 8002026:	eb02 1246 	add.w	r2, r2, r6, lsl #5
 800202a:	4694      	mov	ip, r2
 800202c:	6992      	ldr	r2, [r2, #24]
  len32b = (len + 3U) / 4U;
 800202e:	3103      	adds	r1, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002030:	b292      	uxth	r2, r2
 8002032:	ebb2 0f91 	cmp.w	r2, r1, lsr #2
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002036:	f8cd b01c 	str.w	fp, [sp, #28]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800203a:	f0c0 8099 	bcc.w	8002170 <HAL_PCD_IRQHandler+0x8e4>
 800203e:	4652      	mov	r2, sl
 8002040:	9606      	str	r6, [sp, #24]
 8002042:	46ca      	mov	sl, r9
 8002044:	4626      	mov	r6, r4
 8002046:	46c1      	mov	r9, r8
 8002048:	4664      	mov	r4, ip
 800204a:	4690      	mov	r8, r2
 800204c:	e019      	b.n	8002082 <HAL_PCD_IRQHandler+0x7f6>
    len = ep->xfer_len - ep->xfer_count;
 800204e:	1aed      	subs	r5, r5, r3
    if (len > ep->maxpacket)
 8002050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002052:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002054:	429d      	cmp	r5, r3
 8002056:	bf28      	it	cs
 8002058:	461d      	movcs	r5, r3
 800205a:	7c33      	ldrb	r3, [r6, #16]
 800205c:	4642      	mov	r2, r8
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	4658      	mov	r0, fp
 8002062:	b2ab      	uxth	r3, r5
 8002064:	f004 fb2e 	bl	80066c4 <USB_WritePacket>
    ep->xfer_buff  += len;
 8002068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800206a:	69a1      	ldr	r1, [r4, #24]
    ep->xfer_buff  += len;
 800206c:	442b      	add	r3, r5
 800206e:	64fb      	str	r3, [r7, #76]	; 0x4c
    ep->xfer_count += len;
 8002070:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002072:	b289      	uxth	r1, r1
    ep->xfer_count += len;
 8002074:	442b      	add	r3, r5
    len32b = (len + 3U) / 4U;
 8002076:	3503      	adds	r5, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002078:	ebb1 0f95 	cmp.w	r1, r5, lsr #2
    ep->xfer_count += len;
 800207c:	65fb      	str	r3, [r7, #92]	; 0x5c
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800207e:	d36f      	bcc.n	8002160 <HAL_PCD_IRQHandler+0x8d4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002080:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8002082:	429d      	cmp	r5, r3
 8002084:	d8e3      	bhi.n	800204e <HAL_PCD_IRQHandler+0x7c2>
 8002086:	4634      	mov	r4, r6
 8002088:	46c8      	mov	r8, r9
 800208a:	46d1      	mov	r9, sl
 800208c:	9e06      	ldr	r6, [sp, #24]
 800208e:	f8d4 b000 	ldr.w	fp, [r4]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002092:	2501      	movs	r5, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002094:	9b07      	ldr	r3, [sp, #28]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002096:	f006 020f 	and.w	r2, r6, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800209a:	f503 6100 	add.w	r1, r3, #2048	; 0x800
 800209e:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020a2:	fa05 f202 	lsl.w	r2, r5, r2
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020a6:	ea23 0302 	bic.w	r3, r3, r2
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80020aa:	4658      	mov	r0, fp
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020ac:	634b      	str	r3, [r1, #52]	; 0x34
 80020ae:	e674      	b.n	8001d9a <HAL_PCD_IRQHandler+0x50e>
            (void)USB_FlushTxFifo(USBx, epnum);
 80020b0:	4631      	mov	r1, r6
 80020b2:	9804      	ldr	r0, [sp, #16]
 80020b4:	f004 fa8c 	bl	80065d0 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 80020b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80020bc:	2b01      	cmp	r3, #1
 80020be:	f000 80b6 	beq.w	800222e <HAL_PCD_IRQHandler+0x9a2>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80020c2:	2302      	movs	r3, #2
 80020c4:	f8c9 3008 	str.w	r3, [r9, #8]
 80020c8:	e6a2      	b.n	8001e10 <HAL_PCD_IRQHandler+0x584>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80020ca:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80020ce:	421e      	tst	r6, r3
 80020d0:	f43f ac17 	beq.w	8001902 <HAL_PCD_IRQHandler+0x76>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80020d4:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
 80020d8:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80020dc:	f3c6 120a 	ubfx	r2, r6, #4, #11
 80020e0:	4628      	mov	r0, r5
 80020e2:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 80020e6:	f004 fb03 	bl	80066f0 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020ea:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80020ee:	f3c6 160a 	ubfx	r6, r6, #4, #11
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020f2:	4433      	add	r3, r6
 80020f4:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020f8:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020fc:	6820      	ldr	r0, [r4, #0]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020fe:	4433      	add	r3, r6
 8002100:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8002104:	f7ff bbfd 	b.w	8001902 <HAL_PCD_IRQHandler+0x76>
        HAL_PCD_SuspendCallback(hpcd);
 8002108:	4620      	mov	r0, r4
 800210a:	f7ff fbb3 	bl	8001874 <HAL_PCD_SuspendCallback>
 800210e:	e56f      	b.n	8001bf0 <HAL_PCD_IRQHandler+0x364>
        HAL_PCD_DisconnectCallback(hpcd);
 8002110:	4620      	mov	r0, r4
 8002112:	f7ff fbb9 	bl	8001888 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= RegVal;
 8002116:	6823      	ldr	r3, [r4, #0]
 8002118:	e55f      	b.n	8001bda <HAL_PCD_IRQHandler+0x34e>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800211a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800211e:	4413      	add	r3, r2
 8002120:	64fb      	str	r3, [r7, #76]	; 0x4c
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002122:	2e00      	cmp	r6, #0
 8002124:	f47f ae5e 	bne.w	8001de4 <HAL_PCD_IRQHandler+0x558>
 8002128:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800212a:	2b00      	cmp	r3, #0
 800212c:	f47f ae5a 	bne.w	8001de4 <HAL_PCD_IRQHandler+0x558>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002130:	6820      	ldr	r0, [r4, #0]
 8002132:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8002136:	f004 fb57 	bl	80067e8 <USB_EP0_OutStart>
 800213a:	e653      	b.n	8001de4 <HAL_PCD_IRQHandler+0x558>
  HAL_PCD_SetupStageCallback(hpcd);
 800213c:	4620      	mov	r0, r4
 800213e:	f7ff fb93 	bl	8001868 <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002142:	e693      	b.n	8001e6c <HAL_PCD_IRQHandler+0x5e0>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002144:	0719      	lsls	r1, r3, #28
 8002146:	f140 8097 	bpl.w	8002278 <HAL_PCD_IRQHandler+0x9ec>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800214a:	494e      	ldr	r1, [pc, #312]	; (8002284 <HAL_PCD_IRQHandler+0x9f8>)
 800214c:	458c      	cmp	ip, r1
 800214e:	f67f ae89 	bls.w	8001e64 <HAL_PCD_IRQHandler+0x5d8>
 8002152:	0418      	lsls	r0, r3, #16
 8002154:	f57f ae86 	bpl.w	8001e64 <HAL_PCD_IRQHandler+0x5d8>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002158:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800215c:	6091      	str	r1, [r2, #8]
 800215e:	e681      	b.n	8001e64 <HAL_PCD_IRQHandler+0x5d8>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002160:	4634      	mov	r4, r6
 8002162:	f8d4 b000 	ldr.w	fp, [r4]
 8002166:	46c8      	mov	r8, r9
 8002168:	4658      	mov	r0, fp
 800216a:	46d1      	mov	r9, sl
 800216c:	9e06      	ldr	r6, [sp, #24]
  if (ep->xfer_len <= ep->xfer_count)
 800216e:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8002170:	429d      	cmp	r5, r3
 8002172:	f63f ae12 	bhi.w	8001d9a <HAL_PCD_IRQHandler+0x50e>
 8002176:	e78c      	b.n	8002092 <HAL_PCD_IRQHandler+0x806>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002178:	2900      	cmp	r1, #0
 800217a:	f6bf acb6 	bge.w	8001aea <HAL_PCD_IRQHandler+0x25e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800217e:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002180:	f884 20f3 	strb.w	r2, [r4, #243]	; 0xf3
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002184:	f851 0bf0 	ldr.w	r0, [r1], #240
 8002188:	f004 fa58 	bl	800663c <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800218c:	6863      	ldr	r3, [r4, #4]
 800218e:	e4ac      	b.n	8001aea <HAL_PCD_IRQHandler+0x25e>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002190:	6820      	ldr	r0, [r4, #0]
 8002192:	f504 7128 	add.w	r1, r4, #672	; 0x2a0
 8002196:	f004 fa51 	bl	800663c <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800219a:	6863      	ldr	r3, [r4, #4]
 800219c:	e40a      	b.n	80019b4 <HAL_PCD_IRQHandler+0x128>
              ep->is_iso_incomplete = 0U;
 800219e:	2300      	movs	r3, #0
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80021a0:	4659      	mov	r1, fp
 80021a2:	4620      	mov	r0, r4
              ep->is_iso_incomplete = 0U;
 80021a4:	f88a 327f 	strb.w	r3, [sl, #639]	; 0x27f
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80021a8:	f7ff fb68 	bl	800187c <HAL_PCD_ISOOUTIncompleteCallback>
 80021ac:	e673      	b.n	8001e96 <HAL_PCD_IRQHandler+0x60a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80021ae:	2900      	cmp	r1, #0
 80021b0:	f6bf aca4 	bge.w	8001afc <HAL_PCD_IRQHandler+0x270>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80021b4:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80021b6:	f884 2117 	strb.w	r2, [r4, #279]	; 0x117
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80021ba:	f504 718a 	add.w	r1, r4, #276	; 0x114
 80021be:	f004 fa3d 	bl	800663c <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021c2:	6863      	ldr	r3, [r4, #4]
 80021c4:	e49a      	b.n	8001afc <HAL_PCD_IRQHandler+0x270>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80021c6:	6820      	ldr	r0, [r4, #0]
 80021c8:	f504 7131 	add.w	r1, r4, #708	; 0x2c4
 80021cc:	f004 fa36 	bl	800663c <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021d0:	6863      	ldr	r3, [r4, #4]
 80021d2:	f7ff bbf6 	b.w	80019c2 <HAL_PCD_IRQHandler+0x136>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80021d6:	2900      	cmp	r1, #0
 80021d8:	f6bf ac99 	bge.w	8001b0e <HAL_PCD_IRQHandler+0x282>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80021dc:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80021de:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80021e2:	f504 719c 	add.w	r1, r4, #312	; 0x138
 80021e6:	f004 fa29 	bl	800663c <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021ea:	6863      	ldr	r3, [r4, #4]
 80021ec:	e48f      	b.n	8001b0e <HAL_PCD_IRQHandler+0x282>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80021ee:	2900      	cmp	r1, #0
 80021f0:	f6bf ac96 	bge.w	8001b20 <HAL_PCD_IRQHandler+0x294>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80021f4:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80021f6:	f884 215f 	strb.w	r2, [r4, #351]	; 0x15f
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80021fa:	f504 71ae 	add.w	r1, r4, #348	; 0x15c
 80021fe:	f004 fa1d 	bl	800663c <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002202:	6863      	ldr	r3, [r4, #4]
 8002204:	e48c      	b.n	8001b20 <HAL_PCD_IRQHandler+0x294>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002206:	0418      	lsls	r0, r3, #16
 8002208:	d4a6      	bmi.n	8002158 <HAL_PCD_IRQHandler+0x8cc>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800220a:	0699      	lsls	r1, r3, #26
 800220c:	f57f aef7 	bpl.w	8001ffe <HAL_PCD_IRQHandler+0x772>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002210:	2120      	movs	r1, #32
 8002212:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002214:	e6f3      	b.n	8001ffe <HAL_PCD_IRQHandler+0x772>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002216:	2900      	cmp	r1, #0
 8002218:	f6bf ac8b 	bge.w	8001b32 <HAL_PCD_IRQHandler+0x2a6>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800221c:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800221e:	f884 2183 	strb.w	r2, [r4, #387]	; 0x183
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002222:	f504 71c0 	add.w	r1, r4, #384	; 0x180
 8002226:	f004 fa09 	bl	800663c <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800222a:	6863      	ldr	r3, [r4, #4]
 800222c:	e481      	b.n	8001b32 <HAL_PCD_IRQHandler+0x2a6>
              ep->is_iso_incomplete = 0U;
 800222e:	f04f 0300 	mov.w	r3, #0
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002232:	4651      	mov	r1, sl
 8002234:	4620      	mov	r0, r4
              ep->is_iso_incomplete = 0U;
 8002236:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800223a:	f7ff fb21 	bl	8001880 <HAL_PCD_ISOINIncompleteCallback>
 800223e:	e740      	b.n	80020c2 <HAL_PCD_IRQHandler+0x836>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002240:	6820      	ldr	r0, [r4, #0]
 8002242:	f504 714c 	add.w	r1, r4, #816	; 0x330
 8002246:	f004 f9f9 	bl	800663c <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800224a:	6863      	ldr	r3, [r4, #4]
 800224c:	f7ff bbce 	b.w	80019ec <HAL_PCD_IRQHandler+0x160>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002250:	2900      	cmp	r1, #0
 8002252:	f6bf ac77 	bge.w	8001b44 <HAL_PCD_IRQHandler+0x2b8>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002256:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002258:	f884 21a7 	strb.w	r2, [r4, #423]	; 0x1a7
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800225c:	f504 71d2 	add.w	r1, r4, #420	; 0x1a4
 8002260:	f004 f9ec 	bl	800663c <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002264:	6863      	ldr	r3, [r4, #4]
 8002266:	e46d      	b.n	8001b44 <HAL_PCD_IRQHandler+0x2b8>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002268:	6820      	ldr	r0, [r4, #0]
 800226a:	f504 7155 	add.w	r1, r4, #852	; 0x354
 800226e:	f004 f9e5 	bl	800663c <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002272:	6863      	ldr	r3, [r4, #4]
 8002274:	f7ff bbc1 	b.w	80019fa <HAL_PCD_IRQHandler+0x16e>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002278:	0699      	lsls	r1, r3, #26
 800227a:	d573      	bpl.n	8002364 <HAL_PCD_IRQHandler+0xad8>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800227c:	2120      	movs	r1, #32
 800227e:	6091      	str	r1, [r2, #8]
 8002280:	e5f0      	b.n	8001e64 <HAL_PCD_IRQHandler+0x5d8>
 8002282:	bf00      	nop
 8002284:	4f54300a 	.word	0x4f54300a
 8002288:	4f54310a 	.word	0x4f54310a
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800228c:	2900      	cmp	r1, #0
 800228e:	f6bf ac62 	bge.w	8001b56 <HAL_PCD_IRQHandler+0x2ca>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002292:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002294:	f884 21cb 	strb.w	r2, [r4, #459]	; 0x1cb
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002298:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
 800229c:	f004 f9ce 	bl	800663c <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022a0:	6863      	ldr	r3, [r4, #4]
 80022a2:	e458      	b.n	8001b56 <HAL_PCD_IRQHandler+0x2ca>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80022a4:	6820      	ldr	r0, [r4, #0]
 80022a6:	f504 715e 	add.w	r1, r4, #888	; 0x378
 80022aa:	f004 f9c7 	bl	800663c <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022ae:	6863      	ldr	r3, [r4, #4]
 80022b0:	f7ff bbaa 	b.w	8001a08 <HAL_PCD_IRQHandler+0x17c>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80022b4:	2900      	cmp	r1, #0
 80022b6:	f6bf ac57 	bge.w	8001b68 <HAL_PCD_IRQHandler+0x2dc>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80022ba:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80022bc:	f884 21ef 	strb.w	r2, [r4, #495]	; 0x1ef
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80022c0:	f504 71f6 	add.w	r1, r4, #492	; 0x1ec
 80022c4:	f004 f9ba 	bl	800663c <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022c8:	6863      	ldr	r3, [r4, #4]
 80022ca:	e44d      	b.n	8001b68 <HAL_PCD_IRQHandler+0x2dc>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80022cc:	6820      	ldr	r0, [r4, #0]
 80022ce:	f504 7167 	add.w	r1, r4, #924	; 0x39c
 80022d2:	f004 f9b3 	bl	800663c <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022d6:	6863      	ldr	r3, [r4, #4]
 80022d8:	f7ff bb9d 	b.w	8001a16 <HAL_PCD_IRQHandler+0x18a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80022dc:	2900      	cmp	r1, #0
 80022de:	f6bf ac4c 	bge.w	8001b7a <HAL_PCD_IRQHandler+0x2ee>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80022e2:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80022e4:	f884 2213 	strb.w	r2, [r4, #531]	; 0x213
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80022e8:	f504 7104 	add.w	r1, r4, #528	; 0x210
 80022ec:	f004 f9a6 	bl	800663c <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022f0:	6863      	ldr	r3, [r4, #4]
 80022f2:	e442      	b.n	8001b7a <HAL_PCD_IRQHandler+0x2ee>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80022f4:	6820      	ldr	r0, [r4, #0]
 80022f6:	f504 7170 	add.w	r1, r4, #960	; 0x3c0
 80022fa:	f004 f99f 	bl	800663c <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022fe:	6863      	ldr	r3, [r4, #4]
 8002300:	f7ff bb90 	b.w	8001a24 <HAL_PCD_IRQHandler+0x198>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002304:	2900      	cmp	r1, #0
 8002306:	f6bf ac41 	bge.w	8001b8c <HAL_PCD_IRQHandler+0x300>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800230a:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800230c:	f884 2237 	strb.w	r2, [r4, #567]	; 0x237
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002310:	f504 710d 	add.w	r1, r4, #564	; 0x234
 8002314:	f004 f992 	bl	800663c <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002318:	6863      	ldr	r3, [r4, #4]
 800231a:	e437      	b.n	8001b8c <HAL_PCD_IRQHandler+0x300>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800231c:	6820      	ldr	r0, [r4, #0]
 800231e:	f504 7179 	add.w	r1, r4, #996	; 0x3e4
 8002322:	f004 f98b 	bl	800663c <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002326:	6863      	ldr	r3, [r4, #4]
 8002328:	f7ff bb83 	b.w	8001a32 <HAL_PCD_IRQHandler+0x1a6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800232c:	2900      	cmp	r1, #0
 800232e:	f6bf ac36 	bge.w	8001b9e <HAL_PCD_IRQHandler+0x312>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002332:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002334:	f884 225b 	strb.w	r2, [r4, #603]	; 0x25b
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002338:	f504 7116 	add.w	r1, r4, #600	; 0x258
 800233c:	f004 f97e 	bl	800663c <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002340:	6863      	ldr	r3, [r4, #4]
 8002342:	e42c      	b.n	8001b9e <HAL_PCD_IRQHandler+0x312>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002344:	6820      	ldr	r0, [r4, #0]
 8002346:	f504 6181 	add.w	r1, r4, #1032	; 0x408
 800234a:	f004 f977 	bl	800663c <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800234e:	6863      	ldr	r3, [r4, #4]
 8002350:	f7ff bb76 	b.w	8001a40 <HAL_PCD_IRQHandler+0x1b4>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002354:	6820      	ldr	r0, [r4, #0]
 8002356:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 800235a:	f004 f96f 	bl	800663c <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800235e:	6863      	ldr	r3, [r4, #4]
 8002360:	f7ff bb75 	b.w	8001a4e <HAL_PCD_IRQHandler+0x1c2>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002364:	f013 0f28 	tst.w	r3, #40	; 0x28
 8002368:	f47f ad7c 	bne.w	8001e64 <HAL_PCD_IRQHandler+0x5d8>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800236c:	491b      	ldr	r1, [pc, #108]	; (80023dc <HAL_PCD_IRQHandler+0xb50>)
 800236e:	458c      	cmp	ip, r1
 8002370:	d902      	bls.n	8002378 <HAL_PCD_IRQHandler+0xaec>
 8002372:	041b      	lsls	r3, r3, #16
 8002374:	f53f aef0 	bmi.w	8002158 <HAL_PCD_IRQHandler+0x8cc>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002378:	6911      	ldr	r1, [r2, #16]
 800237a:	f8da 2298 	ldr.w	r2, [sl, #664]	; 0x298
 800237e:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8002382:	1a52      	subs	r2, r2, r1
 8002384:	f8ca 229c 	str.w	r2, [sl, #668]	; 0x29c
        if (epnum == 0U)
 8002388:	f1b9 0f00 	cmp.w	r9, #0
 800238c:	f47f ae37 	bne.w	8001ffe <HAL_PCD_IRQHandler+0x772>
          if (ep->xfer_len == 0U)
 8002390:	f8d4 1294 	ldr.w	r1, [r4, #660]	; 0x294
 8002394:	b1d9      	cbz	r1, 80023ce <HAL_PCD_IRQHandler+0xb42>
            ep->xfer_buff += ep->xfer_count;
 8002396:	f8d4 128c 	ldr.w	r1, [r4, #652]	; 0x28c
 800239a:	440a      	add	r2, r1
 800239c:	f8c4 228c 	str.w	r2, [r4, #652]	; 0x28c
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023a0:	e62d      	b.n	8001ffe <HAL_PCD_IRQHandler+0x772>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80023a2:	6820      	ldr	r0, [r4, #0]
 80023a4:	f504 618a 	add.w	r1, r4, #1104	; 0x450
 80023a8:	f004 f948 	bl	800663c <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023ac:	6863      	ldr	r3, [r4, #4]
 80023ae:	f7ff bb55 	b.w	8001a5c <HAL_PCD_IRQHandler+0x1d0>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80023b2:	4649      	mov	r1, r9
 80023b4:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 80023b8:	f004 fa16 	bl	80067e8 <USB_EP0_OutStart>
 80023bc:	e61f      	b.n	8001ffe <HAL_PCD_IRQHandler+0x772>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80023be:	6820      	ldr	r0, [r4, #0]
 80023c0:	f204 4174 	addw	r1, r4, #1140	; 0x474
 80023c4:	f004 f93a 	bl	800663c <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023c8:	6863      	ldr	r3, [r4, #4]
 80023ca:	f7ff bb4e 	b.w	8001a6a <HAL_PCD_IRQHandler+0x1de>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023ce:	2101      	movs	r1, #1
 80023d0:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 80023d4:	f004 fa08 	bl	80067e8 <USB_EP0_OutStart>
 80023d8:	e611      	b.n	8001ffe <HAL_PCD_IRQHandler+0x772>
 80023da:	bf00      	nop
 80023dc:	4f54300a 	.word	0x4f54300a

080023e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80023e0:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 80023e2:	2100      	movs	r1, #0
{
 80023e4:	b410      	push	{r4}
  hpcd->lpm_active = 1U;
 80023e6:	2401      	movs	r4, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023e8:	681a      	ldr	r2, [r3, #0]
  hpcd->LPM_State = LPM_L0;
 80023ea:	f883 14f4 	strb.w	r1, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);

  return HAL_OK;
}
 80023ee:	4608      	mov	r0, r1
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80023f0:	6991      	ldr	r1, [r2, #24]
  hpcd->lpm_active = 1U;
 80023f2:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80023f6:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 80023fa:	6191      	str	r1, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80023fc:	6d53      	ldr	r3, [r2, #84]	; 0x54
}
 80023fe:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002406:	f043 0303 	orr.w	r3, r3, #3
 800240a:	6553      	str	r3, [r2, #84]	; 0x54
}
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop

08002410 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop

08002414 <HAL_PWREx_ControlVoltageScaling>:

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8002414:	4a1d      	ldr	r2, [pc, #116]	; (800248c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002416:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8002418:	f403 3340 	and.w	r3, r3, #196608	; 0x30000

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800241c:	4283      	cmp	r3, r0
 800241e:	d030      	beq.n	8002482 <HAL_PWREx_ControlVoltageScaling+0x6e>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002420:	f04f 0c32 	mov.w	ip, #50	; 0x32
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8002424:	68d3      	ldr	r3, [r2, #12]
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002426:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800242a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800242e:	ea40 0003 	orr.w	r0, r0, r3
 8002432:	bf88      	it	hi
 8002434:	f440 2080 	orrhi.w	r0, r0, #262144	; 0x40000
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002438:	4b15      	ldr	r3, [pc, #84]	; (8002490 <HAL_PWREx_ControlVoltageScaling+0x7c>)
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800243a:	60d0      	str	r0, [r2, #12]
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a15      	ldr	r2, [pc, #84]	; (8002494 <HAL_PWREx_ControlVoltageScaling+0x80>)
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002440:	4812      	ldr	r0, [pc, #72]	; (800248c <HAL_PWREx_ControlVoltageScaling+0x78>)
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002442:	fba2 1303 	umull	r1, r3, r2, r3
 8002446:	099b      	lsrs	r3, r3, #6
 8002448:	fb0c f303 	mul.w	r3, ip, r3
 800244c:	fba2 2303 	umull	r2, r3, r2, r3
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002450:	68c1      	ldr	r1, [r0, #12]
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002452:	099b      	lsrs	r3, r3, #6
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002454:	040a      	lsls	r2, r1, #16
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002456:	f103 0301 	add.w	r3, r3, #1
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800245a:	d407      	bmi.n	800246c <HAL_PWREx_ControlVoltageScaling+0x58>
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800245c:	461a      	mov	r2, r3
 800245e:	e000      	b.n	8002462 <HAL_PWREx_ControlVoltageScaling+0x4e>
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002460:	b18a      	cbz	r2, 8002486 <HAL_PWREx_ControlVoltageScaling+0x72>
 8002462:	68c1      	ldr	r1, [r0, #12]
  {
    timeout--;
 8002464:	3a01      	subs	r2, #1
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002466:	0409      	lsls	r1, r1, #16
 8002468:	d5fa      	bpl.n	8002460 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }

  /* Check time out */
  if (timeout != 0U)
 800246a:	b162      	cbz	r2, 8002486 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800246c:	4907      	ldr	r1, [pc, #28]	; (800248c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800246e:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8002470:	0410      	lsls	r0, r2, #16
 8002472:	d406      	bmi.n	8002482 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002474:	e000      	b.n	8002478 <HAL_PWREx_ControlVoltageScaling+0x64>
 8002476:	b133      	cbz	r3, 8002486 <HAL_PWREx_ControlVoltageScaling+0x72>
 8002478:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    {
      timeout--;
 800247a:	3b01      	subs	r3, #1
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800247c:	0412      	lsls	r2, r2, #16
 800247e:	d5fa      	bpl.n	8002476 <HAL_PWREx_ControlVoltageScaling+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002480:	b10b      	cbz	r3, 8002486 <HAL_PWREx_ControlVoltageScaling+0x72>
    return HAL_OK;
 8002482:	2000      	movs	r0, #0
 8002484:	4770      	bx	lr
  {
    return HAL_TIMEOUT;
 8002486:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	46020800 	.word	0x46020800
 8002490:	20000028 	.word	0x20000028
 8002494:	10624dd3 	.word	0x10624dd3

08002498 <HAL_PWREx_GetVoltageRange>:
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8002498:	4b02      	ldr	r3, [pc, #8]	; (80024a4 <HAL_PWREx_GetVoltageRange+0xc>)
 800249a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
}
 800249c:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	46020800 	.word	0x46020800

080024a8 <HAL_PWREx_ConfigSupply>:

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80024a8:	2132      	movs	r1, #50	; 0x32
 80024aa:	4b1a      	ldr	r3, [pc, #104]	; (8002514 <HAL_PWREx_ConfigSupply+0x6c>)
 80024ac:	4a1a      	ldr	r2, [pc, #104]	; (8002518 <HAL_PWREx_ConfigSupply+0x70>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	fba2 c303 	umull	ip, r3, r2, r3
 80024b4:	099b      	lsrs	r3, r3, #6
 80024b6:	fb01 f303 	mul.w	r3, r1, r3
 80024ba:	fba2 2303 	umull	r2, r3, r2, r3

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80024be:	4917      	ldr	r1, [pc, #92]	; (800251c <HAL_PWREx_ConfigSupply+0x74>)
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80024c0:	099b      	lsrs	r3, r3, #6
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80024c2:	688a      	ldr	r2, [r1, #8]
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80024c4:	3301      	adds	r3, #1
  if (SupplySource == PWR_LDO_SUPPLY)
 80024c6:	b988      	cbnz	r0, 80024ec <HAL_PWREx_ConfigSupply+0x44>
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80024c8:	f022 0202 	bic.w	r2, r2, #2
 80024cc:	608a      	str	r2, [r1, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80024ce:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80024d0:	0790      	lsls	r0, r2, #30
 80024d2:	d509      	bpl.n	80024e8 <HAL_PWREx_ConfigSupply+0x40>
 80024d4:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    {
      timeout--;
 80024d6:	3b01      	subs	r3, #1
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80024d8:	0792      	lsls	r2, r2, #30
 80024da:	d504      	bpl.n	80024e6 <HAL_PWREx_ConfigSupply+0x3e>
 80024dc:	b1bb      	cbz	r3, 800250e <HAL_PWREx_ConfigSupply+0x66>
 80024de:	6bca      	ldr	r2, [r1, #60]	; 0x3c
      timeout--;
 80024e0:	3b01      	subs	r3, #1
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80024e2:	0792      	lsls	r2, r2, #30
 80024e4:	d4fa      	bmi.n	80024dc <HAL_PWREx_ConfigSupply+0x34>
      timeout--;
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80024e6:	b193      	cbz	r3, 800250e <HAL_PWREx_ConfigSupply+0x66>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 80024e8:	2000      	movs	r0, #0
}
 80024ea:	4770      	bx	lr
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80024ec:	f042 0202 	orr.w	r2, r2, #2
 80024f0:	608a      	str	r2, [r1, #8]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80024f2:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80024f4:	0790      	lsls	r0, r2, #30
 80024f6:	d4f7      	bmi.n	80024e8 <HAL_PWREx_ConfigSupply+0x40>
 80024f8:	6bca      	ldr	r2, [r1, #60]	; 0x3c
      timeout--;
 80024fa:	3b01      	subs	r3, #1
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80024fc:	0792      	lsls	r2, r2, #30
 80024fe:	d4f2      	bmi.n	80024e6 <HAL_PWREx_ConfigSupply+0x3e>
 8002500:	b12b      	cbz	r3, 800250e <HAL_PWREx_ConfigSupply+0x66>
 8002502:	6bca      	ldr	r2, [r1, #60]	; 0x3c
      timeout--;
 8002504:	3b01      	subs	r3, #1
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002506:	0792      	lsls	r2, r2, #30
 8002508:	d4ed      	bmi.n	80024e6 <HAL_PWREx_ConfigSupply+0x3e>
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f9      	bne.n	8002502 <HAL_PWREx_ConfigSupply+0x5a>
    return HAL_TIMEOUT;
 800250e:	2003      	movs	r0, #3
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	20000028 	.word	0x20000028
 8002518:	10624dd3 	.word	0x10624dd3
 800251c:	46020800 	.word	0x46020800

08002520 <HAL_PWREx_EnableVddUSB>:
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8002520:	4a02      	ldr	r2, [pc, #8]	; (800252c <HAL_PWREx_EnableVddUSB+0xc>)
 8002522:	6913      	ldr	r3, [r2, #16]
 8002524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002528:	6113      	str	r3, [r2, #16]
}
 800252a:	4770      	bx	lr
 800252c:	46020800 	.word	0x46020800

08002530 <HAL_PWREx_EnableVddIO2>:
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8002530:	4a02      	ldr	r2, [pc, #8]	; (800253c <HAL_PWREx_EnableVddIO2+0xc>)
 8002532:	6913      	ldr	r3, [r2, #16]
 8002534:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002538:	6113      	str	r3, [r2, #16]
}
 800253a:	4770      	bx	lr
 800253c:	46020800 	.word	0x46020800

08002540 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002540:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002542:	4d2c      	ldr	r5, [pc, #176]	; (80025f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
{
 8002544:	4604      	mov	r4, r0
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002546:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
{
 800254a:	b083      	sub	sp, #12
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800254c:	075b      	lsls	r3, r3, #29
 800254e:	d52b      	bpl.n	80025a8 <RCC_SetFlashLatencyFromMSIRange+0x68>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002550:	f7ff ffa2 	bl	8002498 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8002554:	f420 3380 	bic.w	r3, r0, #65536	; 0x10000
 8002558:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800255c:	d007      	beq.n	800256e <RCC_SetFlashLatencyFromMSIRange+0x2e>
      latency = FLASH_LATENCY_0; /* 0WS */
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800255e:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 8002562:	d217      	bcs.n	8002594 <RCC_SetFlashLatencyFromMSIRange+0x54>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002564:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8002568:	d133      	bne.n	80025d2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800256a:	2203      	movs	r2, #3
 800256c:	e004      	b.n	8002578 <RCC_SetFlashLatencyFromMSIRange+0x38>
    if (msirange < RCC_MSIRANGE_1)
 800256e:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 8002572:	bf2c      	ite	cs
 8002574:	2200      	movcs	r2, #0
 8002576:	2201      	movcc	r2, #1
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002578:	491f      	ldr	r1, [pc, #124]	; (80025f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800257a:	680b      	ldr	r3, [r1, #0]
 800257c:	f023 030f 	bic.w	r3, r3, #15
 8002580:	4313      	orrs	r3, r2
 8002582:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002584:	6808      	ldr	r0, [r1, #0]
 8002586:	f000 000f 	and.w	r0, r0, #15
        return HAL_ERROR;
 800258a:	1a80      	subs	r0, r0, r2
 800258c:	bf18      	it	ne
 800258e:	2001      	movne	r0, #1
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8002590:	b003      	add	sp, #12
 8002592:	bd30      	pop	{r4, r5, pc}
      if (msirange > RCC_MSIRANGE_2)
 8002594:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 8002598:	d91e      	bls.n	80025d8 <RCC_SetFlashLatencyFromMSIRange+0x98>
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800259a:	bb10      	cbnz	r0, 80025e2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
          if (msirange > RCC_MSIRANGE_3)
 800259c:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
 80025a0:	bf8c      	ite	hi
 80025a2:	2200      	movhi	r2, #0
 80025a4:	2201      	movls	r2, #1
 80025a6:	e7e7      	b.n	8002578 <RCC_SetFlashLatencyFromMSIRange+0x38>
    __HAL_RCC_PWR_CLK_ENABLE();
 80025a8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80025ac:	f043 0304 	orr.w	r3, r3, #4
 80025b0:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
 80025b4:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	9301      	str	r3, [sp, #4]
 80025be:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80025c0:	f7ff ff6a 	bl	8002498 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80025c4:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80025c8:	f023 0304 	bic.w	r3, r3, #4
 80025cc:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
 80025d0:	e7c0      	b.n	8002554 <RCC_SetFlashLatencyFromMSIRange+0x14>
        return HAL_ERROR;
 80025d2:	2001      	movs	r0, #1
}
 80025d4:	b003      	add	sp, #12
 80025d6:	bd30      	pop	{r4, r5, pc}
        if (msirange == RCC_MSIRANGE_1)
 80025d8:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 80025dc:	d003      	beq.n	80025e6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
          latency = FLASH_LATENCY_1; /* 1WS */
 80025de:	2201      	movs	r2, #1
 80025e0:	e7ca      	b.n	8002578 <RCC_SetFlashLatencyFromMSIRange+0x38>
          latency = FLASH_LATENCY_0; /* 0WS */
 80025e2:	2200      	movs	r2, #0
 80025e4:	e7c8      	b.n	8002578 <RCC_SetFlashLatencyFromMSIRange+0x38>
            latency = FLASH_LATENCY_2; /* 2WS */
 80025e6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80025ea:	bf0c      	ite	eq
 80025ec:	2201      	moveq	r2, #1
 80025ee:	2202      	movne	r2, #2
 80025f0:	e7c2      	b.n	8002578 <RCC_SetFlashLatencyFromMSIRange+0x38>
 80025f2:	bf00      	nop
 80025f4:	46020c00 	.word	0x46020c00
 80025f8:	40022000 	.word	0x40022000

080025fc <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025fc:	4a44      	ldr	r2, [pc, #272]	; (8002710 <HAL_RCC_GetSysClockFreq+0x114>)
 80025fe:	69d3      	ldr	r3, [r2, #28]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002600:	6a91      	ldr	r1, [r2, #40]	; 0x28
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002602:	f013 030c 	ands.w	r3, r3, #12
 8002606:	d052      	beq.n	80026ae <HAL_RCC_GetSysClockFreq+0xb2>
 8002608:	2b0c      	cmp	r3, #12
 800260a:	d063      	beq.n	80026d4 <HAL_RCC_GetSysClockFreq+0xd8>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800260c:	69d2      	ldr	r2, [r2, #28]
 800260e:	f002 020c 	and.w	r2, r2, #12
 8002612:	2a04      	cmp	r2, #4
 8002614:	d05c      	beq.n	80026d0 <HAL_RCC_GetSysClockFreq+0xd4>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002616:	2b08      	cmp	r3, #8
 8002618:	d05a      	beq.n	80026d0 <HAL_RCC_GetSysClockFreq+0xd4>
  uint32_t msirange = 0U;
 800261a:	2000      	movs	r0, #0
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800261c:	2b0c      	cmp	r3, #12
 800261e:	d174      	bne.n	800270a <HAL_RCC_GetSysClockFreq+0x10e>
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002620:	493b      	ldr	r1, [pc, #236]	; (8002710 <HAL_RCC_GetSysClockFreq+0x114>)
{
 8002622:	b510      	push	{r4, lr}
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002624:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002626:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002628:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800262a:	f004 0c03 	and.w	ip, r4, #3
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800262e:	f3c3 1e00 	ubfx	lr, r3, #4, #1
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002632:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002634:	f3c2 2203 	ubfx	r2, r2, #8, #4
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002638:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 800263c:	fb0e f303 	mul.w	r3, lr, r3
 8002640:	ee07 3a90 	vmov	s15, r3
      switch (pllsource)
 8002644:	f1bc 0f02 	cmp.w	ip, #2
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800264c:	f102 0201 	add.w	r2, r2, #1
      switch (pllsource)
 8002650:	d002      	beq.n	8002658 <HAL_RCC_GetSysClockFreq+0x5c>
 8002652:	f1bc 0f03 	cmp.w	ip, #3
 8002656:	d144      	bne.n	80026e2 <HAL_RCC_GetSysClockFreq+0xe6>
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002658:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800265a:	ee07 2a10 	vmov	s14, r2
 800265e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002662:	ee06 3a10 	vmov	s12, r3
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800266a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800266e:	eddf 5a29 	vldr	s11, [pc, #164]	; 8002714 <HAL_RCC_GetSysClockFreq+0x118>
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002672:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002676:	ed9f 5a28 	vldr	s10, [pc, #160]	; 8002718 <HAL_RCC_GetSysClockFreq+0x11c>
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800267a:	ee36 6a26 	vadd.f32	s12, s12, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800267e:	eec5 6a07 	vdiv.f32	s13, s10, s14
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002682:	eeb0 7a46 	vmov.f32	s14, s12
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002686:	4b22      	ldr	r3, [pc, #136]	; (8002710 <HAL_RCC_GetSysClockFreq+0x114>)
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002688:	eea7 7aa5 	vfma.f32	s14, s15, s11
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800268c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800268e:	ee26 7a87 	vmul.f32	s14, s13, s14
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002692:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002696:	3301      	adds	r3, #1
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8002698:	ee07 3a90 	vmov	s15, r3
 800269c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026a0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80026a4:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80026a8:	ee17 0a90 	vmov	r0, s15
}
 80026ac:	bd10      	pop	{r4, pc}
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80026ae:	4a18      	ldr	r2, [pc, #96]	; (8002710 <HAL_RCC_GetSysClockFreq+0x114>)
 80026b0:	6891      	ldr	r1, [r2, #8]
 80026b2:	0209      	lsls	r1, r1, #8
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80026b4:	bf54      	ite	pl
 80026b6:	f8d2 20f4 	ldrpl.w	r2, [r2, #244]	; 0xf4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80026ba:	6892      	ldrmi	r2, [r2, #8]
    msirange = MSIRangeTable[msirange];
 80026bc:	4917      	ldr	r1, [pc, #92]	; (800271c <HAL_RCC_GetSysClockFreq+0x120>)
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80026be:	bf54      	ite	pl
 80026c0:	f3c2 3203 	ubfxpl	r2, r2, #12, #4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80026c4:	0f12      	lsrmi	r2, r2, #28
    msirange = MSIRangeTable[msirange];
 80026c6:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1a6      	bne.n	800261c <HAL_RCC_GetSysClockFreq+0x20>
}
 80026ce:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 80026d0:	4813      	ldr	r0, [pc, #76]	; (8002720 <HAL_RCC_GetSysClockFreq+0x124>)
  return sysclockfreq;
 80026d2:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026d4:	f001 0103 	and.w	r1, r1, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026d8:	2901      	cmp	r1, #1
 80026da:	d0e8      	beq.n	80026ae <HAL_RCC_GetSysClockFreq+0xb2>
  uint32_t msirange = 0U;
 80026dc:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026de:	69d3      	ldr	r3, [r2, #28]
 80026e0:	e79e      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x24>
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80026e2:	ee07 0a10 	vmov	s14, r0
 80026e6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80026e8:	eeb8 5a47 	vcvt.f32.u32	s10, s14
 80026ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026f0:	ee06 3a10 	vmov	s12, r3
 80026f4:	ee07 2a10 	vmov	s14, r2
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80026f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80026fc:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8002700:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002704:	eddf 5a03 	vldr	s11, [pc, #12]	; 8002714 <HAL_RCC_GetSysClockFreq+0x118>
 8002708:	e7b7      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x7e>
 800270a:	2000      	movs	r0, #0
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	46020c00 	.word	0x46020c00
 8002714:	39000000 	.word	0x39000000
 8002718:	4b742400 	.word	0x4b742400
 800271c:	08008c4c 	.word	0x08008c4c
 8002720:	00f42400 	.word	0x00f42400

08002724 <HAL_RCC_ClockConfig>:
  if (pRCC_ClkInitStruct == NULL)
 8002724:	2800      	cmp	r0, #0
 8002726:	f000 810c 	beq.w	8002942 <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800272a:	4a9e      	ldr	r2, [pc, #632]	; (80029a4 <HAL_RCC_ClockConfig+0x280>)
{
 800272c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002730:	6813      	ldr	r3, [r2, #0]
 8002732:	4604      	mov	r4, r0
 8002734:	f003 030f 	and.w	r3, r3, #15
 8002738:	428b      	cmp	r3, r1
 800273a:	460d      	mov	r5, r1
{
 800273c:	b082      	sub	sp, #8
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800273e:	d20d      	bcs.n	800275c <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002740:	6813      	ldr	r3, [r2, #0]
 8002742:	f023 030f 	bic.w	r3, r3, #15
 8002746:	430b      	orrs	r3, r1
 8002748:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800274a:	6813      	ldr	r3, [r2, #0]
 800274c:	f003 030f 	and.w	r3, r3, #15
 8002750:	428b      	cmp	r3, r1
 8002752:	d003      	beq.n	800275c <HAL_RCC_ClockConfig+0x38>
    return HAL_ERROR;
 8002754:	2001      	movs	r0, #1
}
 8002756:	b002      	add	sp, #8
 8002758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800275c:	6823      	ldr	r3, [r4, #0]
 800275e:	06d9      	lsls	r1, r3, #27
 8002760:	d50b      	bpl.n	800277a <HAL_RCC_ClockConfig+0x56>
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002762:	4991      	ldr	r1, [pc, #580]	; (80029a8 <HAL_RCC_ClockConfig+0x284>)
 8002764:	6960      	ldr	r0, [r4, #20]
 8002766:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8002768:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800276c:	4290      	cmp	r0, r2
 800276e:	d904      	bls.n	800277a <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8002770:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8002772:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002776:	4302      	orrs	r2, r0
 8002778:	624a      	str	r2, [r1, #36]	; 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277a:	071a      	lsls	r2, r3, #28
 800277c:	d50d      	bpl.n	800279a <HAL_RCC_ClockConfig+0x76>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800277e:	498a      	ldr	r1, [pc, #552]	; (80029a8 <HAL_RCC_ClockConfig+0x284>)
 8002780:	6920      	ldr	r0, [r4, #16]
 8002782:	6a0a      	ldr	r2, [r1, #32]
 8002784:	0912      	lsrs	r2, r2, #4
 8002786:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800278a:	4290      	cmp	r0, r2
 800278c:	d905      	bls.n	800279a <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800278e:	6a0a      	ldr	r2, [r1, #32]
 8002790:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002794:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 8002798:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800279a:	075f      	lsls	r7, r3, #29
 800279c:	d50b      	bpl.n	80027b6 <HAL_RCC_ClockConfig+0x92>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800279e:	4982      	ldr	r1, [pc, #520]	; (80029a8 <HAL_RCC_ClockConfig+0x284>)
 80027a0:	68e0      	ldr	r0, [r4, #12]
 80027a2:	6a0a      	ldr	r2, [r1, #32]
 80027a4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80027a8:	4290      	cmp	r0, r2
 80027aa:	d904      	bls.n	80027b6 <HAL_RCC_ClockConfig+0x92>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80027ac:	6a0a      	ldr	r2, [r1, #32]
 80027ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80027b2:	4302      	orrs	r2, r0
 80027b4:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b6:	079e      	lsls	r6, r3, #30
 80027b8:	d530      	bpl.n	800281c <HAL_RCC_ClockConfig+0xf8>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80027ba:	487b      	ldr	r0, [pc, #492]	; (80029a8 <HAL_RCC_ClockConfig+0x284>)
 80027bc:	68a1      	ldr	r1, [r4, #8]
 80027be:	6a02      	ldr	r2, [r0, #32]
 80027c0:	f002 020f 	and.w	r2, r2, #15
 80027c4:	4291      	cmp	r1, r2
 80027c6:	d904      	bls.n	80027d2 <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80027c8:	6a02      	ldr	r2, [r0, #32]
 80027ca:	f022 020f 	bic.w	r2, r2, #15
 80027ce:	430a      	orrs	r2, r1
 80027d0:	6202      	str	r2, [r0, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027d2:	07d8      	lsls	r0, r3, #31
 80027d4:	f140 8081 	bpl.w	80028da <HAL_RCC_ClockConfig+0x1b6>
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027d8:	6863      	ldr	r3, [r4, #4]
 80027da:	2b03      	cmp	r3, #3
 80027dc:	f000 80b3 	beq.w	8002946 <HAL_RCC_ClockConfig+0x222>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027e0:	4a71      	ldr	r2, [pc, #452]	; (80029a8 <HAL_RCC_ClockConfig+0x284>)
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027e2:	2b02      	cmp	r3, #2
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027e4:	6812      	ldr	r2, [r2, #0]
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027e6:	f000 8084 	beq.w	80028f2 <HAL_RCC_ClockConfig+0x1ce>
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f040 80be 	bne.w	800296c <HAL_RCC_ClockConfig+0x248>
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80027f0:	0750      	lsls	r0, r2, #29
 80027f2:	d5af      	bpl.n	8002754 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80027f4:	4e6c      	ldr	r6, [pc, #432]	; (80029a8 <HAL_RCC_ClockConfig+0x284>)
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f6:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80027fa:	69f2      	ldr	r2, [r6, #28]
 80027fc:	f022 0203 	bic.w	r2, r2, #3
 8002800:	4313      	orrs	r3, r2
 8002802:	61f3      	str	r3, [r6, #28]
    tickstart = HAL_GetTick();
 8002804:	f7fe fc2e 	bl	8001064 <HAL_GetTick>
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002808:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800280a:	4607      	mov	r7, r0
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800280c:	2b03      	cmp	r3, #3
 800280e:	d05b      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x1a4>
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002810:	2b02      	cmp	r3, #2
 8002812:	d077      	beq.n	8002904 <HAL_RCC_ClockConfig+0x1e0>
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002814:	2b00      	cmp	r3, #0
 8002816:	f040 808a 	bne.w	800292e <HAL_RCC_ClockConfig+0x20a>
 800281a:	e07e      	b.n	800291a <HAL_RCC_ClockConfig+0x1f6>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800281c:	07da      	lsls	r2, r3, #31
 800281e:	d4db      	bmi.n	80027d8 <HAL_RCC_ClockConfig+0xb4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002820:	4960      	ldr	r1, [pc, #384]	; (80029a4 <HAL_RCC_ClockConfig+0x280>)
 8002822:	680a      	ldr	r2, [r1, #0]
 8002824:	f002 020f 	and.w	r2, r2, #15
 8002828:	42aa      	cmp	r2, r5
 800282a:	d909      	bls.n	8002840 <HAL_RCC_ClockConfig+0x11c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282c:	680a      	ldr	r2, [r1, #0]
 800282e:	f022 020f 	bic.w	r2, r2, #15
 8002832:	432a      	orrs	r2, r5
 8002834:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002836:	680a      	ldr	r2, [r1, #0]
 8002838:	f002 020f 	and.w	r2, r2, #15
 800283c:	42aa      	cmp	r2, r5
 800283e:	d189      	bne.n	8002754 <HAL_RCC_ClockConfig+0x30>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002840:	075f      	lsls	r7, r3, #29
 8002842:	d50b      	bpl.n	800285c <HAL_RCC_ClockConfig+0x138>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002844:	4958      	ldr	r1, [pc, #352]	; (80029a8 <HAL_RCC_ClockConfig+0x284>)
 8002846:	68e0      	ldr	r0, [r4, #12]
 8002848:	6a0a      	ldr	r2, [r1, #32]
 800284a:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800284e:	4290      	cmp	r0, r2
 8002850:	d204      	bcs.n	800285c <HAL_RCC_ClockConfig+0x138>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002852:	6a0a      	ldr	r2, [r1, #32]
 8002854:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002858:	4302      	orrs	r2, r0
 800285a:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800285c:	071e      	lsls	r6, r3, #28
 800285e:	d50d      	bpl.n	800287c <HAL_RCC_ClockConfig+0x158>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002860:	4951      	ldr	r1, [pc, #324]	; (80029a8 <HAL_RCC_ClockConfig+0x284>)
 8002862:	6920      	ldr	r0, [r4, #16]
 8002864:	6a0a      	ldr	r2, [r1, #32]
 8002866:	0912      	lsrs	r2, r2, #4
 8002868:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800286c:	4290      	cmp	r0, r2
 800286e:	d205      	bcs.n	800287c <HAL_RCC_ClockConfig+0x158>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002870:	6a0a      	ldr	r2, [r1, #32]
 8002872:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002876:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 800287a:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800287c:	06dd      	lsls	r5, r3, #27
 800287e:	d50b      	bpl.n	8002898 <HAL_RCC_ClockConfig+0x174>
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002880:	4a49      	ldr	r2, [pc, #292]	; (80029a8 <HAL_RCC_ClockConfig+0x284>)
 8002882:	6961      	ldr	r1, [r4, #20]
 8002884:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002886:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800288a:	4299      	cmp	r1, r3
 800288c:	d204      	bcs.n	8002898 <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800288e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002894:	430b      	orrs	r3, r1
 8002896:	6253      	str	r3, [r2, #36]	; 0x24
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002898:	f7ff feb0 	bl	80025fc <HAL_RCC_GetSysClockFreq>
 800289c:	4603      	mov	r3, r0
 800289e:	4a42      	ldr	r2, [pc, #264]	; (80029a8 <HAL_RCC_ClockConfig+0x284>)
 80028a0:	4942      	ldr	r1, [pc, #264]	; (80029ac <HAL_RCC_ClockConfig+0x288>)
 80028a2:	6a12      	ldr	r2, [r2, #32]
  status = HAL_InitTick(uwTickPrio);
 80028a4:	4842      	ldr	r0, [pc, #264]	; (80029b0 <HAL_RCC_ClockConfig+0x28c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80028a6:	f002 020f 	and.w	r2, r2, #15
 80028aa:	5c89      	ldrb	r1, [r1, r2]
  status = HAL_InitTick(uwTickPrio);
 80028ac:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80028ae:	4a41      	ldr	r2, [pc, #260]	; (80029b4 <HAL_RCC_ClockConfig+0x290>)
 80028b0:	40cb      	lsrs	r3, r1
 80028b2:	6013      	str	r3, [r2, #0]
}
 80028b4:	b002      	add	sp, #8
 80028b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 80028ba:	f7fe bb77 	b.w	8000fac <HAL_InitTick>
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028be:	f7fe fbd1 	bl	8001064 <HAL_GetTick>
 80028c2:	1bc3      	subs	r3, r0, r7
 80028c4:	4543      	cmp	r3, r8
 80028c6:	d838      	bhi.n	800293a <HAL_RCC_ClockConfig+0x216>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028c8:	69f3      	ldr	r3, [r6, #28]
 80028ca:	f003 030c 	and.w	r3, r3, #12
 80028ce:	2b0c      	cmp	r3, #12
 80028d0:	d1f5      	bne.n	80028be <HAL_RCC_ClockConfig+0x19a>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d2:	6823      	ldr	r3, [r4, #0]
 80028d4:	079a      	lsls	r2, r3, #30
 80028d6:	d5a3      	bpl.n	8002820 <HAL_RCC_ClockConfig+0xfc>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80028d8:	68a1      	ldr	r1, [r4, #8]
 80028da:	4833      	ldr	r0, [pc, #204]	; (80029a8 <HAL_RCC_ClockConfig+0x284>)
 80028dc:	6a02      	ldr	r2, [r0, #32]
 80028de:	f002 020f 	and.w	r2, r2, #15
 80028e2:	428a      	cmp	r2, r1
 80028e4:	d99c      	bls.n	8002820 <HAL_RCC_ClockConfig+0xfc>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80028e6:	6a02      	ldr	r2, [r0, #32]
 80028e8:	f022 020f 	bic.w	r2, r2, #15
 80028ec:	4311      	orrs	r1, r2
 80028ee:	6201      	str	r1, [r0, #32]
 80028f0:	e796      	b.n	8002820 <HAL_RCC_ClockConfig+0xfc>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028f2:	0396      	lsls	r6, r2, #14
 80028f4:	f53f af7e 	bmi.w	80027f4 <HAL_RCC_ClockConfig+0xd0>
 80028f8:	e72c      	b.n	8002754 <HAL_RCC_ClockConfig+0x30>
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028fa:	f7fe fbb3 	bl	8001064 <HAL_GetTick>
 80028fe:	1bc0      	subs	r0, r0, r7
 8002900:	4540      	cmp	r0, r8
 8002902:	d81a      	bhi.n	800293a <HAL_RCC_ClockConfig+0x216>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002904:	69f3      	ldr	r3, [r6, #28]
 8002906:	f003 030c 	and.w	r3, r3, #12
 800290a:	2b08      	cmp	r3, #8
 800290c:	d1f5      	bne.n	80028fa <HAL_RCC_ClockConfig+0x1d6>
 800290e:	e7e0      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1ae>
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002910:	f7fe fba8 	bl	8001064 <HAL_GetTick>
 8002914:	1bc0      	subs	r0, r0, r7
 8002916:	4540      	cmp	r0, r8
 8002918:	d80f      	bhi.n	800293a <HAL_RCC_ClockConfig+0x216>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800291a:	69f3      	ldr	r3, [r6, #28]
 800291c:	f013 0f0c 	tst.w	r3, #12
 8002920:	d1f6      	bne.n	8002910 <HAL_RCC_ClockConfig+0x1ec>
 8002922:	e7d6      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1ae>
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002924:	f7fe fb9e 	bl	8001064 <HAL_GetTick>
 8002928:	1bc0      	subs	r0, r0, r7
 800292a:	4540      	cmp	r0, r8
 800292c:	d805      	bhi.n	800293a <HAL_RCC_ClockConfig+0x216>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800292e:	69f3      	ldr	r3, [r6, #28]
 8002930:	f003 030c 	and.w	r3, r3, #12
 8002934:	2b04      	cmp	r3, #4
 8002936:	d1f5      	bne.n	8002924 <HAL_RCC_ClockConfig+0x200>
 8002938:	e7cb      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1ae>
            return HAL_TIMEOUT;
 800293a:	2003      	movs	r0, #3
}
 800293c:	b002      	add	sp, #8
 800293e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8002942:	2001      	movs	r0, #1
}
 8002944:	4770      	bx	lr
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002946:	4b18      	ldr	r3, [pc, #96]	; (80029a8 <HAL_RCC_ClockConfig+0x284>)
 8002948:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800294c:	0750      	lsls	r0, r2, #29
 800294e:	d511      	bpl.n	8002974 <HAL_RCC_ClockConfig+0x250>
      tickstart = HAL_GetTick();
 8002950:	f7fe fb88 	bl	8001064 <HAL_GetTick>
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002954:	4b18      	ldr	r3, [pc, #96]	; (80029b8 <HAL_RCC_ClockConfig+0x294>)
      tickstart = HAL_GetTick();
 8002956:	4606      	mov	r6, r0
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	0359      	lsls	r1, r3, #13
 800295c:	d441      	bmi.n	80029e2 <HAL_RCC_ClockConfig+0x2be>
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800295e:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <HAL_RCC_ClockConfig+0x284>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	019f      	lsls	r7, r3, #6
 8002964:	f57f aef6 	bpl.w	8002754 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8002968:	6863      	ldr	r3, [r4, #4]
 800296a:	e743      	b.n	80027f4 <HAL_RCC_ClockConfig+0xd0>
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800296c:	0551      	lsls	r1, r2, #21
 800296e:	f57f aef1 	bpl.w	8002754 <HAL_RCC_ClockConfig+0x30>
 8002972:	e73f      	b.n	80027f4 <HAL_RCC_ClockConfig+0xd0>
        __HAL_RCC_PWR_CLK_ENABLE();
 8002974:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002978:	f042 0204 	orr.w	r2, r2, #4
 800297c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8002980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	9301      	str	r3, [sp, #4]
 800298a:	9b01      	ldr	r3, [sp, #4]
      tickstart = HAL_GetTick();
 800298c:	f7fe fb6a 	bl	8001064 <HAL_GetTick>
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002990:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <HAL_RCC_ClockConfig+0x294>)
      tickstart = HAL_GetTick();
 8002992:	4606      	mov	r6, r0
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	035a      	lsls	r2, r3, #13
 8002998:	d51b      	bpl.n	80029d2 <HAL_RCC_ClockConfig+0x2ae>
        pwrclkchanged = SET;
 800299a:	f04f 0801 	mov.w	r8, #1
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800299e:	4f06      	ldr	r7, [pc, #24]	; (80029b8 <HAL_RCC_ClockConfig+0x294>)
 80029a0:	e011      	b.n	80029c6 <HAL_RCC_ClockConfig+0x2a2>
 80029a2:	bf00      	nop
 80029a4:	40022000 	.word	0x40022000
 80029a8:	46020c00 	.word	0x46020c00
 80029ac:	08008c34 	.word	0x08008c34
 80029b0:	20000030 	.word	0x20000030
 80029b4:	20000028 	.word	0x20000028
 80029b8:	46020800 	.word	0x46020800
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80029bc:	f7fe fb52 	bl	8001064 <HAL_GetTick>
 80029c0:	1b83      	subs	r3, r0, r6
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d8b9      	bhi.n	800293a <HAL_RCC_ClockConfig+0x216>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	045b      	lsls	r3, r3, #17
 80029ca:	d5f7      	bpl.n	80029bc <HAL_RCC_ClockConfig+0x298>
      if (pwrclkchanged == SET)
 80029cc:	f1b8 0f00 	cmp.w	r8, #0
 80029d0:	d0c5      	beq.n	800295e <HAL_RCC_ClockConfig+0x23a>
        __HAL_RCC_PWR_CLK_DISABLE();
 80029d2:	4a05      	ldr	r2, [pc, #20]	; (80029e8 <HAL_RCC_ClockConfig+0x2c4>)
 80029d4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80029d8:	f023 0304 	bic.w	r3, r3, #4
 80029dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80029e0:	e7bd      	b.n	800295e <HAL_RCC_ClockConfig+0x23a>
    FlagStatus  pwrclkchanged = RESET;
 80029e2:	f04f 0800 	mov.w	r8, #0
 80029e6:	e7da      	b.n	800299e <HAL_RCC_ClockConfig+0x27a>
 80029e8:	46020c00 	.word	0x46020c00

080029ec <HAL_RCC_OscConfig>:
  if (pRCC_OscInitStruct == NULL)
 80029ec:	2800      	cmp	r0, #0
 80029ee:	f000 8316 	beq.w	800301e <HAL_RCC_OscConfig+0x632>
{
 80029f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029f6:	4aa1      	ldr	r2, [pc, #644]	; (8002c7c <HAL_RCC_OscConfig+0x290>)
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029f8:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029fa:	69d5      	ldr	r5, [r2, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029fc:	6a96      	ldr	r6, [r2, #40]	; 0x28
 80029fe:	4604      	mov	r4, r0
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a00:	06d8      	lsls	r0, r3, #27
{
 8002a02:	b084      	sub	sp, #16
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a04:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a08:	f006 0603 	and.w	r6, r6, #3
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a0c:	d531      	bpl.n	8002a72 <HAL_RCC_OscConfig+0x86>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002a0e:	2d00      	cmp	r5, #0
 8002a10:	f000 81be 	beq.w	8002d90 <HAL_RCC_OscConfig+0x3a4>
 8002a14:	2d0c      	cmp	r5, #12
 8002a16:	f000 81b8 	beq.w	8002d8a <HAL_RCC_OscConfig+0x39e>
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a1a:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_MSI_ENABLE();
 8002a1c:	4f97      	ldr	r7, [pc, #604]	; (8002c7c <HAL_RCC_OscConfig+0x290>)
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 8267 	beq.w	8002ef2 <HAL_RCC_OscConfig+0x506>
        __HAL_RCC_MSI_ENABLE();
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8002a2c:	f7fe fb1a 	bl	8001064 <HAL_GetTick>
 8002a30:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002a32:	e006      	b.n	8002a42 <HAL_RCC_OscConfig+0x56>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a34:	f7fe fb16 	bl	8001064 <HAL_GetTick>
 8002a38:	eba0 0008 	sub.w	r0, r0, r8
 8002a3c:	2802      	cmp	r0, #2
 8002a3e:	f200 821d 	bhi.w	8002e7c <HAL_RCC_OscConfig+0x490>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	075b      	lsls	r3, r3, #29
 8002a46:	d5f5      	bpl.n	8002a34 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002a54:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	60bb      	str	r3, [r7, #8]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002a5c:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f0c0 8414 	bcc.w	800328e <HAL_RCC_OscConfig+0x8a2>
 8002a66:	6a22      	ldr	r2, [r4, #32]
 8002a68:	f023 031f 	bic.w	r3, r3, #31
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a70:	6823      	ldr	r3, [r4, #0]
 8002a72:	07d9      	lsls	r1, r3, #31
 8002a74:	d531      	bpl.n	8002ada <HAL_RCC_OscConfig+0xee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002a76:	2d08      	cmp	r5, #8
 8002a78:	f000 81e6 	beq.w	8002e48 <HAL_RCC_OscConfig+0x45c>
 8002a7c:	2d0c      	cmp	r5, #12
 8002a7e:	f000 81e0 	beq.w	8002e42 <HAL_RCC_OscConfig+0x456>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002a82:	6863      	ldr	r3, [r4, #4]
 8002a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a88:	f000 8245 	beq.w	8002f16 <HAL_RCC_OscConfig+0x52a>
 8002a8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a90:	f000 83cd 	beq.w	800322e <HAL_RCC_OscConfig+0x842>
 8002a94:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002a98:	f000 83eb 	beq.w	8003272 <HAL_RCC_OscConfig+0x886>
 8002a9c:	4f77      	ldr	r7, [pc, #476]	; (8002c7c <HAL_RCC_OscConfig+0x290>)
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002aa4:	603a      	str	r2, [r7, #0]
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002aac:	603a      	str	r2, [r7, #0]
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002ab4:	603a      	str	r2, [r7, #0]
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f040 8232 	bne.w	8002f20 <HAL_RCC_OscConfig+0x534>
        tickstart = HAL_GetTick();
 8002abc:	f7fe fad2 	bl	8001064 <HAL_GetTick>
 8002ac0:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ac2:	e006      	b.n	8002ad2 <HAL_RCC_OscConfig+0xe6>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ac4:	f7fe face 	bl	8001064 <HAL_GetTick>
 8002ac8:	eba0 0008 	sub.w	r0, r0, r8
 8002acc:	2864      	cmp	r0, #100	; 0x64
 8002ace:	f200 81d5 	bhi.w	8002e7c <HAL_RCC_OscConfig+0x490>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	0398      	lsls	r0, r3, #14
 8002ad6:	d4f5      	bmi.n	8002ac4 <HAL_RCC_OscConfig+0xd8>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ad8:	6823      	ldr	r3, [r4, #0]
 8002ada:	0799      	lsls	r1, r3, #30
 8002adc:	f100 8132 	bmi.w	8002d44 <HAL_RCC_OscConfig+0x358>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae0:	0718      	lsls	r0, r3, #28
 8002ae2:	d541      	bpl.n	8002b68 <HAL_RCC_OscConfig+0x17c>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ae4:	4b65      	ldr	r3, [pc, #404]	; (8002c7c <HAL_RCC_OscConfig+0x290>)
 8002ae6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002aea:	0751      	lsls	r1, r2, #29
 8002aec:	f140 8189 	bpl.w	8002e02 <HAL_RCC_OscConfig+0x416>
    FlagStatus  pwrclkchanged = RESET;
 8002af0:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002af2:	4e63      	ldr	r6, [pc, #396]	; (8002c80 <HAL_RCC_OscConfig+0x294>)
 8002af4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002af6:	07da      	lsls	r2, r3, #31
 8002af8:	f140 81b0 	bpl.w	8002e5c <HAL_RCC_OscConfig+0x470>
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002afc:	6963      	ldr	r3, [r4, #20]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 8274 	beq.w	8002fec <HAL_RCC_OscConfig+0x600>
      uint32_t bdcr_temp = RCC->BDCR;
 8002b04:	4e5d      	ldr	r6, [pc, #372]	; (8002c7c <HAL_RCC_OscConfig+0x290>)
      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002b06:	69a2      	ldr	r2, [r4, #24]
      uint32_t bdcr_temp = RCC->BDCR;
 8002b08:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002b0c:	f003 5180 	and.w	r1, r3, #268435456	; 0x10000000
 8002b10:	428a      	cmp	r2, r1
 8002b12:	d010      	beq.n	8002b36 <HAL_RCC_OscConfig+0x14a>
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002b14:	f003 6140 	and.w	r1, r3, #201326592	; 0xc000000
 8002b18:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8002b1c:	f000 816d 	beq.w	8002dfa <HAL_RCC_OscConfig+0x40e>
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8002b20:	0158      	lsls	r0, r3, #5
 8002b22:	f100 834a 	bmi.w	80031ba <HAL_RCC_OscConfig+0x7ce>
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8002b26:	4955      	ldr	r1, [pc, #340]	; (8002c7c <HAL_RCC_OscConfig+0x290>)
 8002b28:	f8d1 30f0 	ldr.w	r3, [r1, #240]	; 0xf0
 8002b2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      __HAL_RCC_LSI_ENABLE();
 8002b36:	4e51      	ldr	r6, [pc, #324]	; (8002c7c <HAL_RCC_OscConfig+0x290>)
 8002b38:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8002b3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b40:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
      tickstart = HAL_GetTick();
 8002b44:	f7fe fa8e 	bl	8001064 <HAL_GetTick>
 8002b48:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002b4a:	e005      	b.n	8002b58 <HAL_RCC_OscConfig+0x16c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b4c:	f7fe fa8a 	bl	8001064 <HAL_GetTick>
 8002b50:	1bc0      	subs	r0, r0, r7
 8002b52:	2802      	cmp	r0, #2
 8002b54:	f200 8192 	bhi.w	8002e7c <HAL_RCC_OscConfig+0x490>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002b58:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8002b5c:	011a      	lsls	r2, r3, #4
 8002b5e:	d5f5      	bpl.n	8002b4c <HAL_RCC_OscConfig+0x160>
    if (pwrclkchanged == SET)
 8002b60:	2d00      	cmp	r5, #0
 8002b62:	f040 8322 	bne.w	80031aa <HAL_RCC_OscConfig+0x7be>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b66:	6823      	ldr	r3, [r4, #0]
 8002b68:	075d      	lsls	r5, r3, #29
 8002b6a:	d55e      	bpl.n	8002c2a <HAL_RCC_OscConfig+0x23e>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b6c:	4b43      	ldr	r3, [pc, #268]	; (8002c7c <HAL_RCC_OscConfig+0x290>)
 8002b6e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002b72:	0750      	lsls	r0, r2, #29
 8002b74:	f100 81fe 	bmi.w	8002f74 <HAL_RCC_OscConfig+0x588>
      pwrclkchanged = SET;
 8002b78:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b7a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002b7e:	f042 0204 	orr.w	r2, r2, #4
 8002b82:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8002b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b8a:	f003 0304 	and.w	r3, r3, #4
 8002b8e:	9302      	str	r3, [sp, #8]
 8002b90:	9b02      	ldr	r3, [sp, #8]
    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002b92:	4e3b      	ldr	r6, [pc, #236]	; (8002c80 <HAL_RCC_OscConfig+0x294>)
 8002b94:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002b96:	07d9      	lsls	r1, r3, #31
 8002b98:	f140 8338 	bpl.w	800320c <HAL_RCC_OscConfig+0x820>
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002b9c:	68a3      	ldr	r3, [r4, #8]
 8002b9e:	07da      	lsls	r2, r3, #31
 8002ba0:	f140 81ea 	bpl.w	8002f78 <HAL_RCC_OscConfig+0x58c>
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002ba4:	075e      	lsls	r6, r3, #29
 8002ba6:	f140 82f8 	bpl.w	800319a <HAL_RCC_OscConfig+0x7ae>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002baa:	4b34      	ldr	r3, [pc, #208]	; (8002c7c <HAL_RCC_OscConfig+0x290>)
 8002bac:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002bb0:	f042 0204 	orr.w	r2, r2, #4
 8002bb4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002bb8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002bbc:	f042 0201 	orr.w	r2, r2, #1
 8002bc0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
      tickstart = HAL_GetTick();
 8002bc4:	f7fe fa4e 	bl	8001064 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002bcc:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bce:	4f2b      	ldr	r7, [pc, #172]	; (8002c7c <HAL_RCC_OscConfig+0x290>)
 8002bd0:	e005      	b.n	8002bde <HAL_RCC_OscConfig+0x1f2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd2:	f7fe fa47 	bl	8001064 <HAL_GetTick>
 8002bd6:	1b80      	subs	r0, r0, r6
 8002bd8:	4540      	cmp	r0, r8
 8002bda:	f200 814f 	bhi.w	8002e7c <HAL_RCC_OscConfig+0x490>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bde:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002be2:	0798      	lsls	r0, r3, #30
 8002be4:	d5f5      	bpl.n	8002bd2 <HAL_RCC_OscConfig+0x1e6>
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002be6:	68a3      	ldr	r3, [r4, #8]
 8002be8:	f013 0f80 	tst.w	r3, #128	; 0x80
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002bec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002bf0:	f000 837c 	beq.w	80032ec <HAL_RCC_OscConfig+0x900>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bf8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bfc:	f241 3888 	movw	r8, #5000	; 0x1388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002c00:	4f1e      	ldr	r7, [pc, #120]	; (8002c7c <HAL_RCC_OscConfig+0x290>)
 8002c02:	e005      	b.n	8002c10 <HAL_RCC_OscConfig+0x224>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c04:	f7fe fa2e 	bl	8001064 <HAL_GetTick>
 8002c08:	1b80      	subs	r0, r0, r6
 8002c0a:	4540      	cmp	r0, r8
 8002c0c:	f200 8136 	bhi.w	8002e7c <HAL_RCC_OscConfig+0x490>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002c10:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002c14:	0519      	lsls	r1, r3, #20
 8002c16:	d5f5      	bpl.n	8002c04 <HAL_RCC_OscConfig+0x218>
    if (pwrclkchanged == SET)
 8002c18:	b135      	cbz	r5, 8002c28 <HAL_RCC_OscConfig+0x23c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c1a:	4a18      	ldr	r2, [pc, #96]	; (8002c7c <HAL_RCC_OscConfig+0x290>)
 8002c1c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002c20:	f023 0304 	bic.w	r3, r3, #4
 8002c24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c28:	6823      	ldr	r3, [r4, #0]
 8002c2a:	069a      	lsls	r2, r3, #26
 8002c2c:	d516      	bpl.n	8002c5c <HAL_RCC_OscConfig+0x270>
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      __HAL_RCC_HSI48_ENABLE();
 8002c30:	4d12      	ldr	r5, [pc, #72]	; (8002c7c <HAL_RCC_OscConfig+0x290>)
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 81fb 	beq.w	800302e <HAL_RCC_OscConfig+0x642>
      __HAL_RCC_HSI48_ENABLE();
 8002c38:	682b      	ldr	r3, [r5, #0]
 8002c3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c3e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002c40:	f7fe fa10 	bl	8001064 <HAL_GetTick>
 8002c44:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002c46:	e005      	b.n	8002c54 <HAL_RCC_OscConfig+0x268>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c48:	f7fe fa0c 	bl	8001064 <HAL_GetTick>
 8002c4c:	1b80      	subs	r0, r0, r6
 8002c4e:	2802      	cmp	r0, #2
 8002c50:	f200 8114 	bhi.w	8002e7c <HAL_RCC_OscConfig+0x490>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002c54:	682b      	ldr	r3, [r5, #0]
 8002c56:	049b      	lsls	r3, r3, #18
 8002c58:	d5f6      	bpl.n	8002c48 <HAL_RCC_OscConfig+0x25c>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002c5a:	6823      	ldr	r3, [r4, #0]
 8002c5c:	0618      	lsls	r0, r3, #24
 8002c5e:	d51b      	bpl.n	8002c98 <HAL_RCC_OscConfig+0x2ac>
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002c60:	6b23      	ldr	r3, [r4, #48]	; 0x30
      __HAL_RCC_SHSI_ENABLE();
 8002c62:	4d06      	ldr	r5, [pc, #24]	; (8002c7c <HAL_RCC_OscConfig+0x290>)
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 8286 	beq.w	8003176 <HAL_RCC_OscConfig+0x78a>
      __HAL_RCC_SHSI_ENABLE();
 8002c6a:	682b      	ldr	r3, [r5, #0]
 8002c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c70:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002c72:	f7fe f9f7 	bl	8001064 <HAL_GetTick>
 8002c76:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002c78:	e00a      	b.n	8002c90 <HAL_RCC_OscConfig+0x2a4>
 8002c7a:	bf00      	nop
 8002c7c:	46020c00 	.word	0x46020c00
 8002c80:	46020800 	.word	0x46020800
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002c84:	f7fe f9ee 	bl	8001064 <HAL_GetTick>
 8002c88:	1b80      	subs	r0, r0, r6
 8002c8a:	2802      	cmp	r0, #2
 8002c8c:	f200 80f6 	bhi.w	8002e7c <HAL_RCC_OscConfig+0x490>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002c90:	682b      	ldr	r3, [r5, #0]
 8002c92:	0419      	lsls	r1, r3, #16
 8002c94:	d5f6      	bpl.n	8002c84 <HAL_RCC_OscConfig+0x298>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8002c96:	6823      	ldr	r3, [r4, #0]
 8002c98:	065b      	lsls	r3, r3, #25
 8002c9a:	d52b      	bpl.n	8002cf4 <HAL_RCC_OscConfig+0x308>
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8002c9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 82a1 	beq.w	80031e6 <HAL_RCC_OscConfig+0x7fa>
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002ca4:	4ba6      	ldr	r3, [pc, #664]	; (8002f40 <HAL_RCC_OscConfig+0x554>)
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002cac:	609a      	str	r2, [r3, #8]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002cb2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	609a      	str	r2, [r3, #8]
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002cba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002cbc:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 8002cc0:	f0c0 8303 	bcc.w	80032ca <HAL_RCC_OscConfig+0x8de>
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	6a21      	ldr	r1, [r4, #32]
 8002cc8:	f022 021f 	bic.w	r2, r2, #31
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	60da      	str	r2, [r3, #12]
      __HAL_RCC_MSIK_ENABLE();
 8002cd0:	4d9b      	ldr	r5, [pc, #620]	; (8002f40 <HAL_RCC_OscConfig+0x554>)
 8002cd2:	682b      	ldr	r3, [r5, #0]
 8002cd4:	f043 0310 	orr.w	r3, r3, #16
 8002cd8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002cda:	f7fe f9c3 	bl	8001064 <HAL_GetTick>
 8002cde:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002ce0:	e005      	b.n	8002cee <HAL_RCC_OscConfig+0x302>
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002ce2:	f7fe f9bf 	bl	8001064 <HAL_GetTick>
 8002ce6:	1b80      	subs	r0, r0, r6
 8002ce8:	2802      	cmp	r0, #2
 8002cea:	f200 80c7 	bhi.w	8002e7c <HAL_RCC_OscConfig+0x490>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002cee:	682b      	ldr	r3, [r5, #0]
 8002cf0:	069f      	lsls	r7, r3, #26
 8002cf2:	d5f6      	bpl.n	8002ce2 <HAL_RCC_OscConfig+0x2f6>
  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cf4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002cf6:	2800      	cmp	r0, #0
 8002cf8:	f000 823b 	beq.w	8003172 <HAL_RCC_OscConfig+0x786>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cfc:	4d90      	ldr	r5, [pc, #576]	; (8002f40 <HAL_RCC_OscConfig+0x554>)
 8002cfe:	69eb      	ldr	r3, [r5, #28]
 8002d00:	f003 030c 	and.w	r3, r3, #12
 8002d04:	2b0c      	cmp	r3, #12
 8002d06:	f000 830b 	beq.w	8003320 <HAL_RCC_OscConfig+0x934>
        __HAL_RCC_PLL_DISABLE();
 8002d0a:	682b      	ldr	r3, [r5, #0]
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d0c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002d0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d12:	602b      	str	r3, [r5, #0]
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d14:	f000 81a3 	beq.w	800305e <HAL_RCC_OscConfig+0x672>
        tickstart = HAL_GetTick();
 8002d18:	f7fe f9a4 	bl	8001064 <HAL_GetTick>
 8002d1c:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002d1e:	e005      	b.n	8002d2c <HAL_RCC_OscConfig+0x340>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d20:	f7fe f9a0 	bl	8001064 <HAL_GetTick>
 8002d24:	1b00      	subs	r0, r0, r4
 8002d26:	2802      	cmp	r0, #2
 8002d28:	f200 80a8 	bhi.w	8002e7c <HAL_RCC_OscConfig+0x490>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002d2c:	682b      	ldr	r3, [r5, #0]
 8002d2e:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8002d32:	d1f5      	bne.n	8002d20 <HAL_RCC_OscConfig+0x334>
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002d34:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  return HAL_OK;
 8002d36:	4618      	mov	r0, r3
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002d38:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8002d3c:	f022 0203 	bic.w	r2, r2, #3
 8002d40:	62aa      	str	r2, [r5, #40]	; 0x28
 8002d42:	e05b      	b.n	8002dfc <HAL_RCC_OscConfig+0x410>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002d44:	2d04      	cmp	r5, #4
 8002d46:	d06c      	beq.n	8002e22 <HAL_RCC_OscConfig+0x436>
 8002d48:	2d0c      	cmp	r5, #12
 8002d4a:	d068      	beq.n	8002e1e <HAL_RCC_OscConfig+0x432>
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d4c:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8002d4e:	4d7c      	ldr	r5, [pc, #496]	; (8002f40 <HAL_RCC_OscConfig+0x554>)
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 80fd 	beq.w	8002f50 <HAL_RCC_OscConfig+0x564>
        __HAL_RCC_HSI_ENABLE();
 8002d56:	682b      	ldr	r3, [r5, #0]
 8002d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d5c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002d5e:	f7fe f981 	bl	8001064 <HAL_GetTick>
 8002d62:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d64:	e005      	b.n	8002d72 <HAL_RCC_OscConfig+0x386>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d66:	f7fe f97d 	bl	8001064 <HAL_GetTick>
 8002d6a:	1b80      	subs	r0, r0, r6
 8002d6c:	2802      	cmp	r0, #2
 8002d6e:	f200 8085 	bhi.w	8002e7c <HAL_RCC_OscConfig+0x490>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d72:	682b      	ldr	r3, [r5, #0]
 8002d74:	055b      	lsls	r3, r3, #21
 8002d76:	d5f6      	bpl.n	8002d66 <HAL_RCC_OscConfig+0x37a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002d78:	692b      	ldr	r3, [r5, #16]
 8002d7a:	6922      	ldr	r2, [r4, #16]
 8002d7c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002d80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002d84:	612b      	str	r3, [r5, #16]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d86:	6823      	ldr	r3, [r4, #0]
 8002d88:	e6aa      	b.n	8002ae0 <HAL_RCC_OscConfig+0xf4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d8a:	2e01      	cmp	r6, #1
 8002d8c:	f47f ae45 	bne.w	8002a1a <HAL_RCC_OscConfig+0x2e>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d90:	4b6b      	ldr	r3, [pc, #428]	; (8002f40 <HAL_RCC_OscConfig+0x554>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	0759      	lsls	r1, r3, #29
 8002d96:	d42d      	bmi.n	8002df4 <HAL_RCC_OscConfig+0x408>
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d98:	4b69      	ldr	r3, [pc, #420]	; (8002f40 <HAL_RCC_OscConfig+0x554>)
 8002d9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	0212      	lsls	r2, r2, #8
 8002da0:	bf56      	itet	pl
 8002da2:	f8d3 30f4 	ldrpl.w	r3, [r3, #244]	; 0xf4
 8002da6:	689b      	ldrmi	r3, [r3, #8]
 8002da8:	041b      	lslpl	r3, r3, #16
 8002daa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002dae:	4298      	cmp	r0, r3
 8002db0:	d968      	bls.n	8002e84 <HAL_RCC_OscConfig+0x498>
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002db2:	2d00      	cmp	r5, #0
 8002db4:	f000 8256 	beq.w	8003264 <HAL_RCC_OscConfig+0x878>
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002db8:	4b61      	ldr	r3, [pc, #388]	; (8002f40 <HAL_RCC_OscConfig+0x554>)
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002dba:	f1b0 4f40 	cmp.w	r0, #3221225472	; 0xc0000000
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002dc4:	609a      	str	r2, [r3, #8]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002dcc:	ea42 0200 	orr.w	r2, r2, r0
 8002dd0:	609a      	str	r2, [r3, #8]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	f080 813d 	bcs.w	8003052 <HAL_RCC_OscConfig+0x666>
 8002dd8:	2800      	cmp	r0, #0
 8002dda:	f2c0 826f 	blt.w	80032bc <HAL_RCC_OscConfig+0x8d0>
 8002dde:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002de2:	f0c0 82d2 	bcc.w	800338a <HAL_RCC_OscConfig+0x99e>
 8002de6:	6a21      	ldr	r1, [r4, #32]
 8002de8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002dec:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8002df0:	60da      	str	r2, [r3, #12]
 8002df2:	e067      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4d8>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002df4:	69e3      	ldr	r3, [r4, #28]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1ce      	bne.n	8002d98 <HAL_RCC_OscConfig+0x3ac>
        return HAL_ERROR;
 8002dfa:	2001      	movs	r0, #1
}
 8002dfc:	b004      	add	sp, #16
 8002dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e02:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
      pwrclkchanged = SET;
 8002e06:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e08:	f042 0204 	orr.w	r2, r2, #4
 8002e0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8002e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	9301      	str	r3, [sp, #4]
 8002e1a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002e1c:	e669      	b.n	8002af2 <HAL_RCC_OscConfig+0x106>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e1e:	2e02      	cmp	r6, #2
 8002e20:	d194      	bne.n	8002d4c <HAL_RCC_OscConfig+0x360>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e22:	4a47      	ldr	r2, [pc, #284]	; (8002f40 <HAL_RCC_OscConfig+0x554>)
 8002e24:	6812      	ldr	r2, [r2, #0]
 8002e26:	0552      	lsls	r2, r2, #21
 8002e28:	d502      	bpl.n	8002e30 <HAL_RCC_OscConfig+0x444>
 8002e2a:	68e2      	ldr	r2, [r4, #12]
 8002e2c:	2a00      	cmp	r2, #0
 8002e2e:	d0e4      	beq.n	8002dfa <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002e30:	4943      	ldr	r1, [pc, #268]	; (8002f40 <HAL_RCC_OscConfig+0x554>)
 8002e32:	6920      	ldr	r0, [r4, #16]
 8002e34:	690a      	ldr	r2, [r1, #16]
 8002e36:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002e3e:	610a      	str	r2, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e40:	e64e      	b.n	8002ae0 <HAL_RCC_OscConfig+0xf4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e42:	2e03      	cmp	r6, #3
 8002e44:	f47f ae1d 	bne.w	8002a82 <HAL_RCC_OscConfig+0x96>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e48:	4a3d      	ldr	r2, [pc, #244]	; (8002f40 <HAL_RCC_OscConfig+0x554>)
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	0392      	lsls	r2, r2, #14
 8002e4e:	f57f ae44 	bpl.w	8002ada <HAL_RCC_OscConfig+0xee>
 8002e52:	6862      	ldr	r2, [r4, #4]
 8002e54:	2a00      	cmp	r2, #0
 8002e56:	f47f ae40 	bne.w	8002ada <HAL_RCC_OscConfig+0xee>
 8002e5a:	e7ce      	b.n	8002dfa <HAL_RCC_OscConfig+0x40e>
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002e5c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002e5e:	f043 0301 	orr.w	r3, r3, #1
 8002e62:	62b3      	str	r3, [r6, #40]	; 0x28
      tickstart = HAL_GetTick();
 8002e64:	f7fe f8fe 	bl	8001064 <HAL_GetTick>
 8002e68:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002e6a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002e6c:	07db      	lsls	r3, r3, #31
 8002e6e:	f53f ae45 	bmi.w	8002afc <HAL_RCC_OscConfig+0x110>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e72:	f7fe f8f7 	bl	8001064 <HAL_GetTick>
 8002e76:	1bc0      	subs	r0, r0, r7
 8002e78:	2802      	cmp	r0, #2
 8002e7a:	d9f6      	bls.n	8002e6a <HAL_RCC_OscConfig+0x47e>
            return HAL_TIMEOUT;
 8002e7c:	2003      	movs	r0, #3
}
 8002e7e:	b004      	add	sp, #16
 8002e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002e84:	4b2e      	ldr	r3, [pc, #184]	; (8002f40 <HAL_RCC_OscConfig+0x554>)
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002e86:	f1b0 4f40 	cmp.w	r0, #3221225472	; 0xc0000000
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002e90:	609a      	str	r2, [r3, #8]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002e98:	ea42 0200 	orr.w	r2, r2, r0
 8002e9c:	609a      	str	r2, [r3, #8]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	f080 80bf 	bcs.w	8003022 <HAL_RCC_OscConfig+0x636>
 8002ea4:	2800      	cmp	r0, #0
 8002ea6:	f2c0 8202 	blt.w	80032ae <HAL_RCC_OscConfig+0x8c2>
 8002eaa:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002eae:	f0c0 8230 	bcc.w	8003312 <HAL_RCC_OscConfig+0x926>
 8002eb2:	6a21      	ldr	r1, [r4, #32]
 8002eb4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002eb8:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8002ebc:	60da      	str	r2, [r3, #12]
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ebe:	2d00      	cmp	r5, #0
 8002ec0:	f000 81ca 	beq.w	8003258 <HAL_RCC_OscConfig+0x86c>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002ec4:	f7ff fb9a 	bl	80025fc <HAL_RCC_GetSysClockFreq>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	4a1d      	ldr	r2, [pc, #116]	; (8002f40 <HAL_RCC_OscConfig+0x554>)
 8002ecc:	491d      	ldr	r1, [pc, #116]	; (8002f44 <HAL_RCC_OscConfig+0x558>)
 8002ece:	6a12      	ldr	r2, [r2, #32]
 8002ed0:	f002 020f 	and.w	r2, r2, #15
 8002ed4:	5c89      	ldrb	r1, [r1, r2]
        status = HAL_InitTick(uwTickPrio);
 8002ed6:	4a1c      	ldr	r2, [pc, #112]	; (8002f48 <HAL_RCC_OscConfig+0x55c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002ed8:	40cb      	lsrs	r3, r1
        status = HAL_InitTick(uwTickPrio);
 8002eda:	6810      	ldr	r0, [r2, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002edc:	4a1b      	ldr	r2, [pc, #108]	; (8002f4c <HAL_RCC_OscConfig+0x560>)
 8002ede:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8002ee0:	f7fe f864 	bl	8000fac <HAL_InitTick>
        if (status != HAL_OK)
 8002ee4:	2800      	cmp	r0, #0
 8002ee6:	d189      	bne.n	8002dfc <HAL_RCC_OscConfig+0x410>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ee8:	6823      	ldr	r3, [r4, #0]
 8002eea:	07d9      	lsls	r1, r3, #31
 8002eec:	f57f adf5 	bpl.w	8002ada <HAL_RCC_OscConfig+0xee>
 8002ef0:	e5c1      	b.n	8002a76 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_MSI_DISABLE();
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	f023 0301 	bic.w	r3, r3, #1
 8002ef8:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8002efa:	f7fe f8b3 	bl	8001064 <HAL_GetTick>
 8002efe:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002f00:	e005      	b.n	8002f0e <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f02:	f7fe f8af 	bl	8001064 <HAL_GetTick>
 8002f06:	eba0 0008 	sub.w	r0, r0, r8
 8002f0a:	2802      	cmp	r0, #2
 8002f0c:	d8b6      	bhi.n	8002e7c <HAL_RCC_OscConfig+0x490>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	0758      	lsls	r0, r3, #29
 8002f12:	d4f6      	bmi.n	8002f02 <HAL_RCC_OscConfig+0x516>
 8002f14:	e7e8      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4fc>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002f16:	4a0a      	ldr	r2, [pc, #40]	; (8002f40 <HAL_RCC_OscConfig+0x554>)
 8002f18:	6813      	ldr	r3, [r2, #0]
 8002f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f1e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002f20:	f7fe f8a0 	bl	8001064 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f24:	f8df 8018 	ldr.w	r8, [pc, #24]	; 8002f40 <HAL_RCC_OscConfig+0x554>
        tickstart = HAL_GetTick();
 8002f28:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f2a:	e004      	b.n	8002f36 <HAL_RCC_OscConfig+0x54a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f2c:	f7fe f89a 	bl	8001064 <HAL_GetTick>
 8002f30:	1bc0      	subs	r0, r0, r7
 8002f32:	2864      	cmp	r0, #100	; 0x64
 8002f34:	d8a2      	bhi.n	8002e7c <HAL_RCC_OscConfig+0x490>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f36:	f8d8 3000 	ldr.w	r3, [r8]
 8002f3a:	039b      	lsls	r3, r3, #14
 8002f3c:	d5f6      	bpl.n	8002f2c <HAL_RCC_OscConfig+0x540>
 8002f3e:	e5cb      	b.n	8002ad8 <HAL_RCC_OscConfig+0xec>
 8002f40:	46020c00 	.word	0x46020c00
 8002f44:	08008c34 	.word	0x08008c34
 8002f48:	20000030 	.word	0x20000030
 8002f4c:	20000028 	.word	0x20000028
        __HAL_RCC_HSI_DISABLE();
 8002f50:	682b      	ldr	r3, [r5, #0]
 8002f52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f56:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002f58:	f7fe f884 	bl	8001064 <HAL_GetTick>
 8002f5c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f5e:	e004      	b.n	8002f6a <HAL_RCC_OscConfig+0x57e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f60:	f7fe f880 	bl	8001064 <HAL_GetTick>
 8002f64:	1b80      	subs	r0, r0, r6
 8002f66:	2802      	cmp	r0, #2
 8002f68:	d888      	bhi.n	8002e7c <HAL_RCC_OscConfig+0x490>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f6a:	682b      	ldr	r3, [r5, #0]
 8002f6c:	055f      	lsls	r7, r3, #21
 8002f6e:	d4f7      	bmi.n	8002f60 <HAL_RCC_OscConfig+0x574>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f70:	6823      	ldr	r3, [r4, #0]
 8002f72:	e5b5      	b.n	8002ae0 <HAL_RCC_OscConfig+0xf4>
    FlagStatus pwrclkchanged = RESET;
 8002f74:	2500      	movs	r5, #0
 8002f76:	e60c      	b.n	8002b92 <HAL_RCC_OscConfig+0x1a6>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f78:	4eb4      	ldr	r6, [pc, #720]	; (800324c <HAL_RCC_OscConfig+0x860>)
 8002f7a:	f8d6 20f0 	ldr.w	r2, [r6, #240]	; 0xf0
 8002f7e:	f022 0201 	bic.w	r2, r2, #1
 8002f82:	f8c6 20f0 	str.w	r2, [r6, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002f86:	f8d6 20f0 	ldr.w	r2, [r6, #240]	; 0xf0
 8002f8a:	f022 0204 	bic.w	r2, r2, #4
 8002f8e:	f8c6 20f0 	str.w	r2, [r6, #240]	; 0xf0
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f47f ae16 	bne.w	8002bc4 <HAL_RCC_OscConfig+0x1d8>
      tickstart = HAL_GetTick();
 8002f98:	f7fe f864 	bl	8001064 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002fa0:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fa2:	e005      	b.n	8002fb0 <HAL_RCC_OscConfig+0x5c4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa4:	f7fe f85e 	bl	8001064 <HAL_GetTick>
 8002fa8:	1bc0      	subs	r0, r0, r7
 8002faa:	4540      	cmp	r0, r8
 8002fac:	f63f af66 	bhi.w	8002e7c <HAL_RCC_OscConfig+0x490>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fb0:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8002fb4:	079b      	lsls	r3, r3, #30
 8002fb6:	d4f5      	bmi.n	8002fa4 <HAL_RCC_OscConfig+0x5b8>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002fb8:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8002fbc:	0618      	lsls	r0, r3, #24
 8002fbe:	f57f ae2b 	bpl.w	8002c18 <HAL_RCC_OscConfig+0x22c>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002fc2:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc6:	f241 3888 	movw	r8, #5000	; 0x1388
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002fca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fce:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002fd2:	4e9e      	ldr	r6, [pc, #632]	; (800324c <HAL_RCC_OscConfig+0x860>)
 8002fd4:	e005      	b.n	8002fe2 <HAL_RCC_OscConfig+0x5f6>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd6:	f7fe f845 	bl	8001064 <HAL_GetTick>
 8002fda:	1bc0      	subs	r0, r0, r7
 8002fdc:	4540      	cmp	r0, r8
 8002fde:	f63f af4d 	bhi.w	8002e7c <HAL_RCC_OscConfig+0x490>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002fe2:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8002fe6:	0519      	lsls	r1, r3, #20
 8002fe8:	d4f5      	bmi.n	8002fd6 <HAL_RCC_OscConfig+0x5ea>
 8002fea:	e615      	b.n	8002c18 <HAL_RCC_OscConfig+0x22c>
      __HAL_RCC_LSI_DISABLE();
 8002fec:	4e97      	ldr	r6, [pc, #604]	; (800324c <HAL_RCC_OscConfig+0x860>)
 8002fee:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8002ff2:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8002ff6:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
      tickstart = HAL_GetTick();
 8002ffa:	f7fe f833 	bl	8001064 <HAL_GetTick>
 8002ffe:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003000:	e005      	b.n	800300e <HAL_RCC_OscConfig+0x622>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003002:	f7fe f82f 	bl	8001064 <HAL_GetTick>
 8003006:	1bc0      	subs	r0, r0, r7
 8003008:	2802      	cmp	r0, #2
 800300a:	f63f af37 	bhi.w	8002e7c <HAL_RCC_OscConfig+0x490>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800300e:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	d4f5      	bmi.n	8003002 <HAL_RCC_OscConfig+0x616>
    if (pwrclkchanged == SET)
 8003016:	2d00      	cmp	r5, #0
 8003018:	f43f ada5 	beq.w	8002b66 <HAL_RCC_OscConfig+0x17a>
 800301c:	e0c5      	b.n	80031aa <HAL_RCC_OscConfig+0x7be>
    return HAL_ERROR;
 800301e:	2001      	movs	r0, #1
}
 8003020:	4770      	bx	lr
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003022:	6a21      	ldr	r1, [r4, #32]
 8003024:	f022 021f 	bic.w	r2, r2, #31
 8003028:	430a      	orrs	r2, r1
 800302a:	60da      	str	r2, [r3, #12]
 800302c:	e747      	b.n	8002ebe <HAL_RCC_OscConfig+0x4d2>
      __HAL_RCC_HSI48_DISABLE();
 800302e:	682b      	ldr	r3, [r5, #0]
 8003030:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003034:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003036:	f7fe f815 	bl	8001064 <HAL_GetTick>
 800303a:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800303c:	e005      	b.n	800304a <HAL_RCC_OscConfig+0x65e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800303e:	f7fe f811 	bl	8001064 <HAL_GetTick>
 8003042:	1b80      	subs	r0, r0, r6
 8003044:	2802      	cmp	r0, #2
 8003046:	f63f af19 	bhi.w	8002e7c <HAL_RCC_OscConfig+0x490>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800304a:	682b      	ldr	r3, [r5, #0]
 800304c:	049f      	lsls	r7, r3, #18
 800304e:	d4f6      	bmi.n	800303e <HAL_RCC_OscConfig+0x652>
 8003050:	e603      	b.n	8002c5a <HAL_RCC_OscConfig+0x26e>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003052:	6a21      	ldr	r1, [r4, #32]
 8003054:	f022 021f 	bic.w	r2, r2, #31
 8003058:	430a      	orrs	r2, r1
 800305a:	60da      	str	r2, [r3, #12]
 800305c:	e732      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4d8>
        tickstart = HAL_GetTick();
 800305e:	f7fe f801 	bl	8001064 <HAL_GetTick>
 8003062:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003064:	e005      	b.n	8003072 <HAL_RCC_OscConfig+0x686>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003066:	f7fd fffd 	bl	8001064 <HAL_GetTick>
 800306a:	1b80      	subs	r0, r0, r6
 800306c:	2802      	cmp	r0, #2
 800306e:	f63f af05 	bhi.w	8002e7c <HAL_RCC_OscConfig+0x490>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003072:	682b      	ldr	r3, [r5, #0]
 8003074:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8003078:	d1f5      	bne.n	8003066 <HAL_RCC_OscConfig+0x67a>
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800307a:	f8d5 2094 	ldr.w	r2, [r5, #148]	; 0x94
 800307e:	0751      	lsls	r1, r2, #29
 8003080:	d40c      	bmi.n	800309c <HAL_RCC_OscConfig+0x6b0>
          pwrclkchanged = SET;
 8003082:	2301      	movs	r3, #1
          __HAL_RCC_PWR_CLK_ENABLE();
 8003084:	f8d5 2094 	ldr.w	r2, [r5, #148]	; 0x94
 8003088:	f042 0204 	orr.w	r2, r2, #4
 800308c:	f8c5 2094 	str.w	r2, [r5, #148]	; 0x94
 8003090:	f8d5 2094 	ldr.w	r2, [r5, #148]	; 0x94
 8003094:	f002 0204 	and.w	r2, r2, #4
 8003098:	9203      	str	r2, [sp, #12]
 800309a:	9a03      	ldr	r2, [sp, #12]
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800309c:	4d6c      	ldr	r5, [pc, #432]	; (8003250 <HAL_RCC_OscConfig+0x864>)
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800309e:	496b      	ldr	r1, [pc, #428]	; (800324c <HAL_RCC_OscConfig+0x860>)
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80030a0:	68ee      	ldr	r6, [r5, #12]
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80030a2:	68ea      	ldr	r2, [r5, #12]
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80030a4:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8003254 <HAL_RCC_OscConfig+0x868>
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80030a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030ac:	60ea      	str	r2, [r5, #12]
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80030ae:	6a88      	ldr	r0, [r1, #40]	; 0x28
 80030b0:	6c67      	ldr	r7, [r4, #68]	; 0x44
 80030b2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80030b4:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
 80030b8:	f020 0003 	bic.w	r0, r0, #3
 80030bc:	433a      	orrs	r2, r7
 80030be:	4302      	orrs	r2, r0
 80030c0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80030c2:	3801      	subs	r0, #1
 80030c4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80030c8:	628a      	str	r2, [r1, #40]	; 0x28
 80030ca:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80030cc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80030ce:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
 80030d2:	1e47      	subs	r7, r0, #1
 80030d4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80030d6:	3a01      	subs	r2, #1
 80030d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030dc:	027f      	lsls	r7, r7, #9
 80030de:	3801      	subs	r0, #1
 80030e0:	ea0e 0c0c 	and.w	ip, lr, ip
 80030e4:	b2bf      	uxth	r7, r7
 80030e6:	0400      	lsls	r0, r0, #16
 80030e8:	ea42 020c 	orr.w	r2, r2, ip
 80030ec:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 80030f0:	433a      	orrs	r2, r7
 80030f2:	4302      	orrs	r2, r0
 80030f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80030f6:	3801      	subs	r0, #1
 80030f8:	0600      	lsls	r0, r0, #24
 80030fa:	f000 40fe 	and.w	r0, r0, #2130706432	; 0x7f000000
 80030fe:	4302      	orrs	r2, r0
 8003100:	634a      	str	r2, [r1, #52]	; 0x34
        __HAL_RCC_PLLFRACN_DISABLE();
 8003102:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003104:	f022 0210 	bic.w	r2, r2, #16
 8003108:	628a      	str	r2, [r1, #40]	; 0x28
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800310a:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 800310c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800310e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003112:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003116:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800311a:	638a      	str	r2, [r1, #56]	; 0x38
        __HAL_RCC_PLLFRACN_ENABLE();
 800311c:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800311e:	f042 0210 	orr.w	r2, r2, #16
 8003122:	628a      	str	r2, [r1, #40]	; 0x28
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8003124:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003126:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003128:	f022 020c 	bic.w	r2, r2, #12
 800312c:	4302      	orrs	r2, r0
 800312e:	628a      	str	r2, [r1, #40]	; 0x28
        if (pwrboosten == SET)
 8003130:	0372      	lsls	r2, r6, #13
 8003132:	f100 813a 	bmi.w	80033aa <HAL_RCC_OscConfig+0x9be>
        if (pwrclkchanged == SET)
 8003136:	b133      	cbz	r3, 8003146 <HAL_RCC_OscConfig+0x75a>
          __HAL_RCC_PWR_CLK_DISABLE();
 8003138:	4a44      	ldr	r2, [pc, #272]	; (800324c <HAL_RCC_OscConfig+0x860>)
 800313a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800313e:	f023 0304 	bic.w	r3, r3, #4
 8003142:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003146:	4c41      	ldr	r4, [pc, #260]	; (800324c <HAL_RCC_OscConfig+0x860>)
 8003148:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800314a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800314e:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_RCC_PLL_ENABLE();
 8003150:	6823      	ldr	r3, [r4, #0]
 8003152:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003156:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003158:	f7fd ff84 	bl	8001064 <HAL_GetTick>
 800315c:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800315e:	e005      	b.n	800316c <HAL_RCC_OscConfig+0x780>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003160:	f7fd ff80 	bl	8001064 <HAL_GetTick>
 8003164:	1b40      	subs	r0, r0, r5
 8003166:	2802      	cmp	r0, #2
 8003168:	f63f ae88 	bhi.w	8002e7c <HAL_RCC_OscConfig+0x490>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800316c:	6823      	ldr	r3, [r4, #0]
 800316e:	019b      	lsls	r3, r3, #6
 8003170:	d5f6      	bpl.n	8003160 <HAL_RCC_OscConfig+0x774>
  return HAL_OK;
 8003172:	2000      	movs	r0, #0
 8003174:	e642      	b.n	8002dfc <HAL_RCC_OscConfig+0x410>
      __HAL_RCC_SHSI_DISABLE();
 8003176:	682b      	ldr	r3, [r5, #0]
 8003178:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800317c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800317e:	f7fd ff71 	bl	8001064 <HAL_GetTick>
 8003182:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003184:	e005      	b.n	8003192 <HAL_RCC_OscConfig+0x7a6>
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003186:	f7fd ff6d 	bl	8001064 <HAL_GetTick>
 800318a:	1b80      	subs	r0, r0, r6
 800318c:	2802      	cmp	r0, #2
 800318e:	f63f ae75 	bhi.w	8002e7c <HAL_RCC_OscConfig+0x490>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003192:	682b      	ldr	r3, [r5, #0]
 8003194:	041a      	lsls	r2, r3, #16
 8003196:	d4f6      	bmi.n	8003186 <HAL_RCC_OscConfig+0x79a>
 8003198:	e57d      	b.n	8002c96 <HAL_RCC_OscConfig+0x2aa>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800319a:	4a2c      	ldr	r2, [pc, #176]	; (800324c <HAL_RCC_OscConfig+0x860>)
 800319c:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80031a8:	e50c      	b.n	8002bc4 <HAL_RCC_OscConfig+0x1d8>
      __HAL_RCC_PWR_CLK_DISABLE();
 80031aa:	4a28      	ldr	r2, [pc, #160]	; (800324c <HAL_RCC_OscConfig+0x860>)
 80031ac:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80031b0:	f023 0304 	bic.w	r3, r3, #4
 80031b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80031b8:	e4d5      	b.n	8002b66 <HAL_RCC_OscConfig+0x17a>
          __HAL_RCC_LSI_DISABLE();
 80031ba:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 80031be:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80031c2:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
          tickstart = HAL_GetTick();
 80031c6:	f7fd ff4d 	bl	8001064 <HAL_GetTick>
 80031ca:	4607      	mov	r7, r0
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80031cc:	e005      	b.n	80031da <HAL_RCC_OscConfig+0x7ee>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ce:	f7fd ff49 	bl	8001064 <HAL_GetTick>
 80031d2:	1bc0      	subs	r0, r0, r7
 80031d4:	2802      	cmp	r0, #2
 80031d6:	f63f ae51 	bhi.w	8002e7c <HAL_RCC_OscConfig+0x490>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80031da:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 80031de:	0119      	lsls	r1, r3, #4
 80031e0:	d4f5      	bmi.n	80031ce <HAL_RCC_OscConfig+0x7e2>
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80031e2:	69a2      	ldr	r2, [r4, #24]
 80031e4:	e49f      	b.n	8002b26 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_MSIK_DISABLE();
 80031e6:	4d19      	ldr	r5, [pc, #100]	; (800324c <HAL_RCC_OscConfig+0x860>)
 80031e8:	682b      	ldr	r3, [r5, #0]
 80031ea:	f023 0310 	bic.w	r3, r3, #16
 80031ee:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80031f0:	f7fd ff38 	bl	8001064 <HAL_GetTick>
 80031f4:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80031f6:	e005      	b.n	8003204 <HAL_RCC_OscConfig+0x818>
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80031f8:	f7fd ff34 	bl	8001064 <HAL_GetTick>
 80031fc:	1b80      	subs	r0, r0, r6
 80031fe:	2802      	cmp	r0, #2
 8003200:	f63f ae3c 	bhi.w	8002e7c <HAL_RCC_OscConfig+0x490>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003204:	682b      	ldr	r3, [r5, #0]
 8003206:	0698      	lsls	r0, r3, #26
 8003208:	d4f6      	bmi.n	80031f8 <HAL_RCC_OscConfig+0x80c>
 800320a:	e573      	b.n	8002cf4 <HAL_RCC_OscConfig+0x308>
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800320c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	62b3      	str	r3, [r6, #40]	; 0x28
      tickstart = HAL_GetTick();
 8003214:	f7fd ff26 	bl	8001064 <HAL_GetTick>
 8003218:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800321a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800321c:	07db      	lsls	r3, r3, #31
 800321e:	f53f acbd 	bmi.w	8002b9c <HAL_RCC_OscConfig+0x1b0>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003222:	f7fd ff1f 	bl	8001064 <HAL_GetTick>
 8003226:	1bc0      	subs	r0, r0, r7
 8003228:	2802      	cmp	r0, #2
 800322a:	d9f6      	bls.n	800321a <HAL_RCC_OscConfig+0x82e>
 800322c:	e626      	b.n	8002e7c <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800322e:	4b07      	ldr	r3, [pc, #28]	; (800324c <HAL_RCC_OscConfig+0x860>)
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	e66a      	b.n	8002f20 <HAL_RCC_OscConfig+0x534>
 800324a:	bf00      	nop
 800324c:	46020c00 	.word	0x46020c00
 8003250:	46020800 	.word	0x46020800
 8003254:	80800000 	.word	0x80800000
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003258:	f7ff f972 	bl	8002540 <RCC_SetFlashLatencyFromMSIRange>
 800325c:	2800      	cmp	r0, #0
 800325e:	f43f ae31 	beq.w	8002ec4 <HAL_RCC_OscConfig+0x4d8>
 8003262:	e5ca      	b.n	8002dfa <HAL_RCC_OscConfig+0x40e>
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003264:	f7ff f96c 	bl	8002540 <RCC_SetFlashLatencyFromMSIRange>
 8003268:	2800      	cmp	r0, #0
 800326a:	f47f adc6 	bne.w	8002dfa <HAL_RCC_OscConfig+0x40e>
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800326e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003270:	e5a2      	b.n	8002db8 <HAL_RCC_OscConfig+0x3cc>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003272:	4b59      	ldr	r3, [pc, #356]	; (80033d8 <HAL_RCC_OscConfig+0x9ec>)
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	e648      	b.n	8002f20 <HAL_RCC_OscConfig+0x534>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800328e:	2a00      	cmp	r2, #0
 8003290:	f2c0 8082 	blt.w	8003398 <HAL_RCC_OscConfig+0x9ac>
 8003294:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003298:	f0c0 8094 	bcc.w	80033c4 <HAL_RCC_OscConfig+0x9d8>
 800329c:	6a22      	ldr	r2, [r4, #32]
 800329e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80032a2:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 80032a6:	60fb      	str	r3, [r7, #12]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032a8:	6823      	ldr	r3, [r4, #0]
 80032aa:	f7ff bbe2 	b.w	8002a72 <HAL_RCC_OscConfig+0x86>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80032ae:	6a21      	ldr	r1, [r4, #32]
 80032b0:	f422 7278 	bic.w	r2, r2, #992	; 0x3e0
 80032b4:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 80032b8:	60da      	str	r2, [r3, #12]
 80032ba:	e600      	b.n	8002ebe <HAL_RCC_OscConfig+0x4d2>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80032bc:	6a21      	ldr	r1, [r4, #32]
 80032be:	f422 7278 	bic.w	r2, r2, #992	; 0x3e0
 80032c2:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 80032c6:	60da      	str	r2, [r3, #12]
 80032c8:	e5fc      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4d8>
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80032ca:	2a00      	cmp	r2, #0
 80032cc:	db72      	blt.n	80033b4 <HAL_RCC_OscConfig+0x9c8>
 80032ce:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80032d2:	68da      	ldr	r2, [r3, #12]
 80032d4:	6a21      	ldr	r1, [r4, #32]
 80032d6:	bf2b      	itete	cs
 80032d8:	f422 42f8 	biccs.w	r2, r2, #31744	; 0x7c00
 80032dc:	f422 2278 	biccc.w	r2, r2, #1015808	; 0xf8000
 80032e0:	ea42 2281 	orrcs.w	r2, r2, r1, lsl #10
 80032e4:	ea42 32c1 	orrcc.w	r2, r2, r1, lsl #15
 80032e8:	60da      	str	r2, [r3, #12]
 80032ea:	e4f1      	b.n	8002cd0 <HAL_RCC_OscConfig+0x2e4>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80032ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032f0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f4:	f241 3888 	movw	r8, #5000	; 0x1388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80032f8:	4f37      	ldr	r7, [pc, #220]	; (80033d8 <HAL_RCC_OscConfig+0x9ec>)
 80032fa:	e005      	b.n	8003308 <HAL_RCC_OscConfig+0x91c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032fc:	f7fd feb2 	bl	8001064 <HAL_GetTick>
 8003300:	1b80      	subs	r0, r0, r6
 8003302:	4540      	cmp	r0, r8
 8003304:	f63f adba 	bhi.w	8002e7c <HAL_RCC_OscConfig+0x490>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003308:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800330c:	051a      	lsls	r2, r3, #20
 800330e:	d4f5      	bmi.n	80032fc <HAL_RCC_OscConfig+0x910>
 8003310:	e482      	b.n	8002c18 <HAL_RCC_OscConfig+0x22c>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003312:	6a21      	ldr	r1, [r4, #32]
 8003314:	f422 2278 	bic.w	r2, r2, #1015808	; 0xf8000
 8003318:	ea42 32c1 	orr.w	r2, r2, r1, lsl #15
 800331c:	60da      	str	r2, [r3, #12]
 800331e:	e5ce      	b.n	8002ebe <HAL_RCC_OscConfig+0x4d2>
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003320:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003322:	6aab      	ldr	r3, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003324:	6b6d      	ldr	r5, [r5, #52]	; 0x34
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003326:	f43f ad69 	beq.w	8002dfc <HAL_RCC_OscConfig+0x410>
 800332a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800332c:	f003 0103 	and.w	r1, r3, #3
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003330:	4291      	cmp	r1, r2
 8003332:	f47f ad62 	bne.w	8002dfa <HAL_RCC_OscConfig+0x40e>
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003336:	6c22      	ldr	r2, [r4, #64]	; 0x40
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003338:	f3c3 2103 	ubfx	r1, r3, #8, #4
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800333c:	3a01      	subs	r2, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800333e:	4291      	cmp	r1, r2
 8003340:	f47f ad5b 	bne.w	8002dfa <HAL_RCC_OscConfig+0x40e>
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003344:	6c62      	ldr	r2, [r4, #68]	; 0x44
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 8003346:	f3c3 3303 	ubfx	r3, r3, #12, #4
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800334a:	4293      	cmp	r3, r2
 800334c:	f47f ad55 	bne.w	8002dfa <HAL_RCC_OscConfig+0x40e>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003350:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003352:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8003356:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003358:	429a      	cmp	r2, r3
 800335a:	f47f ad4e 	bne.w	8002dfa <HAL_RCC_OscConfig+0x40e>
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800335e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003360:	f3c5 2246 	ubfx	r2, r5, #9, #7
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003364:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003366:	429a      	cmp	r2, r3
 8003368:	f47f ad47 	bne.w	8002dfa <HAL_RCC_OscConfig+0x40e>
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800336c:	6d23      	ldr	r3, [r4, #80]	; 0x50
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800336e:	f3c5 4206 	ubfx	r2, r5, #16, #7
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003372:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003374:	429a      	cmp	r2, r3
 8003376:	f47f ad40 	bne.w	8002dfa <HAL_RCC_OscConfig+0x40e>
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800337a:	6d60      	ldr	r0, [r4, #84]	; 0x54
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800337c:	f3c5 6506 	ubfx	r5, r5, #24, #7
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8003380:	3801      	subs	r0, #1
  return HAL_OK;
 8003382:	1a28      	subs	r0, r5, r0
 8003384:	bf18      	it	ne
 8003386:	2001      	movne	r0, #1
 8003388:	e538      	b.n	8002dfc <HAL_RCC_OscConfig+0x410>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800338a:	6a21      	ldr	r1, [r4, #32]
 800338c:	f422 2278 	bic.w	r2, r2, #1015808	; 0xf8000
 8003390:	ea42 32c1 	orr.w	r2, r2, r1, lsl #15
 8003394:	60da      	str	r2, [r3, #12]
 8003396:	e595      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4d8>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003398:	6a22      	ldr	r2, [r4, #32]
 800339a:	f423 7378 	bic.w	r3, r3, #992	; 0x3e0
 800339e:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80033a2:	60fb      	str	r3, [r7, #12]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033a4:	6823      	ldr	r3, [r4, #0]
 80033a6:	f7ff bb64 	b.w	8002a72 <HAL_RCC_OscConfig+0x86>
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80033aa:	68ea      	ldr	r2, [r5, #12]
 80033ac:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80033b0:	60ea      	str	r2, [r5, #12]
 80033b2:	e6c0      	b.n	8003136 <HAL_RCC_OscConfig+0x74a>
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	6a21      	ldr	r1, [r4, #32]
 80033b8:	f422 7278 	bic.w	r2, r2, #992	; 0x3e0
 80033bc:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 80033c0:	60da      	str	r2, [r3, #12]
 80033c2:	e485      	b.n	8002cd0 <HAL_RCC_OscConfig+0x2e4>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80033c4:	6a22      	ldr	r2, [r4, #32]
 80033c6:	f423 2378 	bic.w	r3, r3, #1015808	; 0xf8000
 80033ca:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
 80033ce:	60fb      	str	r3, [r7, #12]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033d0:	6823      	ldr	r3, [r4, #0]
 80033d2:	f7ff bb4e 	b.w	8002a72 <HAL_RCC_OscConfig+0x86>
 80033d6:	bf00      	nop
 80033d8:	46020c00 	.word	0x46020c00

080033dc <HAL_RCC_GetHCLKFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033dc:	4a49      	ldr	r2, [pc, #292]	; (8003504 <HAL_RCC_GetHCLKFreq+0x128>)
{
 80033de:	b410      	push	{r4}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033e0:	69d3      	ldr	r3, [r2, #28]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033e2:	6a91      	ldr	r1, [r2, #40]	; 0x28
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80033e4:	f013 030c 	ands.w	r3, r3, #12
 80033e8:	d05c      	beq.n	80034a4 <HAL_RCC_GetHCLKFreq+0xc8>
 80033ea:	2b0c      	cmp	r3, #12
 80033ec:	d06d      	beq.n	80034ca <HAL_RCC_GetHCLKFreq+0xee>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033ee:	69d2      	ldr	r2, [r2, #28]
 80033f0:	f002 020c 	and.w	r2, r2, #12
 80033f4:	2a04      	cmp	r2, #4
 80033f6:	d066      	beq.n	80034c6 <HAL_RCC_GetHCLKFreq+0xea>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d064      	beq.n	80034c6 <HAL_RCC_GetHCLKFreq+0xea>
  uint32_t msirange = 0U;
 80033fc:	2000      	movs	r0, #0
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033fe:	2b0c      	cmp	r3, #12
 8003400:	d17e      	bne.n	8003500 <HAL_RCC_GetHCLKFreq+0x124>
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003402:	4940      	ldr	r1, [pc, #256]	; (8003504 <HAL_RCC_GetHCLKFreq+0x128>)
 8003404:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003406:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003408:	f004 0c03 	and.w	ip, r4, #3
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800340c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800340e:	6b8c      	ldr	r4, [r1, #56]	; 0x38
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003410:	f3c3 1300 	ubfx	r3, r3, #4, #1
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003414:	f3c4 04cc 	ubfx	r4, r4, #3, #13
 8003418:	fb04 f303 	mul.w	r3, r4, r3
 800341c:	ee07 3a90 	vmov	s15, r3
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003420:	f3c2 2203 	ubfx	r2, r2, #8, #4
      switch (pllsource)
 8003424:	f1bc 0f02 	cmp.w	ip, #2
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800342c:	f102 0201 	add.w	r2, r2, #1
      switch (pllsource)
 8003430:	d002      	beq.n	8003438 <HAL_RCC_GetHCLKFreq+0x5c>
 8003432:	f1bc 0f03 	cmp.w	ip, #3
 8003436:	d14f      	bne.n	80034d8 <HAL_RCC_GetHCLKFreq+0xfc>
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003438:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800343a:	ee07 2a10 	vmov	s14, r2
 800343e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003442:	ee06 3a10 	vmov	s12, r3
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800344a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800344e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003508 <HAL_RCC_GetHCLKFreq+0x12c>
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003452:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003456:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 800350c <HAL_RCC_GetHCLKFreq+0x130>
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800345a:	ee36 6a26 	vadd.f32	s12, s12, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800345e:	eec5 6a07 	vdiv.f32	s13, s10, s14
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003462:	eeb0 7a46 	vmov.f32	s14, s12
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003466:	4b27      	ldr	r3, [pc, #156]	; (8003504 <HAL_RCC_GetHCLKFreq+0x128>)
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003468:	eea7 7aa5 	vfma.f32	s14, s15, s11
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800346c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800346e:	ee26 7a87 	vmul.f32	s14, s13, s14
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003472:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003476:	3301      	adds	r3, #1
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003478:	ee07 3a90 	vmov	s15, r3
 800347c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003480:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003484:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8003488:	ee17 0a90 	vmov	r0, s15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800348c:	4b1d      	ldr	r3, [pc, #116]	; (8003504 <HAL_RCC_GetHCLKFreq+0x128>)
 800348e:	4920      	ldr	r1, [pc, #128]	; (8003510 <HAL_RCC_GetHCLKFreq+0x134>)
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	4a20      	ldr	r2, [pc, #128]	; (8003514 <HAL_RCC_GetHCLKFreq+0x138>)
 8003494:	f003 030f 	and.w	r3, r3, #15
 8003498:	5ccb      	ldrb	r3, [r1, r3]
}
 800349a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800349e:	40d8      	lsrs	r0, r3
 80034a0:	6010      	str	r0, [r2, #0]
}
 80034a2:	4770      	bx	lr
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80034a4:	4a17      	ldr	r2, [pc, #92]	; (8003504 <HAL_RCC_GetHCLKFreq+0x128>)
 80034a6:	6891      	ldr	r1, [r2, #8]
 80034a8:	0209      	lsls	r1, r1, #8
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80034aa:	bf54      	ite	pl
 80034ac:	f8d2 20f4 	ldrpl.w	r2, [r2, #244]	; 0xf4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80034b0:	6892      	ldrmi	r2, [r2, #8]
    msirange = MSIRangeTable[msirange];
 80034b2:	4919      	ldr	r1, [pc, #100]	; (8003518 <HAL_RCC_GetHCLKFreq+0x13c>)
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80034b4:	bf54      	ite	pl
 80034b6:	f3c2 3203 	ubfxpl	r2, r2, #12, #4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80034ba:	0f12      	lsrmi	r2, r2, #28
    msirange = MSIRangeTable[msirange];
 80034bc:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0e3      	beq.n	800348c <HAL_RCC_GetHCLKFreq+0xb0>
 80034c4:	e79b      	b.n	80033fe <HAL_RCC_GetHCLKFreq+0x22>
    sysclockfreq = HSE_VALUE;
 80034c6:	4815      	ldr	r0, [pc, #84]	; (800351c <HAL_RCC_GetHCLKFreq+0x140>)
 80034c8:	e7e0      	b.n	800348c <HAL_RCC_GetHCLKFreq+0xb0>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034ca:	f001 0103 	and.w	r1, r1, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80034ce:	2901      	cmp	r1, #1
 80034d0:	d0e8      	beq.n	80034a4 <HAL_RCC_GetHCLKFreq+0xc8>
  uint32_t msirange = 0U;
 80034d2:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034d4:	69d3      	ldr	r3, [r2, #28]
 80034d6:	e794      	b.n	8003402 <HAL_RCC_GetHCLKFreq+0x26>
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80034d8:	ee07 0a10 	vmov	s14, r0
 80034dc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80034de:	eeb8 5a47 	vcvt.f32.u32	s10, s14
 80034e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e6:	ee06 3a10 	vmov	s12, r3
 80034ea:	ee07 2a10 	vmov	s14, r2
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80034ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80034f2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80034f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80034fa:	eddf 5a03 	vldr	s11, [pc, #12]	; 8003508 <HAL_RCC_GetHCLKFreq+0x12c>
 80034fe:	e7ac      	b.n	800345a <HAL_RCC_GetHCLKFreq+0x7e>
 8003500:	2000      	movs	r0, #0
 8003502:	e7c3      	b.n	800348c <HAL_RCC_GetHCLKFreq+0xb0>
 8003504:	46020c00 	.word	0x46020c00
 8003508:	39000000 	.word	0x39000000
 800350c:	4b742400 	.word	0x4b742400
 8003510:	08008c34 	.word	0x08008c34
 8003514:	20000028 	.word	0x20000028
 8003518:	08008c4c 	.word	0x08008c4c
 800351c:	00f42400 	.word	0x00f42400

08003520 <HAL_RCC_GetPCLK1Freq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003520:	494c      	ldr	r1, [pc, #304]	; (8003654 <HAL_RCC_GetPCLK1Freq+0x134>)
{
 8003522:	b430      	push	{r4, r5}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003524:	69cb      	ldr	r3, [r1, #28]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003526:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003528:	f013 030c 	ands.w	r3, r3, #12
 800352c:	d061      	beq.n	80035f2 <HAL_RCC_GetPCLK1Freq+0xd2>
 800352e:	2b0c      	cmp	r3, #12
 8003530:	d072      	beq.n	8003618 <HAL_RCC_GetPCLK1Freq+0xf8>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003532:	69ca      	ldr	r2, [r1, #28]
 8003534:	f002 020c 	and.w	r2, r2, #12
 8003538:	2a04      	cmp	r2, #4
 800353a:	d06b      	beq.n	8003614 <HAL_RCC_GetPCLK1Freq+0xf4>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800353c:	2b08      	cmp	r3, #8
 800353e:	d069      	beq.n	8003614 <HAL_RCC_GetPCLK1Freq+0xf4>
  uint32_t msirange = 0U;
 8003540:	2200      	movs	r2, #0
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003542:	2b0c      	cmp	r3, #12
 8003544:	f040 8083 	bne.w	800364e <HAL_RCC_GetPCLK1Freq+0x12e>
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003548:	4842      	ldr	r0, [pc, #264]	; (8003654 <HAL_RCC_GetPCLK1Freq+0x134>)
 800354a:	6a84      	ldr	r4, [r0, #40]	; 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800354c:	6a81      	ldr	r1, [r0, #40]	; 0x28
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800354e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003550:	6b85      	ldr	r5, [r0, #56]	; 0x38
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003552:	f3c3 1300 	ubfx	r3, r3, #4, #1
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003556:	f3c5 0ccc 	ubfx	ip, r5, #3, #13
 800355a:	fb0c f303 	mul.w	r3, ip, r3
 800355e:	ee07 3a90 	vmov	s15, r3
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003562:	f004 0403 	and.w	r4, r4, #3
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003566:	f3c1 2103 	ubfx	r1, r1, #8, #4
      switch (pllsource)
 800356a:	2c02      	cmp	r4, #2
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800356c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003570:	f101 0101 	add.w	r1, r1, #1
      switch (pllsource)
 8003574:	d001      	beq.n	800357a <HAL_RCC_GetPCLK1Freq+0x5a>
 8003576:	2c03      	cmp	r4, #3
 8003578:	d155      	bne.n	8003626 <HAL_RCC_GetPCLK1Freq+0x106>
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800357a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800357c:	ee07 1a10 	vmov	s14, r1
 8003580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003584:	ee06 3a10 	vmov	s12, r3
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003588:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800358c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003590:	eddf 5a31 	vldr	s11, [pc, #196]	; 8003658 <HAL_RCC_GetPCLK1Freq+0x138>
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003594:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003598:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800365c <HAL_RCC_GetPCLK1Freq+0x13c>
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800359c:	ee36 6a26 	vadd.f32	s12, s12, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035a0:	eec5 6a07 	vdiv.f32	s13, s10, s14
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80035a4:	eeb0 7a46 	vmov.f32	s14, s12
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80035a8:	4b2a      	ldr	r3, [pc, #168]	; (8003654 <HAL_RCC_GetPCLK1Freq+0x134>)
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80035aa:	eea7 7aa5 	vfma.f32	s14, s15, s11
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80035ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035b0:	ee26 7a87 	vmul.f32	s14, s13, s14
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80035b4:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80035b8:	3301      	adds	r3, #1
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80035ba:	ee07 3a90 	vmov	s15, r3
 80035be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035c2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80035c6:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80035ca:	ee17 2a90 	vmov	r2, s15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80035ce:	4921      	ldr	r1, [pc, #132]	; (8003654 <HAL_RCC_GetPCLK1Freq+0x134>)
 80035d0:	4823      	ldr	r0, [pc, #140]	; (8003660 <HAL_RCC_GetPCLK1Freq+0x140>)
 80035d2:	6a0b      	ldr	r3, [r1, #32]
 80035d4:	4c23      	ldr	r4, [pc, #140]	; (8003664 <HAL_RCC_GetPCLK1Freq+0x144>)
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	5cc0      	ldrb	r0, [r0, r3]
 80035dc:	fa22 f000 	lsr.w	r0, r2, r0
 80035e0:	6020      	str	r0, [r4, #0]
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80035e2:	6a0b      	ldr	r3, [r1, #32]
 80035e4:	4a20      	ldr	r2, [pc, #128]	; (8003668 <HAL_RCC_GetPCLK1Freq+0x148>)
 80035e6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80035ea:	5cd3      	ldrb	r3, [r2, r3]
}
 80035ec:	bc30      	pop	{r4, r5}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80035ee:	40d8      	lsrs	r0, r3
}
 80035f0:	4770      	bx	lr
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80035f2:	4a18      	ldr	r2, [pc, #96]	; (8003654 <HAL_RCC_GetPCLK1Freq+0x134>)
 80035f4:	6891      	ldr	r1, [r2, #8]
 80035f6:	0209      	lsls	r1, r1, #8
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80035f8:	bf54      	ite	pl
 80035fa:	f8d2 20f4 	ldrpl.w	r2, [r2, #244]	; 0xf4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80035fe:	6892      	ldrmi	r2, [r2, #8]
    msirange = MSIRangeTable[msirange];
 8003600:	491a      	ldr	r1, [pc, #104]	; (800366c <HAL_RCC_GetPCLK1Freq+0x14c>)
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003602:	bf54      	ite	pl
 8003604:	f3c2 3203 	ubfxpl	r2, r2, #12, #4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8003608:	0f12      	lsrmi	r2, r2, #28
    msirange = MSIRangeTable[msirange];
 800360a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0dd      	beq.n	80035ce <HAL_RCC_GetPCLK1Freq+0xae>
 8003612:	e796      	b.n	8003542 <HAL_RCC_GetPCLK1Freq+0x22>
    sysclockfreq = HSE_VALUE;
 8003614:	4a16      	ldr	r2, [pc, #88]	; (8003670 <HAL_RCC_GetPCLK1Freq+0x150>)
 8003616:	e7da      	b.n	80035ce <HAL_RCC_GetPCLK1Freq+0xae>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003618:	f002 0203 	and.w	r2, r2, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800361c:	2a01      	cmp	r2, #1
 800361e:	d0e8      	beq.n	80035f2 <HAL_RCC_GetPCLK1Freq+0xd2>
  uint32_t msirange = 0U;
 8003620:	2200      	movs	r2, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003622:	69cb      	ldr	r3, [r1, #28]
 8003624:	e790      	b.n	8003548 <HAL_RCC_GetPCLK1Freq+0x28>
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003626:	ee07 2a10 	vmov	s14, r2
 800362a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800362c:	eeb8 5a47 	vcvt.f32.u32	s10, s14
 8003630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003634:	ee06 3a10 	vmov	s12, r3
 8003638:	ee07 1a10 	vmov	s14, r1
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800363c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003640:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8003644:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003648:	eddf 5a03 	vldr	s11, [pc, #12]	; 8003658 <HAL_RCC_GetPCLK1Freq+0x138>
 800364c:	e7a6      	b.n	800359c <HAL_RCC_GetPCLK1Freq+0x7c>
 800364e:	2200      	movs	r2, #0
 8003650:	e7bd      	b.n	80035ce <HAL_RCC_GetPCLK1Freq+0xae>
 8003652:	bf00      	nop
 8003654:	46020c00 	.word	0x46020c00
 8003658:	39000000 	.word	0x39000000
 800365c:	4b742400 	.word	0x4b742400
 8003660:	08008c34 	.word	0x08008c34
 8003664:	20000028 	.word	0x20000028
 8003668:	08008c44 	.word	0x08008c44
 800366c:	08008c4c 	.word	0x08008c4c
 8003670:	00f42400 	.word	0x00f42400

08003674 <HAL_RCC_GetPCLK2Freq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003674:	494c      	ldr	r1, [pc, #304]	; (80037a8 <HAL_RCC_GetPCLK2Freq+0x134>)
{
 8003676:	b430      	push	{r4, r5}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003678:	69cb      	ldr	r3, [r1, #28]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800367a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800367c:	f013 030c 	ands.w	r3, r3, #12
 8003680:	d061      	beq.n	8003746 <HAL_RCC_GetPCLK2Freq+0xd2>
 8003682:	2b0c      	cmp	r3, #12
 8003684:	d072      	beq.n	800376c <HAL_RCC_GetPCLK2Freq+0xf8>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003686:	69ca      	ldr	r2, [r1, #28]
 8003688:	f002 020c 	and.w	r2, r2, #12
 800368c:	2a04      	cmp	r2, #4
 800368e:	d06b      	beq.n	8003768 <HAL_RCC_GetPCLK2Freq+0xf4>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003690:	2b08      	cmp	r3, #8
 8003692:	d069      	beq.n	8003768 <HAL_RCC_GetPCLK2Freq+0xf4>
  uint32_t msirange = 0U;
 8003694:	2200      	movs	r2, #0
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003696:	2b0c      	cmp	r3, #12
 8003698:	f040 8083 	bne.w	80037a2 <HAL_RCC_GetPCLK2Freq+0x12e>
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800369c:	4842      	ldr	r0, [pc, #264]	; (80037a8 <HAL_RCC_GetPCLK2Freq+0x134>)
 800369e:	6a84      	ldr	r4, [r0, #40]	; 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80036a0:	6a81      	ldr	r1, [r0, #40]	; 0x28
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80036a2:	6a83      	ldr	r3, [r0, #40]	; 0x28
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80036a4:	6b85      	ldr	r5, [r0, #56]	; 0x38
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80036a6:	f3c3 1300 	ubfx	r3, r3, #4, #1
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80036aa:	f3c5 0ccc 	ubfx	ip, r5, #3, #13
 80036ae:	fb0c f303 	mul.w	r3, ip, r3
 80036b2:	ee07 3a90 	vmov	s15, r3
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80036b6:	f004 0403 	and.w	r4, r4, #3
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80036ba:	f3c1 2103 	ubfx	r1, r1, #8, #4
      switch (pllsource)
 80036be:	2c02      	cmp	r4, #2
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80036c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80036c4:	f101 0101 	add.w	r1, r1, #1
      switch (pllsource)
 80036c8:	d001      	beq.n	80036ce <HAL_RCC_GetPCLK2Freq+0x5a>
 80036ca:	2c03      	cmp	r4, #3
 80036cc:	d155      	bne.n	800377a <HAL_RCC_GetPCLK2Freq+0x106>
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80036ce:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80036d0:	ee07 1a10 	vmov	s14, r1
 80036d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036d8:	ee06 3a10 	vmov	s12, r3
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80036dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80036e0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80036e4:	eddf 5a31 	vldr	s11, [pc, #196]	; 80037ac <HAL_RCC_GetPCLK2Freq+0x138>
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80036e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80036ec:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80037b0 <HAL_RCC_GetPCLK2Freq+0x13c>
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80036f0:	ee36 6a26 	vadd.f32	s12, s12, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80036f4:	eec5 6a07 	vdiv.f32	s13, s10, s14
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80036f8:	eeb0 7a46 	vmov.f32	s14, s12
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80036fc:	4b2a      	ldr	r3, [pc, #168]	; (80037a8 <HAL_RCC_GetPCLK2Freq+0x134>)
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80036fe:	eea7 7aa5 	vfma.f32	s14, s15, s11
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003704:	ee26 7a87 	vmul.f32	s14, s13, s14
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003708:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800370c:	3301      	adds	r3, #1
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800370e:	ee07 3a90 	vmov	s15, r3
 8003712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003716:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800371a:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 800371e:	ee17 2a90 	vmov	r2, s15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003722:	4921      	ldr	r1, [pc, #132]	; (80037a8 <HAL_RCC_GetPCLK2Freq+0x134>)
 8003724:	4823      	ldr	r0, [pc, #140]	; (80037b4 <HAL_RCC_GetPCLK2Freq+0x140>)
 8003726:	6a0b      	ldr	r3, [r1, #32]
 8003728:	4c23      	ldr	r4, [pc, #140]	; (80037b8 <HAL_RCC_GetPCLK2Freq+0x144>)
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	5cc0      	ldrb	r0, [r0, r3]
 8003730:	fa22 f000 	lsr.w	r0, r2, r0
 8003734:	6020      	str	r0, [r4, #0]
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8003736:	6a0b      	ldr	r3, [r1, #32]
 8003738:	4a20      	ldr	r2, [pc, #128]	; (80037bc <HAL_RCC_GetPCLK2Freq+0x148>)
 800373a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800373e:	5cd3      	ldrb	r3, [r2, r3]
}
 8003740:	bc30      	pop	{r4, r5}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8003742:	40d8      	lsrs	r0, r3
}
 8003744:	4770      	bx	lr
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003746:	4a18      	ldr	r2, [pc, #96]	; (80037a8 <HAL_RCC_GetPCLK2Freq+0x134>)
 8003748:	6891      	ldr	r1, [r2, #8]
 800374a:	0209      	lsls	r1, r1, #8
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800374c:	bf54      	ite	pl
 800374e:	f8d2 20f4 	ldrpl.w	r2, [r2, #244]	; 0xf4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8003752:	6892      	ldrmi	r2, [r2, #8]
    msirange = MSIRangeTable[msirange];
 8003754:	491a      	ldr	r1, [pc, #104]	; (80037c0 <HAL_RCC_GetPCLK2Freq+0x14c>)
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003756:	bf54      	ite	pl
 8003758:	f3c2 3203 	ubfxpl	r2, r2, #12, #4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800375c:	0f12      	lsrmi	r2, r2, #28
    msirange = MSIRangeTable[msirange];
 800375e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0dd      	beq.n	8003722 <HAL_RCC_GetPCLK2Freq+0xae>
 8003766:	e796      	b.n	8003696 <HAL_RCC_GetPCLK2Freq+0x22>
    sysclockfreq = HSE_VALUE;
 8003768:	4a16      	ldr	r2, [pc, #88]	; (80037c4 <HAL_RCC_GetPCLK2Freq+0x150>)
 800376a:	e7da      	b.n	8003722 <HAL_RCC_GetPCLK2Freq+0xae>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800376c:	f002 0203 	and.w	r2, r2, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003770:	2a01      	cmp	r2, #1
 8003772:	d0e8      	beq.n	8003746 <HAL_RCC_GetPCLK2Freq+0xd2>
  uint32_t msirange = 0U;
 8003774:	2200      	movs	r2, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003776:	69cb      	ldr	r3, [r1, #28]
 8003778:	e790      	b.n	800369c <HAL_RCC_GetPCLK2Freq+0x28>
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800377a:	ee07 2a10 	vmov	s14, r2
 800377e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003780:	eeb8 5a47 	vcvt.f32.u32	s10, s14
 8003784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003788:	ee06 3a10 	vmov	s12, r3
 800378c:	ee07 1a10 	vmov	s14, r1
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003790:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003794:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8003798:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800379c:	eddf 5a03 	vldr	s11, [pc, #12]	; 80037ac <HAL_RCC_GetPCLK2Freq+0x138>
 80037a0:	e7a6      	b.n	80036f0 <HAL_RCC_GetPCLK2Freq+0x7c>
 80037a2:	2200      	movs	r2, #0
 80037a4:	e7bd      	b.n	8003722 <HAL_RCC_GetPCLK2Freq+0xae>
 80037a6:	bf00      	nop
 80037a8:	46020c00 	.word	0x46020c00
 80037ac:	39000000 	.word	0x39000000
 80037b0:	4b742400 	.word	0x4b742400
 80037b4:	08008c34 	.word	0x08008c34
 80037b8:	20000028 	.word	0x20000028
 80037bc:	08008c44 	.word	0x08008c44
 80037c0:	08008c4c 	.word	0x08008c4c
 80037c4:	00f42400 	.word	0x00f42400

080037c8 <HAL_RCC_GetPCLK3Freq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037c8:	494c      	ldr	r1, [pc, #304]	; (80038fc <HAL_RCC_GetPCLK3Freq+0x134>)
{
 80037ca:	b430      	push	{r4, r5}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037cc:	69cb      	ldr	r3, [r1, #28]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037ce:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80037d0:	f013 030c 	ands.w	r3, r3, #12
 80037d4:	d061      	beq.n	800389a <HAL_RCC_GetPCLK3Freq+0xd2>
 80037d6:	2b0c      	cmp	r3, #12
 80037d8:	d072      	beq.n	80038c0 <HAL_RCC_GetPCLK3Freq+0xf8>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037da:	69ca      	ldr	r2, [r1, #28]
 80037dc:	f002 020c 	and.w	r2, r2, #12
 80037e0:	2a04      	cmp	r2, #4
 80037e2:	d06b      	beq.n	80038bc <HAL_RCC_GetPCLK3Freq+0xf4>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d069      	beq.n	80038bc <HAL_RCC_GetPCLK3Freq+0xf4>
  uint32_t msirange = 0U;
 80037e8:	2200      	movs	r2, #0
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037ea:	2b0c      	cmp	r3, #12
 80037ec:	f040 8083 	bne.w	80038f6 <HAL_RCC_GetPCLK3Freq+0x12e>
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80037f0:	4842      	ldr	r0, [pc, #264]	; (80038fc <HAL_RCC_GetPCLK3Freq+0x134>)
 80037f2:	6a84      	ldr	r4, [r0, #40]	; 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80037f4:	6a81      	ldr	r1, [r0, #40]	; 0x28
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80037f6:	6a83      	ldr	r3, [r0, #40]	; 0x28
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80037f8:	6b85      	ldr	r5, [r0, #56]	; 0x38
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80037fa:	f3c3 1300 	ubfx	r3, r3, #4, #1
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80037fe:	f3c5 0ccc 	ubfx	ip, r5, #3, #13
 8003802:	fb0c f303 	mul.w	r3, ip, r3
 8003806:	ee07 3a90 	vmov	s15, r3
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800380a:	f004 0403 	and.w	r4, r4, #3
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800380e:	f3c1 2103 	ubfx	r1, r1, #8, #4
      switch (pllsource)
 8003812:	2c02      	cmp	r4, #2
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003814:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003818:	f101 0101 	add.w	r1, r1, #1
      switch (pllsource)
 800381c:	d001      	beq.n	8003822 <HAL_RCC_GetPCLK3Freq+0x5a>
 800381e:	2c03      	cmp	r4, #3
 8003820:	d155      	bne.n	80038ce <HAL_RCC_GetPCLK3Freq+0x106>
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003822:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003824:	ee07 1a10 	vmov	s14, r1
 8003828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800382c:	ee06 3a10 	vmov	s12, r3
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003830:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003834:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003838:	eddf 5a31 	vldr	s11, [pc, #196]	; 8003900 <HAL_RCC_GetPCLK3Freq+0x138>
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800383c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003840:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8003904 <HAL_RCC_GetPCLK3Freq+0x13c>
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003844:	ee36 6a26 	vadd.f32	s12, s12, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003848:	eec5 6a07 	vdiv.f32	s13, s10, s14
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800384c:	eeb0 7a46 	vmov.f32	s14, s12
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003850:	4b2a      	ldr	r3, [pc, #168]	; (80038fc <HAL_RCC_GetPCLK3Freq+0x134>)
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003852:	eea7 7aa5 	vfma.f32	s14, s15, s11
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003858:	ee26 7a87 	vmul.f32	s14, s13, s14
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800385c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003860:	3301      	adds	r3, #1
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003862:	ee07 3a90 	vmov	s15, r3
 8003866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800386a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800386e:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8003872:	ee17 2a90 	vmov	r2, s15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003876:	4921      	ldr	r1, [pc, #132]	; (80038fc <HAL_RCC_GetPCLK3Freq+0x134>)
 8003878:	4823      	ldr	r0, [pc, #140]	; (8003908 <HAL_RCC_GetPCLK3Freq+0x140>)
 800387a:	6a0b      	ldr	r3, [r1, #32]
 800387c:	4c23      	ldr	r4, [pc, #140]	; (800390c <HAL_RCC_GetPCLK3Freq+0x144>)
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	5cc0      	ldrb	r0, [r0, r3]
 8003884:	fa22 f000 	lsr.w	r0, r2, r0
 8003888:	6020      	str	r0, [r4, #0]
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800388a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800388c:	4a20      	ldr	r2, [pc, #128]	; (8003910 <HAL_RCC_GetPCLK3Freq+0x148>)
 800388e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003892:	5cd3      	ldrb	r3, [r2, r3]
}
 8003894:	bc30      	pop	{r4, r5}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8003896:	40d8      	lsrs	r0, r3
}
 8003898:	4770      	bx	lr
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800389a:	4a18      	ldr	r2, [pc, #96]	; (80038fc <HAL_RCC_GetPCLK3Freq+0x134>)
 800389c:	6891      	ldr	r1, [r2, #8]
 800389e:	0209      	lsls	r1, r1, #8
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80038a0:	bf54      	ite	pl
 80038a2:	f8d2 20f4 	ldrpl.w	r2, [r2, #244]	; 0xf4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80038a6:	6892      	ldrmi	r2, [r2, #8]
    msirange = MSIRangeTable[msirange];
 80038a8:	491a      	ldr	r1, [pc, #104]	; (8003914 <HAL_RCC_GetPCLK3Freq+0x14c>)
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80038aa:	bf54      	ite	pl
 80038ac:	f3c2 3203 	ubfxpl	r2, r2, #12, #4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80038b0:	0f12      	lsrmi	r2, r2, #28
    msirange = MSIRangeTable[msirange];
 80038b2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0dd      	beq.n	8003876 <HAL_RCC_GetPCLK3Freq+0xae>
 80038ba:	e796      	b.n	80037ea <HAL_RCC_GetPCLK3Freq+0x22>
    sysclockfreq = HSE_VALUE;
 80038bc:	4a16      	ldr	r2, [pc, #88]	; (8003918 <HAL_RCC_GetPCLK3Freq+0x150>)
 80038be:	e7da      	b.n	8003876 <HAL_RCC_GetPCLK3Freq+0xae>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038c0:	f002 0203 	and.w	r2, r2, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80038c4:	2a01      	cmp	r2, #1
 80038c6:	d0e8      	beq.n	800389a <HAL_RCC_GetPCLK3Freq+0xd2>
  uint32_t msirange = 0U;
 80038c8:	2200      	movs	r2, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038ca:	69cb      	ldr	r3, [r1, #28]
 80038cc:	e790      	b.n	80037f0 <HAL_RCC_GetPCLK3Freq+0x28>
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80038ce:	ee07 2a10 	vmov	s14, r2
 80038d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80038d4:	eeb8 5a47 	vcvt.f32.u32	s10, s14
 80038d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038dc:	ee06 3a10 	vmov	s12, r3
 80038e0:	ee07 1a10 	vmov	s14, r1
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80038e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80038e8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80038ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80038f0:	eddf 5a03 	vldr	s11, [pc, #12]	; 8003900 <HAL_RCC_GetPCLK3Freq+0x138>
 80038f4:	e7a6      	b.n	8003844 <HAL_RCC_GetPCLK3Freq+0x7c>
 80038f6:	2200      	movs	r2, #0
 80038f8:	e7bd      	b.n	8003876 <HAL_RCC_GetPCLK3Freq+0xae>
 80038fa:	bf00      	nop
 80038fc:	46020c00 	.word	0x46020c00
 8003900:	39000000 	.word	0x39000000
 8003904:	4b742400 	.word	0x4b742400
 8003908:	08008c34 	.word	0x08008c34
 800390c:	20000028 	.word	0x20000028
 8003910:	08008c44 	.word	0x08008c44
 8003914:	08008c4c 	.word	0x08008c4c
 8003918:	00f42400 	.word	0x00f42400

0800391c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 800391c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800391e:	4c34      	ldr	r4, [pc, #208]	; (80039f0 <RCCEx_PLL3_Config+0xd4>)
{
 8003920:	4606      	mov	r6, r0
  __HAL_RCC_PLL3_DISABLE();
 8003922:	6823      	ldr	r3, [r4, #0]
 8003924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003928:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800392a:	f7fd fb9b 	bl	8001064 <HAL_GetTick>
 800392e:	4605      	mov	r5, r0

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003930:	e004      	b.n	800393c <RCCEx_PLL3_Config+0x20>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003932:	f7fd fb97 	bl	8001064 <HAL_GetTick>
 8003936:	1b43      	subs	r3, r0, r5
 8003938:	2b02      	cmp	r3, #2
 800393a:	d856      	bhi.n	80039ea <RCCEx_PLL3_Config+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800393c:	6823      	ldr	r3, [r4, #0]
 800393e:	009a      	lsls	r2, r3, #2
 8003940:	d4f7      	bmi.n	8003932 <RCCEx_PLL3_Config+0x16>
      return HAL_TIMEOUT;
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8003942:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003944:	e9d6 1200 	ldrd	r1, r2, [r6]
 8003948:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800394c:	f023 0303 	bic.w	r3, r3, #3
 8003950:	430b      	orrs	r3, r1
 8003952:	3a01      	subs	r2, #1
 8003954:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003958:	6323      	str	r3, [r4, #48]	; 0x30
 800395a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800395c:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8003960:	4d24      	ldr	r5, [pc, #144]	; (80039f4 <RCCEx_PLL3_Config+0xd8>)
 8003962:	1e51      	subs	r1, r2, #1
 8003964:	6932      	ldr	r2, [r6, #16]
 8003966:	3b01      	subs	r3, #1
 8003968:	4005      	ands	r5, r0
 800396a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800396e:	0249      	lsls	r1, r1, #9
 8003970:	3a01      	subs	r2, #1
 8003972:	b289      	uxth	r1, r1
 8003974:	432b      	orrs	r3, r5
 8003976:	0412      	lsls	r2, r2, #16
 8003978:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800397c:	430b      	orrs	r3, r1
 800397e:	4313      	orrs	r3, r2
 8003980:	6972      	ldr	r2, [r6, #20]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003982:	4d1b      	ldr	r5, [pc, #108]	; (80039f0 <RCCEx_PLL3_Config+0xd4>)
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8003984:	3a01      	subs	r2, #1
 8003986:	0612      	lsls	r2, r2, #24
 8003988:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800398c:	4313      	orrs	r3, r2
 800398e:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8003990:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003992:	69b2      	ldr	r2, [r6, #24]
 8003994:	f023 030c 	bic.w	r3, r3, #12
 8003998:	4313      	orrs	r3, r2
 800399a:	6323      	str	r3, [r4, #48]	; 0x30
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800399c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800399e:	6a32      	ldr	r2, [r6, #32]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	6323      	str	r3, [r4, #48]	; 0x30
  __HAL_RCC_PLL3FRACN_DISABLE();
 80039a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80039a6:	f023 0310 	bic.w	r3, r3, #16
 80039aa:	6323      	str	r3, [r4, #48]	; 0x30
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80039ac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80039ae:	69f2      	ldr	r2, [r6, #28]
 80039b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039b4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80039b8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80039bc:	64a3      	str	r3, [r4, #72]	; 0x48
  __HAL_RCC_PLL3FRACN_ENABLE();
 80039be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80039c0:	f043 0310 	orr.w	r3, r3, #16
 80039c4:	6323      	str	r3, [r4, #48]	; 0x30
  __HAL_RCC_PLL3_ENABLE();
 80039c6:	6823      	ldr	r3, [r4, #0]
 80039c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039cc:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80039ce:	f7fd fb49 	bl	8001064 <HAL_GetTick>
 80039d2:	4604      	mov	r4, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80039d4:	e004      	b.n	80039e0 <RCCEx_PLL3_Config+0xc4>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80039d6:	f7fd fb45 	bl	8001064 <HAL_GetTick>
 80039da:	1b00      	subs	r0, r0, r4
 80039dc:	2802      	cmp	r0, #2
 80039de:	d804      	bhi.n	80039ea <RCCEx_PLL3_Config+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80039e0:	682b      	ldr	r3, [r5, #0]
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	d5f7      	bpl.n	80039d6 <RCCEx_PLL3_Config+0xba>
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80039e6:	2000      	movs	r0, #0
}
 80039e8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 80039ea:	2003      	movs	r0, #3
}
 80039ec:	bd70      	pop	{r4, r5, r6, pc}
 80039ee:	bf00      	nop
 80039f0:	46020c00 	.word	0x46020c00
 80039f4:	80800000 	.word	0x80800000

080039f8 <RCCEx_PLL2_Config>:
{
 80039f8:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_PLL2_DISABLE();
 80039fa:	4c34      	ldr	r4, [pc, #208]	; (8003acc <RCCEx_PLL2_Config+0xd4>)
{
 80039fc:	4606      	mov	r6, r0
  __HAL_RCC_PLL2_DISABLE();
 80039fe:	6823      	ldr	r3, [r4, #0]
 8003a00:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a04:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003a06:	f7fd fb2d 	bl	8001064 <HAL_GetTick>
 8003a0a:	4605      	mov	r5, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003a0c:	e004      	b.n	8003a18 <RCCEx_PLL2_Config+0x20>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003a0e:	f7fd fb29 	bl	8001064 <HAL_GetTick>
 8003a12:	1b43      	subs	r3, r0, r5
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d856      	bhi.n	8003ac6 <RCCEx_PLL2_Config+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003a18:	6823      	ldr	r3, [r4, #0]
 8003a1a:	011a      	lsls	r2, r3, #4
 8003a1c:	d4f7      	bmi.n	8003a0e <RCCEx_PLL2_Config+0x16>
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8003a1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003a20:	e9d6 1200 	ldrd	r1, r2, [r6]
 8003a24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a28:	f023 0303 	bic.w	r3, r3, #3
 8003a2c:	430b      	orrs	r3, r1
 8003a2e:	3a01      	subs	r2, #1
 8003a30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003a34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003a36:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003a38:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8003a3c:	4d24      	ldr	r5, [pc, #144]	; (8003ad0 <RCCEx_PLL2_Config+0xd8>)
 8003a3e:	1e51      	subs	r1, r2, #1
 8003a40:	6932      	ldr	r2, [r6, #16]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	4005      	ands	r5, r0
 8003a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a4a:	0249      	lsls	r1, r1, #9
 8003a4c:	3a01      	subs	r2, #1
 8003a4e:	b289      	uxth	r1, r1
 8003a50:	432b      	orrs	r3, r5
 8003a52:	0412      	lsls	r2, r2, #16
 8003a54:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8003a58:	430b      	orrs	r3, r1
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	6972      	ldr	r2, [r6, #20]
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003a5e:	4d1b      	ldr	r5, [pc, #108]	; (8003acc <RCCEx_PLL2_Config+0xd4>)
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8003a60:	3a01      	subs	r2, #1
 8003a62:	0612      	lsls	r2, r2, #24
 8003a64:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	63e3      	str	r3, [r4, #60]	; 0x3c
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8003a6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003a6e:	69b2      	ldr	r2, [r6, #24]
 8003a70:	f023 030c 	bic.w	r3, r3, #12
 8003a74:	4313      	orrs	r3, r2
 8003a76:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8003a78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003a7a:	6a32      	ldr	r2, [r6, #32]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_PLL2FRACN_DISABLE();
 8003a80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003a82:	f023 0310 	bic.w	r3, r3, #16
 8003a86:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003a88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a8a:	69f2      	ldr	r2, [r6, #28]
 8003a8c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a90:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003a94:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003a98:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_RCC_PLL2FRACN_ENABLE();
 8003a9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003a9c:	f043 0310 	orr.w	r3, r3, #16
 8003aa0:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_PLL2_ENABLE();
 8003aa2:	6823      	ldr	r3, [r4, #0]
 8003aa4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003aa8:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003aaa:	f7fd fadb 	bl	8001064 <HAL_GetTick>
 8003aae:	4604      	mov	r4, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003ab0:	e004      	b.n	8003abc <RCCEx_PLL2_Config+0xc4>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003ab2:	f7fd fad7 	bl	8001064 <HAL_GetTick>
 8003ab6:	1b00      	subs	r0, r0, r4
 8003ab8:	2802      	cmp	r0, #2
 8003aba:	d804      	bhi.n	8003ac6 <RCCEx_PLL2_Config+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003abc:	682b      	ldr	r3, [r5, #0]
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	d5f7      	bpl.n	8003ab2 <RCCEx_PLL2_Config+0xba>
  return HAL_OK;
 8003ac2:	2000      	movs	r0, #0
}
 8003ac4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 8003ac6:	2003      	movs	r0, #3
}
 8003ac8:	bd70      	pop	{r4, r5, r6, pc}
 8003aca:	bf00      	nop
 8003acc:	46020c00 	.word	0x46020c00
 8003ad0:	80800000 	.word	0x80800000

08003ad4 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ad8:	6803      	ldr	r3, [r0, #0]
{
 8003ada:	4604      	mov	r4, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003adc:	07dd      	lsls	r5, r3, #31
{
 8003ade:	b082      	sub	sp, #8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ae0:	d508      	bpl.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x20>
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003ae2:	49a7      	ldr	r1, [pc, #668]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003ae4:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8003ae6:	f8d1 20e0 	ldr.w	r2, [r1, #224]	; 0xe0
 8003aea:	f022 0203 	bic.w	r2, r2, #3
 8003aee:	4302      	orrs	r2, r0
 8003af0:	f8c1 20e0 	str.w	r2, [r1, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003af4:	0798      	lsls	r0, r3, #30
 8003af6:	d508      	bpl.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003af8:	49a1      	ldr	r1, [pc, #644]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003afa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003afc:	f8d1 20e0 	ldr.w	r2, [r1, #224]	; 0xe0
 8003b00:	f022 020c 	bic.w	r2, r2, #12
 8003b04:	4302      	orrs	r2, r0
 8003b06:	f8c1 20e0 	str.w	r2, [r1, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b0a:	0759      	lsls	r1, r3, #29
 8003b0c:	d508      	bpl.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003b0e:	499c      	ldr	r1, [pc, #624]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003b10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b12:	f8d1 20e0 	ldr.w	r2, [r1, #224]	; 0xe0
 8003b16:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8003b1a:	4302      	orrs	r2, r0
 8003b1c:	f8c1 20e0 	str.w	r2, [r1, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b20:	071a      	lsls	r2, r3, #28
 8003b22:	d508      	bpl.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003b24:	4996      	ldr	r1, [pc, #600]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003b26:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003b28:	f8d1 20e0 	ldr.w	r2, [r1, #224]	; 0xe0
 8003b2c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003b30:	4302      	orrs	r2, r0
 8003b32:	f8c1 20e0 	str.w	r2, [r1, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b36:	06df      	lsls	r7, r3, #27
 8003b38:	d508      	bpl.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x78>
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003b3a:	4991      	ldr	r1, [pc, #580]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003b3c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003b3e:	f8d1 20e0 	ldr.w	r2, [r1, #224]	; 0xe0
 8003b42:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003b46:	4302      	orrs	r2, r0
 8003b48:	f8c1 20e0 	str.w	r2, [r1, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b4c:	069e      	lsls	r6, r3, #26
 8003b4e:	d508      	bpl.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003b50:	498b      	ldr	r1, [pc, #556]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003b52:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003b54:	f8d1 20e8 	ldr.w	r2, [r1, #232]	; 0xe8
 8003b58:	f022 0207 	bic.w	r2, r2, #7
 8003b5c:	4302      	orrs	r2, r0
 8003b5e:	f8c1 20e8 	str.w	r2, [r1, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b62:	065d      	lsls	r5, r3, #25
 8003b64:	d508      	bpl.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003b66:	4986      	ldr	r1, [pc, #536]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003b68:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8003b6a:	f8d1 20e0 	ldr.w	r2, [r1, #224]	; 0xe0
 8003b6e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003b72:	4302      	orrs	r2, r0
 8003b74:	f8c1 20e0 	str.w	r2, [r1, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b78:	0618      	lsls	r0, r3, #24
 8003b7a:	d508      	bpl.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0xba>
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003b7c:	4980      	ldr	r1, [pc, #512]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003b7e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003b80:	f8d1 20e0 	ldr.w	r2, [r1, #224]	; 0xe0
 8003b84:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003b88:	4302      	orrs	r2, r0
 8003b8a:	f8c1 20e0 	str.w	r2, [r1, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b8e:	05d9      	lsls	r1, r3, #23
 8003b90:	d508      	bpl.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003b92:	497b      	ldr	r1, [pc, #492]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003b94:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8003b96:	f8d1 20e8 	ldr.w	r2, [r1, #232]	; 0xe8
 8003b9a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003b9e:	4302      	orrs	r2, r0
 8003ba0:	f8c1 20e8 	str.w	r2, [r1, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ba4:	025a      	lsls	r2, r3, #9
 8003ba6:	d508      	bpl.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0xe6>
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003ba8:	4975      	ldr	r1, [pc, #468]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003baa:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003bac:	f8d1 20e0 	ldr.w	r2, [r1, #224]	; 0xe0
 8003bb0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003bb4:	4302      	orrs	r2, r0
 8003bb6:	f8c1 20e0 	str.w	r2, [r1, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003bba:	059f      	lsls	r7, r3, #22
 8003bbc:	d508      	bpl.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003bbe:	4970      	ldr	r1, [pc, #448]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003bc0:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8003bc2:	f8d1 20e8 	ldr.w	r2, [r1, #232]	; 0xe8
 8003bc6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003bca:	4302      	orrs	r2, r0
 8003bcc:	f8c1 20e8 	str.w	r2, [r1, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003bd0:	055e      	lsls	r6, r3, #21
 8003bd2:	d508      	bpl.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003bd4:	496a      	ldr	r1, [pc, #424]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003bd6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8003bd8:	f8d1 20e0 	ldr.w	r2, [r1, #224]	; 0xe0
 8003bdc:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8003be0:	4302      	orrs	r2, r0
 8003be2:	f8c1 20e0 	str.w	r2, [r1, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8003be6:	051d      	lsls	r5, r3, #20
 8003be8:	d509      	bpl.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x12a>
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8003bea:	4965      	ldr	r1, [pc, #404]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003bec:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8003bf0:	f8d1 20e8 	ldr.w	r2, [r1, #232]	; 0xe8
 8003bf4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003bf8:	4302      	orrs	r2, r0
 8003bfa:	f8c1 20e8 	str.w	r2, [r1, #232]	; 0xe8
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003bfe:	0498      	lsls	r0, r3, #18
 8003c00:	f403 5500 	and.w	r5, r3, #8192	; 0x2000
 8003c04:	d525      	bpl.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    switch (pPeriphClkInit->Sai1ClockSelection)
 8003c06:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8003c0a:	2a40      	cmp	r2, #64	; 0x40
 8003c0c:	f000 8265 	beq.w	80040da <HAL_RCCEx_PeriphCLKConfig+0x606>
 8003c10:	d811      	bhi.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8003c12:	2a00      	cmp	r2, #0
 8003c14:	f000 8206 	beq.w	8004024 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003c18:	2a20      	cmp	r2, #32
 8003c1a:	f040 8275 	bne.w	8004108 <HAL_RCCEx_PeriphCLKConfig+0x634>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c1e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8003c22:	f7ff fe7b 	bl	800391c <RCCEx_PLL3_Config>
 8003c26:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8003c28:	2d00      	cmp	r5, #0
 8003c2a:	f040 8254 	bne.w	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x602>
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003c2e:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	e004      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch (pPeriphClkInit->Sai1ClockSelection)
 8003c36:	2a60      	cmp	r2, #96	; 0x60
 8003c38:	d002      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003c3a:	2a80      	cmp	r2, #128	; 0x80
 8003c3c:	f040 8264 	bne.w	8004108 <HAL_RCCEx_PeriphCLKConfig+0x634>
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003c40:	2500      	movs	r5, #0
 8003c42:	484f      	ldr	r0, [pc, #316]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003c44:	f8d0 10e4 	ldr.w	r1, [r0, #228]	; 0xe4
 8003c48:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c52:	0459      	lsls	r1, r3, #17
 8003c54:	d52b      	bpl.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x1da>
    switch (pPeriphClkInit->Sai2ClockSelection)
 8003c56:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8003c5a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003c5e:	f000 8245 	beq.w	80040ec <HAL_RCCEx_PeriphCLKConfig+0x618>
 8003c62:	d818      	bhi.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003c64:	2a00      	cmp	r2, #0
 8003c66:	f000 81e6 	beq.w	8004036 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8003c6a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003c6e:	f040 8248 	bne.w	8004102 <HAL_RCCEx_PeriphCLKConfig+0x62e>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c72:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8003c76:	f7ff fe51 	bl	800391c <RCCEx_PLL3_Config>
 8003c7a:	4606      	mov	r6, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003c7c:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 8003c7e:	b9a6      	cbnz	r6, 8003caa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8003c80:	493f      	ldr	r1, [pc, #252]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003c82:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8003c86:	f8d1 20e4 	ldr.w	r2, [r1, #228]	; 0xe4
 8003c8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c8e:	4302      	orrs	r2, r0
 8003c90:	f8c1 20e4 	str.w	r2, [r1, #228]	; 0xe4
 8003c94:	e00c      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    switch (pPeriphClkInit->Sai2ClockSelection)
 8003c96:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003c9a:	d003      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8003c9c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003ca0:	f040 822f 	bne.w	8004102 <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8003ca4:	462e      	mov	r6, r5
    if (ret == HAL_OK)
 8003ca6:	2e00      	cmp	r6, #0
 8003ca8:	d0ea      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8003caa:	4635      	mov	r5, r6
 8003cac:	e000      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003cae:	462e      	mov	r6, r5
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003cb0:	041a      	lsls	r2, r3, #16
 8003cb2:	d510      	bpl.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x202>
    switch (pPeriphClkInit->AdcDacClockSelection)
 8003cb4:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8003cb8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003cbc:	f000 81d6 	beq.w	800406c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8003cc0:	d917      	bls.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003cc2:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8003cc6:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8003cca:	d015      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x224>
 8003ccc:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8003cd0:	d012      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x224>
 8003cd2:	2501      	movs	r5, #1
 8003cd4:	462e      	mov	r6, r5
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003cd6:	03df      	lsls	r7, r3, #15
 8003cd8:	d51e      	bpl.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x244>
    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003cda:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8003cde:	2a04      	cmp	r2, #4
 8003ce0:	f200 8214 	bhi.w	800410c <HAL_RCCEx_PeriphCLKConfig+0x638>
 8003ce4:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003ce8:	01ef0160 	.word	0x01ef0160
 8003cec:	0160015a 	.word	0x0160015a
 8003cf0:	0160      	.short	0x0160
    switch (pPeriphClkInit->AdcDacClockSelection)
 8003cf2:	f432 5280 	bics.w	r2, r2, #4096	; 0x1000
 8003cf6:	d1ec      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    if (ret == HAL_OK)
 8003cf8:	2e00      	cmp	r6, #0
 8003cfa:	f040 81c0 	bne.w	800407e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003cfe:	4920      	ldr	r1, [pc, #128]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003d00:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8003d04:	f8d1 20e8 	ldr.w	r2, [r1, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003d08:	03df      	lsls	r7, r3, #15
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003d0a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003d0e:	ea42 0200 	orr.w	r2, r2, r0
 8003d12:	f8c1 20e8 	str.w	r2, [r1, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003d16:	d4e0      	bmi.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x206>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003d18:	0398      	lsls	r0, r3, #14
 8003d1a:	d51e      	bpl.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x286>
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003d1c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003d20:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8003d24:	f000 81b5 	beq.w	8004092 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8003d28:	f200 8126 	bhi.w	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003d2c:	b142      	cbz	r2, 8003d40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003d2e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003d32:	f040 8129 	bne.w	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d36:	4912      	ldr	r1, [pc, #72]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003d38:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003d3a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003d3e:	628a      	str	r2, [r1, #40]	; 0x28
    if (ret == HAL_OK)
 8003d40:	2e00      	cmp	r6, #0
 8003d42:	f040 817f 	bne.w	8004044 <HAL_RCCEx_PeriphCLKConfig+0x570>
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8003d46:	490e      	ldr	r1, [pc, #56]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003d48:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8003d4c:	f8d1 20e8 	ldr.w	r2, [r1, #232]	; 0xe8
 8003d50:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8003d54:	4302      	orrs	r2, r0
 8003d56:	f8c1 20e8 	str.w	r2, [r1, #232]	; 0xe8
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d5a:	0359      	lsls	r1, r3, #13
 8003d5c:	d566      	bpl.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x358>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d5e:	4b08      	ldr	r3, [pc, #32]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003d60:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003d64:	0752      	lsls	r2, r2, #29
 8003d66:	f140 812c 	bpl.w	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    FlagStatus       pwrclkchanged = RESET;
 8003d6a:	f04f 0900 	mov.w	r9, #0
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003d6e:	4f05      	ldr	r7, [pc, #20]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8003d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d72:	f043 0301 	orr.w	r3, r3, #1
 8003d76:	62bb      	str	r3, [r7, #40]	; 0x28
    tickstart = HAL_GetTick();
 8003d78:	f7fd f974 	bl	8001064 <HAL_GetTick>
 8003d7c:	4680      	mov	r8, r0
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003d7e:	e00a      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003d80:	46020c00 	.word	0x46020c00
 8003d84:	46020800 	.word	0x46020800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d88:	f7fd f96c 	bl	8001064 <HAL_GetTick>
 8003d8c:	eba0 0308 	sub.w	r3, r0, r8
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	f200 8142 	bhi.w	800401a <HAL_RCCEx_PeriphCLKConfig+0x546>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d98:	07db      	lsls	r3, r3, #31
 8003d9a:	d5f5      	bpl.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    if (ret == HAL_OK)
 8003d9c:	2e00      	cmp	r6, #0
 8003d9e:	f040 81ac 	bne.w	80040fa <HAL_RCCEx_PeriphCLKConfig+0x626>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003da2:	f8df a344 	ldr.w	sl, [pc, #836]	; 80040e8 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8003da6:	f8da 30f0 	ldr.w	r3, [sl, #240]	; 0xf0
      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003daa:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003dae:	d028      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8003db0:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d026      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x332>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003db8:	f8da 10f0 	ldr.w	r1, [sl, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dbc:	f8da 30f0 	ldr.w	r3, [sl, #240]	; 0xf0
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003dc0:	07c8      	lsls	r0, r1, #31
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc6:	f8ca 30f0 	str.w	r3, [sl, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dca:	f8da 30f0 	ldr.w	r3, [sl, #240]	; 0xf0
 8003dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dd2:	f8ca 30f0 	str.w	r3, [sl, #240]	; 0xf0
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003dd6:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        RCC->BDCR = tmpregister;
 8003dda:	f8ca 30f0 	str.w	r3, [sl, #240]	; 0xf0
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003dde:	f140 818e 	bpl.w	80040fe <HAL_RCCEx_PeriphCLKConfig+0x62a>
        tickstart = HAL_GetTick();
 8003de2:	f7fd f93f 	bl	8001064 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de6:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003dea:	4607      	mov	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dec:	e005      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x326>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dee:	f7fd f939 	bl	8001064 <HAL_GetTick>
 8003df2:	1bc0      	subs	r0, r0, r7
 8003df4:	4540      	cmp	r0, r8
 8003df6:	f200 8110 	bhi.w	800401a <HAL_RCCEx_PeriphCLKConfig+0x546>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dfa:	f8da 30f0 	ldr.w	r3, [sl, #240]	; 0xf0
 8003dfe:	0799      	lsls	r1, r3, #30
 8003e00:	d5f5      	bpl.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003e02:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8003e06:	49b8      	ldr	r1, [pc, #736]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8003e08:	f8d1 20f0 	ldr.w	r2, [r1, #240]	; 0xf0
 8003e0c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
    if (pwrclkchanged == SET)
 8003e16:	f1b9 0f00 	cmp.w	r9, #0
 8003e1a:	d006      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x356>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e1c:	4ab2      	ldr	r2, [pc, #712]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8003e1e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003e22:	f023 0304 	bic.w	r3, r3, #4
 8003e26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8003e2a:	6823      	ldr	r3, [r4, #0]
 8003e2c:	02da      	lsls	r2, r3, #11
 8003e2e:	d51f      	bpl.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    switch (pPeriphClkInit->IclkClockSelection)
 8003e30:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8003e34:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 8003e38:	f000 8134 	beq.w	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003e3c:	f200 80a7 	bhi.w	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003e40:	b14a      	cbz	r2, 8003e56 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003e42:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8003e46:	f040 80a6 	bne.w	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e4a:	f104 0008 	add.w	r0, r4, #8
 8003e4e:	f7ff fdd3 	bl	80039f8 <RCCEx_PLL2_Config>
 8003e52:	4606      	mov	r6, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003e54:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 8003e56:	2e00      	cmp	r6, #0
 8003e58:	f040 80f6 	bne.w	8004048 <HAL_RCCEx_PeriphCLKConfig+0x574>
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8003e5c:	49a2      	ldr	r1, [pc, #648]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8003e5e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8003e62:	f8d1 20e0 	ldr.w	r2, [r1, #224]	; 0xe0
 8003e66:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003e6a:	4302      	orrs	r2, r0
 8003e6c:	f8c1 20e0 	str.w	r2, [r1, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003e70:	031f      	lsls	r7, r3, #12
 8003e72:	d50b      	bpl.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    switch (pPeriphClkInit->RngClockSelection)
 8003e74:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8003e78:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003e7c:	f000 80c2 	beq.w	8004004 <HAL_RCCEx_PeriphCLKConfig+0x530>
 8003e80:	f432 5180 	bics.w	r1, r2, #4096	; 0x1000
 8003e84:	f000 80be 	beq.w	8004004 <HAL_RCCEx_PeriphCLKConfig+0x530>
 8003e88:	2501      	movs	r5, #1
 8003e8a:	462e      	mov	r6, r5
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8003e8c:	04d8      	lsls	r0, r3, #19
 8003e8e:	d509      	bpl.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8003e90:	4995      	ldr	r1, [pc, #596]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8003e92:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8003e96:	f8d1 20e4 	ldr.w	r2, [r1, #228]	; 0xe4
 8003e9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e9e:	4302      	orrs	r2, r0
 8003ea0:	f8c1 20e4 	str.w	r2, [r1, #228]	; 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8003ea4:	0299      	lsls	r1, r3, #10
 8003ea6:	d50d      	bpl.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8003ea8:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8003eac:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8003eb0:	f000 80d6 	beq.w	8004060 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8003eb4:	498c      	ldr	r1, [pc, #560]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8003eb6:	f8d1 20e4 	ldr.w	r2, [r1, #228]	; 0xe4
 8003eba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ebe:	4302      	orrs	r2, r0
 8003ec0:	f8c1 20e4 	str.w	r2, [r1, #228]	; 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003ec4:	021a      	lsls	r2, r3, #8
 8003ec6:	d509      	bpl.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x408>
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003ec8:	4987      	ldr	r1, [pc, #540]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8003eca:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8003ece:	f8d1 20e0 	ldr.w	r2, [r1, #224]	; 0xe0
 8003ed2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003ed6:	4302      	orrs	r2, r0
 8003ed8:	f8c1 20e0 	str.w	r2, [r1, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003edc:	01df      	lsls	r7, r3, #7
 8003ede:	d509      	bpl.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x420>
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003ee0:	4981      	ldr	r1, [pc, #516]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8003ee2:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8003ee6:	f8d1 20e0 	ldr.w	r2, [r1, #224]	; 0xe0
 8003eea:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003eee:	4302      	orrs	r2, r0
 8003ef0:	f8c1 20e0 	str.w	r2, [r1, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003ef4:	0198      	lsls	r0, r3, #6
 8003ef6:	d509      	bpl.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x438>
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003ef8:	497b      	ldr	r1, [pc, #492]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8003efa:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
 8003efe:	f8d1 20e8 	ldr.w	r2, [r1, #232]	; 0xe8
 8003f02:	f022 0218 	bic.w	r2, r2, #24
 8003f06:	4302      	orrs	r2, r0
 8003f08:	f8c1 20e8 	str.w	r2, [r1, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003f0c:	0159      	lsls	r1, r3, #5
 8003f0e:	d515      	bpl.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x468>
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8003f10:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8003f14:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8003f18:	f000 809c 	beq.w	8004054 <HAL_RCCEx_PeriphCLKConfig+0x580>
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8003f1c:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8003f20:	f000 80ca 	beq.w	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    if (ret == HAL_OK)
 8003f24:	2e00      	cmp	r6, #0
 8003f26:	d17b      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x54c>
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8003f28:	496f      	ldr	r1, [pc, #444]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8003f2a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8003f2e:	f8d1 20e4 	ldr.w	r2, [r1, #228]	; 0xe4
 8003f32:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003f36:	4302      	orrs	r2, r0
 8003f38:	f8c1 20e4 	str.w	r2, [r1, #228]	; 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8003f3c:	011a      	lsls	r2, r3, #4
 8003f3e:	d50b      	bpl.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x484>
    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8003f40:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8003f44:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8003f48:	f000 809b 	beq.w	8004082 <HAL_RCCEx_PeriphCLKConfig+0x5ae>
 8003f4c:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8003f50:	d046      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003f52:	2a00      	cmp	r2, #0
 8003f54:	d04a      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003f56:	2501      	movs	r5, #1
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	d509      	bpl.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x49c>
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8003f5c:	4a62      	ldr	r2, [pc, #392]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8003f5e:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8003f62:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8003f66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f6a:	430b      	orrs	r3, r1
 8003f6c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
}
 8003f70:	4628      	mov	r0, r5
 8003f72:	b002      	add	sp, #8
 8003f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003f78:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8003f7c:	f43f aee0 	beq.w	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003f80:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8003f84:	f43f aedc 	beq.w	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003f88:	2501      	movs	r5, #1
 8003f8a:	462e      	mov	r6, r5
 8003f8c:	e6e5      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x286>
    switch (pPeriphClkInit->IclkClockSelection)
 8003f8e:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8003f92:	f43f af60 	beq.w	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003f96:	2501      	movs	r5, #1
 8003f98:	462e      	mov	r6, r5
 8003f9a:	e769      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x39c>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f9c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8003fa0:	f7ff fcbc 	bl	800391c <RCCEx_PLL3_Config>
 8003fa4:	4606      	mov	r6, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003fa6:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 8003fa8:	2e00      	cmp	r6, #0
 8003faa:	d14f      	bne.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x578>
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003fac:	494e      	ldr	r1, [pc, #312]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8003fae:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8003fb2:	f8d1 20e4 	ldr.w	r2, [r1, #228]	; 0xe4
 8003fb6:	f022 0207 	bic.w	r2, r2, #7
 8003fba:	4302      	orrs	r2, r0
 8003fbc:	f8c1 20e4 	str.w	r2, [r1, #228]	; 0xe4
 8003fc0:	e6aa      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x244>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fc2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
      pwrclkchanged = SET;
 8003fc6:	f04f 0901 	mov.w	r9, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fca:	f042 0204 	orr.w	r2, r2, #4
 8003fce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8003fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fd6:	f003 0304 	and.w	r3, r3, #4
 8003fda:	9301      	str	r3, [sp, #4]
 8003fdc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003fde:	e6c6      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003fe0:	f104 0008 	add.w	r0, r4, #8
 8003fe4:	f7ff fd08 	bl	80039f8 <RCCEx_PLL2_Config>
 8003fe8:	4606      	mov	r6, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8003fea:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 8003fec:	bb86      	cbnz	r6, 8004050 <HAL_RCCEx_PeriphCLKConfig+0x57c>
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8003fee:	493e      	ldr	r1, [pc, #248]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8003ff0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8003ff4:	f8d1 20e0 	ldr.w	r2, [r1, #224]	; 0xe0
 8003ff8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003ffc:	4302      	orrs	r2, r0
 8003ffe:	f8c1 20e0 	str.w	r2, [r1, #224]	; 0xe0
 8004002:	e7a9      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x484>
    if (ret == HAL_OK)
 8004004:	2e00      	cmp	r6, #0
 8004006:	d155      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004008:	4837      	ldr	r0, [pc, #220]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 800400a:	f8d0 10e4 	ldr.w	r1, [r0, #228]	; 0xe4
 800400e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8004012:	430a      	orrs	r2, r1
 8004014:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
 8004018:	e738      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
        ret = HAL_TIMEOUT;
 800401a:	2503      	movs	r5, #3
 800401c:	462e      	mov	r6, r5
 800401e:	e6fa      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004020:	4635      	mov	r5, r6
 8004022:	e78b      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x468>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004024:	f104 0008 	add.w	r0, r4, #8
 8004028:	f7ff fce6 	bl	80039f8 <RCCEx_PLL2_Config>
 800402c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800402e:	2d00      	cmp	r5, #0
 8004030:	f43f adfd 	beq.w	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004034:	e04f      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x602>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004036:	f104 0008 	add.w	r0, r4, #8
 800403a:	f7ff fcdd 	bl	80039f8 <RCCEx_PLL2_Config>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800403e:	6823      	ldr	r3, [r4, #0]
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004040:	4606      	mov	r6, r0
        break;
 8004042:	e61c      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004044:	4635      	mov	r5, r6
 8004046:	e688      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004048:	4635      	mov	r5, r6
 800404a:	e711      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x39c>
 800404c:	4635      	mov	r5, r6
 800404e:	e663      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004050:	4635      	mov	r5, r6
 8004052:	e781      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x484>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004054:	4924      	ldr	r1, [pc, #144]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8004056:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004058:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800405c:	628a      	str	r2, [r1, #40]	; 0x28
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800405e:	e761      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x450>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004060:	4921      	ldr	r1, [pc, #132]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8004062:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004064:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004068:	628a      	str	r2, [r1, #40]	; 0x28
 800406a:	e723      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800406c:	f104 0008 	add.w	r0, r4, #8
 8004070:	f7ff fcc2 	bl	80039f8 <RCCEx_PLL2_Config>
 8004074:	4606      	mov	r6, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8004076:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 8004078:	2e00      	cmp	r6, #0
 800407a:	f43f ae40 	beq.w	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800407e:	4635      	mov	r5, r6
 8004080:	e629      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x202>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004082:	4919      	ldr	r1, [pc, #100]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8004084:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004086:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800408a:	628a      	str	r2, [r1, #40]	; 0x28
    if (ret == HAL_OK)
 800408c:	2e00      	cmp	r6, #0
 800408e:	d1df      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004090:	e7ad      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x51a>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004092:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8004096:	f7ff fc41 	bl	800391c <RCCEx_PLL3_Config>
 800409a:	4606      	mov	r6, r0
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800409c:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 800409e:	2e00      	cmp	r6, #0
 80040a0:	d1d0      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80040a2:	e650      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x272>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040a4:	4910      	ldr	r1, [pc, #64]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 80040a6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80040a8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80040ac:	628a      	str	r2, [r1, #40]	; 0x28
    if (ret == HAL_OK)
 80040ae:	2e00      	cmp	r6, #0
 80040b0:	d1ca      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x574>
 80040b2:	e6d3      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x388>
 80040b4:	4635      	mov	r5, r6
 80040b6:	e6e9      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040b8:	f104 0008 	add.w	r0, r4, #8
 80040bc:	f7ff fc9c 	bl	80039f8 <RCCEx_PLL2_Config>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80040c0:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040c2:	4606      	mov	r6, r0
 80040c4:	e72e      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x450>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80040c6:	4908      	ldr	r1, [pc, #32]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 80040c8:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80040ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80040ce:	628a      	str	r2, [r1, #40]	; 0x28
    if (ret == HAL_OK)
 80040d0:	2e00      	cmp	r6, #0
 80040d2:	d1bb      	bne.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x578>
 80040d4:	e76a      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80040d6:	6823      	ldr	r3, [r4, #0]
 80040d8:	e5bb      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x17e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80040da:	4803      	ldr	r0, [pc, #12]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 80040dc:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80040de:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80040e2:	6281      	str	r1, [r0, #40]	; 0x28
    if (ret == HAL_OK)
 80040e4:	e5ac      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80040e6:	bf00      	nop
 80040e8:	46020c00 	.word	0x46020c00
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80040ec:	4909      	ldr	r1, [pc, #36]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x640>)
        break;
 80040ee:	462e      	mov	r6, r5
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80040f0:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80040f2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80040f6:	628a      	str	r2, [r1, #40]	; 0x28
        break;
 80040f8:	e5c1      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80040fa:	4635      	mov	r5, r6
 80040fc:	e68b      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80040fe:	4613      	mov	r3, r2
 8004100:	e681      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x332>
    switch (pPeriphClkInit->Sai2ClockSelection)
 8004102:	2501      	movs	r5, #1
 8004104:	462e      	mov	r6, r5
 8004106:	e5d3      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    switch (pPeriphClkInit->Sai1ClockSelection)
 8004108:	2501      	movs	r5, #1
 800410a:	e5a2      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    switch (pPeriphClkInit->Mdf1ClockSelection)
 800410c:	2501      	movs	r5, #1
 800410e:	462e      	mov	r6, r5
 8004110:	e602      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004112:	bf00      	nop
 8004114:	46020c00 	.word	0x46020c00

08004118 <HAL_RCCEx_GetPLL1ClockFreq>:
{
 8004118:	b530      	push	{r4, r5, lr}
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800411a:	4d52      	ldr	r5, [pc, #328]	; (8004264 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
 800411c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800411e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004120:	6aab      	ldr	r3, [r5, #40]	; 0x28
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8004122:	6aac      	ldr	r4, [r5, #40]	; 0x28
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004124:	f001 0103 	and.w	r1, r1, #3
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8004128:	f004 0e10 	and.w	lr, r4, #16
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800412c:	6bac      	ldr	r4, [r5, #56]	; 0x38
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800412e:	f3c3 2303 	ubfx	r3, r3, #8, #4
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004132:	f3c4 0ccc 	ubfx	ip, r4, #3, #13
 8004136:	fb0e fc0c 	mul.w	ip, lr, ip
 800413a:	ee07 ca90 	vmov	s15, ip
    switch (pll1source)
 800413e:	2902      	cmp	r1, #2
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004140:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004144:	f3c2 0208 	ubfx	r2, r2, #0, #9
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004148:	f103 0301 	add.w	r3, r3, #1
    switch (pll1source)
 800414c:	d06d      	beq.n	800422a <HAL_RCCEx_GetPLL1ClockFreq+0x112>
 800414e:	2903      	cmp	r1, #3
 8004150:	d06b      	beq.n	800422a <HAL_RCCEx_GetPLL1ClockFreq+0x112>
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004152:	ee07 2a90 	vmov	s15, r2
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004156:	68a9      	ldr	r1, [r5, #8]
 8004158:	4a43      	ldr	r2, [pc, #268]	; (8004268 <HAL_RCCEx_GetPLL1ClockFreq+0x150>)
 800415a:	0209      	lsls	r1, r1, #8
 800415c:	bf4b      	itete	mi
 800415e:	68a9      	ldrmi	r1, [r5, #8]
 8004160:	f8d5 10f4 	ldrpl.w	r1, [r5, #244]	; 0xf4
 8004164:	0f09      	lsrmi	r1, r1, #28
 8004166:	f3c1 3103 	ubfxpl	r1, r1, #12, #4
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800416a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800416e:	ee07 3a90 	vmov	s15, r3
 8004172:	eb02 0381 	add.w	r3, r2, r1, lsl #2
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004176:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800417a:	edd3 5a00 	vldr	s11, [r3]
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800417e:	ee37 7a06 	vadd.f32	s14, s14, s12
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004182:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004186:	eef8 5a65 	vcvt.f32.u32	s11, s11
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800418a:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800426c <HAL_RCCEx_GetPLL1ClockFreq+0x154>
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800418e:	ee85 6aa7 	vdiv.f32	s12, s11, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004192:	eef0 7a47 	vmov.f32	s15, s14
 8004196:	eee6 7a85 	vfma.f32	s15, s13, s10
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800419a:	ee26 7a27 	vmul.f32	s14, s12, s15
    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800419e:	4a31      	ldr	r2, [pc, #196]	; (8004264 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
 80041a0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80041a2:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80041a6:	d010      	beq.n	80041ca <HAL_RCCEx_GetPLL1ClockFreq+0xb2>
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80041a8:	6b53      	ldr	r3, [r2, #52]	; 0x34
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80041aa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80041ae:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80041b2:	ee06 3a90 	vmov	s13, r3
 80041b6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80041ba:	ee76 6aa7 	vadd.f32	s13, s13, s15
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80041be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041c6:	ee17 3a90 	vmov	r3, s15
    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80041ca:	4a26      	ldr	r2, [pc, #152]	; (8004264 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
 80041cc:	6003      	str	r3, [r0, #0]
 80041ce:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80041d0:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 80041d4:	d010      	beq.n	80041f8 <HAL_RCCEx_GetPLL1ClockFreq+0xe0>
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80041d6:	6b53      	ldr	r3, [r2, #52]	; 0x34
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80041d8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80041dc:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80041e0:	ee06 3a90 	vmov	s13, r3
 80041e4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80041e8:	ee76 6aa7 	vadd.f32	s13, s13, s15
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80041ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041f4:	ee17 3a90 	vmov	r3, s15
    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80041f8:	4a1a      	ldr	r2, [pc, #104]	; (8004264 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
 80041fa:	6043      	str	r3, [r0, #4]
 80041fc:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80041fe:	f413 2380 	ands.w	r3, r3, #262144	; 0x40000
 8004202:	d010      	beq.n	8004226 <HAL_RCCEx_GetPLL1ClockFreq+0x10e>
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004204:	6b53      	ldr	r3, [r2, #52]	; 0x34
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8004206:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800420a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800420e:	ee06 3a90 	vmov	s13, r3
 8004212:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8004216:	ee76 6aa7 	vadd.f32	s13, s13, s15
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800421a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800421e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004222:	ee17 3a90 	vmov	r3, s15
 8004226:	6083      	str	r3, [r0, #8]
}
 8004228:	bd30      	pop	{r4, r5, pc}
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800422a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800422c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004230:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004234:	ee07 2a10 	vmov	s14, r2
 8004238:	ee07 3a90 	vmov	s15, r3
 800423c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004240:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004244:	ee37 7a06 	vadd.f32	s14, s14, s12
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004248:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8004270 <HAL_RCCEx_GetPLL1ClockFreq+0x158>
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800424c:	eddf 5a07 	vldr	s11, [pc, #28]	; 800426c <HAL_RCCEx_GetPLL1ClockFreq+0x154>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004250:	ee85 6a27 	vdiv.f32	s12, s10, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004254:	eef0 7a47 	vmov.f32	s15, s14
 8004258:	eee6 7aa5 	vfma.f32	s15, s13, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800425c:	ee26 7a27 	vmul.f32	s14, s12, s15
        break;
 8004260:	e79d      	b.n	800419e <HAL_RCCEx_GetPLL1ClockFreq+0x86>
 8004262:	bf00      	nop
 8004264:	46020c00 	.word	0x46020c00
 8004268:	08008c4c 	.word	0x08008c4c
 800426c:	39000000 	.word	0x39000000
 8004270:	4b742400 	.word	0x4b742400

08004274 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 8004274:	b530      	push	{r4, r5, lr}
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8004276:	4d52      	ldr	r5, [pc, #328]	; (80043c0 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
 8004278:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800427a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800427c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800427e:	6aec      	ldr	r4, [r5, #44]	; 0x2c
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8004280:	f001 0103 	and.w	r1, r1, #3
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8004284:	f004 0e10 	and.w	lr, r4, #16
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8004288:	6c2c      	ldr	r4, [r5, #64]	; 0x40
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800428a:	f3c3 2303 	ubfx	r3, r3, #8, #4
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800428e:	f3c4 0ccc 	ubfx	ip, r4, #3, #13
 8004292:	fb0e fc0c 	mul.w	ip, lr, ip
 8004296:	ee07 ca90 	vmov	s15, ip
    switch (pll2source)
 800429a:	2902      	cmp	r1, #2
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800429c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80042a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80042a4:	f103 0301 	add.w	r3, r3, #1
    switch (pll2source)
 80042a8:	d06d      	beq.n	8004386 <HAL_RCCEx_GetPLL2ClockFreq+0x112>
 80042aa:	2903      	cmp	r1, #3
 80042ac:	d06b      	beq.n	8004386 <HAL_RCCEx_GetPLL2ClockFreq+0x112>
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80042ae:	ee07 2a90 	vmov	s15, r2
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80042b2:	68a9      	ldr	r1, [r5, #8]
 80042b4:	4a43      	ldr	r2, [pc, #268]	; (80043c4 <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
 80042b6:	0209      	lsls	r1, r1, #8
 80042b8:	bf4b      	itete	mi
 80042ba:	68a9      	ldrmi	r1, [r5, #8]
 80042bc:	f8d5 10f4 	ldrpl.w	r1, [r5, #244]	; 0xf4
 80042c0:	0f09      	lsrmi	r1, r1, #28
 80042c2:	f3c1 3103 	ubfxpl	r1, r1, #12, #4
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80042c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80042ca:	ee07 3a90 	vmov	s15, r3
 80042ce:	eb02 0381 	add.w	r3, r2, r1, lsl #2
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80042d2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80042d6:	edd3 5a00 	vldr	s11, [r3]
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80042da:	ee37 7a06 	vadd.f32	s14, s14, s12
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80042de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042e2:	eef8 5a65 	vcvt.f32.u32	s11, s11
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80042e6:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80043c8 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80042ea:	ee85 6aa7 	vdiv.f32	s12, s11, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80042ee:	eef0 7a47 	vmov.f32	s15, s14
 80042f2:	eee6 7a85 	vfma.f32	s15, s13, s10
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80042f6:	ee26 7a27 	vmul.f32	s14, s12, s15
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80042fa:	4a31      	ldr	r2, [pc, #196]	; (80043c0 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
 80042fc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80042fe:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8004302:	d010      	beq.n	8004326 <HAL_RCCEx_GetPLL2ClockFreq+0xb2>
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004304:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8004306:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800430a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800430e:	ee06 3a90 	vmov	s13, r3
 8004312:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8004316:	ee76 6aa7 	vadd.f32	s13, s13, s15
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800431a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800431e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004322:	ee17 3a90 	vmov	r3, s15
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004326:	4a26      	ldr	r2, [pc, #152]	; (80043c0 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
 8004328:	6003      	str	r3, [r0, #0]
 800432a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800432c:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8004330:	d010      	beq.n	8004354 <HAL_RCCEx_GetPLL2ClockFreq+0xe0>
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004332:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004334:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004338:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800433c:	ee06 3a90 	vmov	s13, r3
 8004340:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004344:	ee76 6aa7 	vadd.f32	s13, s13, s15
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004348:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800434c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004350:	ee17 3a90 	vmov	r3, s15
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004354:	4a1a      	ldr	r2, [pc, #104]	; (80043c0 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
 8004356:	6043      	str	r3, [r0, #4]
 8004358:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800435a:	f413 2380 	ands.w	r3, r3, #262144	; 0x40000
 800435e:	d010      	beq.n	8004382 <HAL_RCCEx_GetPLL2ClockFreq+0x10e>
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004360:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8004362:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004366:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800436a:	ee06 3a90 	vmov	s13, r3
 800436e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8004372:	ee76 6aa7 	vadd.f32	s13, s13, s15
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004376:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800437a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800437e:	ee17 3a90 	vmov	r3, s15
 8004382:	6083      	str	r3, [r0, #8]
}
 8004384:	bd30      	pop	{r4, r5, pc}
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004386:	6bea      	ldr	r2, [r5, #60]	; 0x3c
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004388:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800438c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004390:	ee07 2a10 	vmov	s14, r2
 8004394:	ee07 3a90 	vmov	s15, r3
 8004398:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800439c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80043a0:	ee37 7a06 	vadd.f32	s14, s14, s12
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80043a4:	ed9f 5a09 	vldr	s10, [pc, #36]	; 80043cc <HAL_RCCEx_GetPLL2ClockFreq+0x158>
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80043a8:	eddf 5a07 	vldr	s11, [pc, #28]	; 80043c8 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80043ac:	ee85 6a27 	vdiv.f32	s12, s10, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80043b0:	eef0 7a47 	vmov.f32	s15, s14
 80043b4:	eee6 7aa5 	vfma.f32	s15, s13, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80043b8:	ee26 7a27 	vmul.f32	s14, s12, s15
        break;
 80043bc:	e79d      	b.n	80042fa <HAL_RCCEx_GetPLL2ClockFreq+0x86>
 80043be:	bf00      	nop
 80043c0:	46020c00 	.word	0x46020c00
 80043c4:	08008c4c 	.word	0x08008c4c
 80043c8:	39000000 	.word	0x39000000
 80043cc:	4b742400 	.word	0x4b742400

080043d0 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 80043d0:	b530      	push	{r4, r5, lr}
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80043d2:	4d52      	ldr	r5, [pc, #328]	; (800451c <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
 80043d4:	6c6a      	ldr	r2, [r5, #68]	; 0x44
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80043d6:	6b29      	ldr	r1, [r5, #48]	; 0x30
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80043d8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 80043da:	6b2c      	ldr	r4, [r5, #48]	; 0x30
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80043dc:	f001 0103 	and.w	r1, r1, #3
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 80043e0:	f004 0e10 	and.w	lr, r4, #16
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80043e4:	6cac      	ldr	r4, [r5, #72]	; 0x48
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80043e6:	f3c3 2303 	ubfx	r3, r3, #8, #4
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80043ea:	f3c4 0ccc 	ubfx	ip, r4, #3, #13
 80043ee:	fb0e fc0c 	mul.w	ip, lr, ip
 80043f2:	ee07 ca90 	vmov	s15, ip
    switch (pll3source)
 80043f6:	2902      	cmp	r1, #2
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80043f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80043fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8004400:	f103 0301 	add.w	r3, r3, #1
    switch (pll3source)
 8004404:	d06d      	beq.n	80044e2 <HAL_RCCEx_GetPLL3ClockFreq+0x112>
 8004406:	2903      	cmp	r1, #3
 8004408:	d06b      	beq.n	80044e2 <HAL_RCCEx_GetPLL3ClockFreq+0x112>
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800440a:	ee07 2a90 	vmov	s15, r2
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800440e:	68a9      	ldr	r1, [r5, #8]
 8004410:	4a43      	ldr	r2, [pc, #268]	; (8004520 <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
 8004412:	0209      	lsls	r1, r1, #8
 8004414:	bf4b      	itete	mi
 8004416:	68a9      	ldrmi	r1, [r5, #8]
 8004418:	f8d5 10f4 	ldrpl.w	r1, [r5, #244]	; 0xf4
 800441c:	0f09      	lsrmi	r1, r1, #28
 800441e:	f3c1 3103 	ubfxpl	r1, r1, #12, #4
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004422:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004426:	ee07 3a90 	vmov	s15, r3
 800442a:	eb02 0381 	add.w	r3, r2, r1, lsl #2
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800442e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004432:	edd3 5a00 	vldr	s11, [r3]
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004436:	ee37 7a06 	vadd.f32	s14, s14, s12
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800443a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800443e:	eef8 5a65 	vcvt.f32.u32	s11, s11
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004442:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8004524 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004446:	ee85 6aa7 	vdiv.f32	s12, s11, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800444a:	eef0 7a47 	vmov.f32	s15, s14
 800444e:	eee6 7a85 	vfma.f32	s15, s13, s10
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004452:	ee26 7a27 	vmul.f32	s14, s12, s15
    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8004456:	4a31      	ldr	r2, [pc, #196]	; (800451c <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
 8004458:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800445a:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 800445e:	d010      	beq.n	8004482 <HAL_RCCEx_GetPLL3ClockFreq+0xb2>
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004460:	6c53      	ldr	r3, [r2, #68]	; 0x44
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8004462:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004466:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800446a:	ee06 3a90 	vmov	s13, r3
 800446e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8004472:	ee76 6aa7 	vadd.f32	s13, s13, s15
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004476:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800447a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800447e:	ee17 3a90 	vmov	r3, s15
    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8004482:	4a26      	ldr	r2, [pc, #152]	; (800451c <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
 8004484:	6003      	str	r3, [r0, #0]
 8004486:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004488:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 800448c:	d010      	beq.n	80044b0 <HAL_RCCEx_GetPLL3ClockFreq+0xe0>
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800448e:	6c53      	ldr	r3, [r2, #68]	; 0x44
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8004490:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004494:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004498:	ee06 3a90 	vmov	s13, r3
 800449c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80044a0:	ee76 6aa7 	vadd.f32	s13, s13, s15
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80044a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044ac:	ee17 3a90 	vmov	r3, s15
    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80044b0:	4a1a      	ldr	r2, [pc, #104]	; (800451c <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
 80044b2:	6043      	str	r3, [r0, #4]
 80044b4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80044b6:	f413 2380 	ands.w	r3, r3, #262144	; 0x40000
 80044ba:	d010      	beq.n	80044de <HAL_RCCEx_GetPLL3ClockFreq+0x10e>
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80044bc:	6c53      	ldr	r3, [r2, #68]	; 0x44
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80044be:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80044c2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80044c6:	ee06 3a90 	vmov	s13, r3
 80044ca:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80044ce:	ee76 6aa7 	vadd.f32	s13, s13, s15
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80044d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044da:	ee17 3a90 	vmov	r3, s15
 80044de:	6083      	str	r3, [r0, #8]
}
 80044e0:	bd30      	pop	{r4, r5, pc}
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80044e2:	6c6a      	ldr	r2, [r5, #68]	; 0x44
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80044e4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80044e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044ec:	ee07 2a10 	vmov	s14, r2
 80044f0:	ee07 3a90 	vmov	s15, r3
 80044f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80044f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80044fc:	ee37 7a06 	vadd.f32	s14, s14, s12
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004500:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8004528 <HAL_RCCEx_GetPLL3ClockFreq+0x158>
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004504:	eddf 5a07 	vldr	s11, [pc, #28]	; 8004524 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004508:	ee85 6a27 	vdiv.f32	s12, s10, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800450c:	eef0 7a47 	vmov.f32	s15, s14
 8004510:	eee6 7aa5 	vfma.f32	s15, s13, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004514:	ee26 7a27 	vmul.f32	s14, s12, s15
        break;
 8004518:	e79d      	b.n	8004456 <HAL_RCCEx_GetPLL3ClockFreq+0x86>
 800451a:	bf00      	nop
 800451c:	46020c00 	.word	0x46020c00
 8004520:	08008c4c 	.word	0x08008c4c
 8004524:	39000000 	.word	0x39000000
 8004528:	4b742400 	.word	0x4b742400

0800452c <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800452c:	f5a0 2380 	sub.w	r3, r0, #262144	; 0x40000
 8004530:	430b      	orrs	r3, r1
 8004532:	f000 80ab 	beq.w	800468c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
{
 8004536:	b500      	push	{lr}
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004538:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 800453c:	430b      	orrs	r3, r1
{
 800453e:	b085      	sub	sp, #20
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004540:	f000 8084 	beq.w	800464c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004544:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 8004548:	430b      	orrs	r3, r1
 800454a:	f000 80fb 	beq.w	8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800454e:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 8004552:	430b      	orrs	r3, r1
 8004554:	f000 80c4 	beq.w	80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8004558:	f5a0 1380 	sub.w	r3, r0, #1048576	; 0x100000
 800455c:	430b      	orrs	r3, r1
 800455e:	f000 8110 	beq.w	8004782 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004562:	f5a0 1300 	sub.w	r3, r0, #2097152	; 0x200000
 8004566:	430b      	orrs	r3, r1
 8004568:	f000 8168 	beq.w	800483c <HAL_RCCEx_GetPeriphCLKFreq+0x310>
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800456c:	1e43      	subs	r3, r0, #1
 800456e:	430b      	orrs	r3, r1
 8004570:	f000 818d 	beq.w	800488e <HAL_RCCEx_GetPeriphCLKFreq+0x362>
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8004574:	1e83      	subs	r3, r0, #2
 8004576:	430b      	orrs	r3, r1
 8004578:	f000 8143 	beq.w	8004802 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800457c:	1f03      	subs	r3, r0, #4
 800457e:	430b      	orrs	r3, r1
 8004580:	f000 81bf 	beq.w	8004902 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8004584:	f1a0 0308 	sub.w	r3, r0, #8
 8004588:	430b      	orrs	r3, r1
 800458a:	f000 81f2 	beq.w	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800458e:	f1a0 0310 	sub.w	r3, r0, #16
 8004592:	430b      	orrs	r3, r1
 8004594:	f000 8210 	beq.w	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8004598:	f1a0 0320 	sub.w	r3, r0, #32
 800459c:	430b      	orrs	r3, r1
 800459e:	f000 8229 	beq.w	80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80045a2:	f5a0 4300 	sub.w	r3, r0, #32768	; 0x8000
 80045a6:	430b      	orrs	r3, r1
 80045a8:	f000 8245 	beq.w	8004a36 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80045ac:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 80045b0:	430b      	orrs	r3, r1
 80045b2:	f000 8266 	beq.w	8004a82 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80045b6:	f5a0 3300 	sub.w	r3, r0, #131072	; 0x20000
 80045ba:	430b      	orrs	r3, r1
 80045bc:	f000 80aa 	beq.w	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80045c0:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
 80045c4:	430b      	orrs	r3, r1
 80045c6:	f000 82ac 	beq.w	8004b22 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80045ca:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
 80045ce:	430b      	orrs	r3, r1
 80045d0:	f000 82d1 	beq.w	8004b76 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80045d4:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 80045d8:	430b      	orrs	r3, r1
 80045da:	f000 81ae 	beq.w	800493a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80045de:	f5a0 0380 	sub.w	r3, r0, #4194304	; 0x400000
 80045e2:	430b      	orrs	r3, r1
 80045e4:	f000 8324 	beq.w	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80045e8:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 80045ec:	430b      	orrs	r3, r1
 80045ee:	f000 833e 	beq.w	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80045f2:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 80045f6:	430b      	orrs	r3, r1
 80045f8:	f000 8389 	beq.w	8004d0e <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80045fc:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 8004600:	430b      	orrs	r3, r1
 8004602:	f000 835f 	beq.w	8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8004606:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 800460a:	430b      	orrs	r3, r1
 800460c:	f000 83f4 	beq.w	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8004610:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8004614:	430b      	orrs	r3, r1
 8004616:	f000 83da 	beq.w	8004dce <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800461a:	f100 437f 	add.w	r3, r0, #4278190080	; 0xff000000
 800461e:	430b      	orrs	r3, r1
 8004620:	f000 84b6 	beq.w	8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8004624:	f100 437e 	add.w	r3, r0, #4261412864	; 0xfe000000
 8004628:	430b      	orrs	r3, r1
 800462a:	f000 846f 	beq.w	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800462e:	f100 437c 	add.w	r3, r0, #4227858432	; 0xfc000000
 8004632:	430b      	orrs	r3, r1
 8004634:	f000 8446 	beq.w	8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8004638:	f100 4070 	add.w	r0, r0, #4026531840	; 0xf0000000
 800463c:	ea50 0301 	orrs.w	r3, r0, r1
 8004640:	f000 8422 	beq.w	8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
      frequency = 0U;
 8004644:	2000      	movs	r0, #0
}
 8004646:	b005      	add	sp, #20
 8004648:	f85d fb04 	ldr.w	pc, [sp], #4
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800464c:	4aa4      	ldr	r2, [pc, #656]	; (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 800464e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 8004652:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    switch (srcclk)
 8004656:	2b40      	cmp	r3, #64	; 0x40
 8004658:	d06f      	beq.n	800473a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800465a:	d90c      	bls.n	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800465c:	2b60      	cmp	r3, #96	; 0x60
 800465e:	d051      	beq.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8004660:	2b80      	cmp	r3, #128	; 0x80
 8004662:	bf18      	it	ne
 8004664:	2000      	movne	r0, #0
 8004666:	d1ee      	bne.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004668:	6810      	ldr	r0, [r2, #0]
          frequency = HSI_VALUE;
 800466a:	4b9e      	ldr	r3, [pc, #632]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>)
 800466c:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8004670:	bf18      	it	ne
 8004672:	4618      	movne	r0, r3
 8004674:	e7e7      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    switch (srcclk)
 8004676:	2b00      	cmp	r3, #0
 8004678:	d047      	beq.n	800470a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 800467a:	2b20      	cmp	r3, #32
 800467c:	bf18      	it	ne
 800467e:	2000      	movne	r0, #0
 8004680:	d1e1      	bne.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004682:	a801      	add	r0, sp, #4
 8004684:	f7ff fea4 	bl	80043d0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004688:	9801      	ldr	r0, [sp, #4]
        break;
 800468a:	e7dc      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800468c:	4a94      	ldr	r2, [pc, #592]	; (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 800468e:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004692:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004696:	f403 7340 	and.w	r3, r3, #768	; 0x300
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800469a:	0792      	lsls	r2, r2, #30
 800469c:	d503      	bpl.n	80046a6 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800469e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046a2:	f000 80a2 	beq.w	80047ea <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80046a6:	4a8e      	ldr	r2, [pc, #568]	; (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 80046a8:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
 80046ac:	0109      	lsls	r1, r1, #4
 80046ae:	d50b      	bpl.n	80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 80046b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046b4:	d108      	bne.n	80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80046b6:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
        frequency = LSI_VALUE;
 80046ba:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80046be:	bf14      	ite	ne
 80046c0:	20fa      	movne	r0, #250	; 0xfa
 80046c2:	f44f 40fa 	moveq.w	r0, #32000	; 0x7d00
 80046c6:	4770      	bx	lr
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80046c8:	4a85      	ldr	r2, [pc, #532]	; (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 80046ca:	6810      	ldr	r0, [r2, #0]
 80046cc:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80046d0:	d005      	beq.n	80046de <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
      frequency = HSE_VALUE / 32U;
 80046d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046d6:	4884      	ldr	r0, [pc, #528]	; (80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>)
 80046d8:	bf18      	it	ne
 80046da:	2000      	movne	r0, #0
 80046dc:	4770      	bx	lr
}
 80046de:	4770      	bx	lr
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80046e0:	4b7f      	ldr	r3, [pc, #508]	; (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 80046e2:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80046e6:	681a      	ldr	r2, [r3, #0]
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80046e8:	f400 6000 	and.w	r0, r0, #2048	; 0x800
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80046ec:	0552      	lsls	r2, r2, #21
 80046ee:	d573      	bpl.n	80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 80046f0:	2800      	cmp	r0, #0
 80046f2:	f000 80ee 	beq.w	80048d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 80046f6:	6818      	ldr	r0, [r3, #0]
      frequency = HSI_VALUE >> 1U;
 80046f8:	4b7c      	ldr	r3, [pc, #496]	; (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>)
 80046fa:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 80046fe:	bf18      	it	ne
 8004700:	4618      	movne	r0, r3
 8004702:	e7a0      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004704:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8004708:	e79d      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800470a:	a801      	add	r0, sp, #4
 800470c:	f7ff fdb2 	bl	8004274 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004710:	9801      	ldr	r0, [sp, #4]
        break;
 8004712:	e798      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8004714:	4a72      	ldr	r2, [pc, #456]	; (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 8004716:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 800471a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 800471e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004722:	f000 81c8 	beq.w	8004ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
 8004726:	f200 81e5 	bhi.w	8004af4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 81be 	beq.w	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8004730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004734:	bf18      	it	ne
 8004736:	2000      	movne	r0, #0
 8004738:	d185      	bne.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800473a:	a801      	add	r0, sp, #4
 800473c:	f7ff fcec 	bl	8004118 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004740:	9801      	ldr	r0, [sp, #4]
        break;
 8004742:	e780      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004744:	4a66      	ldr	r2, [pc, #408]	; (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 8004746:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 800474a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    switch (srcclk)
 800474e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004752:	d0f2      	beq.n	800473a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8004754:	d807      	bhi.n	8004766 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8004756:	2b00      	cmp	r3, #0
 8004758:	d0d7      	beq.n	800470a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 800475a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800475e:	bf18      	it	ne
 8004760:	2000      	movne	r0, #0
 8004762:	d08e      	beq.n	8004682 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
 8004764:	e76f      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8004766:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800476a:	d032      	beq.n	80047d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 800476c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004770:	f040 835f 	bne.w	8004e32 <HAL_RCCEx_GetPeriphCLKFreq+0x906>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004774:	6810      	ldr	r0, [r2, #0]
          frequency = HSI_VALUE;
 8004776:	4b5b      	ldr	r3, [pc, #364]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>)
 8004778:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800477c:	bf18      	it	ne
 800477e:	4618      	movne	r0, r3
 8004780:	e761      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004782:	4a57      	ldr	r2, [pc, #348]	; (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 8004784:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
 8004788:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
    switch (srcclk)
 800478c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004790:	f000 809a 	beq.w	80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8004794:	d80b      	bhi.n	80047ae <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8004796:	b35b      	cbz	r3, 80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8004798:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800479c:	bf18      	it	ne
 800479e:	2000      	movne	r0, #0
 80047a0:	f47f af51 	bne.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047a4:	a801      	add	r0, sp, #4
 80047a6:	f7ff fd65 	bl	8004274 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80047aa:	9802      	ldr	r0, [sp, #8]
        break;
 80047ac:	e74b      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    switch (srcclk)
 80047ae:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80047b2:	d124      	bne.n	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80047b4:	6893      	ldr	r3, [r2, #8]
 80047b6:	0218      	lsls	r0, r3, #8
 80047b8:	bf4c      	ite	mi
 80047ba:	6893      	ldrmi	r3, [r2, #8]
 80047bc:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	; 0xf4
 80047c0:	4a4b      	ldr	r2, [pc, #300]	; (80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>)
 80047c2:	bf4c      	ite	mi
 80047c4:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 80047c8:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 80047cc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        break;
 80047d0:	e739      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80047d2:	f64b 3080 	movw	r0, #48000	; 0xbb80
 80047d6:	e736      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80047de:	d071      	beq.n	80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
      frequency = HSI_VALUE >> 1U;
 80047e0:	4b42      	ldr	r3, [pc, #264]	; (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>)
 80047e2:	2800      	cmp	r0, #0
 80047e4:	bf18      	it	ne
 80047e6:	4618      	movne	r0, r3
 80047e8:	e72d      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      frequency = LSE_VALUE;
 80047ea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80047ee:	4770      	bx	lr
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80047f0:	6810      	ldr	r0, [r2, #0]
          frequency = HSI48_VALUE;
 80047f2:	4b40      	ldr	r3, [pc, #256]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>)
 80047f4:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
 80047f8:	bf18      	it	ne
 80047fa:	4618      	movne	r0, r3
 80047fc:	e723      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    switch (srcclk)
 80047fe:	2000      	movs	r0, #0
 8004800:	e721      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004802:	4b37      	ldr	r3, [pc, #220]	; (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 8004804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8004808:	f013 030c 	ands.w	r3, r3, #12
 800480c:	d063      	beq.n	80048d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800480e:	2b04      	cmp	r3, #4
 8004810:	f000 80a5 	beq.w	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004814:	4a32      	ldr	r2, [pc, #200]	; (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 8004816:	6812      	ldr	r2, [r2, #0]
 8004818:	0550      	lsls	r0, r2, #21
 800481a:	d502      	bpl.n	8004822 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 800481c:	2b08      	cmp	r3, #8
 800481e:	f000 8167 	beq.w	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8004822:	4a2f      	ldr	r2, [pc, #188]	; (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 8004824:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8004828:	f010 0002 	ands.w	r0, r0, #2
 800482c:	f43f af0b 	beq.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      frequency = LSE_VALUE;
 8004830:	2b0c      	cmp	r3, #12
 8004832:	bf14      	ite	ne
 8004834:	2000      	movne	r0, #0
 8004836:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 800483a:	e704      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800483c:	4b28      	ldr	r3, [pc, #160]	; (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 800483e:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8004842:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 8004846:	d157      	bne.n	80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800484c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
      switch (srcclk)
 8004850:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004854:	d038      	beq.n	80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8004856:	d806      	bhi.n	8004866 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 80a5 	beq.w	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>
 800485e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004862:	d09f      	beq.n	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 8004864:	e6ef      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8004866:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800486a:	f47f aeec 	bne.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800486e:	4b1c      	ldr	r3, [pc, #112]	; (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 8004870:	689a      	ldr	r2, [r3, #8]
 8004872:	0211      	lsls	r1, r2, #8
 8004874:	bf4c      	ite	mi
 8004876:	689b      	ldrmi	r3, [r3, #8]
 8004878:	f8d3 30f4 	ldrpl.w	r3, [r3, #244]	; 0xf4
 800487c:	4a1c      	ldr	r2, [pc, #112]	; (80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>)
 800487e:	bf4c      	ite	mi
 8004880:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8004884:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8004888:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
          break;
 800488c:	e6db      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800488e:	4a14      	ldr	r2, [pc, #80]	; (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 8004890:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004894:	f013 0303 	ands.w	r3, r3, #3
 8004898:	d066      	beq.n	8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800489a:	2b01      	cmp	r3, #1
 800489c:	d05f      	beq.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800489e:	6812      	ldr	r2, [r2, #0]
 80048a0:	0552      	lsls	r2, r2, #21
 80048a2:	d502      	bpl.n	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	f000 80ea 	beq.w	8004a7e <HAL_RCCEx_GetPeriphCLKFreq+0x552>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80048aa:	4a0d      	ldr	r2, [pc, #52]	; (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 80048ac:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 80048b0:	f010 0002 	ands.w	r0, r0, #2
 80048b4:	f43f aec7 	beq.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      frequency = LSE_VALUE;
 80048b8:	2b03      	cmp	r3, #3
 80048ba:	bf14      	ite	ne
 80048bc:	2000      	movne	r0, #0
 80048be:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 80048c2:	e6c0      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      frequency = 0U;
 80048c4:	4618      	mov	r0, r3
 80048c6:	e6be      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80048c8:	a801      	add	r0, sp, #4
 80048ca:	f7ff fc25 	bl	8004118 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80048ce:	9802      	ldr	r0, [sp, #8]
        break;
 80048d0:	e6b9      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
          frequency = HSI_VALUE;
 80048d2:	4804      	ldr	r0, [pc, #16]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>)
 80048d4:	e6b7      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
}
 80048d6:	b005      	add	sp, #20
 80048d8:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 80048dc:	f7fe be20 	b.w	8003520 <HAL_RCC_GetPCLK1Freq>
 80048e0:	46020c00 	.word	0x46020c00
 80048e4:	00f42400 	.word	0x00f42400
 80048e8:	0007a120 	.word	0x0007a120
 80048ec:	007a1200 	.word	0x007a1200
 80048f0:	08008c4c 	.word	0x08008c4c
 80048f4:	02dc6c00 	.word	0x02dc6c00
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80048f8:	a801      	add	r0, sp, #4
 80048fa:	f7ff fc0d 	bl	8004118 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80048fe:	9801      	ldr	r0, [sp, #4]
 8004900:	e6a1      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004902:	4bac      	ldr	r3, [pc, #688]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8004904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004908:	f013 0330 	ands.w	r3, r3, #48	; 0x30
 800490c:	d0e3      	beq.n	80048d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800490e:	2b10      	cmp	r3, #16
 8004910:	d025      	beq.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004912:	4aa8      	ldr	r2, [pc, #672]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8004914:	6812      	ldr	r2, [r2, #0]
 8004916:	0551      	lsls	r1, r2, #21
 8004918:	d502      	bpl.n	8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 800491a:	2b20      	cmp	r3, #32
 800491c:	f000 811f 	beq.w	8004b5e <HAL_RCCEx_GetPeriphCLKFreq+0x632>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004920:	4aa4      	ldr	r2, [pc, #656]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8004922:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8004926:	f010 0002 	ands.w	r0, r0, #2
 800492a:	f43f ae8c 	beq.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      frequency = LSE_VALUE;
 800492e:	2b30      	cmp	r3, #48	; 0x30
 8004930:	bf14      	ite	ne
 8004932:	2000      	movne	r0, #0
 8004934:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8004938:	e685      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800493a:	4a9e      	ldr	r2, [pc, #632]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 800493c:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8004940:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    switch (srcclk)
 8004944:	2b80      	cmp	r3, #128	; 0x80
 8004946:	f000 81b6 	beq.w	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 800494a:	f200 815a 	bhi.w	8004c02 <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 800494e:	2b00      	cmp	r3, #0
 8004950:	f000 80c9 	beq.w	8004ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8004954:	2b40      	cmp	r3, #64	; 0x40
 8004956:	bf18      	it	ne
 8004958:	2000      	movne	r0, #0
 800495a:	f47f ae74 	bne.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
}
 800495e:	b005      	add	sp, #20
 8004960:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetSysClockFreq();
 8004964:	f7fd be4a 	b.w	80025fc <HAL_RCC_GetSysClockFreq>
}
 8004968:	b005      	add	sp, #20
 800496a:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK2Freq();
 800496e:	f7fe be81 	b.w	8003674 <HAL_RCC_GetPCLK2Freq>
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004972:	4a90      	ldr	r2, [pc, #576]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8004974:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8004978:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
 800497c:	d0ab      	beq.n	80048d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800497e:	2b40      	cmp	r3, #64	; 0x40
 8004980:	d0ed      	beq.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8004982:	6812      	ldr	r2, [r2, #0]
 8004984:	0552      	lsls	r2, r2, #21
 8004986:	d502      	bpl.n	800498e <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8004988:	2b80      	cmp	r3, #128	; 0x80
 800498a:	f000 80ea 	beq.w	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800498e:	4a89      	ldr	r2, [pc, #548]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8004990:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8004994:	f010 0002 	ands.w	r0, r0, #2
 8004998:	f43f ae55 	beq.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      frequency = LSE_VALUE;
 800499c:	2bc0      	cmp	r3, #192	; 0xc0
 800499e:	bf14      	ite	ne
 80049a0:	2000      	movne	r0, #0
 80049a2:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 80049a6:	e64e      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80049a8:	4a82      	ldr	r2, [pc, #520]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
          frequency = HSI48_VALUE;
 80049aa:	4b83      	ldr	r3, [pc, #524]	; (8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80049ac:	6810      	ldr	r0, [r2, #0]
          frequency = HSI48_VALUE;
 80049ae:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
 80049b2:	bf18      	it	ne
 80049b4:	4618      	movne	r0, r3
 80049b6:	e646      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80049b8:	4a7e      	ldr	r2, [pc, #504]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 80049ba:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80049be:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80049c2:	d088      	beq.n	80048d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80049c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049c8:	d0c9      	beq.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80049ca:	6812      	ldr	r2, [r2, #0]
 80049cc:	0550      	lsls	r0, r2, #21
 80049ce:	d503      	bpl.n	80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
 80049d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049d4:	f000 8113 	beq.w	8004bfe <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80049d8:	4a76      	ldr	r2, [pc, #472]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 80049da:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 80049de:	f010 0002 	ands.w	r0, r0, #2
 80049e2:	f43f ae30 	beq.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      frequency = LSE_VALUE;
 80049e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049ea:	bf14      	ite	ne
 80049ec:	2000      	movne	r0, #0
 80049ee:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 80049f2:	e628      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80049f4:	4a6f      	ldr	r2, [pc, #444]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 80049f6:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80049fa:	f013 0307 	ands.w	r3, r3, #7
 80049fe:	d072      	beq.n	8004ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d0ac      	beq.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004a04:	6812      	ldr	r2, [r2, #0]
 8004a06:	0551      	lsls	r1, r2, #21
 8004a08:	d502      	bpl.n	8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	f000 810e 	beq.w	8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004a10:	4a68      	ldr	r2, [pc, #416]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8004a12:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 8004a16:	0792      	lsls	r2, r2, #30
 8004a18:	d502      	bpl.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8004a1a:	2b03      	cmp	r3, #3
 8004a1c:	f000 8103 	beq.w	8004c26 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8004a20:	4a64      	ldr	r2, [pc, #400]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8004a22:	6810      	ldr	r0, [r2, #0]
 8004a24:	f010 0020 	ands.w	r0, r0, #32
 8004a28:	f43f ae0d 	beq.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8004a2c:	2b04      	cmp	r3, #4
 8004a2e:	f000 80d7 	beq.w	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
      frequency = 0U;
 8004a32:	2000      	movs	r0, #0
 8004a34:	e607      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004a36:	4a5f      	ldr	r2, [pc, #380]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8004a38:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8004a3c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a44:	d08b      	beq.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8004a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a4a:	f000 808c 	beq.w	8004b66 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004a4e:	b36b      	cbz	r3, 8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x580>
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8004a50:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004a54:	f000 80b6 	beq.w	8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004a58:	6812      	ldr	r2, [r2, #0]
 8004a5a:	0391      	lsls	r1, r2, #14
 8004a5c:	d503      	bpl.n	8004a66 <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
 8004a5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a62:	f000 8169 	beq.w	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004a66:	4a53      	ldr	r2, [pc, #332]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8004a68:	6810      	ldr	r0, [r2, #0]
 8004a6a:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8004a6e:	f43f adea 	beq.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
          frequency = HSI_VALUE;
 8004a72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a76:	4851      	ldr	r0, [pc, #324]	; (8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8004a78:	bf18      	it	ne
 8004a7a:	2000      	movne	r0, #0
 8004a7c:	e5e3      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8004a7e:	484f      	ldr	r0, [pc, #316]	; (8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8004a80:	e5e1      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8004a82:	4b4c      	ldr	r3, [pc, #304]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8004a84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004a88:	f003 0307 	and.w	r3, r3, #7
    switch (srcclk)
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	f200 831e 	bhi.w	80050ce <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
 8004a92:	a201      	add	r2, pc, #4	; (adr r2, 8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a98:	08004aad 	.word	0x08004aad
 8004a9c:	0800473b 	.word	0x0800473b
 8004aa0:	08004ab7 	.word	0x08004ab7
 8004aa4:	08004ae1 	.word	0x08004ae1
 8004aa8:	08004ac1 	.word	0x08004ac1
}
 8004aac:	b005      	add	sp, #20
 8004aae:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetHCLKFreq();
 8004ab2:	f7fe bc93 	b.w	80033dc <HAL_RCC_GetHCLKFreq>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ab6:	a801      	add	r0, sp, #4
 8004ab8:	f7ff fc8a 	bl	80043d0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004abc:	9802      	ldr	r0, [sp, #8]
        break;
 8004abe:	e5c2      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004ac0:	4b3c      	ldr	r3, [pc, #240]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	0212      	lsls	r2, r2, #8
 8004ac6:	bf4c      	ite	mi
 8004ac8:	689b      	ldrmi	r3, [r3, #8]
 8004aca:	f8d3 30f4 	ldrpl.w	r3, [r3, #244]	; 0xf4
 8004ace:	4a3c      	ldr	r2, [pc, #240]	; (8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x694>)
 8004ad0:	bf4c      	ite	mi
 8004ad2:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8004ad6:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8004ada:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        break;
 8004ade:	e5b2      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004ae0:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8004ae4:	e5af      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
}
 8004ae6:	b005      	add	sp, #20
 8004ae8:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK3Freq();
 8004aec:	f7fe be6c 	b.w	80037c8 <HAL_RCC_GetPCLK3Freq>
          frequency = HSI_VALUE;
 8004af0:	4832      	ldr	r0, [pc, #200]	; (8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8004af2:	e5a8      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    switch (srcclk)
 8004af4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004af8:	d03a      	beq.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8004afa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004afe:	f040 82a8 	bne.w	8005052 <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004b02:	6893      	ldr	r3, [r2, #8]
 8004b04:	4a2e      	ldr	r2, [pc, #184]	; (8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x694>)
 8004b06:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8004b0a:	4b2a      	ldr	r3, [pc, #168]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8004b0c:	bf15      	itete	ne
 8004b0e:	689b      	ldrne	r3, [r3, #8]
 8004b10:	f8d3 30f4 	ldreq.w	r3, [r3, #244]	; 0xf4
 8004b14:	f3c3 6303 	ubfxne	r3, r3, #24, #4
 8004b18:	f3c3 2303 	ubfxeq	r3, r3, #8, #4
 8004b1c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        break;
 8004b20:	e591      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004b22:	4a24      	ldr	r2, [pc, #144]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8004b24:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004b28:	f413 6340 	ands.w	r3, r3, #3072	; 0xc00
 8004b2c:	f43f aed3 	beq.w	80048d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8004b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b34:	f43f af13 	beq.w	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004b38:	6812      	ldr	r2, [r2, #0]
 8004b3a:	0550      	lsls	r0, r2, #21
 8004b3c:	d503      	bpl.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 8004b3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b42:	f000 8289 	beq.w	8005058 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8004b46:	4a1b      	ldr	r2, [pc, #108]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8004b48:	6810      	ldr	r0, [r2, #0]
 8004b4a:	f010 0020 	ands.w	r0, r0, #32
 8004b4e:	f43f ad7a 	beq.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8004b52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b56:	f000 809f 	beq.w	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
      frequency = 0U;
 8004b5a:	2000      	movs	r0, #0
 8004b5c:	e573      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
          frequency = HSI_VALUE;
 8004b5e:	4817      	ldr	r0, [pc, #92]	; (8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8004b60:	e571      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8004b62:	4816      	ldr	r0, [pc, #88]	; (8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8004b64:	e56f      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b66:	a801      	add	r0, sp, #4
 8004b68:	f7ff fb84 	bl	8004274 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8004b6c:	9803      	ldr	r0, [sp, #12]
 8004b6e:	e56a      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004b70:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8004b74:	e567      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004b76:	4a0f      	ldr	r2, [pc, #60]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8004b78:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004b7c:	f413 5340 	ands.w	r3, r3, #12288	; 0x3000
 8004b80:	f43f aea9 	beq.w	80048d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8004b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b88:	f43f aee9 	beq.w	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004b8c:	6812      	ldr	r2, [r2, #0]
 8004b8e:	0552      	lsls	r2, r2, #21
 8004b90:	d503      	bpl.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8004b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b96:	f000 810d 	beq.w	8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8004b9a:	4a06      	ldr	r2, [pc, #24]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8004b9c:	6810      	ldr	r0, [r2, #0]
 8004b9e:	f010 0020 	ands.w	r0, r0, #32
 8004ba2:	f43f ad50 	beq.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8004ba6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004baa:	f000 8144 	beq.w	8004e36 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
      frequency = 0U;
 8004bae:	2000      	movs	r0, #0
 8004bb0:	e549      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8004bb2:	bf00      	nop
 8004bb4:	46020c00 	.word	0x46020c00
 8004bb8:	02dc6c00 	.word	0x02dc6c00
 8004bbc:	00f42400 	.word	0x00f42400
 8004bc0:	08008c4c 	.word	0x08008c4c
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8004bc4:	6893      	ldr	r3, [r2, #8]
 8004bc6:	0218      	lsls	r0, r3, #8
 8004bc8:	bf4c      	ite	mi
 8004bca:	6893      	ldrmi	r3, [r2, #8]
 8004bcc:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	; 0xf4
 8004bd0:	4aa2      	ldr	r2, [pc, #648]	; (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
 8004bd2:	bf4c      	ite	mi
 8004bd4:	0f1b      	lsrmi	r3, r3, #28
 8004bd6:	f3c3 3303 	ubfxpl	r3, r3, #12, #4
 8004bda:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004bde:	e532      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004be0:	6893      	ldr	r3, [r2, #8]
 8004be2:	021b      	lsls	r3, r3, #8
 8004be4:	bf4c      	ite	mi
 8004be6:	6893      	ldrmi	r3, [r2, #8]
 8004be8:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	; 0xf4
 8004bec:	4a9b      	ldr	r2, [pc, #620]	; (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
 8004bee:	bf4c      	ite	mi
 8004bf0:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8004bf4:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8004bf8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004bfc:	e523      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
          frequency = HSI_VALUE;
 8004bfe:	4898      	ldr	r0, [pc, #608]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
 8004c00:	e521      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    switch (srcclk)
 8004c02:	2bc0      	cmp	r3, #192	; 0xc0
 8004c04:	f040 80b8 	bne.w	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8004c08:	4b96      	ldr	r3, [pc, #600]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	0211      	lsls	r1, r2, #8
 8004c0e:	bf4c      	ite	mi
 8004c10:	689b      	ldrmi	r3, [r3, #8]
 8004c12:	f8d3 30f4 	ldrpl.w	r3, [r3, #244]	; 0xf4
 8004c16:	4a91      	ldr	r2, [pc, #580]	; (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
 8004c18:	bf4c      	ite	mi
 8004c1a:	0f1b      	lsrmi	r3, r3, #28
 8004c1c:	f3c3 3303 	ubfxpl	r3, r3, #12, #4
 8004c20:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        break;
 8004c24:	e50f      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      frequency = LSE_VALUE;
 8004c26:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004c2a:	e50c      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
          frequency = HSI_VALUE;
 8004c2c:	488c      	ldr	r0, [pc, #560]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
 8004c2e:	e50a      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004c30:	4b8c      	ldr	r3, [pc, #560]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
 8004c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8004c36:	f413 4340 	ands.w	r3, r3, #49152	; 0xc000
 8004c3a:	f43f ae4c 	beq.w	80048d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8004c3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c42:	f43f ae8c 	beq.w	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8004c46:	4a87      	ldr	r2, [pc, #540]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
 8004c48:	6812      	ldr	r2, [r2, #0]
 8004c4a:	0552      	lsls	r2, r2, #21
 8004c4c:	d503      	bpl.n	8004c56 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8004c4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c52:	f000 8100 	beq.w	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8004c56:	4a83      	ldr	r2, [pc, #524]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
 8004c58:	6810      	ldr	r0, [r2, #0]
 8004c5a:	f010 0020 	ands.w	r0, r0, #32
 8004c5e:	f43f acf2 	beq.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8004c62:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c66:	f000 80ff 	beq.w	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
      frequency = 0U;
 8004c6a:	2000      	movs	r0, #0
 8004c6c:	e4eb      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8004c6e:	4a7d      	ldr	r2, [pc, #500]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
 8004c70:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8004c74:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004c78:	d160      	bne.n	8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004c7a:	6893      	ldr	r3, [r2, #8]
 8004c7c:	0218      	lsls	r0, r3, #8
 8004c7e:	bf4c      	ite	mi
 8004c80:	6893      	ldrmi	r3, [r2, #8]
 8004c82:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	; 0xf4
 8004c86:	4a75      	ldr	r2, [pc, #468]	; (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
 8004c88:	bf4c      	ite	mi
 8004c8a:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8004c8e:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8004c92:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004c96:	e4d6      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004c98:	6893      	ldr	r3, [r2, #8]
 8004c9a:	0219      	lsls	r1, r3, #8
 8004c9c:	bf4c      	ite	mi
 8004c9e:	6893      	ldrmi	r3, [r2, #8]
 8004ca0:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	; 0xf4
 8004ca4:	4a6d      	ldr	r2, [pc, #436]	; (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
 8004ca6:	bf4c      	ite	mi
 8004ca8:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8004cac:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8004cb0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004cb4:	e4c7      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004cb6:	6810      	ldr	r0, [r2, #0]
          frequency = HSI_VALUE;
 8004cb8:	4b69      	ldr	r3, [pc, #420]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
 8004cba:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8004cbe:	bf18      	it	ne
 8004cc0:	4618      	movne	r0, r3
 8004cc2:	e4c0      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004cc4:	4a67      	ldr	r2, [pc, #412]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
 8004cc6:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8004cca:	f413 2340 	ands.w	r3, r3, #786432	; 0xc0000
 8004cce:	f43f ae02 	beq.w	80048d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8004cd2:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
 8004cd6:	0109      	lsls	r1, r1, #4
 8004cd8:	d503      	bpl.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8004cda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004cde:	f000 81be 	beq.w	800505e <HAL_RCCEx_GetPeriphCLKFreq+0xb32>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8004ce2:	4a60      	ldr	r2, [pc, #384]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
 8004ce4:	6812      	ldr	r2, [r2, #0]
 8004ce6:	0552      	lsls	r2, r2, #21
 8004ce8:	d503      	bpl.n	8004cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8004cea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004cee:	f000 81c0 	beq.w	8005072 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8004cf2:	4a5c      	ldr	r2, [pc, #368]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
 8004cf4:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8004cf8:	f010 0002 	ands.w	r0, r0, #2
 8004cfc:	f43f aca3 	beq.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      frequency = LSE_VALUE;
 8004d00:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004d04:	bf14      	ite	ne
 8004d06:	2000      	movne	r0, #0
 8004d08:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8004d0c:	e49b      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004d0e:	4a55      	ldr	r2, [pc, #340]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
 8004d10:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8004d14:	f413 6340 	ands.w	r3, r3, #3072	; 0xc00
 8004d18:	d130      	bne.n	8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x850>
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004d1a:	6893      	ldr	r3, [r2, #8]
 8004d1c:	0218      	lsls	r0, r3, #8
 8004d1e:	bf4c      	ite	mi
 8004d20:	6893      	ldrmi	r3, [r2, #8]
 8004d22:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	; 0xf4
 8004d26:	4a4d      	ldr	r2, [pc, #308]	; (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
 8004d28:	bf4c      	ite	mi
 8004d2a:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8004d2e:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8004d32:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004d36:	e486      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
          frequency = HSI_VALUE;
 8004d38:	4849      	ldr	r0, [pc, #292]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
 8004d3a:	e484      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8004d3c:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
 8004d40:	0109      	lsls	r1, r1, #4
 8004d42:	d503      	bpl.n	8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8004d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d48:	f000 8196 	beq.w	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8004d4c:	4a45      	ldr	r2, [pc, #276]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
 8004d4e:	6812      	ldr	r2, [r2, #0]
 8004d50:	0552      	lsls	r2, r2, #21
 8004d52:	d503      	bpl.n	8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 8004d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d58:	f000 8198 	beq.w	800508c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8004d5c:	4a41      	ldr	r2, [pc, #260]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
 8004d5e:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8004d62:	f010 0002 	ands.w	r0, r0, #2
 8004d66:	f43f ac6e 	beq.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      frequency = LSE_VALUE;
 8004d6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d6e:	bf14      	ite	ne
 8004d70:	2000      	movne	r0, #0
 8004d72:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8004d76:	e466      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    switch (srcclk)
 8004d78:	2000      	movs	r0, #0
 8004d7a:	e464      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8004d7c:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
 8004d80:	0109      	lsls	r1, r1, #4
 8004d82:	d502      	bpl.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8004d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d88:	d016      	beq.n	8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8004d8a:	4a36      	ldr	r2, [pc, #216]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
 8004d8c:	6812      	ldr	r2, [r2, #0]
 8004d8e:	0550      	lsls	r0, r2, #21
 8004d90:	d502      	bpl.n	8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>
 8004d92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d96:	d018      	beq.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8004d98:	4a32      	ldr	r2, [pc, #200]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
 8004d9a:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8004d9e:	f010 0002 	ands.w	r0, r0, #2
 8004da2:	f43f ac50 	beq.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      frequency = LSE_VALUE;
 8004da6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004daa:	bf14      	ite	ne
 8004dac:	2000      	movne	r0, #0
 8004dae:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8004db2:	e448      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
          frequency = HSI_VALUE;
 8004db4:	482a      	ldr	r0, [pc, #168]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
 8004db6:	e446      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004db8:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
        frequency = LSI_VALUE / 128U;
 8004dbc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004dc0:	bf0c      	ite	eq
 8004dc2:	f44f 40fa 	moveq.w	r0, #32000	; 0x7d00
 8004dc6:	20fa      	movne	r0, #250	; 0xfa
 8004dc8:	e43d      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
          frequency = HSI_VALUE;
 8004dca:	4825      	ldr	r0, [pc, #148]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
 8004dcc:	e43b      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8004dce:	4a25      	ldr	r2, [pc, #148]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
 8004dd0:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
 8004dd4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    switch (srcclk)
 8004dd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ddc:	f000 816c 	beq.w	80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
 8004de0:	f200 8157 	bhi.w	8005092 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f43f adbf 	beq.w	8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8004dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dee:	bf18      	it	ne
 8004df0:	2000      	movne	r0, #0
 8004df2:	f43f adb4 	beq.w	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8004df6:	e426      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8004df8:	4a1a      	ldr	r2, [pc, #104]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
 8004dfa:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8004dfe:	6812      	ldr	r2, [r2, #0]
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8004e00:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8004e04:	0390      	lsls	r0, r2, #14
 8004e06:	d500      	bpl.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8004e08:	b13b      	cbz	r3, 8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8004e0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e0e:	d00b      	beq.n	8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8004e10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e14:	d003      	beq.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
      frequency = 0U;
 8004e16:	2000      	movs	r0, #0
 8004e18:	e415      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
          frequency = HSI_VALUE;
 8004e1a:	4811      	ldr	r0, [pc, #68]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
 8004e1c:	e413      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e1e:	a801      	add	r0, sp, #4
 8004e20:	f7ff fa28 	bl	8004274 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8004e24:	9801      	ldr	r0, [sp, #4]
 8004e26:	e40e      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e28:	a801      	add	r0, sp, #4
 8004e2a:	f7ff f975 	bl	8004118 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e2e:	9802      	ldr	r0, [sp, #8]
 8004e30:	e409      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    switch (srcclk)
 8004e32:	2000      	movs	r0, #0
 8004e34:	e407      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004e36:	6893      	ldr	r3, [r2, #8]
 8004e38:	0218      	lsls	r0, r3, #8
 8004e3a:	bf4c      	ite	mi
 8004e3c:	6893      	ldrmi	r3, [r2, #8]
 8004e3e:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	; 0xf4
 8004e42:	4a06      	ldr	r2, [pc, #24]	; (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
 8004e44:	bf4c      	ite	mi
 8004e46:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8004e4a:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8004e4e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004e52:	f7ff bbf8 	b.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
          frequency = HSI_VALUE;
 8004e56:	4802      	ldr	r0, [pc, #8]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
 8004e58:	f7ff bbf5 	b.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8004e5c:	08008c4c 	.word	0x08008c4c
 8004e60:	00f42400 	.word	0x00f42400
 8004e64:	46020c00 	.word	0x46020c00
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004e68:	6893      	ldr	r3, [r2, #8]
 8004e6a:	021b      	lsls	r3, r3, #8
 8004e6c:	bf4c      	ite	mi
 8004e6e:	6893      	ldrmi	r3, [r2, #8]
 8004e70:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	; 0xf4
 8004e74:	4a97      	ldr	r2, [pc, #604]	; (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>)
 8004e76:	bf4c      	ite	mi
 8004e78:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8004e7c:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8004e80:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004e84:	f7ff bbdf 	b.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8004e88:	4b93      	ldr	r3, [pc, #588]	; (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>)
 8004e8a:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8004e8e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8004e92:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8004e96:	0792      	lsls	r2, r2, #30
 8004e98:	f140 80b3 	bpl.w	8005002 <HAL_RCCEx_GetPeriphCLKFreq+0xad6>
 8004e9c:	2800      	cmp	r0, #0
 8004e9e:	d073      	beq.n	8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8004ea0:	4b8d      	ldr	r3, [pc, #564]	; (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>)
 8004ea2:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
 8004ea6:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004eaa:	f43f abcc 	beq.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004eae:	4b8a      	ldr	r3, [pc, #552]	; (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>)
 8004eb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
        frequency = LSI_VALUE / 128U;
 8004eb4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004eb8:	bf0c      	ite	eq
 8004eba:	f44f 40fa 	moveq.w	r0, #32000	; 0x7d00
 8004ebe:	20fa      	movne	r0, #250	; 0xfa
 8004ec0:	f7ff bbc1 	b.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8004ec4:	4b84      	ldr	r3, [pc, #528]	; (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>)
 8004ec6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004eca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    switch (srcclk)
 8004ece:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ed2:	f43f acf9 	beq.w	80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8004ed6:	d86f      	bhi.n	8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f43f ad40 	beq.w	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8004ede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ee2:	bf18      	it	ne
 8004ee4:	2000      	movne	r0, #0
 8004ee6:	f47f abae 	bne.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004eea:	4b7b      	ldr	r3, [pc, #492]	; (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>)
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	0211      	lsls	r1, r2, #8
 8004ef0:	bf4c      	ite	mi
 8004ef2:	689b      	ldrmi	r3, [r3, #8]
 8004ef4:	f8d3 30f4 	ldrpl.w	r3, [r3, #244]	; 0xf4
 8004ef8:	4a76      	ldr	r2, [pc, #472]	; (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>)
 8004efa:	bf4c      	ite	mi
 8004efc:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8004f00:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8004f04:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        break;
 8004f08:	f7ff bb9d 	b.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8004f0c:	4b72      	ldr	r3, [pc, #456]	; (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>)
 8004f0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f12:	f003 0318 	and.w	r3, r3, #24
    switch (srcclk)
 8004f16:	2b18      	cmp	r3, #24
 8004f18:	f200 8095 	bhi.w	8005046 <HAL_RCCEx_GetPeriphCLKFreq+0xb1a>
 8004f1c:	a201      	add	r2, pc, #4	; (adr r2, 8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>)
 8004f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f22:	bf00      	nop
 8004f24:	08004ae7 	.word	0x08004ae7
 8004f28:	08005047 	.word	0x08005047
 8004f2c:	08005047 	.word	0x08005047
 8004f30:	08005047 	.word	0x08005047
 8004f34:	08005047 	.word	0x08005047
 8004f38:	08005047 	.word	0x08005047
 8004f3c:	08005047 	.word	0x08005047
 8004f40:	08005047 	.word	0x08005047
 8004f44:	0800495f 	.word	0x0800495f
 8004f48:	08005047 	.word	0x08005047
 8004f4c:	08005047 	.word	0x08005047
 8004f50:	08005047 	.word	0x08005047
 8004f54:	08005047 	.word	0x08005047
 8004f58:	08005047 	.word	0x08005047
 8004f5c:	08005047 	.word	0x08005047
 8004f60:	08005047 	.word	0x08005047
 8004f64:	08005035 	.word	0x08005035
 8004f68:	08005047 	.word	0x08005047
 8004f6c:	08005047 	.word	0x08005047
 8004f70:	08005047 	.word	0x08005047
 8004f74:	08005047 	.word	0x08005047
 8004f78:	08005047 	.word	0x08005047
 8004f7c:	08005047 	.word	0x08005047
 8004f80:	08005047 	.word	0x08005047
 8004f84:	08005013 	.word	0x08005013
      frequency = LSE_VALUE;
 8004f88:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004f8c:	f7ff bb5b 	b.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8004f90:	4a51      	ldr	r2, [pc, #324]	; (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>)
 8004f92:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
 8004f96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 8004f9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f9e:	d025      	beq.n	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8004fa0:	d811      	bhi.n	8004fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa9a>
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f43f ac97 	beq.w	80048d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8004fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fac:	bf18      	it	ne
 8004fae:	2000      	movne	r0, #0
 8004fb0:	f43f acd5 	beq.w	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8004fb4:	f7ff bb47 	b.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    switch (srcclk)
 8004fb8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004fbc:	f43f abf2 	beq.w	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 8004fc0:	2000      	movs	r0, #0
 8004fc2:	f7ff bb40 	b.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    switch (srcclk)
 8004fc6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004fca:	d117      	bne.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0xad0>
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004fcc:	6893      	ldr	r3, [r2, #8]
 8004fce:	021b      	lsls	r3, r3, #8
 8004fd0:	bf4c      	ite	mi
 8004fd2:	6893      	ldrmi	r3, [r2, #8]
 8004fd4:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	; 0xf4
 8004fd8:	4a3e      	ldr	r2, [pc, #248]	; (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>)
 8004fda:	bf4c      	ite	mi
 8004fdc:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8004fe0:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8004fe4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        break;
 8004fe8:	f7ff bb2d 	b.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004fec:	6810      	ldr	r0, [r2, #0]
          frequency = HSI_VALUE;
 8004fee:	4b3b      	ldr	r3, [pc, #236]	; (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0xbb0>)
 8004ff0:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8004ff4:	bf18      	it	ne
 8004ff6:	4618      	movne	r0, r3
 8004ff8:	f7ff bb25 	b.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    switch (srcclk)
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	f7ff bb22 	b.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8005002:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005006:	011b      	lsls	r3, r3, #4
 8005008:	d520      	bpl.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0xb20>
 800500a:	2800      	cmp	r0, #0
 800500c:	f43f ab1b 	beq.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8005010:	e74d      	b.n	8004eae <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005012:	4b31      	ldr	r3, [pc, #196]	; (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>)
 8005014:	689a      	ldr	r2, [r3, #8]
 8005016:	0210      	lsls	r0, r2, #8
 8005018:	bf4c      	ite	mi
 800501a:	689b      	ldrmi	r3, [r3, #8]
 800501c:	f8d3 30f4 	ldrpl.w	r3, [r3, #244]	; 0xf4
 8005020:	4a2c      	ldr	r2, [pc, #176]	; (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>)
 8005022:	bf4c      	ite	mi
 8005024:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8005028:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 800502c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        break;
 8005030:	f7ff bb09 	b.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005034:	4a28      	ldr	r2, [pc, #160]	; (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>)
          frequency = HSI_VALUE;
 8005036:	4b29      	ldr	r3, [pc, #164]	; (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0xbb0>)
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005038:	6810      	ldr	r0, [r2, #0]
          frequency = HSI_VALUE;
 800503a:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800503e:	bf18      	it	ne
 8005040:	4618      	movne	r0, r3
 8005042:	f7ff bb00 	b.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    switch (srcclk)
 8005046:	2000      	movs	r0, #0
 8005048:	f7ff bafd 	b.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      frequency = 0U;
 800504c:	2000      	movs	r0, #0
 800504e:	f7ff bafa 	b.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    switch (srcclk)
 8005052:	2000      	movs	r0, #0
 8005054:	f7ff baf7 	b.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
          frequency = HSI_VALUE;
 8005058:	4820      	ldr	r0, [pc, #128]	; (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0xbb0>)
 800505a:	f7ff baf4 	b.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800505e:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
        frequency = LSI_VALUE / 128U;
 8005062:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005066:	bf0c      	ite	eq
 8005068:	f44f 40fa 	moveq.w	r0, #32000	; 0x7d00
 800506c:	20fa      	movne	r0, #250	; 0xfa
 800506e:	f7ff baea 	b.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
          frequency = HSI_VALUE;
 8005072:	481a      	ldr	r0, [pc, #104]	; (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0xbb0>)
 8005074:	f7ff bae7 	b.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005078:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
        frequency = LSI_VALUE / 128U;
 800507c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005080:	bf0c      	ite	eq
 8005082:	f44f 40fa 	moveq.w	r0, #32000	; 0x7d00
 8005086:	20fa      	movne	r0, #250	; 0xfa
 8005088:	f7ff badd 	b.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
          frequency = HSI_VALUE;
 800508c:	4813      	ldr	r0, [pc, #76]	; (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0xbb0>)
 800508e:	f7ff bada 	b.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    switch (srcclk)
 8005092:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005096:	d117      	bne.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005098:	6893      	ldr	r3, [r2, #8]
 800509a:	0219      	lsls	r1, r3, #8
 800509c:	bf4c      	ite	mi
 800509e:	6893      	ldrmi	r3, [r2, #8]
 80050a0:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	; 0xf4
 80050a4:	4a0b      	ldr	r2, [pc, #44]	; (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>)
 80050a6:	bf4c      	ite	mi
 80050a8:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 80050ac:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 80050b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        break;
 80050b4:	f7ff bac7 	b.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80050b8:	6810      	ldr	r0, [r2, #0]
          frequency = HSI_VALUE;
 80050ba:	4b08      	ldr	r3, [pc, #32]	; (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0xbb0>)
 80050bc:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 80050c0:	bf18      	it	ne
 80050c2:	4618      	movne	r0, r3
 80050c4:	f7ff babf 	b.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    switch (srcclk)
 80050c8:	2000      	movs	r0, #0
 80050ca:	f7ff babc 	b.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    switch (srcclk)
 80050ce:	2000      	movs	r0, #0
 80050d0:	f7ff bab9 	b.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80050d4:	08008c4c 	.word	0x08008c4c
 80050d8:	46020c00 	.word	0x46020c00
 80050dc:	00f42400 	.word	0x00f42400

080050e0 <HAL_SRAM_Init>:
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80050e0:	b378      	cbz	r0, 8005142 <HAL_SRAM_Init+0x62>
{
 80050e2:	b570      	push	{r4, r5, r6, lr}
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80050e4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80050e8:	4615      	mov	r5, r2
 80050ea:	4604      	mov	r4, r0
 80050ec:	460e      	mov	r6, r1
 80050ee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80050f2:	b30b      	cbz	r3, 8005138 <HAL_SRAM_Init+0x58>
    HAL_SRAM_MspInit(hsram);
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80050f4:	4621      	mov	r1, r4
 80050f6:	f851 0b08 	ldr.w	r0, [r1], #8
 80050fa:	f000 fecf 	bl	8005e9c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80050fe:	4631      	mov	r1, r6
 8005100:	68a2      	ldr	r2, [r4, #8]
 8005102:	6820      	ldr	r0, [r4, #0]
 8005104:	f000 ff48 	bl	8005f98 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8005108:	e9d4 0201 	ldrd	r0, r2, [r4, #4]
 800510c:	4629      	mov	r1, r5
 800510e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005110:	f000 ff72 	bl	8005ff8 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8005114:	6821      	ldr	r1, [r4, #0]
 8005116:	68a0      	ldr	r0, [r4, #8]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8005118:	4a0b      	ldr	r2, [pc, #44]	; (8005148 <HAL_SRAM_Init+0x68>)
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800511a:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800511e:	f043 0301 	orr.w	r3, r3, #1
 8005122:	f841 3020 	str.w	r3, [r1, r0, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8005126:	2101      	movs	r1, #1
  __FMC_ENABLE();
 8005128:	6813      	ldr	r3, [r2, #0]

  return HAL_OK;
 800512a:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800512c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005130:	6013      	str	r3, [r2, #0]
  hsram->State = HAL_SRAM_STATE_READY;
 8005132:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
}
 8005136:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 8005138:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SRAM_MspInit(hsram);
 800513c:	f7fb fe40 	bl	8000dc0 <HAL_SRAM_MspInit>
 8005140:	e7d8      	b.n	80050f4 <HAL_SRAM_Init+0x14>
    return HAL_ERROR;
 8005142:	2001      	movs	r0, #1
}
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	420d0400 	.word	0x420d0400

0800514c <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800514c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8005150:	2b20      	cmp	r3, #32
 8005152:	d168      	bne.n	8005226 <HAL_UART_Receive_IT+0xda>
  {
    if ((pData == NULL) || (Size == 0U))
 8005154:	2900      	cmp	r1, #0
 8005156:	d064      	beq.n	8005222 <HAL_UART_Receive_IT+0xd6>
 8005158:	2a00      	cmp	r2, #0
 800515a:	d062      	beq.n	8005222 <HAL_UART_Receive_IT+0xd6>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 800515c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005160:	2b01      	cmp	r3, #1
 8005162:	d060      	beq.n	8005226 <HAL_UART_Receive_IT+0xda>
{
 8005164:	b430      	push	{r4, r5}
    __HAL_LOCK(huart);
 8005166:	2501      	movs	r5, #1

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005168:	2400      	movs	r4, #0

    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800516a:	6803      	ldr	r3, [r0, #0]
    __HAL_LOCK(huart);
 800516c:	f880 5080 	strb.w	r5, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005170:	66c4      	str	r4, [r0, #108]	; 0x6c
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005172:	689c      	ldr	r4, [r3, #8]
 8005174:	0665      	lsls	r5, r4, #25
 8005176:	d503      	bpl.n	8005180 <HAL_UART_Receive_IT+0x34>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005178:	689c      	ldr	r4, [r3, #8]
 800517a:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 800517e:	609c      	str	r4, [r3, #8]
    }

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005180:	4c5d      	ldr	r4, [pc, #372]	; (80052f8 <HAL_UART_Receive_IT+0x1ac>)
 8005182:	42a3      	cmp	r3, r4
 8005184:	d00e      	beq.n	80051a4 <HAL_UART_Receive_IT+0x58>
 8005186:	f104 5480 	add.w	r4, r4, #268435456	; 0x10000000
 800518a:	42a3      	cmp	r3, r4
 800518c:	d00a      	beq.n	80051a4 <HAL_UART_Receive_IT+0x58>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800518e:	685c      	ldr	r4, [r3, #4]
 8005190:	0224      	lsls	r4, r4, #8
 8005192:	d507      	bpl.n	80051a4 <HAL_UART_Receive_IT+0x58>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005194:	e853 4f00 	ldrex	r4, [r3]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005198:	f044 6480 	orr.w	r4, r4, #67108864	; 0x4000000
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519c:	e843 4500 	strex	r5, r4, [r3]
 80051a0:	2d00      	cmp	r5, #0
 80051a2:	d1f7      	bne.n	8005194 <HAL_UART_Receive_IT+0x48>
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  huart->pRxBuffPtr  = pData;
  huart->RxXferSize  = Size;
  huart->RxXferCount = Size;
  huart->RxISR       = NULL;
 80051a4:	2400      	movs	r4, #0
  huart->pRxBuffPtr  = pData;
 80051a6:	6581      	str	r1, [r0, #88]	; 0x58

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80051a8:	6881      	ldr	r1, [r0, #8]
  huart->RxXferSize  = Size;
 80051aa:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  UART_MASK_COMPUTATION(huart);
 80051ae:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
  huart->RxXferCount = Size;
 80051b2:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 80051b6:	6704      	str	r4, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 80051b8:	d037      	beq.n	800522a <HAL_UART_Receive_IT+0xde>
 80051ba:	2900      	cmp	r1, #0
 80051bc:	d17c      	bne.n	80052b8 <HAL_UART_Receive_IT+0x16c>
 80051be:	6901      	ldr	r1, [r0, #16]
 80051c0:	2900      	cmp	r1, #0
 80051c2:	d152      	bne.n	800526a <HAL_UART_Receive_IT+0x11e>
 80051c4:	21ff      	movs	r1, #255	; 0xff
 80051c6:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ca:	2400      	movs	r4, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051cc:	2122      	movs	r1, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ce:	f8c0 408c 	str.w	r4, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051d2:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d6:	f103 0108 	add.w	r1, r3, #8
 80051da:	e851 1f00 	ldrex	r1, [r1]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051de:	f041 0101 	orr.w	r1, r1, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e2:	f103 0508 	add.w	r5, r3, #8
 80051e6:	e845 1400 	strex	r4, r1, [r5]
 80051ea:	2c00      	cmp	r4, #0
 80051ec:	d1f3      	bne.n	80051d6 <HAL_UART_Receive_IT+0x8a>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80051ee:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80051f0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80051f4:	d03d      	beq.n	8005272 <HAL_UART_Receive_IT+0x126>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051f6:	6882      	ldr	r2, [r0, #8]
 80051f8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80051fc:	d01d      	beq.n	800523a <HAL_UART_Receive_IT+0xee>
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
    }

    __HAL_UNLOCK(huart);
 80051fe:	2100      	movs	r1, #0
 8005200:	4c3e      	ldr	r4, [pc, #248]	; (80052fc <HAL_UART_Receive_IT+0x1b0>)
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005202:	6902      	ldr	r2, [r0, #16]
      huart->RxISR = UART_RxISR_8BIT;
 8005204:	6704      	str	r4, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8005206:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800520a:	b1ea      	cbz	r2, 8005248 <HAL_UART_Receive_IT+0xfc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520c:	e853 2f00 	ldrex	r2, [r3]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005210:	f442 7290 	orr.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005214:	e843 2100 	strex	r1, r2, [r3]
 8005218:	2900      	cmp	r1, #0
 800521a:	d1f7      	bne.n	800520c <HAL_UART_Receive_IT+0xc0>
}
 800521c:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 800521e:	2000      	movs	r0, #0
}
 8005220:	4770      	bx	lr
      return HAL_ERROR;
 8005222:	2001      	movs	r0, #1
 8005224:	4770      	bx	lr
    return HAL_BUSY;
 8005226:	2002      	movs	r0, #2
}
 8005228:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 800522a:	6901      	ldr	r1, [r0, #16]
 800522c:	2900      	cmp	r1, #0
 800522e:	d1c9      	bne.n	80051c4 <HAL_UART_Receive_IT+0x78>
 8005230:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005234:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
 8005238:	e7c7      	b.n	80051ca <HAL_UART_Receive_IT+0x7e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800523a:	6902      	ldr	r2, [r0, #16]
 800523c:	2a00      	cmp	r2, #0
 800523e:	d141      	bne.n	80052c4 <HAL_UART_Receive_IT+0x178>
 8005240:	492f      	ldr	r1, [pc, #188]	; (8005300 <HAL_UART_Receive_IT+0x1b4>)
    __HAL_UNLOCK(huart);
 8005242:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
 8005246:	6701      	str	r1, [r0, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005248:	e853 2f00 	ldrex	r2, [r3]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800524c:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005250:	e843 2100 	strex	r1, r2, [r3]
 8005254:	2900      	cmp	r1, #0
 8005256:	d0e1      	beq.n	800521c <HAL_UART_Receive_IT+0xd0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005258:	e853 2f00 	ldrex	r2, [r3]
 800525c:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005260:	e843 2100 	strex	r1, r2, [r3]
 8005264:	2900      	cmp	r1, #0
 8005266:	d1ef      	bne.n	8005248 <HAL_UART_Receive_IT+0xfc>
 8005268:	e7d8      	b.n	800521c <HAL_UART_Receive_IT+0xd0>
  UART_MASK_COMPUTATION(huart);
 800526a:	217f      	movs	r1, #127	; 0x7f
 800526c:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
 8005270:	e7ab      	b.n	80051ca <HAL_UART_Receive_IT+0x7e>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005272:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
 8005276:	4291      	cmp	r1, r2
 8005278:	d8bd      	bhi.n	80051f6 <HAL_UART_Receive_IT+0xaa>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800527a:	6882      	ldr	r2, [r0, #8]
 800527c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8005280:	d02d      	beq.n	80052de <HAL_UART_Receive_IT+0x192>
 8005282:	4920      	ldr	r1, [pc, #128]	; (8005304 <HAL_UART_Receive_IT+0x1b8>)
 8005284:	6902      	ldr	r2, [r0, #16]
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005286:	6701      	str	r1, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8005288:	f880 4080 	strb.w	r4, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 800528c:	b13a      	cbz	r2, 800529e <HAL_UART_Receive_IT+0x152>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528e:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005292:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005296:	e843 2100 	strex	r1, r2, [r3]
 800529a:	2900      	cmp	r1, #0
 800529c:	d1f7      	bne.n	800528e <HAL_UART_Receive_IT+0x142>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529e:	f103 0208 	add.w	r2, r3, #8
 80052a2:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80052a6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052aa:	f103 0008 	add.w	r0, r3, #8
 80052ae:	e840 2100 	strex	r1, r2, [r0]
 80052b2:	2900      	cmp	r1, #0
 80052b4:	d1f3      	bne.n	800529e <HAL_UART_Receive_IT+0x152>
 80052b6:	e7b1      	b.n	800521c <HAL_UART_Receive_IT+0xd0>
  UART_MASK_COMPUTATION(huart);
 80052b8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80052bc:	d008      	beq.n	80052d0 <HAL_UART_Receive_IT+0x184>
 80052be:	f8a0 4060 	strh.w	r4, [r0, #96]	; 0x60
 80052c2:	e782      	b.n	80051ca <HAL_UART_Receive_IT+0x7e>
    __HAL_UNLOCK(huart);
 80052c4:	2200      	movs	r2, #0
 80052c6:	490d      	ldr	r1, [pc, #52]	; (80052fc <HAL_UART_Receive_IT+0x1b0>)
 80052c8:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
 80052cc:	6701      	str	r1, [r0, #112]	; 0x70
    if (huart->Init.Parity != UART_PARITY_NONE)
 80052ce:	e79d      	b.n	800520c <HAL_UART_Receive_IT+0xc0>
  UART_MASK_COMPUTATION(huart);
 80052d0:	6901      	ldr	r1, [r0, #16]
 80052d2:	2900      	cmp	r1, #0
 80052d4:	d0c9      	beq.n	800526a <HAL_UART_Receive_IT+0x11e>
 80052d6:	213f      	movs	r1, #63	; 0x3f
 80052d8:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
 80052dc:	e775      	b.n	80051ca <HAL_UART_Receive_IT+0x7e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052de:	6902      	ldr	r2, [r0, #16]
 80052e0:	b922      	cbnz	r2, 80052ec <HAL_UART_Receive_IT+0x1a0>
 80052e2:	4909      	ldr	r1, [pc, #36]	; (8005308 <HAL_UART_Receive_IT+0x1bc>)
    __HAL_UNLOCK(huart);
 80052e4:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
 80052e8:	6701      	str	r1, [r0, #112]	; 0x70
    if (huart->Init.Parity != UART_PARITY_NONE)
 80052ea:	e7d8      	b.n	800529e <HAL_UART_Receive_IT+0x152>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80052ec:	4a05      	ldr	r2, [pc, #20]	; (8005304 <HAL_UART_Receive_IT+0x1b8>)
    __HAL_UNLOCK(huart);
 80052ee:	f880 4080 	strb.w	r4, [r0, #128]	; 0x80
 80052f2:	6702      	str	r2, [r0, #112]	; 0x70
    if (huart->Init.Parity != UART_PARITY_NONE)
 80052f4:	e7cb      	b.n	800528e <HAL_UART_Receive_IT+0x142>
 80052f6:	bf00      	nop
 80052f8:	46002400 	.word	0x46002400
 80052fc:	080053bd 	.word	0x080053bd
 8005300:	0800537d 	.word	0x0800537d
 8005304:	08005401 	.word	0x08005401
 8005308:	080055a9 	.word	0x080055a9

0800530c <HAL_UART_ErrorCallback>:
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop

08005310 <HAL_UARTEx_RxEventCallback>:
}
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop

08005314 <UART_RxISR_16BIT.part.0>:
/**
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
 8005314:	b508      	push	{r3, lr}
 8005316:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005318:	e853 2f00 	ldrex	r2, [r3]
    huart->RxXferCount--;

    if (huart->RxXferCount == 0U)
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800531c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005320:	e843 2100 	strex	r1, r2, [r3]
 8005324:	2900      	cmp	r1, #0
 8005326:	d1f7      	bne.n	8005318 <UART_RxISR_16BIT.part.0+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005328:	f103 0208 	add.w	r2, r3, #8
 800532c:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005330:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005334:	f103 0c08 	add.w	ip, r3, #8
 8005338:	e84c 2100 	strex	r1, r2, [ip]
 800533c:	2900      	cmp	r1, #0
 800533e:	d1f3      	bne.n	8005328 <UART_RxISR_16BIT.part.0+0x14>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005340:	2220      	movs	r2, #32
 8005342:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005346:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
      huart->RxISR = NULL;
 8005348:	6701      	str	r1, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800534a:	2a01      	cmp	r2, #1
 800534c:	d112      	bne.n	8005374 <UART_RxISR_16BIT.part.0+0x60>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800534e:	66c1      	str	r1, [r0, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005350:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005354:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005358:	e843 2100 	strex	r1, r2, [r3]
 800535c:	2900      	cmp	r1, #0
 800535e:	d1f7      	bne.n	8005350 <UART_RxISR_16BIT.part.0+0x3c>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005360:	69da      	ldr	r2, [r3, #28]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005362:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005366:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005368:	bf44      	itt	mi
 800536a:	2210      	movmi	r2, #16
 800536c:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800536e:	f7ff ffcf 	bl	8005310 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005372:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 8005374:	f7fb f934 	bl	80005e0 <HAL_UART_RxCpltCallback>
}
 8005378:	bd08      	pop	{r3, pc}
 800537a:	bf00      	nop

0800537c <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800537c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005380:	2a22      	cmp	r2, #34	; 0x22
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005382:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005384:	d004      	beq.n	8005390 <UART_RxISR_16BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005386:	6993      	ldr	r3, [r2, #24]
 8005388:	f043 0308 	orr.w	r3, r3, #8
 800538c:	6193      	str	r3, [r2, #24]
  }
}
 800538e:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005390:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8005392:	f8b0 c060 	ldrh.w	ip, [r0, #96]	; 0x60
 8005396:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8005398:	ea02 020c 	and.w	r2, r2, ip
 800539c:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 80053a0:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    huart->pRxBuffPtr += 2U;
 80053a4:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80053a6:	3a01      	subs	r2, #1
 80053a8:	b292      	uxth	r2, r2
 80053aa:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80053ae:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1ea      	bne.n	800538e <UART_RxISR_16BIT+0x12>
 80053b8:	f7ff bfac 	b.w	8005314 <UART_RxISR_16BIT.part.0>

080053bc <UART_RxISR_8BIT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053bc:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80053c0:	2a22      	cmp	r2, #34	; 0x22
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053c2:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053c4:	d004      	beq.n	80053d0 <UART_RxISR_8BIT+0x14>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053c6:	6993      	ldr	r3, [r2, #24]
 80053c8:	f043 0308 	orr.w	r3, r3, #8
 80053cc:	6193      	str	r3, [r2, #24]
}
 80053ce:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80053d2:	f8b0 c060 	ldrh.w	ip, [r0, #96]	; 0x60
 80053d6:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80053d8:	ea02 020c 	and.w	r2, r2, ip
 80053dc:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 80053de:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
 80053e2:	6d81      	ldr	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80053e4:	3a01      	subs	r2, #1
 80053e6:	b292      	uxth	r2, r2
 80053e8:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80053ec:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
 80053f0:	3101      	adds	r1, #1
    if (huart->RxXferCount == 0U)
 80053f2:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 80053f4:	6581      	str	r1, [r0, #88]	; 0x58
    if (huart->RxXferCount == 0U)
 80053f6:	2a00      	cmp	r2, #0
 80053f8:	d1e9      	bne.n	80053ce <UART_RxISR_8BIT+0x12>
 80053fa:	f7ff bf8b 	b.w	8005314 <UART_RxISR_16BIT.part.0>
 80053fe:	bf00      	nop

08005400 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005404:	4604      	mov	r4, r0
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005406:	6802      	ldr	r2, [r0, #0]
 8005408:	69d0      	ldr	r0, [r2, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800540a:	6817      	ldr	r7, [r2, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800540c:	6896      	ldr	r6, [r2, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800540e:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8005412:	2922      	cmp	r1, #34	; 0x22
 8005414:	d006      	beq.n	8005424 <UART_RxISR_8BIT_FIFOEN+0x24>
 8005416:	4613      	mov	r3, r2
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005418:	6992      	ldr	r2, [r2, #24]
 800541a:	f042 0208 	orr.w	r2, r2, #8
 800541e:	619a      	str	r2, [r3, #24]
  }
}
 8005420:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005424:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 80b6 	beq.w	800559a <UART_RxISR_8BIT_FIFOEN+0x19a>
 800542e:	0685      	lsls	r5, r0, #26
 8005430:	d57b      	bpl.n	800552a <UART_RxISR_8BIT_FIFOEN+0x12a>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005432:	f04f 0800 	mov.w	r8, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005436:	f04f 0904 	mov.w	r9, #4
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800543a:	f894 b060 	ldrb.w	fp, [r4, #96]	; 0x60
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800543e:	f8df a164 	ldr.w	sl, [pc, #356]	; 80055a4 <UART_RxISR_8BIT_FIFOEN+0x1a4>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005442:	f407 7780 	and.w	r7, r7, #256	; 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005446:	f006 0601 	and.w	r6, r6, #1
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800544a:	6a52      	ldr	r2, [r2, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800544c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800544e:	ea0b 0202 	and.w	r2, fp, r2
 8005452:	701a      	strb	r2, [r3, #0]
      huart->RxXferCount--;
 8005454:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005458:	6823      	ldr	r3, [r4, #0]
      huart->RxXferCount--;
 800545a:	3901      	subs	r1, #1
 800545c:	b289      	uxth	r1, r1
 800545e:	f8a4 105e 	strh.w	r1, [r4, #94]	; 0x5e
      huart->pRxBuffPtr++;
 8005462:	6da2      	ldr	r2, [r4, #88]	; 0x58
      isrflags = READ_REG(huart->Instance->ISR);
 8005464:	69dd      	ldr	r5, [r3, #28]
      huart->pRxBuffPtr++;
 8005466:	3201      	adds	r2, #1
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005468:	0768      	lsls	r0, r5, #29
      huart->pRxBuffPtr++;
 800546a:	65a2      	str	r2, [r4, #88]	; 0x58
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800546c:	d01a      	beq.n	80054a4 <UART_RxISR_8BIT_FIFOEN+0xa4>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800546e:	07e9      	lsls	r1, r5, #31
 8005470:	d508      	bpl.n	8005484 <UART_RxISR_8BIT_FIFOEN+0x84>
 8005472:	b13f      	cbz	r7, 8005484 <UART_RxISR_8BIT_FIFOEN+0x84>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005474:	2201      	movs	r2, #1
 8005476:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005478:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800547c:	f042 0201 	orr.w	r2, r2, #1
 8005480:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005484:	07aa      	lsls	r2, r5, #30
 8005486:	d515      	bpl.n	80054b4 <UART_RxISR_8BIT_FIFOEN+0xb4>
 8005488:	b14e      	cbz	r6, 800549e <UART_RxISR_8BIT_FIFOEN+0x9e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800548a:	2202      	movs	r2, #2
 800548c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800548e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005492:	0768      	lsls	r0, r5, #29
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005494:	f042 0204 	orr.w	r2, r2, #4
 8005498:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800549c:	d40e      	bmi.n	80054bc <UART_RxISR_8BIT_FIFOEN+0xbc>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800549e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80054a2:	b9bb      	cbnz	r3, 80054d4 <UART_RxISR_8BIT_FIFOEN+0xd4>
      if (huart->RxXferCount == 0U)
 80054a4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	b1eb      	cbz	r3, 80054e8 <UART_RxISR_8BIT_FIFOEN+0xe8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80054ac:	06ab      	lsls	r3, r5, #26
 80054ae:	d53c      	bpl.n	800552a <UART_RxISR_8BIT_FIFOEN+0x12a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80054b0:	6822      	ldr	r2, [r4, #0]
 80054b2:	e7ca      	b.n	800544a <UART_RxISR_8BIT_FIFOEN+0x4a>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054b4:	0769      	lsls	r1, r5, #29
 80054b6:	d5f2      	bpl.n	800549e <UART_RxISR_8BIT_FIFOEN+0x9e>
 80054b8:	2e00      	cmp	r6, #0
 80054ba:	d0f0      	beq.n	800549e <UART_RxISR_8BIT_FIFOEN+0x9e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80054bc:	f8c3 9020 	str.w	r9, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054c0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80054c4:	f043 0302 	orr.w	r3, r3, #2
 80054c8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054cc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d0e7      	beq.n	80054a4 <UART_RxISR_8BIT_FIFOEN+0xa4>
          HAL_UART_ErrorCallback(huart);
 80054d4:	4620      	mov	r0, r4
 80054d6:	f7ff ff19 	bl	800530c <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054da:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
      if (huart->RxXferCount == 0U)
 80054de:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1e1      	bne.n	80054ac <UART_RxISR_8BIT_FIFOEN+0xac>
 80054e8:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ea:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f2:	e843 2100 	strex	r1, r2, [r3]
 80054f6:	2900      	cmp	r1, #0
 80054f8:	d1f7      	bne.n	80054ea <UART_RxISR_8BIT_FIFOEN+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fa:	f103 0208 	add.w	r2, r3, #8
 80054fe:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005502:	ea02 020a 	and.w	r2, r2, sl
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005506:	f103 0008 	add.w	r0, r3, #8
 800550a:	e840 2100 	strex	r1, r2, [r0]
 800550e:	2900      	cmp	r1, #0
 8005510:	d1f3      	bne.n	80054fa <UART_RxISR_8BIT_FIFOEN+0xfa>
        huart->RxState = HAL_UART_STATE_READY;
 8005512:	2220      	movs	r2, #32
 8005514:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005518:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 800551a:	6721      	str	r1, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800551c:	2a01      	cmp	r2, #1
 800551e:	d027      	beq.n	8005570 <UART_RxISR_8BIT_FIFOEN+0x170>
          HAL_UART_RxCpltCallback(huart);
 8005520:	4620      	mov	r0, r4
 8005522:	f7fb f85d 	bl	80005e0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005526:	06ab      	lsls	r3, r5, #26
 8005528:	d4c2      	bmi.n	80054b0 <UART_RxISR_8BIT_FIFOEN+0xb0>
    rxdatacount = huart->RxXferCount;
 800552a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800552e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005530:	2b00      	cmp	r3, #0
 8005532:	f43f af75 	beq.w	8005420 <UART_RxISR_8BIT_FIFOEN+0x20>
 8005536:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800553a:	429a      	cmp	r2, r3
 800553c:	f67f af70 	bls.w	8005420 <UART_RxISR_8BIT_FIFOEN+0x20>
 8005540:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005542:	f103 0208 	add.w	r2, r3, #8
 8005546:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800554a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554e:	f103 0008 	add.w	r0, r3, #8
 8005552:	e840 2100 	strex	r1, r2, [r0]
 8005556:	2900      	cmp	r1, #0
 8005558:	d1f3      	bne.n	8005542 <UART_RxISR_8BIT_FIFOEN+0x142>
      huart->RxISR = UART_RxISR_8BIT;
 800555a:	4a11      	ldr	r2, [pc, #68]	; (80055a0 <UART_RxISR_8BIT_FIFOEN+0x1a0>)
 800555c:	6722      	str	r2, [r4, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555e:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005562:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005566:	e843 2100 	strex	r1, r2, [r3]
 800556a:	2900      	cmp	r1, #0
 800556c:	d1f7      	bne.n	800555e <UART_RxISR_8BIT_FIFOEN+0x15e>
 800556e:	e757      	b.n	8005420 <UART_RxISR_8BIT_FIFOEN+0x20>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005570:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005572:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005576:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557a:	e843 2100 	strex	r1, r2, [r3]
 800557e:	2900      	cmp	r1, #0
 8005580:	d1f7      	bne.n	8005572 <UART_RxISR_8BIT_FIFOEN+0x172>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005582:	69da      	ldr	r2, [r3, #28]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005584:	4620      	mov	r0, r4
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005586:	06d2      	lsls	r2, r2, #27
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005588:	bf48      	it	mi
 800558a:	2210      	movmi	r2, #16
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800558c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005590:	bf48      	it	mi
 8005592:	621a      	strmi	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005594:	f7ff febc 	bl	8005310 <HAL_UARTEx_RxEventCallback>
 8005598:	e788      	b.n	80054ac <UART_RxISR_8BIT_FIFOEN+0xac>
    rxdatacount = huart->RxXferCount;
 800559a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800559e:	e73f      	b.n	8005420 <UART_RxISR_8BIT_FIFOEN+0x20>
 80055a0:	080053bd 	.word	0x080053bd
 80055a4:	effffffe 	.word	0xeffffffe

080055a8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80055a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80055ac:	6803      	ldr	r3, [r0, #0]
 80055ae:	69d9      	ldr	r1, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80055b0:	681e      	ldr	r6, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80055b2:	689d      	ldr	r5, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055b4:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80055b8:	2a22      	cmp	r2, #34	; 0x22
 80055ba:	d005      	beq.n	80055c8 <UART_RxISR_16BIT_FIFOEN+0x20>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80055bc:	699a      	ldr	r2, [r3, #24]
 80055be:	f042 0208 	orr.w	r2, r2, #8
 80055c2:	619a      	str	r2, [r3, #24]
  }
}
 80055c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80055c8:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
 80055cc:	4683      	mov	fp, r0
 80055ce:	2a00      	cmp	r2, #0
 80055d0:	f000 80bc 	beq.w	800574c <UART_RxISR_16BIT_FIFOEN+0x1a4>
 80055d4:	068c      	lsls	r4, r1, #26
 80055d6:	d57e      	bpl.n	80056d6 <UART_RxISR_16BIT_FIFOEN+0x12e>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055d8:	2700      	movs	r7, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80055da:	f04f 0804 	mov.w	r8, #4
  uint16_t  uhMask = huart->Mask;
 80055de:	f8b0 a060 	ldrh.w	sl, [r0, #96]	; 0x60
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80055e2:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8005758 <UART_RxISR_16BIT_FIFOEN+0x1b0>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80055e6:	f406 7680 	and.w	r6, r6, #256	; 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055ea:	f005 0501 	and.w	r5, r5, #1
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80055ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 80055f0:	f8db 1058 	ldr.w	r1, [fp, #88]	; 0x58
 80055f4:	ea0a 0202 	and.w	r2, sl, r2
 80055f8:	f821 2b02 	strh.w	r2, [r1], #2
      huart->RxXferCount--;
 80055fc:	f8bb 205e 	ldrh.w	r2, [fp, #94]	; 0x5e
      huart->pRxBuffPtr += 2U;
 8005600:	f8cb 1058 	str.w	r1, [fp, #88]	; 0x58
      huart->RxXferCount--;
 8005604:	3a01      	subs	r2, #1
 8005606:	b292      	uxth	r2, r2
 8005608:	f8ab 205e 	strh.w	r2, [fp, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800560c:	69dc      	ldr	r4, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800560e:	0760      	lsls	r0, r4, #29
 8005610:	d01a      	beq.n	8005648 <UART_RxISR_16BIT_FIFOEN+0xa0>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005612:	07e1      	lsls	r1, r4, #31
 8005614:	d508      	bpl.n	8005628 <UART_RxISR_16BIT_FIFOEN+0x80>
 8005616:	b13e      	cbz	r6, 8005628 <UART_RxISR_16BIT_FIFOEN+0x80>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005618:	2201      	movs	r2, #1
 800561a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800561c:	f8db 208c 	ldr.w	r2, [fp, #140]	; 0x8c
 8005620:	f042 0201 	orr.w	r2, r2, #1
 8005624:	f8cb 208c 	str.w	r2, [fp, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005628:	07a2      	lsls	r2, r4, #30
 800562a:	d516      	bpl.n	800565a <UART_RxISR_16BIT_FIFOEN+0xb2>
 800562c:	b14d      	cbz	r5, 8005642 <UART_RxISR_16BIT_FIFOEN+0x9a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800562e:	2202      	movs	r2, #2
 8005630:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005632:	f8db 208c 	ldr.w	r2, [fp, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005636:	0760      	lsls	r0, r4, #29
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005638:	f042 0204 	orr.w	r2, r2, #4
 800563c:	f8cb 208c 	str.w	r2, [fp, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005640:	d40f      	bmi.n	8005662 <UART_RxISR_16BIT_FIFOEN+0xba>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005642:	f8db 308c 	ldr.w	r3, [fp, #140]	; 0x8c
 8005646:	b9c3      	cbnz	r3, 800567a <UART_RxISR_16BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 8005648:	f8bb 305e 	ldrh.w	r3, [fp, #94]	; 0x5e
 800564c:	b29b      	uxth	r3, r3
 800564e:	b1f3      	cbz	r3, 800568e <UART_RxISR_16BIT_FIFOEN+0xe6>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005650:	06a3      	lsls	r3, r4, #26
 8005652:	d540      	bpl.n	80056d6 <UART_RxISR_16BIT_FIFOEN+0x12e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005654:	f8db 3000 	ldr.w	r3, [fp]
 8005658:	e7c9      	b.n	80055ee <UART_RxISR_16BIT_FIFOEN+0x46>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800565a:	0761      	lsls	r1, r4, #29
 800565c:	d5f1      	bpl.n	8005642 <UART_RxISR_16BIT_FIFOEN+0x9a>
 800565e:	2d00      	cmp	r5, #0
 8005660:	d0ef      	beq.n	8005642 <UART_RxISR_16BIT_FIFOEN+0x9a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005662:	f8c3 8020 	str.w	r8, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005666:	f8db 308c 	ldr.w	r3, [fp, #140]	; 0x8c
 800566a:	f043 0302 	orr.w	r3, r3, #2
 800566e:	f8cb 308c 	str.w	r3, [fp, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005672:	f8db 308c 	ldr.w	r3, [fp, #140]	; 0x8c
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0e6      	beq.n	8005648 <UART_RxISR_16BIT_FIFOEN+0xa0>
          HAL_UART_ErrorCallback(huart);
 800567a:	4658      	mov	r0, fp
 800567c:	f7ff fe46 	bl	800530c <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005680:	f8cb 708c 	str.w	r7, [fp, #140]	; 0x8c
      if (huart->RxXferCount == 0U)
 8005684:	f8bb 305e 	ldrh.w	r3, [fp, #94]	; 0x5e
 8005688:	b29b      	uxth	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1e0      	bne.n	8005650 <UART_RxISR_16BIT_FIFOEN+0xa8>
 800568e:	f8db 3000 	ldr.w	r3, [fp]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005692:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005696:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569a:	e843 2100 	strex	r1, r2, [r3]
 800569e:	2900      	cmp	r1, #0
 80056a0:	d1f7      	bne.n	8005692 <UART_RxISR_16BIT_FIFOEN+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a2:	f103 0208 	add.w	r2, r3, #8
 80056a6:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80056aa:	ea02 0209 	and.w	r2, r2, r9
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ae:	f103 0008 	add.w	r0, r3, #8
 80056b2:	e840 2100 	strex	r1, r2, [r0]
 80056b6:	2900      	cmp	r1, #0
 80056b8:	d1f3      	bne.n	80056a2 <UART_RxISR_16BIT_FIFOEN+0xfa>
        huart->RxState = HAL_UART_STATE_READY;
 80056ba:	2220      	movs	r2, #32
 80056bc:	f8cb 2088 	str.w	r2, [fp, #136]	; 0x88
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056c0:	f8db 206c 	ldr.w	r2, [fp, #108]	; 0x6c
        huart->RxISR = NULL;
 80056c4:	f8cb 1070 	str.w	r1, [fp, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056c8:	2a01      	cmp	r2, #1
 80056ca:	d029      	beq.n	8005720 <UART_RxISR_16BIT_FIFOEN+0x178>
          HAL_UART_RxCpltCallback(huart);
 80056cc:	4658      	mov	r0, fp
 80056ce:	f7fa ff87 	bl	80005e0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80056d2:	06a3      	lsls	r3, r4, #26
 80056d4:	d4be      	bmi.n	8005654 <UART_RxISR_16BIT_FIFOEN+0xac>
    rxdatacount = huart->RxXferCount;
 80056d6:	f8bb 305e 	ldrh.w	r3, [fp, #94]	; 0x5e
 80056da:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f43f af71 	beq.w	80055c4 <UART_RxISR_16BIT_FIFOEN+0x1c>
 80056e2:	f8bb 2068 	ldrh.w	r2, [fp, #104]	; 0x68
 80056e6:	429a      	cmp	r2, r3
 80056e8:	f67f af6c 	bls.w	80055c4 <UART_RxISR_16BIT_FIFOEN+0x1c>
 80056ec:	f8db 3000 	ldr.w	r3, [fp]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f0:	f103 0208 	add.w	r2, r3, #8
 80056f4:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80056f8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fc:	f103 0008 	add.w	r0, r3, #8
 8005700:	e840 2100 	strex	r1, r2, [r0]
 8005704:	2900      	cmp	r1, #0
 8005706:	d1f3      	bne.n	80056f0 <UART_RxISR_16BIT_FIFOEN+0x148>
      huart->RxISR = UART_RxISR_16BIT;
 8005708:	4a12      	ldr	r2, [pc, #72]	; (8005754 <UART_RxISR_16BIT_FIFOEN+0x1ac>)
 800570a:	f8cb 2070 	str.w	r2, [fp, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570e:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005712:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005716:	e843 2100 	strex	r1, r2, [r3]
 800571a:	2900      	cmp	r1, #0
 800571c:	d1f7      	bne.n	800570e <UART_RxISR_16BIT_FIFOEN+0x166>
 800571e:	e751      	b.n	80055c4 <UART_RxISR_16BIT_FIFOEN+0x1c>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005720:	f8cb 106c 	str.w	r1, [fp, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005724:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005728:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572c:	e843 2100 	strex	r1, r2, [r3]
 8005730:	2900      	cmp	r1, #0
 8005732:	d1f7      	bne.n	8005724 <UART_RxISR_16BIT_FIFOEN+0x17c>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005734:	69da      	ldr	r2, [r3, #28]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005736:	4658      	mov	r0, fp
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005738:	06d2      	lsls	r2, r2, #27
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800573a:	bf48      	it	mi
 800573c:	2210      	movmi	r2, #16
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800573e:	f8bb 105c 	ldrh.w	r1, [fp, #92]	; 0x5c
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005742:	bf48      	it	mi
 8005744:	621a      	strmi	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005746:	f7ff fde3 	bl	8005310 <HAL_UARTEx_RxEventCallback>
 800574a:	e781      	b.n	8005650 <UART_RxISR_16BIT_FIFOEN+0xa8>
    rxdatacount = huart->RxXferCount;
 800574c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005750:	e738      	b.n	80055c4 <UART_RxISR_16BIT_FIFOEN+0x1c>
 8005752:	bf00      	nop
 8005754:	0800537d 	.word	0x0800537d
 8005758:	effffffe 	.word	0xeffffffe

0800575c <UART_SetConfig>:
{
 800575c:	b570      	push	{r4, r5, r6, lr}
 800575e:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8005760:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005762:	69c5      	ldr	r5, [r0, #28]
 8005764:	6882      	ldr	r2, [r0, #8]
 8005766:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005768:	496c      	ldr	r1, [pc, #432]	; (800591c <UART_SetConfig+0x1c0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800576a:	4302      	orrs	r2, r0
 800576c:	6960      	ldr	r0, [r4, #20]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800576e:	4e6c      	ldr	r6, [pc, #432]	; (8005920 <UART_SetConfig+0x1c4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005770:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005772:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005774:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005776:	4001      	ands	r1, r0
 8005778:	430a      	orrs	r2, r1
 800577a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800577c:	685a      	ldr	r2, [r3, #4]
 800577e:	68e1      	ldr	r1, [r4, #12]
 8005780:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005784:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005786:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005788:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800578a:	69a2      	ldr	r2, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800578c:	f000 809e 	beq.w	80058cc <UART_SetConfig+0x170>
 8005790:	4964      	ldr	r1, [pc, #400]	; (8005924 <UART_SetConfig+0x1c8>)
 8005792:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005794:	6899      	ldr	r1, [r3, #8]
 8005796:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800579a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800579e:	d02a      	beq.n	80057f6 <UART_SetConfig+0x9a>
    tmpreg |= huart->Init.OneBitSampling;
 80057a0:	6a20      	ldr	r0, [r4, #32]
 80057a2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057a4:	430a      	orrs	r2, r1
 80057a6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80057a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80057ac:	f022 020f 	bic.w	r2, r2, #15
 80057b0:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057b2:	495d      	ldr	r1, [pc, #372]	; (8005928 <UART_SetConfig+0x1cc>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80057b4:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057b6:	428b      	cmp	r3, r1
 80057b8:	d17a      	bne.n	80058b0 <UART_SetConfig+0x154>
 80057ba:	2001      	movs	r0, #1
 80057bc:	2100      	movs	r1, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057be:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 80057c2:	d05d      	beq.n	8005880 <UART_SetConfig+0x124>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80057c4:	f7fe feb2 	bl	800452c <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 80057c8:	2800      	cmp	r0, #0
 80057ca:	d051      	beq.n	8005870 <UART_SetConfig+0x114>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80057ce:	4b57      	ldr	r3, [pc, #348]	; (800592c <UART_SetConfig+0x1d0>)
 80057d0:	6862      	ldr	r2, [r4, #4]
 80057d2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057d6:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057da:	fbb0 f3f3 	udiv	r3, r0, r3
 80057de:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80057e2:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057e6:	f1a3 0210 	sub.w	r2, r3, #16
 80057ea:	428a      	cmp	r2, r1
 80057ec:	d85e      	bhi.n	80058ac <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057ee:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 80057f0:	2000      	movs	r0, #0
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057f2:	60d3      	str	r3, [r2, #12]
 80057f4:	e03d      	b.n	8005872 <UART_SetConfig+0x116>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057f6:	430a      	orrs	r2, r1
 80057f8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80057fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80057fe:	f022 020f 	bic.w	r2, r2, #15
 8005802:	430a      	orrs	r2, r1
 8005804:	62da      	str	r2, [r3, #44]	; 0x2c
  if (UART_INSTANCE_LOWPOWER(huart))
 8005806:	4a47      	ldr	r2, [pc, #284]	; (8005924 <UART_SetConfig+0x1c8>)
 8005808:	2000      	movs	r0, #0
 800580a:	4293      	cmp	r3, r2
 800580c:	f04f 0100 	mov.w	r1, #0
 8005810:	d1d5      	bne.n	80057be <UART_SetConfig+0x62>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005812:	f7fe fe8b 	bl	800452c <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 8005816:	b358      	cbz	r0, 8005870 <UART_SetConfig+0x114>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005818:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800581a:	4a44      	ldr	r2, [pc, #272]	; (800592c <UART_SetConfig+0x1d0>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800581c:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800581e:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005822:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005826:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800582a:	4299      	cmp	r1, r3
 800582c:	d83e      	bhi.n	80058ac <UART_SetConfig+0x150>
 800582e:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8005832:	d83b      	bhi.n	80058ac <UART_SetConfig+0x150>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005834:	2300      	movs	r3, #0
 8005836:	4619      	mov	r1, r3
 8005838:	f7fa fd1e 	bl	8000278 <__aeabi_uldivmod>
 800583c:	4606      	mov	r6, r0
 800583e:	462a      	mov	r2, r5
 8005840:	ea4f 0c55 	mov.w	ip, r5, lsr #1
 8005844:	0209      	lsls	r1, r1, #8
 8005846:	0235      	lsls	r5, r6, #8
 8005848:	eb15 000c 	adds.w	r0, r5, ip
 800584c:	ea41 6116 	orr.w	r1, r1, r6, lsr #24
 8005850:	f04f 0300 	mov.w	r3, #0
 8005854:	f141 0100 	adc.w	r1, r1, #0
 8005858:	f7fa fd0e 	bl	8000278 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800585c:	4a34      	ldr	r2, [pc, #208]	; (8005930 <UART_SetConfig+0x1d4>)
 800585e:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8005862:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005864:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005866:	d821      	bhi.n	80058ac <UART_SetConfig+0x150>
          huart->Instance->BRR = usartdiv;
 8005868:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 800586a:	2000      	movs	r0, #0
          huart->Instance->BRR = usartdiv;
 800586c:	60d3      	str	r3, [r2, #12]
 800586e:	e000      	b.n	8005872 <UART_SetConfig+0x116>
  HAL_StatusTypeDef ret               = HAL_OK;
 8005870:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8005872:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8005874:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 8005878:	6723      	str	r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 800587a:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800587c:	6763      	str	r3, [r4, #116]	; 0x74
}
 800587e:	bd70      	pop	{r4, r5, r6, pc}
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005880:	f7fe fe54 	bl	800452c <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 8005884:	2800      	cmp	r0, #0
 8005886:	d0f3      	beq.n	8005870 <UART_SetConfig+0x114>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005888:	4b28      	ldr	r3, [pc, #160]	; (800592c <UART_SetConfig+0x1d0>)
 800588a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800588c:	6862      	ldr	r2, [r4, #4]
 800588e:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8005892:	0853      	lsrs	r3, r2, #1
 8005894:	fbb0 f0f1 	udiv	r0, r0, r1
 8005898:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800589c:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058a0:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80058a4:	f1a0 0310 	sub.w	r3, r0, #16
 80058a8:	428b      	cmp	r3, r1
 80058aa:	d92c      	bls.n	8005906 <UART_SetConfig+0x1aa>
        ret = HAL_ERROR;
 80058ac:	2001      	movs	r0, #1
 80058ae:	e7e0      	b.n	8005872 <UART_SetConfig+0x116>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058b0:	4a20      	ldr	r2, [pc, #128]	; (8005934 <UART_SetConfig+0x1d8>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d01a      	beq.n	80058ec <UART_SetConfig+0x190>
 80058b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d019      	beq.n	80058f2 <UART_SetConfig+0x196>
 80058be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d118      	bne.n	80058f8 <UART_SetConfig+0x19c>
 80058c6:	2008      	movs	r0, #8
 80058c8:	2100      	movs	r1, #0
 80058ca:	e778      	b.n	80057be <UART_SetConfig+0x62>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058cc:	6899      	ldr	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80058ce:	2020      	movs	r0, #32
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058d0:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 80058d4:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80058d8:	430a      	orrs	r2, r1
 80058da:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80058dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058de:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80058e0:	f022 020f 	bic.w	r2, r2, #15
 80058e4:	430a      	orrs	r2, r1
 80058e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80058e8:	2100      	movs	r1, #0
 80058ea:	e792      	b.n	8005812 <UART_SetConfig+0xb6>
 80058ec:	2002      	movs	r0, #2
 80058ee:	2100      	movs	r1, #0
 80058f0:	e765      	b.n	80057be <UART_SetConfig+0x62>
 80058f2:	2004      	movs	r0, #4
 80058f4:	2100      	movs	r1, #0
 80058f6:	e762      	b.n	80057be <UART_SetConfig+0x62>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d182      	bne.n	8005806 <UART_SetConfig+0xaa>
 8005900:	2010      	movs	r0, #16
 8005902:	2100      	movs	r1, #0
  if (UART_INSTANCE_LOWPOWER(huart))
 8005904:	e75b      	b.n	80057be <UART_SetConfig+0x62>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005906:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 800590a:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800590c:	f3c0 0042 	ubfx	r0, r0, #1, #3
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005910:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 8005912:	4303      	orrs	r3, r0
 8005914:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005916:	2000      	movs	r0, #0
 8005918:	e7ab      	b.n	8005872 <UART_SetConfig+0x116>
 800591a:	bf00      	nop
 800591c:	cfff69f3 	.word	0xcfff69f3
 8005920:	46002400 	.word	0x46002400
 8005924:	56002400 	.word	0x56002400
 8005928:	40013800 	.word	0x40013800
 800592c:	08008d0c 	.word	0x08008d0c
 8005930:	000ffcff 	.word	0x000ffcff
 8005934:	40004400 	.word	0x40004400

08005938 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005938:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 800593a:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800593c:	07da      	lsls	r2, r3, #31
 800593e:	d506      	bpl.n	800594e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005940:	6801      	ldr	r1, [r0, #0]
 8005942:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005944:	684a      	ldr	r2, [r1, #4]
 8005946:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800594a:	4322      	orrs	r2, r4
 800594c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800594e:	079c      	lsls	r4, r3, #30
 8005950:	d506      	bpl.n	8005960 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005952:	6801      	ldr	r1, [r0, #0]
 8005954:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005956:	684a      	ldr	r2, [r1, #4]
 8005958:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800595c:	4322      	orrs	r2, r4
 800595e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005960:	0759      	lsls	r1, r3, #29
 8005962:	d506      	bpl.n	8005972 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005964:	6801      	ldr	r1, [r0, #0]
 8005966:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005968:	684a      	ldr	r2, [r1, #4]
 800596a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800596e:	4322      	orrs	r2, r4
 8005970:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005972:	071a      	lsls	r2, r3, #28
 8005974:	d506      	bpl.n	8005984 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005976:	6801      	ldr	r1, [r0, #0]
 8005978:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800597a:	684a      	ldr	r2, [r1, #4]
 800597c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005980:	4322      	orrs	r2, r4
 8005982:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005984:	06dc      	lsls	r4, r3, #27
 8005986:	d506      	bpl.n	8005996 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005988:	6801      	ldr	r1, [r0, #0]
 800598a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800598c:	688a      	ldr	r2, [r1, #8]
 800598e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005992:	4322      	orrs	r2, r4
 8005994:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005996:	0699      	lsls	r1, r3, #26
 8005998:	d506      	bpl.n	80059a8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800599a:	6801      	ldr	r1, [r0, #0]
 800599c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800599e:	688a      	ldr	r2, [r1, #8]
 80059a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059a4:	4322      	orrs	r2, r4
 80059a6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059a8:	065a      	lsls	r2, r3, #25
 80059aa:	d50a      	bpl.n	80059c2 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059ac:	6801      	ldr	r1, [r0, #0]
 80059ae:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80059b0:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059b2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059b6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80059ba:	ea42 0204 	orr.w	r2, r2, r4
 80059be:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059c0:	d00b      	beq.n	80059da <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059c2:	061b      	lsls	r3, r3, #24
 80059c4:	d506      	bpl.n	80059d4 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059c6:	6802      	ldr	r2, [r0, #0]
 80059c8:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80059ca:	6853      	ldr	r3, [r2, #4]
 80059cc:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80059d0:	430b      	orrs	r3, r1
 80059d2:	6053      	str	r3, [r2, #4]
}
 80059d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059d8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059da:	684a      	ldr	r2, [r1, #4]
 80059dc:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80059de:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80059e2:	4322      	orrs	r2, r4
 80059e4:	604a      	str	r2, [r1, #4]
 80059e6:	e7ec      	b.n	80059c2 <UART_AdvFeatureConfig+0x8a>

080059e8 <UART_WaitOnFlagUntilTimeout>:
{
 80059e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059ec:	4607      	mov	r7, r0
 80059ee:	460e      	mov	r6, r1
 80059f0:	4615      	mov	r5, r2
 80059f2:	4699      	mov	r9, r3
 80059f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059f8:	6804      	ldr	r4, [r0, #0]
 80059fa:	f1b8 3fff 	cmp.w	r8, #4294967295
 80059fe:	d10a      	bne.n	8005a16 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005a00:	69e3      	ldr	r3, [r4, #28]
 8005a02:	ea36 0303 	bics.w	r3, r6, r3
 8005a06:	bf0c      	ite	eq
 8005a08:	2301      	moveq	r3, #1
 8005a0a:	2300      	movne	r3, #0
 8005a0c:	429d      	cmp	r5, r3
 8005a0e:	d0f7      	beq.n	8005a00 <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 8005a10:	2000      	movs	r0, #0
}
 8005a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a16:	69e3      	ldr	r3, [r4, #28]
 8005a18:	ea36 0303 	bics.w	r3, r6, r3
 8005a1c:	bf0c      	ite	eq
 8005a1e:	2301      	moveq	r3, #1
 8005a20:	2300      	movne	r3, #0
 8005a22:	42ab      	cmp	r3, r5
 8005a24:	d1f4      	bne.n	8005a10 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a26:	f7fb fb1d 	bl	8001064 <HAL_GetTick>
 8005a2a:	eba0 0009 	sub.w	r0, r0, r9
 8005a2e:	4540      	cmp	r0, r8
 8005a30:	d833      	bhi.n	8005a9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a32:	f1b8 0f00 	cmp.w	r8, #0
 8005a36:	d030      	beq.n	8005a9a <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a38:	683c      	ldr	r4, [r7, #0]
 8005a3a:	6823      	ldr	r3, [r4, #0]
 8005a3c:	4622      	mov	r2, r4
 8005a3e:	0759      	lsls	r1, r3, #29
 8005a40:	d5db      	bpl.n	80059fa <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a42:	69e3      	ldr	r3, [r4, #28]
 8005a44:	051b      	lsls	r3, r3, #20
 8005a46:	d5d8      	bpl.n	80059fa <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a4c:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4e:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005a52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a56:	e844 3100 	strex	r1, r3, [r4]
 8005a5a:	b139      	cbz	r1, 8005a6c <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5c:	e852 3f00 	ldrex	r3, [r2]
 8005a60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a64:	e842 3100 	strex	r1, r3, [r2]
 8005a68:	2900      	cmp	r1, #0
 8005a6a:	d1f7      	bne.n	8005a5c <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6c:	f102 0308 	add.w	r3, r2, #8
 8005a70:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a74:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a78:	f102 0008 	add.w	r0, r2, #8
 8005a7c:	e840 3100 	strex	r1, r3, [r0]
 8005a80:	2900      	cmp	r1, #0
 8005a82:	d1f3      	bne.n	8005a6c <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 8005a84:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 8005a86:	2003      	movs	r0, #3
          huart->gState = HAL_UART_STATE_READY;
 8005a88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8005a8c:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005a90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 8005a98:	e7bb      	b.n	8005a12 <UART_WaitOnFlagUntilTimeout+0x2a>
 8005a9a:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9c:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005aa0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa4:	e842 3100 	strex	r1, r3, [r2]
 8005aa8:	2900      	cmp	r1, #0
 8005aaa:	d1f7      	bne.n	8005a9c <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aac:	f102 0308 	add.w	r3, r2, #8
 8005ab0:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab8:	f102 0008 	add.w	r0, r2, #8
 8005abc:	e840 3100 	strex	r1, r3, [r0]
 8005ac0:	2900      	cmp	r1, #0
 8005ac2:	d1f3      	bne.n	8005aac <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 8005ac4:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8005ac6:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8005ac8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8005acc:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005ad0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 8005ad4:	e79d      	b.n	8005a12 <UART_WaitOnFlagUntilTimeout+0x2a>
 8005ad6:	bf00      	nop

08005ad8 <HAL_UART_Transmit>:
{
 8005ad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005adc:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8005ade:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8005ae2:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8005ae4:	2b20      	cmp	r3, #32
 8005ae6:	f040 8098 	bne.w	8005c1a <HAL_UART_Transmit+0x142>
    if ((pData == NULL) || (Size == 0U))
 8005aea:	4689      	mov	r9, r1
 8005aec:	2900      	cmp	r1, #0
 8005aee:	d050      	beq.n	8005b92 <HAL_UART_Transmit+0xba>
 8005af0:	4614      	mov	r4, r2
 8005af2:	2a00      	cmp	r2, #0
 8005af4:	d04d      	beq.n	8005b92 <HAL_UART_Transmit+0xba>
    __HAL_LOCK(huart);
 8005af6:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005afa:	4605      	mov	r5, r0
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	f000 808c 	beq.w	8005c1a <HAL_UART_Transmit+0x142>
 8005b02:	2201      	movs	r2, #1
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005b04:	6803      	ldr	r3, [r0, #0]
    __HAL_LOCK(huart);
 8005b06:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005b0a:	689a      	ldr	r2, [r3, #8]
 8005b0c:	0611      	lsls	r1, r2, #24
 8005b0e:	f100 8088 	bmi.w	8005c22 <HAL_UART_Transmit+0x14a>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b12:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b14:	f04f 0800 	mov.w	r8, #0
 8005b18:	f8c5 808c 	str.w	r8, [r5, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b1c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    tickstart = HAL_GetTick();
 8005b20:	f7fb faa0 	bl	8001064 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b24:	68ab      	ldr	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8005b26:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize  = Size;
 8005b2c:	f8a5 4054 	strh.w	r4, [r5, #84]	; 0x54
    huart->TxXferCount = Size;
 8005b30:	f8a5 4056 	strh.w	r4, [r5, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b34:	f000 809a 	beq.w	8005c6c <HAL_UART_Transmit+0x194>
    __HAL_UNLOCK(huart);
 8005b38:	2300      	movs	r3, #0
 8005b3a:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 8005b3e:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	b1b3      	cbz	r3, 8005b74 <HAL_UART_Transmit+0x9c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b46:	682c      	ldr	r4, [r5, #0]
 8005b48:	1c71      	adds	r1, r6, #1
 8005b4a:	d126      	bne.n	8005b9a <HAL_UART_Transmit+0xc2>
 8005b4c:	69e2      	ldr	r2, [r4, #28]
 8005b4e:	0612      	lsls	r2, r2, #24
 8005b50:	d5fc      	bpl.n	8005b4c <HAL_UART_Transmit+0x74>
      if (pdata8bits == NULL)
 8005b52:	f1b9 0f00 	cmp.w	r9, #0
 8005b56:	d05b      	beq.n	8005c10 <HAL_UART_Transmit+0x138>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b58:	f819 3b01 	ldrb.w	r3, [r9], #1
 8005b5c:	62a3      	str	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 8005b5e:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8005b62:	3b01      	subs	r3, #1
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	f8a5 3056 	strh.w	r3, [r5, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005b6a:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1e9      	bne.n	8005b48 <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b74:	463b      	mov	r3, r7
 8005b76:	2200      	movs	r2, #0
 8005b78:	2140      	movs	r1, #64	; 0x40
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	9600      	str	r6, [sp, #0]
 8005b7e:	f7ff ff33 	bl	80059e8 <UART_WaitOnFlagUntilTimeout>
 8005b82:	2800      	cmp	r0, #0
 8005b84:	d179      	bne.n	8005c7a <HAL_UART_Transmit+0x1a2>
    huart->gState = HAL_UART_STATE_READY;
 8005b86:	2320      	movs	r3, #32
 8005b88:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 8005b8c:	b003      	add	sp, #12
 8005b8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8005b92:	2001      	movs	r0, #1
}
 8005b94:	b003      	add	sp, #12
 8005b96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b9a:	69e3      	ldr	r3, [r4, #28]
 8005b9c:	061b      	lsls	r3, r3, #24
 8005b9e:	d4d8      	bmi.n	8005b52 <HAL_UART_Transmit+0x7a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ba0:	f7fb fa60 	bl	8001064 <HAL_GetTick>
 8005ba4:	1bc0      	subs	r0, r0, r7
 8005ba6:	4286      	cmp	r6, r0
 8005ba8:	d340      	bcc.n	8005c2c <HAL_UART_Transmit+0x154>
 8005baa:	2e00      	cmp	r6, #0
 8005bac:	d03e      	beq.n	8005c2c <HAL_UART_Transmit+0x154>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bae:	682c      	ldr	r4, [r5, #0]
 8005bb0:	6822      	ldr	r2, [r4, #0]
 8005bb2:	4623      	mov	r3, r4
 8005bb4:	0752      	lsls	r2, r2, #29
 8005bb6:	d5c7      	bpl.n	8005b48 <HAL_UART_Transmit+0x70>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bb8:	69e2      	ldr	r2, [r4, #28]
 8005bba:	0510      	lsls	r0, r2, #20
 8005bbc:	d5c4      	bpl.n	8005b48 <HAL_UART_Transmit+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bc2:	6222      	str	r2, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc4:	e854 2f00 	ldrex	r2, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005bc8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bcc:	e844 2100 	strex	r1, r2, [r4]
 8005bd0:	b139      	cbz	r1, 8005be2 <HAL_UART_Transmit+0x10a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd2:	e853 2f00 	ldrex	r2, [r3]
 8005bd6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bda:	e843 2100 	strex	r1, r2, [r3]
 8005bde:	2900      	cmp	r1, #0
 8005be0:	d1f7      	bne.n	8005bd2 <HAL_UART_Transmit+0xfa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be2:	f103 0208 	add.w	r2, r3, #8
 8005be6:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bea:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bee:	f103 0008 	add.w	r0, r3, #8
 8005bf2:	e840 2100 	strex	r1, r2, [r0]
 8005bf6:	2900      	cmp	r1, #0
 8005bf8:	d1f3      	bne.n	8005be2 <HAL_UART_Transmit+0x10a>
          huart->gState = HAL_UART_STATE_READY;
 8005bfa:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8005bfc:	2003      	movs	r0, #3
          huart->gState = HAL_UART_STATE_READY;
 8005bfe:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8005c02:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005c06:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c0a:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          return HAL_TIMEOUT;
 8005c0e:	e7c1      	b.n	8005b94 <HAL_UART_Transmit+0xbc>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c10:	f838 3b02 	ldrh.w	r3, [r8], #2
 8005c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c18:	e7a0      	b.n	8005b5c <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8005c1a:	2002      	movs	r0, #2
}
 8005c1c:	b003      	add	sp, #12
 8005c1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c22:	689a      	ldr	r2, [r3, #8]
 8005c24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c28:	609a      	str	r2, [r3, #8]
 8005c2a:	e772      	b.n	8005b12 <HAL_UART_Transmit+0x3a>
 8005c2c:	682b      	ldr	r3, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2e:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005c32:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c36:	e843 2100 	strex	r1, r2, [r3]
 8005c3a:	2900      	cmp	r1, #0
 8005c3c:	d1f7      	bne.n	8005c2e <HAL_UART_Transmit+0x156>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3e:	f103 0208 	add.w	r2, r3, #8
 8005c42:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c46:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4a:	f103 0008 	add.w	r0, r3, #8
 8005c4e:	e840 2100 	strex	r1, r2, [r0]
 8005c52:	2900      	cmp	r1, #0
 8005c54:	d1f3      	bne.n	8005c3e <HAL_UART_Transmit+0x166>
        huart->gState = HAL_UART_STATE_READY;
 8005c56:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8005c58:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8005c5a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8005c5e:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005c62:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 8005c66:	b003      	add	sp, #12
 8005c68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c6c:	692b      	ldr	r3, [r5, #16]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f47f af62 	bne.w	8005b38 <HAL_UART_Transmit+0x60>
 8005c74:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 8005c76:	4699      	mov	r9, r3
 8005c78:	e75e      	b.n	8005b38 <HAL_UART_Transmit+0x60>
      return HAL_TIMEOUT;
 8005c7a:	2003      	movs	r0, #3
 8005c7c:	e78a      	b.n	8005b94 <HAL_UART_Transmit+0xbc>
 8005c7e:	bf00      	nop

08005c80 <HAL_UART_Init>:
  if (huart == NULL)
 8005c80:	2800      	cmp	r0, #0
 8005c82:	d066      	beq.n	8005d52 <HAL_UART_Init+0xd2>
{
 8005c84:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8005c86:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8005c8a:	4604      	mov	r4, r0
{
 8005c8c:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_RESET)
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d04c      	beq.n	8005d2c <HAL_UART_Init+0xac>
  huart->gState = HAL_UART_STATE_BUSY;
 8005c92:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8005c94:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005c96:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8005c9a:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c9c:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8005c9e:	f023 0301 	bic.w	r3, r3, #1
 8005ca2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ca4:	f7ff fd5a 	bl	800575c <UART_SetConfig>
 8005ca8:	2801      	cmp	r0, #1
 8005caa:	d03c      	beq.n	8005d26 <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d135      	bne.n	8005d1e <HAL_UART_Init+0x9e>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb2:	2500      	movs	r5, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cb4:	6823      	ldr	r3, [r4, #0]
 8005cb6:	6859      	ldr	r1, [r3, #4]
 8005cb8:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 8005cbc:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cbe:	6899      	ldr	r1, [r3, #8]
 8005cc0:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 8005cc4:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005cc6:	6819      	ldr	r1, [r3, #0]
 8005cc8:	f041 0101 	orr.w	r1, r1, #1
 8005ccc:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cce:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8005cd2:	f7fb f9c7 	bl	8001064 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cd6:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8005cd8:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	0712      	lsls	r2, r2, #28
 8005cde:	d40e      	bmi.n	8005cfe <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	075b      	lsls	r3, r3, #29
 8005ce4:	d427      	bmi.n	8005d36 <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce6:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8005ce8:	2220      	movs	r2, #32
  return HAL_OK;
 8005cea:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8005cec:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8005cf0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005cf4:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cf8:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8005cfa:	b003      	add	sp, #12
 8005cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cfe:	f06f 477e 	mvn.w	r7, #4261412864	; 0xfe000000
 8005d02:	4603      	mov	r3, r0
 8005d04:	462a      	mov	r2, r5
 8005d06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d0a:	4620      	mov	r0, r4
 8005d0c:	9700      	str	r7, [sp, #0]
 8005d0e:	f7ff fe6b 	bl	80059e8 <UART_WaitOnFlagUntilTimeout>
 8005d12:	b9e0      	cbnz	r0, 8005d4e <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d14:	6823      	ldr	r3, [r4, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	075b      	lsls	r3, r3, #29
 8005d1a:	d40c      	bmi.n	8005d36 <HAL_UART_Init+0xb6>
 8005d1c:	e7e3      	b.n	8005ce6 <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 8005d1e:	4620      	mov	r0, r4
 8005d20:	f7ff fe0a 	bl	8005938 <UART_AdvFeatureConfig>
 8005d24:	e7c5      	b.n	8005cb2 <HAL_UART_Init+0x32>
    return HAL_ERROR;
 8005d26:	2001      	movs	r0, #1
}
 8005d28:	b003      	add	sp, #12
 8005d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 8005d2c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8005d30:	f7fa ff72 	bl	8000c18 <HAL_UART_MspInit>
 8005d34:	e7ad      	b.n	8005c92 <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d36:	f06f 457e 	mvn.w	r5, #4261412864	; 0xfe000000
 8005d3a:	4633      	mov	r3, r6
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d42:	4620      	mov	r0, r4
 8005d44:	9500      	str	r5, [sp, #0]
 8005d46:	f7ff fe4f 	bl	80059e8 <UART_WaitOnFlagUntilTimeout>
 8005d4a:	2800      	cmp	r0, #0
 8005d4c:	d0cb      	beq.n	8005ce6 <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 8005d4e:	2003      	movs	r0, #3
 8005d50:	e7d3      	b.n	8005cfa <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 8005d52:	2001      	movs	r0, #1
}
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop

08005d58 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d58:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8005d5c:	2a01      	cmp	r2, #1
 8005d5e:	d017      	beq.n	8005d90 <HAL_UARTEx_DisableFifoMode+0x38>
 8005d60:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 8005d62:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d64:	2100      	movs	r1, #0
{
 8005d66:	b430      	push	{r4, r5}

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8005d68:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d6a:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005d6c:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d70:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8005d72:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d74:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8005d78:	f024 0401 	bic.w	r4, r4, #1
 8005d7c:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d7e:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d80:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d82:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80

  return HAL_OK;
 8005d86:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8005d88:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8005d8c:	bc30      	pop	{r4, r5}
 8005d8e:	4770      	bx	lr
  __HAL_LOCK(huart);
 8005d90:	2002      	movs	r0, #2
}
 8005d92:	4770      	bx	lr

08005d94 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d94:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8005d98:	2a01      	cmp	r2, #1
 8005d9a:	d037      	beq.n	8005e0c <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005da0:	681a      	ldr	r2, [r3, #0]
{
 8005da2:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8005da4:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005da8:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005daa:	6810      	ldr	r0, [r2, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005dac:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8005dae:	f020 0001 	bic.w	r0, r0, #1
 8005db2:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005db4:	6890      	ldr	r0, [r2, #8]
 8005db6:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8005dba:	4301      	orrs	r1, r0
 8005dbc:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005dbe:	b315      	cbz	r5, 8005e06 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005dc0:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005dc2:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005dc4:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005dc8:	4911      	ldr	r1, [pc, #68]	; (8005e10 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
                               (uint16_t)denominator[tx_fifo_threshold];
 8005dca:	4d12      	ldr	r5, [pc, #72]	; (8005e14 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005dcc:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005dd0:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005dd4:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8005dd8:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ddc:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005de0:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005de2:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005de4:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005de8:	fbb1 f1f5 	udiv	r1, r1, r5
 8005dec:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8005df0:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8005df2:	2520      	movs	r5, #32
 8005df4:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005df8:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8005dfa:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8005dfe:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8005e00:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8005e04:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8005e06:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8005e08:	4608      	mov	r0, r1
 8005e0a:	e7ef      	b.n	8005dec <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8005e0c:	2002      	movs	r0, #2
}
 8005e0e:	4770      	bx	lr
 8005e10:	08008d2c 	.word	0x08008d2c
 8005e14:	08008d24 	.word	0x08008d24

08005e18 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8005e18:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8005e1c:	2a01      	cmp	r2, #1
 8005e1e:	d037      	beq.n	8005e90 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 8005e20:	4603      	mov	r3, r0
 8005e22:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e24:	681a      	ldr	r2, [r3, #0]
{
 8005e26:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8005e28:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e2c:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8005e2e:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e30:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8005e32:	f020 0001 	bic.w	r0, r0, #1
 8005e36:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e38:	6890      	ldr	r0, [r2, #8]
 8005e3a:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 8005e3e:	4301      	orrs	r1, r0
 8005e40:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e42:	b315      	cbz	r5, 8005e8a <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e44:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e46:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e48:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e4c:	4911      	ldr	r1, [pc, #68]	; (8005e94 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e4e:	4d12      	ldr	r5, [pc, #72]	; (8005e98 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e50:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e54:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e58:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e5c:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e60:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e64:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e66:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e68:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e6c:	fbb1 f1f5 	udiv	r1, r1, r5
 8005e70:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8005e74:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8005e76:	2520      	movs	r5, #32
 8005e78:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e7c:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8005e7e:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8005e82:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8005e84:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8005e88:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8005e8a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8005e8c:	4608      	mov	r0, r1
 8005e8e:	e7ef      	b.n	8005e70 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8005e90:	2002      	movs	r0, #2
}
 8005e92:	4770      	bx	lr
 8005e94:	08008d2c 	.word	0x08008d2c
 8005e98:	08008d24 	.word	0x08008d24

08005e9c <FMC_NORSRAM_Init>:

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8005e9c:	688b      	ldr	r3, [r1, #8]
{
 8005e9e:	b4f0      	push	{r4, r5, r6, r7}
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8005ea0:	2b08      	cmp	r3, #8
  mask |= FMC_BCR1_CCLKEN;
  mask |= FMC_BCR1_WFDIS;
  mask |= FMC_BCRx_NBLSET;
  mask |= FMC_BCRx_CPSIZE;

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005ea2:	684c      	ldr	r4, [r1, #4]
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8005ea4:	bf0c      	ite	eq
 8005ea6:	f04f 0c40 	moveq.w	ip, #64	; 0x40
 8005eaa:	f04f 0c00 	movne.w	ip, #0
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005eae:	4323      	orrs	r3, r4
 8005eb0:	68cc      	ldr	r4, [r1, #12]
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8005eb2:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005eb4:	4323      	orrs	r3, r4
 8005eb6:	690c      	ldr	r4, [r1, #16]
  btcr_reg |= Init->ContinuousClock;
 8005eb8:	6b0d      	ldr	r5, [r1, #48]	; 0x30
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005eba:	4323      	orrs	r3, r4
 8005ebc:	694c      	ldr	r4, [r1, #20]
 8005ebe:	6bcf      	ldr	r7, [r1, #60]	; 0x3c
 8005ec0:	4323      	orrs	r3, r4
 8005ec2:	698c      	ldr	r4, [r1, #24]
 8005ec4:	4e33      	ldr	r6, [pc, #204]	; (8005f94 <FMC_NORSRAM_Init+0xf8>)
 8005ec6:	4323      	orrs	r3, r4
 8005ec8:	69cc      	ldr	r4, [r1, #28]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8005eca:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005ece:	ea43 0304 	orr.w	r3, r3, r4
 8005ed2:	6a0c      	ldr	r4, [r1, #32]
 8005ed4:	ea43 0304 	orr.w	r3, r3, r4
 8005ed8:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8005eda:	ea43 0304 	orr.w	r3, r3, r4
 8005ede:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8005ee0:	ea43 0304 	orr.w	r3, r3, r4
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8005ee4:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8005ee8:	f024 0401 	bic.w	r4, r4, #1
 8005eec:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005ef0:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8005ef2:	ea43 0304 	orr.w	r3, r3, r4
  btcr_reg |= Init->WriteFifo;
 8005ef6:	6b4c      	ldr	r4, [r1, #52]	; 0x34
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005ef8:	ea43 0305 	orr.w	r3, r3, r5
 8005efc:	ea43 0304 	orr.w	r3, r3, r4
 8005f00:	ea43 0307 	orr.w	r3, r3, r7
 8005f04:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
 8005f08:	ea06 0607 	and.w	r6, r6, r7
 8005f0c:	6b8f      	ldr	r7, [r1, #56]	; 0x38
 8005f0e:	ea43 0307 	orr.w	r3, r3, r7
 8005f12:	ea43 0306 	orr.w	r3, r3, r6
 8005f16:	ea43 030c 	orr.w	r3, r3, ip
 8005f1a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8005f1e:	d01a      	beq.n	8005f56 <FMC_NORSRAM_Init+0xba>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8005f20:	b1d2      	cbz	r2, 8005f58 <FMC_NORSRAM_Init+0xbc>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8005f22:	6803      	ldr	r3, [r0, #0]
 8005f24:	431c      	orrs	r4, r3
 8005f26:	6004      	str	r4, [r0, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 8005f28:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d10f      	bne.n	8005f50 <FMC_NORSRAM_Init+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 8005f30:	6a03      	ldr	r3, [r0, #32]
 8005f32:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8005f34:	0c1b      	lsrs	r3, r3, #16
 8005f36:	041b      	lsls	r3, r3, #16
 8005f38:	430b      	orrs	r3, r1

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 8005f3a:	2a04      	cmp	r2, #4
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 8005f3c:	6203      	str	r3, [r0, #32]
    switch (Init->NSBank)
 8005f3e:	d024      	beq.n	8005f8a <FMC_NORSRAM_Init+0xee>
 8005f40:	d81e      	bhi.n	8005f80 <FMC_NORSRAM_Init+0xe4>
 8005f42:	b19a      	cbz	r2, 8005f6c <FMC_NORSRAM_Init+0xd0>
 8005f44:	2a02      	cmp	r2, #2
 8005f46:	d11b      	bne.n	8005f80 <FMC_NORSRAM_Init+0xe4>
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
        break;

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 8005f48:	6a03      	ldr	r3, [r0, #32]
 8005f4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f4e:	6203      	str	r3, [r0, #32]
        break;
    }
  }

  return HAL_OK;
}
 8005f50:	2000      	movs	r0, #0
 8005f52:	bcf0      	pop	{r4, r5, r6, r7}
 8005f54:	4770      	bx	lr
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8005f56:	b972      	cbnz	r2, 8005f76 <FMC_NORSRAM_Init+0xda>
  if (Init->MaxChipSelectPulse == ENABLE)
 8005f58:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d1f7      	bne.n	8005f50 <FMC_NORSRAM_Init+0xb4>
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 8005f60:	6a03      	ldr	r3, [r0, #32]
 8005f62:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 8005f64:	0c1b      	lsrs	r3, r3, #16
 8005f66:	041b      	lsls	r3, r3, #16
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	6203      	str	r3, [r0, #32]
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 8005f6c:	6a03      	ldr	r3, [r0, #32]
 8005f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f72:	6203      	str	r3, [r0, #32]
        break;
 8005f74:	e7ec      	b.n	8005f50 <FMC_NORSRAM_Init+0xb4>
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8005f76:	6803      	ldr	r3, [r0, #0]
 8005f78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f7c:	6003      	str	r3, [r0, #0]
  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8005f7e:	e7d0      	b.n	8005f22 <FMC_NORSRAM_Init+0x86>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 8005f80:	6a03      	ldr	r3, [r0, #32]
 8005f82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f86:	6203      	str	r3, [r0, #32]
        break;
 8005f88:	e7e2      	b.n	8005f50 <FMC_NORSRAM_Init+0xb4>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 8005f8a:	6a03      	ldr	r3, [r0, #32]
 8005f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f90:	6203      	str	r3, [r0, #32]
        break;
 8005f92:	e7dd      	b.n	8005f50 <FMC_NORSRAM_Init+0xb4>
 8005f94:	ff000480 	.word	0xff000480

08005f98 <FMC_NORSRAM_Timing_Init>:
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8005f98:	694b      	ldr	r3, [r1, #20]
 8005f9a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
{
 8005f9e:	b510      	push	{r4, lr}
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8005fa0:	f103 3cff 	add.w	ip, r3, #4294967295
 8005fa4:	69cc      	ldr	r4, [r1, #28]
 8005fa6:	6853      	ldr	r3, [r2, #4]
 8005fa8:	680b      	ldr	r3, [r1, #0]
 8005faa:	4323      	orrs	r3, r4
 8005fac:	684c      	ldr	r4, [r1, #4]
 8005fae:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8005fb2:	688c      	ldr	r4, [r1, #8]
 8005fb4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8005fb8:	68cc      	ldr	r4, [r1, #12]
 8005fba:	ea43 7384 	orr.w	r3, r3, r4, lsl #30
 8005fbe:	690c      	ldr	r4, [r1, #16]
 8005fc0:	6989      	ldr	r1, [r1, #24]
 8005fc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005fc6:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 8005fca:	3902      	subs	r1, #2
 8005fcc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005fd0:	6053      	str	r3, [r2, #4]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8005fd2:	6803      	ldr	r3, [r0, #0]
 8005fd4:	02db      	lsls	r3, r3, #11
 8005fd6:	d50c      	bpl.n	8005ff2 <FMC_NORSRAM_Timing_Init+0x5a>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8005fd8:	6842      	ldr	r2, [r0, #4]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8005fda:	6843      	ldr	r3, [r0, #4]
 8005fdc:	ea4f 5e0c 	mov.w	lr, ip, lsl #20
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8005fe0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8005fe4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8005fe8:	ea4e 0e02 	orr.w	lr, lr, r2
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8005fec:	ea43 030e 	orr.w	r3, r3, lr
 8005ff0:	6043      	str	r3, [r0, #4]
  }

  return HAL_OK;
}
 8005ff2:	2000      	movs	r0, #0
 8005ff4:	bd10      	pop	{r4, pc}
 8005ff6:	bf00      	nop

08005ff8 <FMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8005ff8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ffc:	d005      	beq.n	800600a <FMC_NORSRAM_Extended_Timing_Init+0x12>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005ffe:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8006002:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8006006:	2000      	movs	r0, #0
 8006008:	4770      	bx	lr
{
 800600a:	b430      	push	{r4, r5}
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800600c:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8006010:	69cd      	ldr	r5, [r1, #28]
 8006012:	680b      	ldr	r3, [r1, #0]
 8006014:	f004 6c7f 	and.w	ip, r4, #267386880	; 0xff00000
 8006018:	684c      	ldr	r4, [r1, #4]
 800601a:	432b      	orrs	r3, r5
 800601c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8006020:	688c      	ldr	r4, [r1, #8]
 8006022:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8006026:	68cc      	ldr	r4, [r1, #12]
 8006028:	6909      	ldr	r1, [r1, #16]
 800602a:	ea43 7384 	orr.w	r3, r3, r4, lsl #30
 800602e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006032:	ea43 030c 	orr.w	r3, r3, ip
 8006036:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 800603a:	bc30      	pop	{r4, r5}
 800603c:	2000      	movs	r0, #0
 800603e:	4770      	bx	lr

08006040 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006044:	680c      	ldr	r4, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006046:	fa94 fca4 	rbit	ip, r4
  return __builtin_clz(value);
 800604a:	fabc fc8c 	clz	ip, ip

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800604e:	fa34 f30c 	lsrs.w	r3, r4, ip
 8006052:	f000 80bc 	beq.w	80061ce <LL_GPIO_Init+0x18e>
      }
    }
    pinpos++;
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006056:	684d      	ldr	r5, [r1, #4]
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8006058:	f04f 0e01 	mov.w	lr, #1
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800605c:	f04f 080f 	mov.w	r8, #15
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006060:	2603      	movs	r6, #3
  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006062:	1e6f      	subs	r7, r5, #1
 8006064:	e020      	b.n	80060a8 <LL_GPIO_Init+0x68>
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006066:	f8d1 9010 	ldr.w	r9, [r1, #16]
 800606a:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800606e:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8006072:	b132      	cbz	r2, 8006082 <LL_GPIO_Init+0x42>
  return __builtin_clz(value);
 8006074:	fab2 f282 	clz	r2, r2
 8006078:	0052      	lsls	r2, r2, #1
 800607a:	fa06 f202 	lsl.w	r2, r6, r2
 800607e:	ea2a 0a02 	bic.w	sl, sl, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006082:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8006086:	2a00      	cmp	r2, #0
 8006088:	d07c      	beq.n	8006184 <LL_GPIO_Init+0x144>
  return __builtin_clz(value);
 800608a:	fab2 f282 	clz	r2, r2
 800608e:	0052      	lsls	r2, r2, #1
 8006090:	fa09 f202 	lsl.w	r2, r9, r2
 8006094:	ea42 020a 	orr.w	r2, r2, sl
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006098:	2d02      	cmp	r5, #2
 800609a:	60c2      	str	r2, [r0, #12]
 800609c:	d03d      	beq.n	800611a <LL_GPIO_Init+0xda>
    pinpos++;
 800609e:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 80060a2:	fa34 f30c 	lsrs.w	r3, r4, ip
 80060a6:	d05e      	beq.n	8006166 <LL_GPIO_Init+0x126>
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 80060a8:	fa0e f30c 	lsl.w	r3, lr, ip
    if (currentpin != 0U)
 80060ac:	4023      	ands	r3, r4
 80060ae:	d0f6      	beq.n	800609e <LL_GPIO_Init+0x5e>
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80060b0:	f8d0 9000 	ldr.w	r9, [r0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060b4:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 80060b8:	b132      	cbz	r2, 80060c8 <LL_GPIO_Init+0x88>
  return __builtin_clz(value);
 80060ba:	fab2 f282 	clz	r2, r2
 80060be:	0052      	lsls	r2, r2, #1
 80060c0:	fa06 f202 	lsl.w	r2, r6, r2
 80060c4:	ea29 0902 	bic.w	r9, r9, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c8:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 80060cc:	2a00      	cmp	r2, #0
 80060ce:	d057      	beq.n	8006180 <LL_GPIO_Init+0x140>
  return __builtin_clz(value);
 80060d0:	fab2 f282 	clz	r2, r2
 80060d4:	0052      	lsls	r2, r2, #1
 80060d6:	fa05 f202 	lsl.w	r2, r5, r2
 80060da:	ea42 0209 	orr.w	r2, r2, r9
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80060de:	2f01      	cmp	r7, #1
 80060e0:	6002      	str	r2, [r0, #0]
 80060e2:	d8c0      	bhi.n	8006066 <LL_GPIO_Init+0x26>
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80060e4:	f8d1 9008 	ldr.w	r9, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80060e8:	f8d0 a008 	ldr.w	sl, [r0, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060ec:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 80060f0:	b132      	cbz	r2, 8006100 <LL_GPIO_Init+0xc0>
  return __builtin_clz(value);
 80060f2:	fab2 f282 	clz	r2, r2
 80060f6:	0052      	lsls	r2, r2, #1
 80060f8:	fa06 f202 	lsl.w	r2, r6, r2
 80060fc:	ea2a 0a02 	bic.w	sl, sl, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006100:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8006104:	2a00      	cmp	r2, #0
 8006106:	d05c      	beq.n	80061c2 <LL_GPIO_Init+0x182>
  return __builtin_clz(value);
 8006108:	fab2 f282 	clz	r2, r2
 800610c:	0052      	lsls	r2, r2, #1
 800610e:	fa09 f202 	lsl.w	r2, r9, r2
 8006112:	ea42 020a 	orr.w	r2, r2, sl
 8006116:	6082      	str	r2, [r0, #8]
}
 8006118:	e7a5      	b.n	8006066 <LL_GPIO_Init+0x26>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800611a:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 800611e:	b39a      	cbz	r2, 8006188 <LL_GPIO_Init+0x148>
  return __builtin_clz(value);
 8006120:	fab2 f282 	clz	r2, r2
        if (POSITION_VAL(currentpin) < 8U)
 8006124:	2a07      	cmp	r2, #7
 8006126:	dc2f      	bgt.n	8006188 <LL_GPIO_Init+0x148>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006128:	f8d1 9014 	ldr.w	r9, [r1, #20]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800612c:	f8d0 a020 	ldr.w	sl, [r0, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006130:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8006134:	b132      	cbz	r2, 8006144 <LL_GPIO_Init+0x104>
  return __builtin_clz(value);
 8006136:	fab2 f282 	clz	r2, r2
 800613a:	0092      	lsls	r2, r2, #2
 800613c:	fa08 f202 	lsl.w	r2, r8, r2
 8006140:	ea2a 0a02 	bic.w	sl, sl, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006144:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8006148:	2b00      	cmp	r3, #0
 800614a:	d03c      	beq.n	80061c6 <LL_GPIO_Init+0x186>
  return __builtin_clz(value);
 800614c:	fab3 f383 	clz	r3, r3
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	fa09 f303 	lsl.w	r3, r9, r3
 8006156:	ea43 030a 	orr.w	r3, r3, sl
    pinpos++;
 800615a:	f10c 0c01 	add.w	ip, ip, #1
 800615e:	6203      	str	r3, [r0, #32]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8006160:	fa34 f30c 	lsrs.w	r3, r4, ip
 8006164:	d1a0      	bne.n	80060a8 <LL_GPIO_Init+0x68>
  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006166:	2f01      	cmp	r7, #1
 8006168:	d807      	bhi.n	800617a <LL_GPIO_Init+0x13a>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800616a:	68ca      	ldr	r2, [r1, #12]
 800616c:	6843      	ldr	r3, [r0, #4]
 800616e:	fb04 f202 	mul.w	r2, r4, r2
 8006172:	ea23 0404 	bic.w	r4, r3, r4
 8006176:	4314      	orrs	r4, r2
 8006178:	6044      	str	r4, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 800617a:	2000      	movs	r0, #0
 800617c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006180:	2240      	movs	r2, #64	; 0x40
 8006182:	e7a8      	b.n	80060d6 <LL_GPIO_Init+0x96>
 8006184:	2240      	movs	r2, #64	; 0x40
 8006186:	e783      	b.n	8006090 <LL_GPIO_Init+0x50>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006188:	694a      	ldr	r2, [r1, #20]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800618a:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24
 800618e:	0a1b      	lsrs	r3, r3, #8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006190:	fa93 faa3 	rbit	sl, r3
  if (value == 0U)
 8006194:	f1ba 0f00 	cmp.w	sl, #0
 8006198:	d007      	beq.n	80061aa <LL_GPIO_Init+0x16a>
  return __builtin_clz(value);
 800619a:	faba fa8a 	clz	sl, sl
 800619e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80061a2:	fa08 fa0a 	lsl.w	sl, r8, sl
 80061a6:	ea29 090a 	bic.w	r9, r9, sl
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061aa:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80061ae:	b163      	cbz	r3, 80061ca <LL_GPIO_Init+0x18a>
  return __builtin_clz(value);
 80061b0:	fab3 f383 	clz	r3, r3
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ba:	ea43 0309 	orr.w	r3, r3, r9
 80061be:	6243      	str	r3, [r0, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80061c0:	e76d      	b.n	800609e <LL_GPIO_Init+0x5e>
 80061c2:	2240      	movs	r2, #64	; 0x40
 80061c4:	e7a3      	b.n	800610e <LL_GPIO_Init+0xce>
 80061c6:	2380      	movs	r3, #128	; 0x80
 80061c8:	e7c3      	b.n	8006152 <LL_GPIO_Init+0x112>
 80061ca:	2380      	movs	r3, #128	; 0x80
 80061cc:	e7f3      	b.n	80061b6 <LL_GPIO_Init+0x176>
  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80061ce:	684f      	ldr	r7, [r1, #4]
 80061d0:	3f01      	subs	r7, #1
 80061d2:	e7c8      	b.n	8006166 <LL_GPIO_Init+0x126>

080061d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061d4:	b084      	sub	sp, #16
 80061d6:	b410      	push	{r4}
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t count = 0U;
 80061d8:	2400      	movs	r4, #0
{
 80061da:	b083      	sub	sp, #12
 80061dc:	f10d 0c14 	add.w	ip, sp, #20
 80061e0:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80061e4:	68c3      	ldr	r3, [r0, #12]
{
 80061e6:	4602      	mov	r2, r0
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80061e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061ec:	60c3      	str	r3, [r0, #12]
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 80061ee:	491a      	ldr	r1, [pc, #104]	; (8006258 <USB_CoreInit+0x84>)
  __IO uint32_t count = 0U;
 80061f0:	9401      	str	r4, [sp, #4]
 80061f2:	e002      	b.n	80061fa <USB_CoreInit+0x26>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061f4:	6913      	ldr	r3, [r2, #16]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	db1a      	blt.n	8006230 <USB_CoreInit+0x5c>
    count++;
 80061fa:	9b01      	ldr	r3, [sp, #4]
 80061fc:	3301      	adds	r3, #1
 80061fe:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8006200:	9b01      	ldr	r3, [sp, #4]
 8006202:	428b      	cmp	r3, r1
 8006204:	d9f6      	bls.n	80061f4 <USB_CoreInit+0x20>
      return HAL_TIMEOUT;
 8006206:	2003      	movs	r0, #3
  if (cfg.battery_charging_enable == 0U)
 8006208:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800620a:	b943      	cbnz	r3, 800621e <USB_CoreInit+0x4a>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800620c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800620e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006212:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006214:	b003      	add	sp, #12
 8006216:	f85d 4b04 	ldr.w	r4, [sp], #4
 800621a:	b004      	add	sp, #16
 800621c:	4770      	bx	lr
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800621e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006224:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006226:	b003      	add	sp, #12
 8006228:	f85d 4b04 	ldr.w	r4, [sp], #4
 800622c:	b004      	add	sp, #16
 800622e:	4770      	bx	lr

  /* Core Soft Reset */
  count = 0U;
 8006230:	2300      	movs	r3, #0
 8006232:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006234:	6913      	ldr	r3, [r2, #16]

  do
  {
    count++;

    if (count > 200000U)
 8006236:	4908      	ldr	r1, [pc, #32]	; (8006258 <USB_CoreInit+0x84>)
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006238:	f043 0301 	orr.w	r3, r3, #1
 800623c:	6113      	str	r3, [r2, #16]
 800623e:	e003      	b.n	8006248 <USB_CoreInit+0x74>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006240:	6910      	ldr	r0, [r2, #16]
 8006242:	f010 0001 	ands.w	r0, r0, #1
 8006246:	d0df      	beq.n	8006208 <USB_CoreInit+0x34>
    count++;
 8006248:	9b01      	ldr	r3, [sp, #4]
 800624a:	3301      	adds	r3, #1
 800624c:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800624e:	9b01      	ldr	r3, [sp, #4]
 8006250:	428b      	cmp	r3, r1
 8006252:	d9f5      	bls.n	8006240 <USB_CoreInit+0x6c>
 8006254:	e7d7      	b.n	8006206 <USB_CoreInit+0x32>
 8006256:	bf00      	nop
 8006258:	00030d40 	.word	0x00030d40

0800625c <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800625c:	2a02      	cmp	r2, #2
{
 800625e:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 8006260:	d00b      	beq.n	800627a <USB_SetTurnaroundTime+0x1e>
 8006262:	f44f 5c10 	mov.w	ip, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006266:	68d9      	ldr	r1, [r3, #12]
}
 8006268:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800626a:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 800626e:	60d9      	str	r1, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006270:	68da      	ldr	r2, [r3, #12]
 8006272:	ea42 020c 	orr.w	r2, r2, ip
 8006276:	60da      	str	r2, [r3, #12]
}
 8006278:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800627a:	4a26      	ldr	r2, [pc, #152]	; (8006314 <USB_SetTurnaroundTime+0xb8>)
 800627c:	4826      	ldr	r0, [pc, #152]	; (8006318 <USB_SetTurnaroundTime+0xbc>)
 800627e:	440a      	add	r2, r1
 8006280:	4282      	cmp	r2, r0
 8006282:	d932      	bls.n	80062ea <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006284:	4a25      	ldr	r2, [pc, #148]	; (800631c <USB_SetTurnaroundTime+0xc0>)
 8006286:	4826      	ldr	r0, [pc, #152]	; (8006320 <USB_SetTurnaroundTime+0xc4>)
 8006288:	440a      	add	r2, r1
 800628a:	4282      	cmp	r2, r0
 800628c:	d930      	bls.n	80062f0 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800628e:	4825      	ldr	r0, [pc, #148]	; (8006324 <USB_SetTurnaroundTime+0xc8>)
 8006290:	f5a1 0274 	sub.w	r2, r1, #15990784	; 0xf40000
 8006294:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8006298:	4282      	cmp	r2, r0
 800629a:	d92c      	bls.n	80062f6 <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800629c:	4822      	ldr	r0, [pc, #136]	; (8006328 <USB_SetTurnaroundTime+0xcc>)
 800629e:	f1a1 7283 	sub.w	r2, r1, #17170432	; 0x1060000
 80062a2:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 80062a6:	4282      	cmp	r2, r0
 80062a8:	d328      	bcc.n	80062fc <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80062aa:	4a20      	ldr	r2, [pc, #128]	; (800632c <USB_SetTurnaroundTime+0xd0>)
 80062ac:	4820      	ldr	r0, [pc, #128]	; (8006330 <USB_SetTurnaroundTime+0xd4>)
 80062ae:	440a      	add	r2, r1
 80062b0:	4282      	cmp	r2, r0
 80062b2:	d926      	bls.n	8006302 <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80062b4:	4a1f      	ldr	r2, [pc, #124]	; (8006334 <USB_SetTurnaroundTime+0xd8>)
 80062b6:	4820      	ldr	r0, [pc, #128]	; (8006338 <USB_SetTurnaroundTime+0xdc>)
 80062b8:	440a      	add	r2, r1
 80062ba:	4282      	cmp	r2, r0
 80062bc:	d324      	bcc.n	8006308 <USB_SetTurnaroundTime+0xac>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80062be:	4a1f      	ldr	r2, [pc, #124]	; (800633c <USB_SetTurnaroundTime+0xe0>)
 80062c0:	481f      	ldr	r0, [pc, #124]	; (8006340 <USB_SetTurnaroundTime+0xe4>)
 80062c2:	440a      	add	r2, r1
 80062c4:	4282      	cmp	r2, r0
 80062c6:	d3cc      	bcc.n	8006262 <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80062c8:	481e      	ldr	r0, [pc, #120]	; (8006344 <USB_SetTurnaroundTime+0xe8>)
 80062ca:	f1a1 72b7 	sub.w	r2, r1, #23986176	; 0x16e0000
 80062ce:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 80062d2:	4282      	cmp	r2, r0
 80062d4:	d31b      	bcc.n	800630e <USB_SetTurnaroundTime+0xb2>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80062d6:	4a1c      	ldr	r2, [pc, #112]	; (8006348 <USB_SetTurnaroundTime+0xec>)
 80062d8:	481c      	ldr	r0, [pc, #112]	; (800634c <USB_SetTurnaroundTime+0xf0>)
 80062da:	440a      	add	r2, r1
 80062dc:	4282      	cmp	r2, r0
 80062de:	bf34      	ite	cc
 80062e0:	f44f 5ce0 	movcc.w	ip, #7168	; 0x1c00
 80062e4:	f44f 5cc0 	movcs.w	ip, #6144	; 0x1800
 80062e8:	e7bd      	b.n	8006266 <USB_SetTurnaroundTime+0xa>
 80062ea:	f44f 5c70 	mov.w	ip, #15360	; 0x3c00
 80062ee:	e7ba      	b.n	8006266 <USB_SetTurnaroundTime+0xa>
 80062f0:	f44f 5c60 	mov.w	ip, #14336	; 0x3800
 80062f4:	e7b7      	b.n	8006266 <USB_SetTurnaroundTime+0xa>
 80062f6:	f44f 5c50 	mov.w	ip, #13312	; 0x3400
 80062fa:	e7b4      	b.n	8006266 <USB_SetTurnaroundTime+0xa>
 80062fc:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
 8006300:	e7b1      	b.n	8006266 <USB_SetTurnaroundTime+0xa>
 8006302:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
 8006306:	e7ae      	b.n	8006266 <USB_SetTurnaroundTime+0xa>
 8006308:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
 800630c:	e7ab      	b.n	8006266 <USB_SetTurnaroundTime+0xa>
 800630e:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
 8006312:	e7a8      	b.n	8006266 <USB_SetTurnaroundTime+0xa>
 8006314:	ff275340 	.word	0xff275340
 8006318:	000c34ff 	.word	0x000c34ff
 800631c:	ff1b1e40 	.word	0xff1b1e40
 8006320:	000f423f 	.word	0x000f423f
 8006324:	00124f7f 	.word	0x00124f7f
 8006328:	0013d620 	.word	0x0013d620
 800632c:	fee5b660 	.word	0xfee5b660
 8006330:	0016e35f 	.word	0x0016e35f
 8006334:	feced300 	.word	0xfeced300
 8006338:	001b7740 	.word	0x001b7740
 800633c:	feb35bc0 	.word	0xfeb35bc0
 8006340:	002191c0 	.word	0x002191c0
 8006344:	00387520 	.word	0x00387520
 8006348:	fe5954e0 	.word	0xfe5954e0
 800634c:	00419ce0 	.word	0x00419ce0

08006350 <USB_DisableGlobalInt>:
{
 8006350:	4603      	mov	r3, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006352:	689a      	ldr	r2, [r3, #8]
}
 8006354:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006356:	f022 0201 	bic.w	r2, r2, #1
 800635a:	609a      	str	r2, [r3, #8]
}
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop

08006360 <USB_SetCurrentMode>:
{
 8006360:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006362:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8006364:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006366:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
{
 800636a:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800636c:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800636e:	d017      	beq.n	80063a0 <USB_SetCurrentMode+0x40>
  else if (mode == USB_DEVICE_MODE)
 8006370:	b9a1      	cbnz	r1, 800639c <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006372:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 8006374:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006376:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800637a:	60c3      	str	r3, [r0, #12]
 800637c:	e001      	b.n	8006382 <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800637e:	2c32      	cmp	r4, #50	; 0x32
 8006380:	d00c      	beq.n	800639c <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 8006382:	2001      	movs	r0, #1
 8006384:	f7fa fe74 	bl	8001070 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8006388:	696b      	ldr	r3, [r5, #20]
      ms++;
 800638a:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800638c:	07db      	lsls	r3, r3, #31
 800638e:	d4f6      	bmi.n	800637e <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 8006390:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 8006394:	fab0 f080 	clz	r0, r0
 8006398:	0940      	lsrs	r0, r0, #5
}
 800639a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800639c:	2001      	movs	r0, #1
}
 800639e:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80063a0:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 80063a2:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80063a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063a8:	60c3      	str	r3, [r0, #12]
 80063aa:	e001      	b.n	80063b0 <USB_SetCurrentMode+0x50>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80063ac:	2c32      	cmp	r4, #50	; 0x32
 80063ae:	d0f5      	beq.n	800639c <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 80063b0:	2001      	movs	r0, #1
 80063b2:	f7fa fe5d 	bl	8001070 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 80063b6:	696b      	ldr	r3, [r5, #20]
      ms++;
 80063b8:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80063ba:	07da      	lsls	r2, r3, #31
 80063bc:	d5f6      	bpl.n	80063ac <USB_SetCurrentMode+0x4c>
    return HAL_ERROR;
 80063be:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 80063c2:	fab0 f080 	clz	r0, r0
 80063c6:	0940      	lsrs	r0, r0, #5
 80063c8:	e7e7      	b.n	800639a <USB_SetCurrentMode+0x3a>
 80063ca:	bf00      	nop

080063cc <USB_DevInit>:
{
 80063cc:	b084      	sub	sp, #16
 80063ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063d2:	b083      	sub	sp, #12
 80063d4:	ac0b      	add	r4, sp, #44	; 0x2c
 80063d6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    USBx->DIEPTXF[i] = 0U;
 80063da:	2300      	movs	r3, #0
 80063dc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80063de:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 80063e2:	460c      	mov	r4, r1
 80063e4:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 80063e8:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 80063ec:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 80063f0:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 80063f4:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 80063f8:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
 80063fc:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 8006400:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
 8006404:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
 8006408:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
 800640c:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
 8006410:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
 8006414:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
 8006418:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 800641c:	2d00      	cmp	r5, #0
 800641e:	f040 80a9 	bne.w	8006574 <USB_DevInit+0x1a8>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006422:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8006426:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
 800642a:	f043 0302 	orr.w	r3, r3, #2
 800642e:	f8cc 3004 	str.w	r3, [ip, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006432:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006434:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006438:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800643a:	6803      	ldr	r3, [r0, #0]
 800643c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006440:	6003      	str	r3, [r0, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006442:	6803      	ldr	r3, [r0, #0]
 8006444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006448:	6003      	str	r3, [r0, #0]
  USBx_PCGCCTL = 0U;
 800644a:	2100      	movs	r1, #0
 800644c:	f8c0 1e00 	str.w	r1, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006450:	f8dc 3000 	ldr.w	r3, [ip]
    if (count > 200000U)
 8006454:	4a5c      	ldr	r2, [pc, #368]	; (80065c8 <USB_DevInit+0x1fc>)
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006456:	f8cc 3000 	str.w	r3, [ip]
  USBx_DEVICE->DCFG |= speed;
 800645a:	f8dc 3000 	ldr.w	r3, [ip]
 800645e:	f043 0303 	orr.w	r3, r3, #3
 8006462:	f8cc 3000 	str.w	r3, [ip]
  __IO uint32_t count = 0U;
 8006466:	9100      	str	r1, [sp, #0]
 8006468:	e003      	b.n	8006472 <USB_DevInit+0xa6>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800646a:	6903      	ldr	r3, [r0, #16]
 800646c:	2b00      	cmp	r3, #0
 800646e:	f2c0 8098 	blt.w	80065a2 <USB_DevInit+0x1d6>
    count++;
 8006472:	9b00      	ldr	r3, [sp, #0]
 8006474:	3301      	adds	r3, #1
 8006476:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 8006478:	9b00      	ldr	r3, [sp, #0]
 800647a:	4293      	cmp	r3, r2
 800647c:	d9f5      	bls.n	800646a <USB_DevInit+0x9e>
    ret = HAL_ERROR;
 800647e:	2101      	movs	r1, #1
  __IO uint32_t count = 0U;
 8006480:	2300      	movs	r3, #0
    if (count > 200000U)
 8006482:	4a51      	ldr	r2, [pc, #324]	; (80065c8 <USB_DevInit+0x1fc>)
  __IO uint32_t count = 0U;
 8006484:	9301      	str	r3, [sp, #4]
 8006486:	e002      	b.n	800648e <USB_DevInit+0xc2>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006488:	6903      	ldr	r3, [r0, #16]
 800648a:	2b00      	cmp	r3, #0
 800648c:	db79      	blt.n	8006582 <USB_DevInit+0x1b6>
    count++;
 800648e:	9b01      	ldr	r3, [sp, #4]
 8006490:	3301      	adds	r3, #1
 8006492:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8006494:	9b01      	ldr	r3, [sp, #4]
 8006496:	4293      	cmp	r3, r2
 8006498:	d9f6      	bls.n	8006488 <USB_DevInit+0xbc>
    ret = HAL_ERROR;
 800649a:	2101      	movs	r1, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800649c:	2200      	movs	r2, #0
 800649e:	f8cc 2010 	str.w	r2, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80064a2:	f8cc 2014 	str.w	r2, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80064a6:	f8cc 201c 	str.w	r2, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064aa:	b1e4      	cbz	r4, 80064e6 <USB_DevInit+0x11a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80064ac:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80064b0:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80064b4:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
      USBx_INEP(i)->DIEPCTL = 0U;
 80064b8:	4617      	mov	r7, r2
 80064ba:	f500 6310 	add.w	r3, r0, #2304	; 0x900
 80064be:	e008      	b.n	80064d2 <USB_DevInit+0x106>
 80064c0:	601f      	str	r7, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064c2:	3201      	adds	r2, #1
 80064c4:	4294      	cmp	r4, r2
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80064c6:	611f      	str	r7, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80064c8:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064cc:	f103 0320 	add.w	r3, r3, #32
 80064d0:	d032      	beq.n	8006538 <USB_DevInit+0x16c>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064d2:	681e      	ldr	r6, [r3, #0]
 80064d4:	2e00      	cmp	r6, #0
 80064d6:	daf3      	bge.n	80064c0 <USB_DevInit+0xf4>
      if (i == 0U)
 80064d8:	b112      	cbz	r2, 80064e0 <USB_DevInit+0x114>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80064da:	f8c3 8000 	str.w	r8, [r3]
 80064de:	e7f0      	b.n	80064c2 <USB_DevInit+0xf6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80064e0:	f8c3 9000 	str.w	r9, [r3]
 80064e4:	e7ed      	b.n	80064c2 <USB_DevInit+0xf6>
  USBx->GINTMSK = 0U;
 80064e6:	2400      	movs	r4, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 80064e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80064ec:	f8dc 3010 	ldr.w	r3, [ip, #16]
 80064f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064f4:	f8cc 3010 	str.w	r3, [ip, #16]
  if (cfg.dma_enable == 0U)
 80064f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  USBx->GINTMSK = 0U;
 80064fa:	6184      	str	r4, [r0, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80064fc:	6142      	str	r2, [r0, #20]
  if (cfg.dma_enable == 0U)
 80064fe:	b91b      	cbnz	r3, 8006508 <USB_DevInit+0x13c>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006500:	6983      	ldr	r3, [r0, #24]
 8006502:	f043 0310 	orr.w	r3, r3, #16
 8006506:	6183      	str	r3, [r0, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006508:	6982      	ldr	r2, [r0, #24]
 800650a:	4b30      	ldr	r3, [pc, #192]	; (80065cc <USB_DevInit+0x200>)
 800650c:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 800650e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006510:	6183      	str	r3, [r0, #24]
  if (cfg.Sof_enable != 0U)
 8006512:	b11a      	cbz	r2, 800651c <USB_DevInit+0x150>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006514:	6983      	ldr	r3, [r0, #24]
 8006516:	f043 0308 	orr.w	r3, r3, #8
 800651a:	6183      	str	r3, [r0, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800651c:	2d01      	cmp	r5, #1
 800651e:	d105      	bne.n	800652c <USB_DevInit+0x160>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006520:	6983      	ldr	r3, [r0, #24]
 8006522:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006526:	f043 0304 	orr.w	r3, r3, #4
 800652a:	6183      	str	r3, [r0, #24]
}
 800652c:	4608      	mov	r0, r1
 800652e:	b003      	add	sp, #12
 8006530:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006534:	b004      	add	sp, #16
 8006536:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006538:	2200      	movs	r2, #0
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800653a:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800653e:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006542:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006546:	4617      	mov	r7, r2
 8006548:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 800654c:	e008      	b.n	8006560 <USB_DevInit+0x194>
 800654e:	601f      	str	r7, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006550:	3201      	adds	r2, #1
 8006552:	4294      	cmp	r4, r2
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006554:	611f      	str	r7, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006556:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800655a:	f103 0320 	add.w	r3, r3, #32
 800655e:	d0c2      	beq.n	80064e6 <USB_DevInit+0x11a>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006560:	681e      	ldr	r6, [r3, #0]
 8006562:	2e00      	cmp	r6, #0
 8006564:	daf3      	bge.n	800654e <USB_DevInit+0x182>
      if (i == 0U)
 8006566:	b112      	cbz	r2, 800656e <USB_DevInit+0x1a2>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006568:	f8c3 8000 	str.w	r8, [r3]
 800656c:	e7f0      	b.n	8006550 <USB_DevInit+0x184>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800656e:	f8c3 9000 	str.w	r9, [r3]
 8006572:	e7ed      	b.n	8006550 <USB_DevInit+0x184>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006574:	6b83      	ldr	r3, [r0, #56]	; 0x38
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006576:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800657a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800657e:	6383      	str	r3, [r0, #56]	; 0x38
 8006580:	e763      	b.n	800644a <USB_DevInit+0x7e>
  count = 0U;
 8006582:	2300      	movs	r3, #0
 8006584:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006586:	2310      	movs	r3, #16
    if (count > 200000U)
 8006588:	4a0f      	ldr	r2, [pc, #60]	; (80065c8 <USB_DevInit+0x1fc>)
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800658a:	6103      	str	r3, [r0, #16]
 800658c:	e002      	b.n	8006594 <USB_DevInit+0x1c8>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800658e:	6903      	ldr	r3, [r0, #16]
 8006590:	06db      	lsls	r3, r3, #27
 8006592:	d583      	bpl.n	800649c <USB_DevInit+0xd0>
    count++;
 8006594:	9b01      	ldr	r3, [sp, #4]
 8006596:	3301      	adds	r3, #1
 8006598:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800659a:	9b01      	ldr	r3, [sp, #4]
 800659c:	4293      	cmp	r3, r2
 800659e:	d9f6      	bls.n	800658e <USB_DevInit+0x1c2>
 80065a0:	e77b      	b.n	800649a <USB_DevInit+0xce>
  count = 0U;
 80065a2:	2100      	movs	r1, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80065a4:	f44f 6384 	mov.w	r3, #1056	; 0x420
  count = 0U;
 80065a8:	9100      	str	r1, [sp, #0]
    if (count > 200000U)
 80065aa:	4a07      	ldr	r2, [pc, #28]	; (80065c8 <USB_DevInit+0x1fc>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80065ac:	6103      	str	r3, [r0, #16]
 80065ae:	e004      	b.n	80065ba <USB_DevInit+0x1ee>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80065b0:	6901      	ldr	r1, [r0, #16]
 80065b2:	f011 0120 	ands.w	r1, r1, #32
 80065b6:	f43f af63 	beq.w	8006480 <USB_DevInit+0xb4>
    count++;
 80065ba:	9b00      	ldr	r3, [sp, #0]
 80065bc:	3301      	adds	r3, #1
 80065be:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 80065c0:	9b00      	ldr	r3, [sp, #0]
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d9f4      	bls.n	80065b0 <USB_DevInit+0x1e4>
 80065c6:	e75a      	b.n	800647e <USB_DevInit+0xb2>
 80065c8:	00030d40 	.word	0x00030d40
 80065cc:	803c3800 	.word	0x803c3800

080065d0 <USB_FlushTxFifo>:
  __IO uint32_t count = 0U;
 80065d0:	2300      	movs	r3, #0
{
 80065d2:	b082      	sub	sp, #8
    if (count > 200000U)
 80065d4:	4a12      	ldr	r2, [pc, #72]	; (8006620 <USB_FlushTxFifo+0x50>)
  __IO uint32_t count = 0U;
 80065d6:	9301      	str	r3, [sp, #4]
 80065d8:	e002      	b.n	80065e0 <USB_FlushTxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065da:	6903      	ldr	r3, [r0, #16]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	db08      	blt.n	80065f2 <USB_FlushTxFifo+0x22>
    count++;
 80065e0:	9b01      	ldr	r3, [sp, #4]
 80065e2:	3301      	adds	r3, #1
 80065e4:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80065e6:	9b01      	ldr	r3, [sp, #4]
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d9f6      	bls.n	80065da <USB_FlushTxFifo+0xa>
      return HAL_TIMEOUT;
 80065ec:	2003      	movs	r0, #3
}
 80065ee:	b002      	add	sp, #8
 80065f0:	4770      	bx	lr
  count = 0U;
 80065f2:	2300      	movs	r3, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80065f4:	0189      	lsls	r1, r1, #6
 80065f6:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 80065fa:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80065fc:	4a08      	ldr	r2, [pc, #32]	; (8006620 <USB_FlushTxFifo+0x50>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80065fe:	6101      	str	r1, [r0, #16]
 8006600:	e003      	b.n	800660a <USB_FlushTxFifo+0x3a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006602:	6903      	ldr	r3, [r0, #16]
 8006604:	f013 0320 	ands.w	r3, r3, #32
 8006608:	d006      	beq.n	8006618 <USB_FlushTxFifo+0x48>
    count++;
 800660a:	9b01      	ldr	r3, [sp, #4]
 800660c:	3301      	adds	r3, #1
 800660e:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8006610:	9b01      	ldr	r3, [sp, #4]
 8006612:	4293      	cmp	r3, r2
 8006614:	d9f5      	bls.n	8006602 <USB_FlushTxFifo+0x32>
 8006616:	e7e9      	b.n	80065ec <USB_FlushTxFifo+0x1c>
  return HAL_OK;
 8006618:	4618      	mov	r0, r3
}
 800661a:	b002      	add	sp, #8
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	00030d40 	.word	0x00030d40

08006624 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006624:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006628:	f013 0006 	ands.w	r0, r3, #6
 800662c:	d004      	beq.n	8006638 <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 800662e:	f013 0f02 	tst.w	r3, #2
 8006632:	bf14      	ite	ne
 8006634:	2002      	movne	r0, #2
 8006636:	200f      	moveq	r0, #15
}
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop

0800663c <USB_EPStopXfer>:
  __IO uint32_t count = 0U;
 800663c:	2300      	movs	r3, #0
{
 800663e:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8006640:	9301      	str	r3, [sp, #4]
  if (ep->is_in == 1U)
 8006642:	784b      	ldrb	r3, [r1, #1]
 8006644:	2b01      	cmp	r3, #1
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006646:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8006648:	d020      	beq.n	800668c <USB_EPStopXfer+0x50>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800664a:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 800664e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8006652:	6803      	ldr	r3, [r0, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	db02      	blt.n	800665e <USB_EPStopXfer+0x22>
  HAL_StatusTypeDef ret = HAL_OK;
 8006658:	2000      	movs	r0, #0
}
 800665a:	b002      	add	sp, #8
 800665c:	4770      	bx	lr
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800665e:	6803      	ldr	r3, [r0, #0]
        if (count > 10000U)
 8006660:	f242 7210 	movw	r2, #10000	; 0x2710
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006664:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006668:	6003      	str	r3, [r0, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800666a:	6803      	ldr	r3, [r0, #0]
 800666c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006670:	6003      	str	r3, [r0, #0]
 8006672:	e002      	b.n	800667a <USB_EPStopXfer+0x3e>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006674:	6803      	ldr	r3, [r0, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	daee      	bge.n	8006658 <USB_EPStopXfer+0x1c>
        count++;
 800667a:	9b01      	ldr	r3, [sp, #4]
 800667c:	3301      	adds	r3, #1
 800667e:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8006680:	9b01      	ldr	r3, [sp, #4]
 8006682:	4293      	cmp	r3, r2
 8006684:	d9f6      	bls.n	8006674 <USB_EPStopXfer+0x38>
          ret = HAL_ERROR;
 8006686:	2001      	movs	r0, #1
}
 8006688:	b002      	add	sp, #8
 800668a:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800668c:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8006690:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	2a00      	cmp	r2, #0
 8006698:	dade      	bge.n	8006658 <USB_EPStopXfer+0x1c>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800669a:	681a      	ldr	r2, [r3, #0]
        if (count > 10000U)
 800669c:	f242 7110 	movw	r1, #10000	; 0x2710
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80066a0:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80066a4:	601a      	str	r2, [r3, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80066ac:	601a      	str	r2, [r3, #0]
 80066ae:	e002      	b.n	80066b6 <USB_EPStopXfer+0x7a>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	2a00      	cmp	r2, #0
 80066b4:	dad0      	bge.n	8006658 <USB_EPStopXfer+0x1c>
        count++;
 80066b6:	9a01      	ldr	r2, [sp, #4]
 80066b8:	3201      	adds	r2, #1
 80066ba:	9201      	str	r2, [sp, #4]
        if (count > 10000U)
 80066bc:	9a01      	ldr	r2, [sp, #4]
 80066be:	428a      	cmp	r2, r1
 80066c0:	d9f6      	bls.n	80066b0 <USB_EPStopXfer+0x74>
 80066c2:	e7e0      	b.n	8006686 <USB_EPStopXfer+0x4a>

080066c4 <USB_WritePacket>:
{
 80066c4:	b410      	push	{r4}
 80066c6:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 80066ca:	b964      	cbnz	r4, 80066e6 <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 80066cc:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 80066ce:	089b      	lsrs	r3, r3, #2
 80066d0:	d009      	beq.n	80066e6 <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80066d2:	3201      	adds	r2, #1
 80066d4:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 80066d8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80066dc:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 80066e0:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80066e2:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 80066e4:	d1fa      	bne.n	80066dc <USB_WritePacket+0x18>
}
 80066e6:	2000      	movs	r0, #0
 80066e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop

080066f0 <USB_ReadPacket>:
  for (i = 0U; i < count32b; i++)
 80066f0:	ea5f 0c92 	movs.w	ip, r2, lsr #2
{
 80066f4:	b570      	push	{r4, r5, r6, lr}
 80066f6:	4605      	mov	r5, r0
  uint16_t remaining_bytes = len % 4U;
 80066f8:	f002 0603 	and.w	r6, r2, #3
  for (i = 0U; i < count32b; i++)
 80066fc:	d01e      	beq.n	800673c <USB_ReadPacket+0x4c>
  uint8_t *pDest = dest;
 80066fe:	460a      	mov	r2, r1
  for (i = 0U; i < count32b; i++)
 8006700:	2300      	movs	r3, #0
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006702:	f500 5e80 	add.w	lr, r0, #4096	; 0x1000
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006706:	f8de 4000 	ldr.w	r4, [lr]
  for (i = 0U; i < count32b; i++)
 800670a:	3301      	adds	r3, #1
 800670c:	459c      	cmp	ip, r3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800670e:	f842 4b04 	str.w	r4, [r2], #4
  for (i = 0U; i < count32b; i++)
 8006712:	d1f8      	bne.n	8006706 <USB_ReadPacket+0x16>
    pDest++;
 8006714:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  if (remaining_bytes != 0U)
 8006718:	b17e      	cbz	r6, 800673a <USB_ReadPacket+0x4a>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800671a:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
 800671e:	682a      	ldr	r2, [r5, #0]
      remaining_bytes--;
 8006720:	1e73      	subs	r3, r6, #1
 8006722:	b29b      	uxth	r3, r3
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006724:	7002      	strb	r2, [r0, #0]
    } while (remaining_bytes != 0U);
 8006726:	b13b      	cbz	r3, 8006738 <USB_ReadPacket+0x48>
 8006728:	2b01      	cmp	r3, #1
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800672a:	ea4f 2112 	mov.w	r1, r2, lsr #8
 800672e:	bf18      	it	ne
 8006730:	0c12      	lsrne	r2, r2, #16
 8006732:	7041      	strb	r1, [r0, #1]
 8006734:	bf18      	it	ne
 8006736:	7082      	strbne	r2, [r0, #2]
      pDest++;
 8006738:	4430      	add	r0, r6
}
 800673a:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 800673c:	4608      	mov	r0, r1
 800673e:	e7eb      	b.n	8006718 <USB_ReadPacket+0x28>

08006740 <USB_DevDisconnect>:
{
 8006740:	4603      	mov	r3, r0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006742:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006746:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800674a:	f022 0203 	bic.w	r2, r2, #3
 800674e:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006752:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
}
 8006756:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006758:	f043 0302 	orr.w	r3, r3, #2
 800675c:	604b      	str	r3, [r1, #4]
}
 800675e:	4770      	bx	lr

08006760 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8006760:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8006762:	6980      	ldr	r0, [r0, #24]
}
 8006764:	4010      	ands	r0, r2
 8006766:	4770      	bx	lr

08006768 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8006768:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800676c:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 8006770:	4018      	ands	r0, r3
}
 8006772:	0c00      	lsrs	r0, r0, #16
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop

08006778 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8006778:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800677c:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 8006780:	4018      	ands	r0, r3
}
 8006782:	b280      	uxth	r0, r0
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop

08006788 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006788:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800678c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006790:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006794:	6940      	ldr	r0, [r0, #20]
}
 8006796:	4010      	ands	r0, r2
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop

0800679c <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 800679c:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 80067a0:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80067a4:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80067a8:	f001 010f 	and.w	r1, r1, #15
 80067ac:	40cb      	lsrs	r3, r1
 80067ae:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80067b0:	f8d0 0908 	ldr.w	r0, [r0, #2312]	; 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	4313      	orrs	r3, r2
}
 80067b8:	4018      	ands	r0, r3
 80067ba:	4770      	bx	lr

080067bc <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80067bc:	6940      	ldr	r0, [r0, #20]
}
 80067be:	f000 0001 	and.w	r0, r0, #1
 80067c2:	4770      	bx	lr

080067c4 <USB_ActivateSetup>:
{
 80067c4:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80067c6:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80067ca:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80067ce:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 80067d2:	f022 0207 	bic.w	r2, r2, #7
 80067d6:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80067da:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
}
 80067de:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80067e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067e4:	604b      	str	r3, [r1, #4]
}
 80067e6:	4770      	bx	lr

080067e8 <USB_EP0_OutStart>:
{
 80067e8:	b410      	push	{r4}
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80067ea:	4b14      	ldr	r3, [pc, #80]	; (800683c <USB_EP0_OutStart+0x54>)
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80067ec:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80067ee:	429c      	cmp	r4, r3
 80067f0:	d81a      	bhi.n	8006828 <USB_EP0_OutStart+0x40>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067f2:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80067f6:	2300      	movs	r3, #0
 80067f8:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80067fa:	6903      	ldr	r3, [r0, #16]
  if (dma == 1U)
 80067fc:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80067fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006802:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006804:	6903      	ldr	r3, [r0, #16]
 8006806:	f043 0318 	orr.w	r3, r3, #24
 800680a:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800680c:	6903      	ldr	r3, [r0, #16]
 800680e:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006812:	6103      	str	r3, [r0, #16]
  if (dma == 1U)
 8006814:	d104      	bne.n	8006820 <USB_EP0_OutStart+0x38>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006816:	6142      	str	r2, [r0, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006818:	6803      	ldr	r3, [r0, #0]
 800681a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800681e:	6003      	str	r3, [r0, #0]
}
 8006820:	2000      	movs	r0, #0
 8006822:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006826:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006828:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800682c:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8006830:	2b00      	cmp	r3, #0
 8006832:	dae0      	bge.n	80067f6 <USB_EP0_OutStart+0xe>
}
 8006834:	2000      	movs	r0, #0
 8006836:	f85d 4b04 	ldr.w	r4, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	4f54300a 	.word	0x4f54300a

08006840 <loopback_tcps>:
#include "wizchip_conf.h"

#if LOOPBACK_MODE == LOOPBACK_MAIN_NOBLCOK

int32_t loopback_tcps(uint8_t sn, uint8_t* buf, uint16_t port)
{
 8006840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#ifdef _LOOPBACK_DEBUG_
   uint8_t destip[4];
   uint16_t destport;
#endif

   switch(getSn_SR(sn))
 8006844:	f100 0408 	add.w	r4, r0, #8
 8006848:	01a4      	lsls	r4, r4, #6
{
 800684a:	4605      	mov	r5, r0
 800684c:	b085      	sub	sp, #20
   switch(getSn_SR(sn))
 800684e:	f104 0008 	add.w	r0, r4, #8
{
 8006852:	460e      	mov	r6, r1
 8006854:	4617      	mov	r7, r2
   switch(getSn_SR(sn))
 8006856:	f000 f8b5 	bl	80069c4 <WIZCHIP_READ>
 800685a:	b2c0      	uxtb	r0, r0
 800685c:	281c      	cmp	r0, #28
 800685e:	d81b      	bhi.n	8006898 <loopback_tcps+0x58>
 8006860:	e8df f000 	tbb	[pc, r0]
 8006864:	1a1a1a37 	.word	0x1a1a1a37
 8006868:	1a1a1a1a 	.word	0x1a1a1a1a
 800686c:	1a1a1a1a 	.word	0x1a1a1a1a
 8006870:	1a1a1a1a 	.word	0x1a1a1a1a
 8006874:	2a1a1a1a 	.word	0x2a1a1a1a
 8006878:	0f1a1a1a 	.word	0x0f1a1a1a
 800687c:	1a1a1a1a 	.word	0x1a1a1a1a
 8006880:	1f          	.byte	0x1f
 8006881:	00          	.byte	0x00
   {
      case SOCK_ESTABLISHED :
         if(getSn_IR(sn) & Sn_IR_CON)
 8006882:	1da7      	adds	r7, r4, #6
 8006884:	4638      	mov	r0, r7
 8006886:	f000 f89d 	bl	80069c4 <WIZCHIP_READ>
 800688a:	07c3      	lsls	r3, r0, #31
 800688c:	d451      	bmi.n	8006932 <loopback_tcps+0xf2>

			printf("%d:Connected - %d.%d.%d.%d : %d\r\n",sn, destip[0], destip[1], destip[2], destip[3], destport);
#endif
			setSn_IR(sn,Sn_IR_CON);
         }
		 if((size = getSn_RX_RSR(sn)) > 0) // Don't need to check SOCKERR_BUSY because it doesn't not occur.
 800688e:	4628      	mov	r0, r5
 8006890:	f000 f92c 	bl	8006aec <getSn_RX_RSR>
 8006894:	b282      	uxth	r2, r0
 8006896:	bb4a      	cbnz	r2, 80068ec <loopback_tcps+0xac>
   switch(getSn_SR(sn))
 8006898:	2401      	movs	r4, #1
         break;
      default:
         break;
   }
   return 1;
}
 800689a:	4620      	mov	r0, r4
 800689c:	b005      	add	sp, #20
 800689e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         if((ret = disconnect(sn)) != SOCK_OK) return ret;
 80068a2:	4628      	mov	r0, r5
 80068a4:	f000 fc66 	bl	8007174 <disconnect>
 80068a8:	2801      	cmp	r0, #1
 80068aa:	4604      	mov	r4, r0
 80068ac:	d1f5      	bne.n	800689a <loopback_tcps+0x5a>
         printf("%d:Socket Closed\r\n", sn);
 80068ae:	4629      	mov	r1, r5
 80068b0:	4836      	ldr	r0, [pc, #216]	; (800698c <loopback_tcps+0x14c>)
 80068b2:	f001 fa03 	bl	8007cbc <iprintf>
         break;
 80068b6:	e7f0      	b.n	800689a <loopback_tcps+0x5a>
    	 printf("%d:Listen, TCP server loopback, port [%d]\r\n", sn, port);
 80068b8:	463a      	mov	r2, r7
 80068ba:	4629      	mov	r1, r5
 80068bc:	4834      	ldr	r0, [pc, #208]	; (8006990 <loopback_tcps+0x150>)
 80068be:	f001 f9fd 	bl	8007cbc <iprintf>
         if( (ret = listen(sn)) != SOCK_OK) return ret;
 80068c2:	4628      	mov	r0, r5
 80068c4:	f000 fc1c 	bl	8007100 <listen>
 80068c8:	4604      	mov	r4, r0
}
 80068ca:	4620      	mov	r0, r4
 80068cc:	b005      	add	sp, #20
 80068ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         if((ret = socket(sn, Sn_MR_TCP, port, 0x00)) != sn) return ret;
 80068d2:	2300      	movs	r3, #0
 80068d4:	463a      	mov	r2, r7
 80068d6:	2101      	movs	r1, #1
 80068d8:	4628      	mov	r0, r5
 80068da:	f000 fb65 	bl	8006fa8 <socket>
 80068de:	4285      	cmp	r5, r0
 80068e0:	4604      	mov	r4, r0
 80068e2:	d0d9      	beq.n	8006898 <loopback_tcps+0x58>
}
 80068e4:	4620      	mov	r0, r4
 80068e6:	b005      	add	sp, #20
 80068e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = recv(sn, buf, size);
 80068ec:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80068f0:	bf28      	it	cs
 80068f2:	f44f 6200 	movcs.w	r2, #2048	; 0x800
 80068f6:	4631      	mov	r1, r6
 80068f8:	4628      	mov	r0, r5
 80068fa:	f000 fd29 	bl	8007350 <recv>
			if(ret <= 0) return ret;      // check SOCKERR_BUSY & SOCKERR_XXX. For showing the occurrence of SOCKERR_BUSY.
 80068fe:	1e04      	subs	r4, r0, #0
 8006900:	ddcb      	ble.n	800689a <loopback_tcps+0x5a>
			size = (uint16_t) ret;
 8006902:	fa1f f884 	uxth.w	r8, r4
			while(size != sentsize)
 8006906:	f1b8 0f00 	cmp.w	r8, #0
 800690a:	d0c5      	beq.n	8006898 <loopback_tcps+0x58>
			sentsize = 0;
 800690c:	2700      	movs	r7, #0
 800690e:	e001      	b.n	8006914 <loopback_tcps+0xd4>
			while(size != sentsize)
 8006910:	45b8      	cmp	r8, r7
 8006912:	d0c1      	beq.n	8006898 <loopback_tcps+0x58>
				ret = send(sn, buf+sentsize, size-sentsize);
 8006914:	eba8 0207 	sub.w	r2, r8, r7
 8006918:	19f1      	adds	r1, r6, r7
 800691a:	4628      	mov	r0, r5
 800691c:	b292      	uxth	r2, r2
 800691e:	f000 fc6f 	bl	8007200 <send>
				if(ret < 0)
 8006922:	1e04      	subs	r4, r0, #0
				sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 8006924:	4427      	add	r7, r4
 8006926:	b2bf      	uxth	r7, r7
				if(ret < 0)
 8006928:	daf2      	bge.n	8006910 <loopback_tcps+0xd0>
					close(sn);
 800692a:	4628      	mov	r0, r5
 800692c:	f000 fb34 	bl	8006f98 <close>
					return ret;
 8006930:	e7b3      	b.n	800689a <loopback_tcps+0x5a>
			getSn_DIPR(sn, destip);
 8006932:	f104 0814 	add.w	r8, r4, #20
 8006936:	4640      	mov	r0, r8
 8006938:	f000 f844 	bl	80069c4 <WIZCHIP_READ>
 800693c:	4681      	mov	r9, r0
 800693e:	4640      	mov	r0, r8
 8006940:	f000 f840 	bl	80069c4 <WIZCHIP_READ>
 8006944:	f104 0b16 	add.w	fp, r4, #22
 8006948:	4682      	mov	sl, r0
 800694a:	4658      	mov	r0, fp
 800694c:	f000 f83a 	bl	80069c4 <WIZCHIP_READ>
 8006950:	4680      	mov	r8, r0
 8006952:	4658      	mov	r0, fp
 8006954:	f000 f836 	bl	80069c4 <WIZCHIP_READ>
 8006958:	4601      	mov	r1, r0
			destport = getSn_DPORT(sn);
 800695a:	f104 0012 	add.w	r0, r4, #18
			getSn_DIPR(sn, destip);
 800695e:	460c      	mov	r4, r1
			destport = getSn_DPORT(sn);
 8006960:	f000 f830 	bl	80069c4 <WIZCHIP_READ>
			printf("%d:Connected - %d.%d.%d.%d : %d\r\n",sn, destip[0], destip[1], destip[2], destip[3], destport);
 8006964:	b2e4      	uxtb	r4, r4
 8006966:	f3c8 210f 	ubfx	r1, r8, #8, #16
 800696a:	9100      	str	r1, [sp, #0]
 800696c:	9002      	str	r0, [sp, #8]
 800696e:	4629      	mov	r1, r5
 8006970:	fa5f f38a 	uxtb.w	r3, sl
 8006974:	f3c9 220f 	ubfx	r2, r9, #8, #16
 8006978:	9401      	str	r4, [sp, #4]
 800697a:	4806      	ldr	r0, [pc, #24]	; (8006994 <loopback_tcps+0x154>)
 800697c:	f001 f99e 	bl	8007cbc <iprintf>
			setSn_IR(sn,Sn_IR_CON);
 8006980:	2101      	movs	r1, #1
 8006982:	4638      	mov	r0, r7
 8006984:	f000 f808 	bl	8006998 <WIZCHIP_WRITE>
 8006988:	e781      	b.n	800688e <loopback_tcps+0x4e>
 800698a:	bf00      	nop
 800698c:	08008d58 	.word	0x08008d58
 8006990:	08008d6c 	.word	0x08008d6c
 8006994:	08008d34 	.word	0x08008d34

08006998 <WIZCHIP_WRITE>:
/***********************
 * Basic I/O  Function *
 ***********************/
 
void     WIZCHIP_WRITE(uint32_t AddrSel, uint16_t wb )
{
 8006998:	b510      	push	{r4, lr}
#if _USE_W5300_OPTIMIZE
	_W5300_DATA(AddrSel) = wb;
#else
	WIZCHIP_CRITICAL_ENTER();
 800699a:	4c09      	ldr	r4, [pc, #36]	; (80069c0 <WIZCHIP_WRITE+0x28>)
{
 800699c:	b082      	sub	sp, #8
	WIZCHIP_CRITICAL_ENTER();
 800699e:	68e3      	ldr	r3, [r4, #12]
{
 80069a0:	e9cd 1000 	strd	r1, r0, [sp]
	WIZCHIP_CRITICAL_ENTER();
 80069a4:	4798      	blx	r3
    WIZCHIP.CS._select();
 80069a6:	6963      	ldr	r3, [r4, #20]
 80069a8:	4798      	blx	r3
#if ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_) )
   #if(_WIZCHIP_IO_BUS_WIDTH_ == 8)
      WIZCHIP.IF.BUS._write_data(AddrSel,  (uint8_t)(wb>>8));
      WIZCHIP.IF.BUS._write_data(WIZCHIP_OFFSET_INC(AddrSel,1),(uint8_t)wb);
   #elif(_WIZCHIP_IO_BUS_WIDTH_ == 16)
      WIZCHIP.IF.BUS._write_data(AddrSel,  wb);   
 80069aa:	e9dd 1000 	ldrd	r1, r0, [sp]
 80069ae:	6a23      	ldr	r3, [r4, #32]
 80069b0:	4798      	blx	r3
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5300. !!!"
#endif

   WIZCHIP.CS._deselect();
 80069b2:	69a3      	ldr	r3, [r4, #24]
 80069b4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80069b6:	6923      	ldr	r3, [r4, #16]
#endif
}
 80069b8:	b002      	add	sp, #8
 80069ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   WIZCHIP_CRITICAL_EXIT();
 80069be:	4718      	bx	r3
 80069c0:	20000038 	.word	0x20000038

080069c4 <WIZCHIP_READ>:

uint16_t WIZCHIP_READ(uint32_t AddrSel)
{
 80069c4:	b510      	push	{r4, lr}
   uint16_t ret;
#if _USE_W5300_OPTIMIZE
   ret = _W5300_DATA(AddrSel);
#else
   WIZCHIP_CRITICAL_ENTER();
 80069c6:	4c09      	ldr	r4, [pc, #36]	; (80069ec <WIZCHIP_READ+0x28>)
{
 80069c8:	b082      	sub	sp, #8
   WIZCHIP_CRITICAL_ENTER();
 80069ca:	68e3      	ldr	r3, [r4, #12]
{
 80069cc:	9001      	str	r0, [sp, #4]
   WIZCHIP_CRITICAL_ENTER();
 80069ce:	4798      	blx	r3
   WIZCHIP.CS._select();
 80069d0:	6963      	ldr	r3, [r4, #20]
 80069d2:	4798      	blx	r3
#if ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_) )
   #if (_WIZCHIP_IO_BUS_WIDTH_ == 8)
      ret = (((uint16_t)WIZCHIP.IF.BUS._read_data(AddrSel)) << 8) | 
            (((uint16_t)WIZCHIP.IF.BUS._read_data(WIZCHIP_OFFSET_INC(AddrSel,1))) & 0x00FF) ;   
   #elif(_WIZCHIP_IO_BUS_WIDTH_ == 16)
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 80069d4:	69e3      	ldr	r3, [r4, #28]
 80069d6:	9801      	ldr	r0, [sp, #4]
 80069d8:	4798      	blx	r3
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5300. !!!"
#endif

   WIZCHIP.CS._deselect();
 80069da:	69a3      	ldr	r3, [r4, #24]
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 80069dc:	9001      	str	r0, [sp, #4]
   WIZCHIP.CS._deselect();
 80069de:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80069e0:	6923      	ldr	r3, [r4, #16]
 80069e2:	4798      	blx	r3
   #endif
   return ret;
}
 80069e4:	9801      	ldr	r0, [sp, #4]
 80069e6:	b002      	add	sp, #8
 80069e8:	bd10      	pop	{r4, pc}
 80069ea:	bf00      	nop
 80069ec:	20000038 	.word	0x20000038

080069f0 <getTMSR>:
   else tmem =  (tmem & 0x00FF) | (((uint16_t)tmsr) << 8) ;
   WIZCHIP_WRITE(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE)),tmem);
}
   
uint8_t getTMSR(uint8_t sn)
{
 80069f0:	b538      	push	{r3, r4, r5, lr}
   WIZCHIP_CRITICAL_ENTER();
 80069f2:	4d12      	ldr	r5, [pc, #72]	; (8006a3c <getTMSR+0x4c>)
   if(sn & 0x01)
 80069f4:	07c2      	lsls	r2, r0, #31
{
 80069f6:	4604      	mov	r4, r0
   WIZCHIP_CRITICAL_ENTER();
 80069f8:	68eb      	ldr	r3, [r5, #12]
   if(sn & 0x01)
 80069fa:	d40f      	bmi.n	8006a1c <getTMSR+0x2c>
   WIZCHIP_CRITICAL_ENTER();
 80069fc:	4798      	blx	r3
   WIZCHIP.CS._select();
 80069fe:	696b      	ldr	r3, [r5, #20]
 8006a00:	4798      	blx	r3
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) & 0x00FF);
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) >> 8);
 8006a02:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 8006a06:	69eb      	ldr	r3, [r5, #28]
 8006a08:	3020      	adds	r0, #32
 8006a0a:	4798      	blx	r3
 8006a0c:	4604      	mov	r4, r0
   WIZCHIP.CS._deselect();
 8006a0e:	69ab      	ldr	r3, [r5, #24]
 8006a10:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8006a12:	692b      	ldr	r3, [r5, #16]
 8006a14:	4798      	blx	r3
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) >> 8);
 8006a16:	f3c4 2007 	ubfx	r0, r4, #8, #8
}
 8006a1a:	bd38      	pop	{r3, r4, r5, pc}
   WIZCHIP_CRITICAL_ENTER();
 8006a1c:	4798      	blx	r3
   WIZCHIP.CS._select();
 8006a1e:	696b      	ldr	r3, [r5, #20]
 8006a20:	4798      	blx	r3
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) & 0x00FF);
 8006a22:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 8006a26:	69eb      	ldr	r3, [r5, #28]
 8006a28:	3020      	adds	r0, #32
 8006a2a:	4798      	blx	r3
 8006a2c:	4604      	mov	r4, r0
   WIZCHIP.CS._deselect();
 8006a2e:	69ab      	ldr	r3, [r5, #24]
 8006a30:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8006a32:	692b      	ldr	r3, [r5, #16]
 8006a34:	4798      	blx	r3
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) & 0x00FF);
 8006a36:	b2e0      	uxtb	r0, r4
}
 8006a38:	bd38      	pop	{r3, r4, r5, pc}
 8006a3a:	bf00      	nop
 8006a3c:	20000038 	.word	0x20000038

08006a40 <getRMSR>:
   else rmem =  (rmem & 0x00FF) | (((uint16_t)rmsr) << 8) ;
   WIZCHIP_WRITE(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE)),rmem);
}
   
uint8_t getRMSR(uint8_t sn)
{
 8006a40:	b538      	push	{r3, r4, r5, lr}
   WIZCHIP_CRITICAL_ENTER();
 8006a42:	4d12      	ldr	r5, [pc, #72]	; (8006a8c <getRMSR+0x4c>)
   if(sn & 0x01)
 8006a44:	07c2      	lsls	r2, r0, #31
{
 8006a46:	4604      	mov	r4, r0
   WIZCHIP_CRITICAL_ENTER();
 8006a48:	68eb      	ldr	r3, [r5, #12]
   if(sn & 0x01)
 8006a4a:	d40f      	bmi.n	8006a6c <getRMSR+0x2c>
   WIZCHIP_CRITICAL_ENTER();
 8006a4c:	4798      	blx	r3
   WIZCHIP.CS._select();
 8006a4e:	696b      	ldr	r3, [r5, #20]
 8006a50:	4798      	blx	r3
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) & 0x00FF);
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) >> 8);
 8006a52:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 8006a56:	69eb      	ldr	r3, [r5, #28]
 8006a58:	3028      	adds	r0, #40	; 0x28
 8006a5a:	4798      	blx	r3
 8006a5c:	4604      	mov	r4, r0
   WIZCHIP.CS._deselect();
 8006a5e:	69ab      	ldr	r3, [r5, #24]
 8006a60:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8006a62:	692b      	ldr	r3, [r5, #16]
 8006a64:	4798      	blx	r3
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) >> 8);
 8006a66:	f3c4 2007 	ubfx	r0, r4, #8, #8
}
 8006a6a:	bd38      	pop	{r3, r4, r5, pc}
   WIZCHIP_CRITICAL_ENTER();
 8006a6c:	4798      	blx	r3
   WIZCHIP.CS._select();
 8006a6e:	696b      	ldr	r3, [r5, #20]
 8006a70:	4798      	blx	r3
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) & 0x00FF);
 8006a72:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 8006a76:	69eb      	ldr	r3, [r5, #28]
 8006a78:	3028      	adds	r0, #40	; 0x28
 8006a7a:	4798      	blx	r3
 8006a7c:	4604      	mov	r4, r0
   WIZCHIP.CS._deselect();
 8006a7e:	69ab      	ldr	r3, [r5, #24]
 8006a80:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8006a82:	692b      	ldr	r3, [r5, #16]
 8006a84:	4798      	blx	r3
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) & 0x00FF);
 8006a86:	b2e0      	uxtb	r0, r4
}
 8006a88:	bd38      	pop	{r3, r4, r5, pc}
 8006a8a:	bf00      	nop
 8006a8c:	20000038 	.word	0x20000038

08006a90 <getSn_TX_FSR>:

uint32_t getSn_TX_FSR(uint8_t sn)
{
 8006a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   uint32_t free_tx_size=0;
   uint32_t free_tx_size1=1;
 8006a94:	2701      	movs	r7, #1
   while(1)
   {
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 8006a96:	f100 0808 	add.w	r8, r0, #8
 8006a9a:	ea4f 1888 	mov.w	r8, r8, lsl #6
 8006a9e:	4c12      	ldr	r4, [pc, #72]	; (8006ae8 <getSn_TX_FSR+0x58>)
 8006aa0:	f108 0924 	add.w	r9, r8, #36	; 0x24
                     (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),2))) & 0x0000FFFF);                           // read
 8006aa4:	f108 0826 	add.w	r8, r8, #38	; 0x26
   WIZCHIP_CRITICAL_ENTER();
 8006aa8:	68e3      	ldr	r3, [r4, #12]
 8006aaa:	4798      	blx	r3
   WIZCHIP.CS._select();
 8006aac:	6963      	ldr	r3, [r4, #20]
 8006aae:	4798      	blx	r3
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 8006ab0:	69e3      	ldr	r3, [r4, #28]
 8006ab2:	4648      	mov	r0, r9
 8006ab4:	4798      	blx	r3
   WIZCHIP.CS._deselect();
 8006ab6:	69a3      	ldr	r3, [r4, #24]
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 8006ab8:	4606      	mov	r6, r0
   WIZCHIP.CS._deselect();
 8006aba:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8006abc:	6923      	ldr	r3, [r4, #16]
 8006abe:	4798      	blx	r3
   WIZCHIP_CRITICAL_ENTER();
 8006ac0:	68e3      	ldr	r3, [r4, #12]
 8006ac2:	4798      	blx	r3
   WIZCHIP.CS._select();
 8006ac4:	6963      	ldr	r3, [r4, #20]
 8006ac6:	4798      	blx	r3
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 8006ac8:	69e3      	ldr	r3, [r4, #28]
 8006aca:	4640      	mov	r0, r8
 8006acc:	4798      	blx	r3
   WIZCHIP.CS._deselect();
 8006ace:	69a3      	ldr	r3, [r4, #24]
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 8006ad0:	4605      	mov	r5, r0
   WIZCHIP.CS._deselect();
 8006ad2:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8006ad4:	6923      	ldr	r3, [r4, #16]
 8006ad6:	4798      	blx	r3
   return ret;
 8006ad8:	463b      	mov	r3, r7
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 8006ada:	ea45 4706 	orr.w	r7, r5, r6, lsl #16
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
 8006ade:	42bb      	cmp	r3, r7
 8006ae0:	d1e2      	bne.n	8006aa8 <getSn_TX_FSR+0x18>
      free_tx_size1 = free_tx_size;             // save second value into first                                                   
   }                                                                       
   return free_tx_size;                                                    
}                                                                          
 8006ae2:	4638      	mov	r0, r7
 8006ae4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ae8:	20000038 	.word	0x20000038

08006aec <getSn_RX_RSR>:

uint32_t getSn_RX_RSR(uint8_t sn)
{
 8006aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   uint32_t received_rx_size=0;
   uint32_t received_rx_size1=1;
 8006af0:	f04f 0a01 	mov.w	sl, #1
{
 8006af4:	4681      	mov	r9, r0
   while(1)
   {
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 8006af6:	f100 0708 	add.w	r7, r0, #8
 8006afa:	01bf      	lsls	r7, r7, #6
 8006afc:	4c14      	ldr	r4, [pc, #80]	; (8006b50 <getSn_RX_RSR+0x64>)
 8006afe:	f107 0828 	add.w	r8, r7, #40	; 0x28
                         (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),2))) & 0x0000FFFF);
 8006b02:	372a      	adds	r7, #42	; 0x2a
   WIZCHIP_CRITICAL_ENTER();
 8006b04:	68e3      	ldr	r3, [r4, #12]
 8006b06:	4798      	blx	r3
   WIZCHIP.CS._select();
 8006b08:	6963      	ldr	r3, [r4, #20]
 8006b0a:	4798      	blx	r3
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 8006b0c:	69e3      	ldr	r3, [r4, #28]
 8006b0e:	4640      	mov	r0, r8
 8006b10:	4798      	blx	r3
   WIZCHIP.CS._deselect();
 8006b12:	69a3      	ldr	r3, [r4, #24]
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 8006b14:	4606      	mov	r6, r0
   WIZCHIP.CS._deselect();
 8006b16:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8006b18:	6923      	ldr	r3, [r4, #16]
 8006b1a:	4798      	blx	r3
   WIZCHIP_CRITICAL_ENTER();
 8006b1c:	68e3      	ldr	r3, [r4, #12]
 8006b1e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8006b20:	6963      	ldr	r3, [r4, #20]
 8006b22:	4798      	blx	r3
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 8006b24:	69e3      	ldr	r3, [r4, #28]
 8006b26:	4638      	mov	r0, r7
 8006b28:	4798      	blx	r3
   WIZCHIP.CS._deselect();
 8006b2a:	69a3      	ldr	r3, [r4, #24]
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 8006b2c:	4605      	mov	r5, r0
   WIZCHIP.CS._deselect();
 8006b2e:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8006b30:	6923      	ldr	r3, [r4, #16]
 8006b32:	4798      	blx	r3
   return ret;
 8006b34:	4653      	mov	r3, sl
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 8006b36:	ea45 4a06 	orr.w	sl, r5, r6, lsl #16
      if(received_rx_size == received_rx_size1) break;                                                                         
 8006b3a:	4553      	cmp	r3, sl
 8006b3c:	d1e2      	bne.n	8006b04 <getSn_RX_RSR+0x18>
      received_rx_size1 = received_rx_size;                                      // if first == sencond, Sn_RX_RSR value is valid.
   }                                                                             // save second value into first                
   return received_rx_size + (uint32_t)((sock_pack_info[sn] & 0x02) ? 1 : 0);   
 8006b3e:	4b05      	ldr	r3, [pc, #20]	; (8006b54 <getSn_RX_RSR+0x68>)
 8006b40:	f813 0009 	ldrb.w	r0, [r3, r9]
 8006b44:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
 8006b48:	4450      	add	r0, sl
 8006b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b4e:	bf00      	nop
 8006b50:	20000038 	.word	0x20000038
 8006b54:	20000f7c 	.word	0x20000f7c

08006b58 <wiz_send_data>:


void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
   uint32_t i = 0;
   if(len == 0)  return;
 8006b58:	b322      	cbz	r2, 8006ba4 <wiz_send_data+0x4c>
{
 8006b5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b5e:	4617      	mov	r7, r2
 8006b60:	ea6f 0801 	mvn.w	r8, r1
   
   for(i = 0; i < len ; i += 2)
      setSn_TX_FIFOR(sn, (((uint16_t)wizdata[i]) << 8) | (((uint16_t)wizdata[i+1]) & 0x00FF))
 8006b64:	0180      	lsls	r0, r0, #6
 8006b66:	4c10      	ldr	r4, [pc, #64]	; (8006ba8 <wiz_send_data+0x50>)
{
 8006b68:	b082      	sub	sp, #8
      setSn_TX_FIFOR(sn, (((uint16_t)wizdata[i]) << 8) | (((uint16_t)wizdata[i+1]) & 0x00FF))
 8006b6a:	f200 262e 	addw	r6, r0, #558	; 0x22e
 8006b6e:	1c4d      	adds	r5, r1, #1
 8006b70:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006b74:	f815 1b02 	ldrb.w	r1, [r5], #2
	WIZCHIP_CRITICAL_ENTER();
 8006b78:	68e3      	ldr	r3, [r4, #12]
      setSn_TX_FIFOR(sn, (((uint16_t)wizdata[i]) << 8) | (((uint16_t)wizdata[i+1]) & 0x00FF))
 8006b7a:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8006b7e:	9101      	str	r1, [sp, #4]
	WIZCHIP_CRITICAL_ENTER();
 8006b80:	4798      	blx	r3
    WIZCHIP.CS._select();
 8006b82:	6963      	ldr	r3, [r4, #20]
 8006b84:	4798      	blx	r3
      WIZCHIP.IF.BUS._write_data(AddrSel,  wb);   
 8006b86:	4630      	mov	r0, r6
 8006b88:	9901      	ldr	r1, [sp, #4]
 8006b8a:	6a23      	ldr	r3, [r4, #32]
 8006b8c:	4798      	blx	r3
   WIZCHIP.CS._deselect();
 8006b8e:	69a3      	ldr	r3, [r4, #24]
 8006b90:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8006b92:	6923      	ldr	r3, [r4, #16]
 8006b94:	4798      	blx	r3
   for(i = 0; i < len ; i += 2)
 8006b96:	eb08 0305 	add.w	r3, r8, r5
 8006b9a:	429f      	cmp	r7, r3
 8006b9c:	d8e8      	bhi.n	8006b70 <wiz_send_data+0x18>
}
 8006b9e:	b002      	add	sp, #8
 8006ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	20000038 	.word	0x20000038

08006bac <wiz_recv_data>:
void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
   uint16_t rd = 0;
   uint32_t i = 0;
   
   if(len == 0) return;
 8006bac:	b362      	cbz	r2, 8006c08 <wiz_recv_data+0x5c>
{
 8006bae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      
   for(i = 0; i < len; i++)
 8006bb2:	2400      	movs	r4, #0
   {
      if((i & 0x01)==0)
      {
         rd = getSn_RX_FIFOR(sn);
 8006bb4:	ea4f 1980 	mov.w	r9, r0, lsl #6
 8006bb8:	4680      	mov	r8, r0
 8006bba:	4692      	mov	sl, r2
 8006bbc:	460d      	mov	r5, r1
   uint16_t rd = 0;
 8006bbe:	4626      	mov	r6, r4
   WIZCHIP_CRITICAL_ENTER();
 8006bc0:	4f12      	ldr	r7, [pc, #72]	; (8006c0c <wiz_recv_data+0x60>)
         rd = getSn_RX_FIFOR(sn);
 8006bc2:	f509 790c 	add.w	r9, r9, #560	; 0x230
 8006bc6:	e005      	b.n	8006bd4 <wiz_recv_data+0x28>
   for(i = 0; i < len; i++)
 8006bc8:	3401      	adds	r4, #1
 8006bca:	45a2      	cmp	sl, r4
         wizdata[i]   = (uint8_t)(rd >> 8);
      }
      else  wizdata[i] = (uint8_t)rd;  // For checking the memory access violation
 8006bcc:	702e      	strb	r6, [r5, #0]
   for(i = 0; i < len; i++)
 8006bce:	f105 0501 	add.w	r5, r5, #1
 8006bd2:	d014      	beq.n	8006bfe <wiz_recv_data+0x52>
      if((i & 0x01)==0)
 8006bd4:	07e3      	lsls	r3, r4, #31
 8006bd6:	d4f7      	bmi.n	8006bc8 <wiz_recv_data+0x1c>
   WIZCHIP_CRITICAL_ENTER();
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	4798      	blx	r3
   WIZCHIP.CS._select();
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	4798      	blx	r3
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	4648      	mov	r0, r9
 8006be4:	4798      	blx	r3
 8006be6:	4606      	mov	r6, r0
   WIZCHIP.CS._deselect();
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	4798      	blx	r3
   for(i = 0; i < len; i++)
 8006bec:	3401      	adds	r4, #1
   WIZCHIP_CRITICAL_EXIT();
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	4798      	blx	r3
         wizdata[i]   = (uint8_t)(rd >> 8);
 8006bf2:	0a33      	lsrs	r3, r6, #8
   for(i = 0; i < len; i++)
 8006bf4:	45a2      	cmp	sl, r4
         wizdata[i]   = (uint8_t)(rd >> 8);
 8006bf6:	702b      	strb	r3, [r5, #0]
   for(i = 0; i < len; i++)
 8006bf8:	f105 0501 	add.w	r5, r5, #1
 8006bfc:	d1ea      	bne.n	8006bd4 <wiz_recv_data+0x28>
   }
   sock_remained_byte[sn] = (uint8_t)rd; // back up the remaind fifo byte.
 8006bfe:	4b04      	ldr	r3, [pc, #16]	; (8006c10 <wiz_recv_data+0x64>)
 8006c00:	f803 6008 	strb.w	r6, [r3, r8]
}
 8006c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	20000038 	.word	0x20000038
 8006c10:	20000f84 	.word	0x20000f84

08006c14 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8006c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   uint8_t tmp = 0;
   uint16_t freesize = 0;
   uint32_t taddr;

   CHECK_SOCKNUM();
 8006c18:	2808      	cmp	r0, #8
{
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
   CHECK_SOCKNUM();
 8006c20:	f200 8131 	bhi.w	8006e86 <sendto+0x272>
   switch(getSn_MR(sn) & 0x0F)
 8006c24:	f100 0708 	add.w	r7, r0, #8
 8006c28:	01bf      	lsls	r7, r7, #6
 8006c2a:	4606      	mov	r6, r0
 8006c2c:	4638      	mov	r0, r7
 8006c2e:	468b      	mov	fp, r1
 8006c30:	4615      	mov	r5, r2
 8006c32:	461c      	mov	r4, r3
 8006c34:	f7ff fec6 	bl	80069c4 <WIZCHIP_READ>
 8006c38:	f000 000f 	and.w	r0, r0, #15
 8006c3c:	3802      	subs	r0, #2
 8006c3e:	2802      	cmp	r0, #2
 8006c40:	f200 8124 	bhi.w	8006e8c <sendto+0x278>
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
 8006c44:	2d00      	cmp	r5, #0
 8006c46:	f000 8124 	beq.w	8006e92 <sendto+0x27e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8006c4a:	7823      	ldrb	r3, [r4, #0]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8006c4c:	7862      	ldrb	r2, [r4, #1]
 8006c4e:	eb02 2203 	add.w	r2, r2, r3, lsl #8
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8006c52:	78a3      	ldrb	r3, [r4, #2]
 8006c54:	eb03 2202 	add.w	r2, r3, r2, lsl #8
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8006c58:	78e3      	ldrb	r3, [r4, #3]
 8006c5a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8006c5e:	9301      	str	r3, [sp, #4]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 80ab 	beq.w	8006dbc <sendto+0x1a8>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8006c66:	f1b8 0f00 	cmp.w	r8, #0
 8006c6a:	f000 809e 	beq.w	8006daa <sendto+0x196>
   tmp = getSn_SR(sn);
 8006c6e:	f107 0908 	add.w	r9, r7, #8
 8006c72:	4648      	mov	r0, r9
 8006c74:	f7ff fea6 	bl	80069c4 <WIZCHIP_READ>
 8006c78:	b2c0      	uxtb	r0, r0
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8006c7a:	2842      	cmp	r0, #66	; 0x42
 8006c7c:	d008      	beq.n	8006c90 <sendto+0x7c>
 8006c7e:	f000 00ef 	and.w	r0, r0, #239	; 0xef
 8006c82:	2822      	cmp	r0, #34	; 0x22
 8006c84:	d004      	beq.n	8006c90 <sendto+0x7c>
 8006c86:	f06f 0006 	mvn.w	r0, #6
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
 8006c8a:	b003      	add	sp, #12
 8006c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   setSn_DIPR(sn,addr);
 8006c90:	7823      	ldrb	r3, [r4, #0]
 8006c92:	7861      	ldrb	r1, [r4, #1]
 8006c94:	f107 0014 	add.w	r0, r7, #20
 8006c98:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8006c9c:	b289      	uxth	r1, r1
 8006c9e:	f7ff fe7b 	bl	8006998 <WIZCHIP_WRITE>
 8006ca2:	78a3      	ldrb	r3, [r4, #2]
 8006ca4:	78e1      	ldrb	r1, [r4, #3]
 8006ca6:	f107 0016 	add.w	r0, r7, #22
 8006caa:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8006cae:	b289      	uxth	r1, r1
 8006cb0:	f7ff fe72 	bl	8006998 <WIZCHIP_WRITE>
   setSn_DPORT(sn,port);      
 8006cb4:	4641      	mov	r1, r8
 8006cb6:	f107 0012 	add.w	r0, r7, #18
 8006cba:	f7ff fe6d 	bl	8006998 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8006cbe:	4630      	mov	r0, r6
 8006cc0:	f7ff fe96 	bl	80069f0 <getTMSR>
 8006cc4:	0280      	lsls	r0, r0, #10
 8006cc6:	b280      	uxth	r0, r0
 8006cc8:	f04f 0801 	mov.w	r8, #1
 8006ccc:	4285      	cmp	r5, r0
 8006cce:	bf28      	it	cs
 8006cd0:	4605      	movcs	r5, r0
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8006cd2:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 8006e98 <sendto+0x284>
 8006cd6:	fa08 f806 	lsl.w	r8, r8, r6
      freesize = getSn_TX_FSR(sn);
 8006cda:	4630      	mov	r0, r6
 8006cdc:	f7ff fed8 	bl	8006a90 <getSn_TX_FSR>
 8006ce0:	4604      	mov	r4, r0
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8006ce2:	4648      	mov	r0, r9
 8006ce4:	f7ff fe6e 	bl	80069c4 <WIZCHIP_READ>
 8006ce8:	b2c0      	uxtb	r0, r0
      freesize = getSn_TX_FSR(sn);
 8006cea:	b2a4      	uxth	r4, r4
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8006cec:	2800      	cmp	r0, #0
 8006cee:	d06e      	beq.n	8006dce <sendto+0x1ba>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8006cf0:	f8ba 3000 	ldrh.w	r3, [sl]
 8006cf4:	ea13 0f08 	tst.w	r3, r8
 8006cf8:	d054      	beq.n	8006da4 <sendto+0x190>
 8006cfa:	42a5      	cmp	r5, r4
 8006cfc:	f200 80a4 	bhi.w	8006e48 <sendto+0x234>
	wiz_send_data(sn, buf, len);
 8006d00:	462a      	mov	r2, r5
 8006d02:	4659      	mov	r1, fp
 8006d04:	4630      	mov	r0, r6
 8006d06:	f7ff ff27 	bl	8006b58 <wiz_send_data>
      getSIPR((uint8_t*)&taddr);
 8006d0a:	2018      	movs	r0, #24
 8006d0c:	f7ff fe5a 	bl	80069c4 <WIZCHIP_READ>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2018      	movs	r0, #24
 8006d14:	0a1b      	lsrs	r3, r3, #8
 8006d16:	f88d 3004 	strb.w	r3, [sp, #4]
 8006d1a:	f7ff fe53 	bl	80069c4 <WIZCHIP_READ>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	201a      	movs	r0, #26
 8006d22:	f88d 3005 	strb.w	r3, [sp, #5]
 8006d26:	f7ff fe4d 	bl	80069c4 <WIZCHIP_READ>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	201a      	movs	r0, #26
 8006d2e:	0a1b      	lsrs	r3, r3, #8
 8006d30:	f88d 3006 	strb.w	r3, [sp, #6]
 8006d34:	f7ff fe46 	bl	80069c4 <WIZCHIP_READ>
 8006d38:	f88d 0007 	strb.w	r0, [sp, #7]
      if(taddr == 0)
 8006d3c:	9c01      	ldr	r4, [sp, #4]
 8006d3e:	2c00      	cmp	r4, #0
 8006d40:	d04a      	beq.n	8006dd8 <sendto+0x1c4>
      else taddr = 0;
 8006d42:	2300      	movs	r3, #0
 8006d44:	461e      	mov	r6, r3
 8006d46:	4699      	mov	r9, r3
 8006d48:	4698      	mov	r8, r3
 8006d4a:	469a      	mov	sl, r3
 8006d4c:	469b      	mov	fp, r3
 8006d4e:	9301      	str	r3, [sp, #4]
   setSn_TX_WRSR(sn, len);
 8006d50:	2100      	movs	r1, #0
 8006d52:	f107 0020 	add.w	r0, r7, #32
 8006d56:	f7ff fe1f 	bl	8006998 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_SEND);
 8006d5a:	1cbc      	adds	r4, r7, #2
   setSn_TX_WRSR(sn, len);
 8006d5c:	4629      	mov	r1, r5
 8006d5e:	f107 0022 	add.w	r0, r7, #34	; 0x22
 8006d62:	f7ff fe19 	bl	8006998 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_SEND);
 8006d66:	2120      	movs	r1, #32
 8006d68:	4620      	mov	r0, r4
 8006d6a:	f7ff fe15 	bl	8006998 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8006d6e:	4620      	mov	r0, r4
 8006d70:	f7ff fe28 	bl	80069c4 <WIZCHIP_READ>
 8006d74:	b2c0      	uxtb	r0, r0
 8006d76:	2800      	cmp	r0, #0
 8006d78:	d1f9      	bne.n	8006d6e <sendto+0x15a>
      tmp = getSn_IR(sn);
 8006d7a:	3706      	adds	r7, #6
 8006d7c:	e001      	b.n	8006d82 <sendto+0x16e>
      else if(tmp & Sn_IR_TIMEOUT)
 8006d7e:	071b      	lsls	r3, r3, #28
 8006d80:	d466      	bmi.n	8006e50 <sendto+0x23c>
      tmp = getSn_IR(sn);
 8006d82:	4638      	mov	r0, r7
 8006d84:	f7ff fe1e 	bl	80069c4 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
 8006d88:	06c2      	lsls	r2, r0, #27
      tmp = getSn_IR(sn);
 8006d8a:	b2c3      	uxtb	r3, r0
      if(tmp & Sn_IR_SENDOK)
 8006d8c:	d5f7      	bpl.n	8006d7e <sendto+0x16a>
         setSn_IR(sn, Sn_IR_SENDOK);
 8006d8e:	4638      	mov	r0, r7
 8006d90:	2110      	movs	r1, #16
 8006d92:	f7ff fe01 	bl	8006998 <WIZCHIP_WRITE>
      if(taddr) setSUBR((uint8_t*)&taddr);
 8006d96:	f1bb 0f00 	cmp.w	fp, #0
 8006d9a:	d147      	bne.n	8006e2c <sendto+0x218>
   return (int32_t)len;
 8006d9c:	4628      	mov	r0, r5
}
 8006d9e:	b003      	add	sp, #12
 8006da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(len <= freesize) break;
 8006da4:	42a5      	cmp	r5, r4
 8006da6:	d898      	bhi.n	8006cda <sendto+0xc6>
 8006da8:	e7aa      	b.n	8006d00 <sendto+0xec>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8006daa:	4638      	mov	r0, r7
 8006dac:	f7ff fe0a 	bl	80069c4 <WIZCHIP_READ>
 8006db0:	0741      	lsls	r1, r0, #29
 8006db2:	f53f af5c 	bmi.w	8006c6e <sendto+0x5a>
 8006db6:	f06f 000a 	mvn.w	r0, #10
 8006dba:	e766      	b.n	8006c8a <sendto+0x76>
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8006dbc:	4638      	mov	r0, r7
 8006dbe:	f7ff fe01 	bl	80069c4 <WIZCHIP_READ>
 8006dc2:	0740      	lsls	r0, r0, #29
 8006dc4:	f53f af4f 	bmi.w	8006c66 <sendto+0x52>
 8006dc8:	f06f 000b 	mvn.w	r0, #11
 8006dcc:	e75d      	b.n	8006c8a <sendto+0x76>
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8006dce:	f06f 0003 	mvn.w	r0, #3
}
 8006dd2:	b003      	add	sp, #12
 8006dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         getSUBR((uint8_t*)&taddr);
 8006dd8:	2014      	movs	r0, #20
 8006dda:	f7ff fdf3 	bl	80069c4 <WIZCHIP_READ>
 8006dde:	4682      	mov	sl, r0
 8006de0:	2014      	movs	r0, #20
 8006de2:	f3ca 2a0f 	ubfx	sl, sl, #8, #16
 8006de6:	f88d a004 	strb.w	sl, [sp, #4]
 8006dea:	f7ff fdeb 	bl	80069c4 <WIZCHIP_READ>
 8006dee:	4680      	mov	r8, r0
 8006df0:	2016      	movs	r0, #22
 8006df2:	fa5f f888 	uxtb.w	r8, r8
 8006df6:	f88d 8005 	strb.w	r8, [sp, #5]
 8006dfa:	f7ff fde3 	bl	80069c4 <WIZCHIP_READ>
 8006dfe:	4681      	mov	r9, r0
 8006e00:	2016      	movs	r0, #22
 8006e02:	f3c9 290f 	ubfx	r9, r9, #8, #16
 8006e06:	f88d 9006 	strb.w	r9, [sp, #6]
 8006e0a:	f7ff fddb 	bl	80069c4 <WIZCHIP_READ>
 8006e0e:	4606      	mov	r6, r0
         setSUBR((uint8_t*)"\x00\x00\x00\x00");
 8006e10:	4621      	mov	r1, r4
 8006e12:	2014      	movs	r0, #20
         getSUBR((uint8_t*)&taddr);
 8006e14:	b2f6      	uxtb	r6, r6
 8006e16:	f88d 6007 	strb.w	r6, [sp, #7]
         setSUBR((uint8_t*)"\x00\x00\x00\x00");
 8006e1a:	f7ff fdbd 	bl	8006998 <WIZCHIP_WRITE>
 8006e1e:	4621      	mov	r1, r4
 8006e20:	2016      	movs	r0, #22
 8006e22:	f7ff fdb9 	bl	8006998 <WIZCHIP_WRITE>
      if(taddr) setSUBR((uint8_t*)&taddr);
 8006e26:	f8dd b004 	ldr.w	fp, [sp, #4]
 8006e2a:	e791      	b.n	8006d50 <sendto+0x13c>
 8006e2c:	eb08 210a 	add.w	r1, r8, sl, lsl #8
 8006e30:	2014      	movs	r0, #20
 8006e32:	b289      	uxth	r1, r1
 8006e34:	f7ff fdb0 	bl	8006998 <WIZCHIP_WRITE>
 8006e38:	eb06 2109 	add.w	r1, r6, r9, lsl #8
 8006e3c:	2016      	movs	r0, #22
 8006e3e:	b289      	uxth	r1, r1
 8006e40:	f7ff fdaa 	bl	8006998 <WIZCHIP_WRITE>
   return (int32_t)len;
 8006e44:	4628      	mov	r0, r5
 8006e46:	e7aa      	b.n	8006d9e <sendto+0x18a>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8006e48:	2000      	movs	r0, #0
}
 8006e4a:	b003      	add	sp, #12
 8006e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8006e50:	4638      	mov	r0, r7
 8006e52:	2108      	movs	r1, #8
 8006e54:	f7ff fda0 	bl	8006998 <WIZCHIP_WRITE>
            if(taddr) setSUBR((uint8_t*)&taddr);
 8006e58:	f1bb 0f00 	cmp.w	fp, #0
 8006e5c:	d104      	bne.n	8006e68 <sendto+0x254>
         return SOCKERR_TIMEOUT;
 8006e5e:	f06f 000c 	mvn.w	r0, #12
}
 8006e62:	b003      	add	sp, #12
 8006e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(taddr) setSUBR((uint8_t*)&taddr);
 8006e68:	eb08 210a 	add.w	r1, r8, sl, lsl #8
 8006e6c:	2014      	movs	r0, #20
 8006e6e:	b289      	uxth	r1, r1
 8006e70:	f7ff fd92 	bl	8006998 <WIZCHIP_WRITE>
 8006e74:	eb06 2109 	add.w	r1, r6, r9, lsl #8
 8006e78:	2016      	movs	r0, #22
 8006e7a:	b289      	uxth	r1, r1
 8006e7c:	f7ff fd8c 	bl	8006998 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8006e80:	f06f 000c 	mvn.w	r0, #12
 8006e84:	e701      	b.n	8006c8a <sendto+0x76>
   CHECK_SOCKNUM();
 8006e86:	f04f 30ff 	mov.w	r0, #4294967295
 8006e8a:	e6fe      	b.n	8006c8a <sendto+0x76>
         return SOCKERR_SOCKMODE;
 8006e8c:	f06f 0004 	mvn.w	r0, #4
 8006e90:	e6fb      	b.n	8006c8a <sendto+0x76>
   CHECK_SOCKDATA();
 8006e92:	f06f 000d 	mvn.w	r0, #13
 8006e96:	e6f8      	b.n	8006c8a <sendto+0x76>
 8006e98:	20000f78 	.word	0x20000f78

08006e9c <close.part.0>:
int8_t close(uint8_t sn)
 8006e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   if( ((getSn_MR(sn)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(sn) != getSn_TxMAX(sn)) ) 
 8006ea0:	f100 0808 	add.w	r8, r0, #8
 8006ea4:	ea4f 1888 	mov.w	r8, r8, lsl #6
int8_t close(uint8_t sn)
 8006ea8:	4607      	mov	r7, r0
 8006eaa:	b084      	sub	sp, #16
   if( ((getSn_MR(sn)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(sn) != getSn_TxMAX(sn)) ) 
 8006eac:	4640      	mov	r0, r8
 8006eae:	f7ff fd89 	bl	80069c4 <WIZCHIP_READ>
 8006eb2:	f000 040f 	and.w	r4, r0, #15
 8006eb6:	2c01      	cmp	r4, #1
 8006eb8:	d031      	beq.n	8006f1e <close.part.0+0x82>
      setSn_CR(sn,Sn_CR_OPEN);
 8006eba:	f108 0502 	add.w	r5, r8, #2
      while(getSn_SR(sn) != SOCK_UDP);
 8006ebe:	f108 0608 	add.w	r6, r8, #8
	setSn_CR(sn,Sn_CR_CLOSE);
 8006ec2:	2110      	movs	r1, #16
 8006ec4:	4628      	mov	r0, r5
 8006ec6:	f7ff fd67 	bl	8006998 <WIZCHIP_WRITE>
	while( getSn_CR(sn) );
 8006eca:	4628      	mov	r0, r5
 8006ecc:	f7ff fd7a 	bl	80069c4 <WIZCHIP_READ>
 8006ed0:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
 8006ed4:	d1f9      	bne.n	8006eca <close.part.0+0x2e>
	setSn_IR(sn, 0xFF);
 8006ed6:	21ff      	movs	r1, #255	; 0xff
 8006ed8:	f108 0006 	add.w	r0, r8, #6
 8006edc:	f7ff fd5c 	bl	8006998 <WIZCHIP_WRITE>
	sock_io_mode &= ~(1<<sn);
 8006ee0:	2201      	movs	r2, #1
	sock_remained_size[sn] = 0;
 8006ee2:	4b29      	ldr	r3, [pc, #164]	; (8006f88 <close.part.0+0xec>)
	sock_io_mode &= ~(1<<sn);
 8006ee4:	4d29      	ldr	r5, [pc, #164]	; (8006f8c <close.part.0+0xf0>)
	sock_remained_size[sn] = 0;
 8006ee6:	f823 4017 	strh.w	r4, [r3, r7, lsl #1]
	sock_pack_info[sn] = 0;
 8006eea:	4b29      	ldr	r3, [pc, #164]	; (8006f90 <close.part.0+0xf4>)
	sock_is_sending &= ~(1<<sn);
 8006eec:	4829      	ldr	r0, [pc, #164]	; (8006f94 <close.part.0+0xf8>)
	sock_pack_info[sn] = 0;
 8006eee:	55dc      	strb	r4, [r3, r7]
	sock_io_mode &= ~(1<<sn);
 8006ef0:	fa02 f307 	lsl.w	r3, r2, r7
 8006ef4:	43db      	mvns	r3, r3
 8006ef6:	8829      	ldrh	r1, [r5, #0]
	sock_is_sending &= ~(1<<sn);
 8006ef8:	f8b0 c000 	ldrh.w	ip, [r0]
	sock_io_mode &= ~(1<<sn);
 8006efc:	b21b      	sxth	r3, r3
 8006efe:	ea03 0201 	and.w	r2, r3, r1
	sock_is_sending &= ~(1<<sn);
 8006f02:	ea03 030c 	and.w	r3, r3, ip
	sock_io_mode &= ~(1<<sn);
 8006f06:	802a      	strh	r2, [r5, #0]
	sock_is_sending &= ~(1<<sn);
 8006f08:	8003      	strh	r3, [r0, #0]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8006f0a:	4630      	mov	r0, r6
 8006f0c:	f7ff fd5a 	bl	80069c4 <WIZCHIP_READ>
 8006f10:	b2c0      	uxtb	r0, r0
 8006f12:	2800      	cmp	r0, #0
 8006f14:	d1f9      	bne.n	8006f0a <close.part.0+0x6e>
}
 8006f16:	2001      	movs	r0, #1
 8006f18:	b004      	add	sp, #16
 8006f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   if( ((getSn_MR(sn)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(sn) != getSn_TxMAX(sn)) ) 
 8006f1e:	4638      	mov	r0, r7
 8006f20:	f7ff fdb6 	bl	8006a90 <getSn_TX_FSR>
 8006f24:	4605      	mov	r5, r0
 8006f26:	4638      	mov	r0, r7
 8006f28:	f7ff fd62 	bl	80069f0 <getTMSR>
 8006f2c:	ebb5 2f80 	cmp.w	r5, r0, lsl #10
 8006f30:	d0c3      	beq.n	8006eba <close.part.0+0x1e>
      uint8_t destip[4] = {0, 0, 0, 1};
 8006f32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      setSn_MR(sn,Sn_MR_UDP);
 8006f36:	2102      	movs	r1, #2
 8006f38:	4640      	mov	r0, r8
      setSn_CR(sn,Sn_CR_OPEN);
 8006f3a:	eb08 0501 	add.w	r5, r8, r1
      uint8_t destip[4] = {0, 0, 0, 1};
 8006f3e:	9303      	str	r3, [sp, #12]
      setSn_MR(sn,Sn_MR_UDP);
 8006f40:	f7ff fd2a 	bl	8006998 <WIZCHIP_WRITE>
      setSn_PORTR(sn, 0x3000);
 8006f44:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006f48:	f108 000a 	add.w	r0, r8, #10
 8006f4c:	f7ff fd24 	bl	8006998 <WIZCHIP_WRITE>
      setSn_CR(sn,Sn_CR_OPEN);
 8006f50:	4621      	mov	r1, r4
 8006f52:	4628      	mov	r0, r5
 8006f54:	f7ff fd20 	bl	8006998 <WIZCHIP_WRITE>
      while(getSn_CR(sn) != 0);
 8006f58:	4628      	mov	r0, r5
 8006f5a:	f7ff fd33 	bl	80069c4 <WIZCHIP_READ>
 8006f5e:	b2c0      	uxtb	r0, r0
 8006f60:	2800      	cmp	r0, #0
 8006f62:	d1f9      	bne.n	8006f58 <close.part.0+0xbc>
      while(getSn_SR(sn) != SOCK_UDP);
 8006f64:	f108 0608 	add.w	r6, r8, #8
 8006f68:	4630      	mov	r0, r6
 8006f6a:	f7ff fd2b 	bl	80069c4 <WIZCHIP_READ>
 8006f6e:	b2c0      	uxtb	r0, r0
 8006f70:	2822      	cmp	r0, #34	; 0x22
 8006f72:	d1f9      	bne.n	8006f68 <close.part.0+0xcc>
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
 8006f74:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	ab03      	add	r3, sp, #12
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	2201      	movs	r2, #1
 8006f80:	4638      	mov	r0, r7
 8006f82:	f7ff fe47 	bl	8006c14 <sendto>
 8006f86:	e79c      	b.n	8006ec2 <close.part.0+0x26>
 8006f88:	20000f8c 	.word	0x20000f8c
 8006f8c:	20000f78 	.word	0x20000f78
 8006f90:	20000f7c 	.word	0x20000f7c
 8006f94:	20000f7a 	.word	0x20000f7a

08006f98 <close>:
	CHECK_SOCKNUM();
 8006f98:	2808      	cmp	r0, #8
 8006f9a:	d902      	bls.n	8006fa2 <close+0xa>
}
 8006f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa0:	4770      	bx	lr
 8006fa2:	f7ff bf7b 	b.w	8006e9c <close.part.0>
 8006fa6:	bf00      	nop

08006fa8 <socket>:
	CHECK_SOCKNUM();
 8006fa8:	2808      	cmp	r0, #8
 8006faa:	f200 809c 	bhi.w	80070e6 <socket+0x13e>
{
 8006fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch(protocol)
 8006fb2:	2901      	cmp	r1, #1
 8006fb4:	4605      	mov	r5, r0
 8006fb6:	460f      	mov	r7, r1
 8006fb8:	4690      	mov	r8, r2
 8006fba:	461e      	mov	r6, r3
{
 8006fbc:	b082      	sub	sp, #8
	switch(protocol)
 8006fbe:	d068      	beq.n	8007092 <socket+0xea>
 8006fc0:	1e8b      	subs	r3, r1, #2
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	f200 8084 	bhi.w	80070d0 <socket+0x128>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8006fc8:	0771      	lsls	r1, r6, #29
 8006fca:	f100 8089 	bmi.w	80070e0 <socket+0x138>
	if(flag != 0)
 8006fce:	b146      	cbz	r6, 8006fe2 <socket+0x3a>
   	switch(protocol)
 8006fd0:	2f01      	cmp	r7, #1
 8006fd2:	f000 8082 	beq.w	80070da <socket+0x132>
 8006fd6:	2f02      	cmp	r7, #2
 8006fd8:	d103      	bne.n	8006fe2 <socket+0x3a>
   	      if(flag & SF_IGMP_VER2)
 8006fda:	06b2      	lsls	r2, r6, #26
 8006fdc:	d501      	bpl.n	8006fe2 <socket+0x3a>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8006fde:	0633      	lsls	r3, r6, #24
 8006fe0:	d57e      	bpl.n	80070e0 <socket+0x138>
	CHECK_SOCKNUM();
 8006fe2:	4628      	mov	r0, r5
 8006fe4:	f7ff ff5a 	bl	8006e9c <close.part.0>
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
 8006fe8:	f026 010f 	bic.w	r1, r6, #15
 8006fec:	430f      	orrs	r7, r1
 8006fee:	f105 0408 	add.w	r4, r5, #8
 8006ff2:	01f1      	lsls	r1, r6, #7
 8006ff4:	01a4      	lsls	r4, r4, #6
 8006ff6:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	4339      	orrs	r1, r7
 8006ffe:	f7ff fccb 	bl	8006998 <WIZCHIP_WRITE>
	if(!port)
 8007002:	f1b8 0f00 	cmp.w	r8, #0
 8007006:	d034      	beq.n	8007072 <socket+0xca>
   setSn_PORT(sn,port);	
 8007008:	4641      	mov	r1, r8
 800700a:	f104 000a 	add.w	r0, r4, #10
   setSn_CR(sn,Sn_CR_OPEN);
 800700e:	1ca7      	adds	r7, r4, #2
   setSn_PORT(sn,port);	
 8007010:	f7ff fcc2 	bl	8006998 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8007014:	2101      	movs	r1, #1
 8007016:	4638      	mov	r0, r7
 8007018:	f7ff fcbe 	bl	8006998 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800701c:	4638      	mov	r0, r7
 800701e:	f7ff fcd1 	bl	80069c4 <WIZCHIP_READ>
 8007022:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
 8007026:	d1f9      	bne.n	800701c <socket+0x74>
   sock_io_mode &= ~(1 <<sn);
 8007028:	2301      	movs	r3, #1
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 800702a:	401e      	ands	r6, r3
   sock_io_mode &= ~(1 <<sn);
 800702c:	40ab      	lsls	r3, r5
 800702e:	43db      	mvns	r3, r3
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8007030:	4f2e      	ldr	r7, [pc, #184]	; (80070ec <socket+0x144>)
   sock_remained_size[sn] = 0;
 8007032:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 80070f8 <socket+0x150>
   sock_is_sending &= ~(1<<sn);
 8007036:	482e      	ldr	r0, [pc, #184]	; (80070f0 <socket+0x148>)
   sock_io_mode &= ~(1 <<sn);
 8007038:	8839      	ldrh	r1, [r7, #0]
   sock_remained_size[sn] = 0;
 800703a:	f82e 2015 	strh.w	r2, [lr, r5, lsl #1]
   sock_pack_info[sn] = PACK_COMPLETED;
 800703e:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 80070fc <socket+0x154>
   sock_is_sending &= ~(1<<sn);
 8007042:	f8b0 c000 	ldrh.w	ip, [r0]
   sock_io_mode &= ~(1 <<sn);
 8007046:	b21b      	sxth	r3, r3
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8007048:	40ae      	lsls	r6, r5
   sock_pack_info[sn] = PACK_COMPLETED;
 800704a:	f80e 2005 	strb.w	r2, [lr, r5]
   sock_io_mode &= ~(1 <<sn);
 800704e:	ea03 0201 	and.w	r2, r3, r1
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8007052:	4316      	orrs	r6, r2
   sock_is_sending &= ~(1<<sn);
 8007054:	ea03 030c 	and.w	r3, r3, ip
   while(getSn_SR(sn) == SOCK_CLOSED);
 8007058:	3408      	adds	r4, #8
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 800705a:	803e      	strh	r6, [r7, #0]
   sock_is_sending &= ~(1<<sn);
 800705c:	8003      	strh	r3, [r0, #0]
   while(getSn_SR(sn) == SOCK_CLOSED);
 800705e:	4620      	mov	r0, r4
 8007060:	f7ff fcb0 	bl	80069c4 <WIZCHIP_READ>
 8007064:	b2c0      	uxtb	r0, r0
 8007066:	2800      	cmp	r0, #0
 8007068:	d0f9      	beq.n	800705e <socket+0xb6>
   return (int8_t)sn;
 800706a:	b268      	sxtb	r0, r5
}	   
 800706c:	b002      	add	sp, #8
 800706e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8007072:	f64f 71f0 	movw	r1, #65520	; 0xfff0
	   port = sock_any_port++;
 8007076:	4a1f      	ldr	r2, [pc, #124]	; (80070f4 <socket+0x14c>)
 8007078:	f8b2 8000 	ldrh.w	r8, [r2]
 800707c:	f108 0301 	add.w	r3, r8, #1
 8007080:	b29b      	uxth	r3, r3
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8007082:	428b      	cmp	r3, r1
 8007084:	bf04      	itt	eq
 8007086:	f44f 4340 	moveq.w	r3, #49152	; 0xc000
	   port = sock_any_port++;
 800708a:	f64f 78ef 	movweq	r8, #65519	; 0xffef
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 800708e:	8013      	strh	r3, [r2, #0]
 8007090:	e7ba      	b.n	8007008 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8007092:	2018      	movs	r0, #24
 8007094:	f7ff fc96 	bl	80069c4 <WIZCHIP_READ>
 8007098:	4603      	mov	r3, r0
 800709a:	2018      	movs	r0, #24
 800709c:	0a1b      	lsrs	r3, r3, #8
 800709e:	f88d 3004 	strb.w	r3, [sp, #4]
 80070a2:	f7ff fc8f 	bl	80069c4 <WIZCHIP_READ>
 80070a6:	f88d 0005 	strb.w	r0, [sp, #5]
 80070aa:	201a      	movs	r0, #26
 80070ac:	f7ff fc8a 	bl	80069c4 <WIZCHIP_READ>
 80070b0:	4603      	mov	r3, r0
 80070b2:	201a      	movs	r0, #26
 80070b4:	0a1b      	lsrs	r3, r3, #8
 80070b6:	f88d 3006 	strb.w	r3, [sp, #6]
 80070ba:	f7ff fc83 	bl	80069c4 <WIZCHIP_READ>
 80070be:	f88d 0007 	strb.w	r0, [sp, #7]
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80070c2:	9b01      	ldr	r3, [sp, #4]
 80070c4:	f06f 0002 	mvn.w	r0, #2
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f47f af7d 	bne.w	8006fc8 <socket+0x20>
 80070ce:	e7cd      	b.n	800706c <socket+0xc4>
	switch(protocol)
 80070d0:	f06f 0004 	mvn.w	r0, #4
}	   
 80070d4:	b002      	add	sp, #8
 80070d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK|SF_TCP_ALIGN))==0) return SOCKERR_SOCKFLAG;
 80070da:	f016 0f23 	tst.w	r6, #35	; 0x23
 80070de:	d180      	bne.n	8006fe2 <socket+0x3a>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80070e0:	f06f 0005 	mvn.w	r0, #5
 80070e4:	e7c2      	b.n	800706c <socket+0xc4>
	CHECK_SOCKNUM();
 80070e6:	f04f 30ff 	mov.w	r0, #4294967295
}	   
 80070ea:	4770      	bx	lr
 80070ec:	20000f78 	.word	0x20000f78
 80070f0:	20000f7a 	.word	0x20000f7a
 80070f4:	20000034 	.word	0x20000034
 80070f8:	20000f8c 	.word	0x20000f8c
 80070fc:	20000f7c 	.word	0x20000f7c

08007100 <listen>:
	CHECK_SOCKNUM();
 8007100:	2808      	cmp	r0, #8
 8007102:	d82d      	bhi.n	8007160 <listen+0x60>
{
 8007104:	b570      	push	{r4, r5, r6, lr}
   CHECK_SOCKMODE(Sn_MR_TCP);
 8007106:	f100 0408 	add.w	r4, r0, #8
 800710a:	b2e4      	uxtb	r4, r4
 800710c:	01a4      	lsls	r4, r4, #6
 800710e:	4605      	mov	r5, r0
 8007110:	4620      	mov	r0, r4
 8007112:	f7ff fc57 	bl	80069c4 <WIZCHIP_READ>
 8007116:	f000 000f 	and.w	r0, r0, #15
 800711a:	2801      	cmp	r0, #1
 800711c:	d11a      	bne.n	8007154 <listen+0x54>
	CHECK_SOCKINIT();
 800711e:	f104 0608 	add.w	r6, r4, #8
 8007122:	4630      	mov	r0, r6
 8007124:	f7ff fc4e 	bl	80069c4 <WIZCHIP_READ>
 8007128:	b2c0      	uxtb	r0, r0
 800712a:	2813      	cmp	r0, #19
 800712c:	d115      	bne.n	800715a <listen+0x5a>
	setSn_CR(sn,Sn_CR_LISTEN);
 800712e:	3402      	adds	r4, #2
 8007130:	2102      	movs	r1, #2
 8007132:	4620      	mov	r0, r4
 8007134:	f7ff fc30 	bl	8006998 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8007138:	4620      	mov	r0, r4
 800713a:	f7ff fc43 	bl	80069c4 <WIZCHIP_READ>
 800713e:	b2c0      	uxtb	r0, r0
 8007140:	2800      	cmp	r0, #0
 8007142:	d1f9      	bne.n	8007138 <listen+0x38>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8007144:	4630      	mov	r0, r6
 8007146:	f7ff fc3d 	bl	80069c4 <WIZCHIP_READ>
 800714a:	b2c0      	uxtb	r0, r0
 800714c:	2814      	cmp	r0, #20
 800714e:	d10a      	bne.n	8007166 <listen+0x66>
   return SOCK_OK;
 8007150:	2001      	movs	r0, #1
}
 8007152:	bd70      	pop	{r4, r5, r6, pc}
   CHECK_SOCKMODE(Sn_MR_TCP);
 8007154:	f06f 0004 	mvn.w	r0, #4
}
 8007158:	bd70      	pop	{r4, r5, r6, pc}
	CHECK_SOCKINIT();
 800715a:	f06f 0002 	mvn.w	r0, #2
}
 800715e:	bd70      	pop	{r4, r5, r6, pc}
	CHECK_SOCKNUM();
 8007160:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007164:	4770      	bx	lr
	CHECK_SOCKNUM();
 8007166:	4628      	mov	r0, r5
 8007168:	f7ff fe98 	bl	8006e9c <close.part.0>
         return SOCKERR_SOCKCLOSED;
 800716c:	f06f 0003 	mvn.w	r0, #3
}
 8007170:	bd70      	pop	{r4, r5, r6, pc}
 8007172:	bf00      	nop

08007174 <disconnect>:
   CHECK_SOCKNUM();
 8007174:	2808      	cmp	r0, #8
 8007176:	d83c      	bhi.n	80071f2 <disconnect+0x7e>
{
 8007178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   CHECK_SOCKMODE(Sn_MR_TCP);
 800717a:	f100 0408 	add.w	r4, r0, #8
 800717e:	01a6      	lsls	r6, r4, #6
 8007180:	4605      	mov	r5, r0
 8007182:	4630      	mov	r0, r6
 8007184:	f7ff fc1e 	bl	80069c4 <WIZCHIP_READ>
 8007188:	f000 000f 	and.w	r0, r0, #15
 800718c:	2801      	cmp	r0, #1
 800718e:	d12d      	bne.n	80071ec <disconnect+0x78>
	setSn_CR(sn,Sn_CR_DISCON);
 8007190:	1cb4      	adds	r4, r6, #2
 8007192:	2108      	movs	r1, #8
 8007194:	4620      	mov	r0, r4
 8007196:	f7ff fbff 	bl	8006998 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 800719a:	4620      	mov	r0, r4
 800719c:	f7ff fc12 	bl	80069c4 <WIZCHIP_READ>
 80071a0:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80071a4:	d1f9      	bne.n	800719a <disconnect+0x26>
	sock_is_sending &= ~(1<<sn);
 80071a6:	2101      	movs	r1, #1
 80071a8:	4c13      	ldr	r4, [pc, #76]	; (80071f8 <disconnect+0x84>)
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80071aa:	4b14      	ldr	r3, [pc, #80]	; (80071fc <disconnect+0x88>)
	sock_is_sending &= ~(1<<sn);
 80071ac:	8822      	ldrh	r2, [r4, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80071ae:	881b      	ldrh	r3, [r3, #0]
	sock_is_sending &= ~(1<<sn);
 80071b0:	40a9      	lsls	r1, r5
 80071b2:	ea22 0201 	bic.w	r2, r2, r1
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80071b6:	412b      	asrs	r3, r5
	sock_is_sending &= ~(1<<sn);
 80071b8:	8022      	strh	r2, [r4, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80071ba:	07da      	lsls	r2, r3, #31
 80071bc:	d40f      	bmi.n	80071de <disconnect+0x6a>
	while(getSn_SR(sn) != SOCK_CLOSED)
 80071be:	f106 0708 	add.w	r7, r6, #8
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80071c2:	3606      	adds	r6, #6
 80071c4:	e004      	b.n	80071d0 <disconnect+0x5c>
 80071c6:	4630      	mov	r0, r6
 80071c8:	f7ff fbfc 	bl	80069c4 <WIZCHIP_READ>
 80071cc:	0703      	lsls	r3, r0, #28
 80071ce:	d407      	bmi.n	80071e0 <disconnect+0x6c>
	while(getSn_SR(sn) != SOCK_CLOSED)
 80071d0:	4638      	mov	r0, r7
 80071d2:	f7ff fbf7 	bl	80069c4 <WIZCHIP_READ>
 80071d6:	b2c0      	uxtb	r0, r0
 80071d8:	2800      	cmp	r0, #0
 80071da:	d1f4      	bne.n	80071c6 <disconnect+0x52>
	return SOCK_OK;
 80071dc:	2001      	movs	r0, #1
}
 80071de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECK_SOCKNUM();
 80071e0:	4628      	mov	r0, r5
 80071e2:	f7ff fe5b 	bl	8006e9c <close.part.0>
	      return SOCKERR_TIMEOUT;
 80071e6:	f06f 000c 	mvn.w	r0, #12
}
 80071ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   CHECK_SOCKMODE(Sn_MR_TCP);
 80071ec:	f06f 0004 	mvn.w	r0, #4
}
 80071f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   CHECK_SOCKNUM();
 80071f2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80071f6:	4770      	bx	lr
 80071f8:	20000f7a 	.word	0x20000f7a
 80071fc:	20000f78 	.word	0x20000f78

08007200 <send>:
{
 8007200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   CHECK_SOCKNUM();
 8007204:	2808      	cmp	r0, #8
{
 8007206:	b083      	sub	sp, #12
 8007208:	9101      	str	r1, [sp, #4]
   CHECK_SOCKNUM();
 800720a:	f200 808b 	bhi.w	8007324 <send+0x124>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800720e:	f100 0808 	add.w	r8, r0, #8
 8007212:	ea4f 1888 	mov.w	r8, r8, lsl #6
 8007216:	4605      	mov	r5, r0
 8007218:	4640      	mov	r0, r8
 800721a:	4614      	mov	r4, r2
 800721c:	f7ff fbd2 	bl	80069c4 <WIZCHIP_READ>
 8007220:	f000 000f 	and.w	r0, r0, #15
 8007224:	2801      	cmp	r0, #1
 8007226:	f040 8083 	bne.w	8007330 <send+0x130>
   CHECK_SOCKDATA();
 800722a:	2c00      	cmp	r4, #0
 800722c:	d07d      	beq.n	800732a <send+0x12a>
   tmp = getSn_SR(sn);
 800722e:	f108 0708 	add.w	r7, r8, #8
 8007232:	4638      	mov	r0, r7
 8007234:	f7ff fbc6 	bl	80069c4 <WIZCHIP_READ>
 8007238:	b2c0      	uxtb	r0, r0
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 800723a:	2817      	cmp	r0, #23
 800723c:	d001      	beq.n	8007242 <send+0x42>
 800723e:	281c      	cmp	r0, #28
 8007240:	d179      	bne.n	8007336 <send+0x136>
   if( sock_is_sending & (1<<sn) )
 8007242:	f8df b104 	ldr.w	fp, [pc, #260]	; 8007348 <send+0x148>
 8007246:	f8bb 3000 	ldrh.w	r3, [fp]
 800724a:	412b      	asrs	r3, r5
 800724c:	07d9      	lsls	r1, r3, #31
 800724e:	d443      	bmi.n	80072d8 <send+0xd8>
         sock_is_sending &= ~(1<<sn);         
 8007250:	2601      	movs	r6, #1
 8007252:	40ae      	lsls	r6, r5
   freesize = getSn_TxMAX(sn);
 8007254:	4628      	mov	r0, r5
 8007256:	f7ff fbcb 	bl	80069f0 <getTMSR>
 800725a:	0280      	lsls	r0, r0, #10
 800725c:	b280      	uxth	r0, r0
 800725e:	4284      	cmp	r4, r0
 8007260:	bf28      	it	cs
 8007262:	4604      	movcs	r4, r0
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8007264:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 800734c <send+0x14c>
      freesize = getSn_TX_FSR(sn);
 8007268:	4628      	mov	r0, r5
 800726a:	f7ff fc11 	bl	8006a90 <getSn_TX_FSR>
 800726e:	4682      	mov	sl, r0
      tmp = getSn_SR(sn);
 8007270:	4638      	mov	r0, r7
 8007272:	f7ff fba7 	bl	80069c4 <WIZCHIP_READ>
 8007276:	b2c3      	uxtb	r3, r0
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8007278:	2b17      	cmp	r3, #23
      freesize = getSn_TX_FSR(sn);
 800727a:	fa1f fa8a 	uxth.w	sl, sl
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800727e:	d001      	beq.n	8007284 <send+0x84>
 8007280:	2b1c      	cmp	r3, #28
 8007282:	d13a      	bne.n	80072fa <send+0xfa>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8007284:	f8b9 3000 	ldrh.w	r3, [r9]
 8007288:	4233      	tst	r3, r6
 800728a:	d033      	beq.n	80072f4 <send+0xf4>
 800728c:	4554      	cmp	r4, sl
 800728e:	d82d      	bhi.n	80072ec <send+0xec>
   wiz_send_data(sn, buf, len);
 8007290:	4622      	mov	r2, r4
 8007292:	4628      	mov	r0, r5
 8007294:	9901      	ldr	r1, [sp, #4]
 8007296:	f7ff fc5f 	bl	8006b58 <wiz_send_data>
      setSn_TX_WRSR(sn,len);
 800729a:	f108 0020 	add.w	r0, r8, #32
 800729e:	2100      	movs	r1, #0
 80072a0:	f7ff fb7a 	bl	8006998 <WIZCHIP_WRITE>
 80072a4:	f108 0022 	add.w	r0, r8, #34	; 0x22
 80072a8:	4621      	mov	r1, r4
   setSn_CR(sn,Sn_CR_SEND);
 80072aa:	f108 0802 	add.w	r8, r8, #2
      setSn_TX_WRSR(sn,len);
 80072ae:	f7ff fb73 	bl	8006998 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_SEND);
 80072b2:	2120      	movs	r1, #32
 80072b4:	4640      	mov	r0, r8
 80072b6:	f7ff fb6f 	bl	8006998 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80072ba:	4640      	mov	r0, r8
 80072bc:	f7ff fb82 	bl	80069c4 <WIZCHIP_READ>
 80072c0:	b2c0      	uxtb	r0, r0
 80072c2:	2800      	cmp	r0, #0
 80072c4:	d1f9      	bne.n	80072ba <send+0xba>
   return (int32_t)len;
 80072c6:	4620      	mov	r0, r4
   sock_is_sending |= (1 << sn);
 80072c8:	f8bb 3000 	ldrh.w	r3, [fp]
 80072cc:	431e      	orrs	r6, r3
 80072ce:	f8ab 6000 	strh.w	r6, [fp]
}
 80072d2:	b003      	add	sp, #12
 80072d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      tmp = getSn_IR(sn);
 80072d8:	f108 0606 	add.w	r6, r8, #6
 80072dc:	4630      	mov	r0, r6
 80072de:	f7ff fb71 	bl	80069c4 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
 80072e2:	06c2      	lsls	r2, r0, #27
      tmp = getSn_IR(sn);
 80072e4:	b2c3      	uxtb	r3, r0
      if(tmp & Sn_IR_SENDOK)
 80072e6:	d410      	bmi.n	800730a <send+0x10a>
      else if(tmp & Sn_IR_TIMEOUT)
 80072e8:	071b      	lsls	r3, r3, #28
 80072ea:	d427      	bmi.n	800733c <send+0x13c>
      else return SOCK_BUSY;
 80072ec:	2000      	movs	r0, #0
}
 80072ee:	b003      	add	sp, #12
 80072f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(len <= freesize) break;
 80072f4:	4554      	cmp	r4, sl
 80072f6:	d8b7      	bhi.n	8007268 <send+0x68>
 80072f8:	e7ca      	b.n	8007290 <send+0x90>
	CHECK_SOCKNUM();
 80072fa:	4628      	mov	r0, r5
 80072fc:	f7ff fdce 	bl	8006e9c <close.part.0>
         return SOCKERR_SOCKSTATUS;
 8007300:	f06f 0006 	mvn.w	r0, #6
}
 8007304:	b003      	add	sp, #12
 8007306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         setSn_IR(sn, Sn_IR_SENDOK);
 800730a:	4630      	mov	r0, r6
         sock_is_sending &= ~(1<<sn);         
 800730c:	2601      	movs	r6, #1
         setSn_IR(sn, Sn_IR_SENDOK);
 800730e:	2110      	movs	r1, #16
 8007310:	f7ff fb42 	bl	8006998 <WIZCHIP_WRITE>
         sock_is_sending &= ~(1<<sn);         
 8007314:	f8bb 3000 	ldrh.w	r3, [fp]
 8007318:	40ae      	lsls	r6, r5
 800731a:	ea23 0306 	bic.w	r3, r3, r6
 800731e:	f8ab 3000 	strh.w	r3, [fp]
 8007322:	e797      	b.n	8007254 <send+0x54>
   CHECK_SOCKNUM();
 8007324:	f04f 30ff 	mov.w	r0, #4294967295
 8007328:	e7e1      	b.n	80072ee <send+0xee>
   CHECK_SOCKDATA();
 800732a:	f06f 000d 	mvn.w	r0, #13
 800732e:	e7de      	b.n	80072ee <send+0xee>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8007330:	f06f 0004 	mvn.w	r0, #4
 8007334:	e7db      	b.n	80072ee <send+0xee>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8007336:	f06f 0006 	mvn.w	r0, #6
 800733a:	e7d8      	b.n	80072ee <send+0xee>
	CHECK_SOCKNUM();
 800733c:	4628      	mov	r0, r5
 800733e:	f7ff fdad 	bl	8006e9c <close.part.0>
         return SOCKERR_TIMEOUT;
 8007342:	f06f 000c 	mvn.w	r0, #12
 8007346:	e7d2      	b.n	80072ee <send+0xee>
 8007348:	20000f7a 	.word	0x20000f7a
 800734c:	20000f78 	.word	0x20000f78

08007350 <recv>:
{
 8007350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   CHECK_SOCKNUM();
 8007354:	2808      	cmp	r0, #8
{
 8007356:	b085      	sub	sp, #20
 8007358:	9101      	str	r1, [sp, #4]
   CHECK_SOCKNUM();
 800735a:	f200 80ec 	bhi.w	8007536 <recv+0x1e6>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800735e:	f100 0908 	add.w	r9, r0, #8
 8007362:	ea4f 1989 	mov.w	r9, r9, lsl #6
 8007366:	4604      	mov	r4, r0
 8007368:	4648      	mov	r0, r9
 800736a:	4616      	mov	r6, r2
 800736c:	f7ff fb2a 	bl	80069c4 <WIZCHIP_READ>
 8007370:	f000 050f 	and.w	r5, r0, #15
 8007374:	2d01      	cmp	r5, #1
 8007376:	f040 80e4 	bne.w	8007542 <recv+0x1f2>
   CHECK_SOCKDATA();
 800737a:	2e00      	cmp	r6, #0
 800737c:	f000 80de 	beq.w	800753c <recv+0x1ec>
   recvsize = getSn_RxMAX(sn);
 8007380:	4620      	mov	r0, r4
 8007382:	f7ff fb5d 	bl	8006a40 <getRMSR>
   if(sock_remained_size[sn] == 0)
 8007386:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 8007550 <recv+0x200>
   recvsize = getSn_RxMAX(sn);
 800738a:	0280      	lsls	r0, r0, #10
   if(sock_remained_size[sn] == 0)
 800738c:	f83a 3014 	ldrh.w	r3, [sl, r4, lsl #1]
   recvsize = getSn_RxMAX(sn);
 8007390:	b282      	uxth	r2, r0
 8007392:	9200      	str	r2, [sp, #0]
   if(sock_remained_size[sn] == 0)
 8007394:	bb3b      	cbnz	r3, 80073e6 <recv+0x96>
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8007396:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007554 <recv+0x204>
 800739a:	40a5      	lsls	r5, r4
         tmp = getSn_SR(sn);
 800739c:	f109 0708 	add.w	r7, r9, #8
         recvsize = getSn_RX_RSR(sn);
 80073a0:	4620      	mov	r0, r4
 80073a2:	f7ff fba3 	bl	8006aec <getSn_RX_RSR>
 80073a6:	4683      	mov	fp, r0
         tmp = getSn_SR(sn);
 80073a8:	4638      	mov	r0, r7
 80073aa:	f7ff fb0b 	bl	80069c4 <WIZCHIP_READ>
 80073ae:	b2c0      	uxtb	r0, r0
         if (tmp != SOCK_ESTABLISHED)
 80073b0:	2817      	cmp	r0, #23
         recvsize = getSn_RX_RSR(sn);
 80073b2:	fa1f fb8b 	uxth.w	fp, fp
         if (tmp != SOCK_ESTABLISHED)
 80073b6:	d05a      	beq.n	800746e <recv+0x11e>
            if(tmp == SOCK_CLOSE_WAIT)
 80073b8:	281c      	cmp	r0, #28
 80073ba:	f040 8091 	bne.w	80074e0 <recv+0x190>
               if(recvsize != 0) break;
 80073be:	f1bb 0f00 	cmp.w	fp, #0
 80073c2:	d15b      	bne.n	800747c <recv+0x12c>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80073c4:	4620      	mov	r0, r4
 80073c6:	f7ff fb63 	bl	8006a90 <getSn_TX_FSR>
 80073ca:	4683      	mov	fp, r0
 80073cc:	4620      	mov	r0, r4
 80073ce:	f7ff fb0f 	bl	80069f0 <getTMSR>
 80073d2:	ebbb 2f80 	cmp.w	fp, r0, lsl #10
 80073d6:	f000 8083 	beq.w	80074e0 <recv+0x190>
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80073da:	f8b8 3000 	ldrh.w	r3, [r8]
 80073de:	422b      	tst	r3, r5
 80073e0:	d0de      	beq.n	80073a0 <recv+0x50>
 80073e2:	2000      	movs	r0, #0
 80073e4:	e040      	b.n	8007468 <recv+0x118>
 80073e6:	4693      	mov	fp, r2
   if((sock_remained_size[sn] == 0) || (getSn_MR(sn) & Sn_MR_ALIGN))
 80073e8:	4648      	mov	r0, r9
 80073ea:	f7ff faeb 	bl	80069c4 <WIZCHIP_READ>
 80073ee:	05c5      	lsls	r5, r0, #23
 80073f0:	d56f      	bpl.n	80074d2 <recv+0x182>
      mr = getMR();
 80073f2:	2000      	movs	r0, #0
 80073f4:	f7ff fae6 	bl	80069c4 <WIZCHIP_READ>
 80073f8:	4605      	mov	r5, r0
      if((getSn_MR(sn) & Sn_MR_ALIGN)==0)
 80073fa:	4648      	mov	r0, r9
 80073fc:	f7ff fae2 	bl	80069c4 <WIZCHIP_READ>
 8007400:	05c0      	lsls	r0, r0, #23
 8007402:	d579      	bpl.n	80074f8 <recv+0x1a8>
   if(sock_pack_info[sn] & PACK_FIFOBYTE)
 8007404:	4d50      	ldr	r5, [pc, #320]	; (8007548 <recv+0x1f8>)
      sock_remained_size[sn] = recvsize;
 8007406:	f82a b014 	strh.w	fp, [sl, r4, lsl #1]
   if(sock_pack_info[sn] & PACK_FIFOBYTE)
 800740a:	5d2a      	ldrb	r2, [r5, r4]
 800740c:	f002 0102 	and.w	r1, r2, #2
   if(len > sock_remained_size[sn]) len = sock_remained_size[sn];
 8007410:	9b00      	ldr	r3, [sp, #0]
 8007412:	429e      	cmp	r6, r3
 8007414:	bf28      	it	cs
 8007416:	461e      	movcs	r6, r3
 8007418:	455e      	cmp	r6, fp
 800741a:	bf28      	it	cs
 800741c:	465e      	movcs	r6, fp
   if(sock_pack_info[sn] & PACK_FIFOBYTE)
 800741e:	2900      	cmp	r1, #0
 8007420:	f000 8081 	beq.w	8007526 <recv+0x1d6>
      *buf = sock_remained_byte[sn];
 8007424:	4a49      	ldr	r2, [pc, #292]	; (800754c <recv+0x1fc>)
      sock_remained_size[sn] -= 1;
 8007426:	f10b 33ff 	add.w	r3, fp, #4294967295
      *buf = sock_remained_byte[sn];
 800742a:	5d12      	ldrb	r2, [r2, r4]
      sock_remained_size[sn] -= 1;
 800742c:	fa1f fb83 	uxth.w	fp, r3
      *buf = sock_remained_byte[sn];
 8007430:	9b01      	ldr	r3, [sp, #4]
      recvsize -= 1;
 8007432:	1e77      	subs	r7, r6, #1
      *buf = sock_remained_byte[sn];
 8007434:	f803 2b01 	strb.w	r2, [r3], #1
      sock_pack_info[sn] &= ~(PACK_FIFOBYTE);
 8007438:	5d2a      	ldrb	r2, [r5, r4]
      sock_remained_size[sn] -= 1;
 800743a:	f82a b014 	strh.w	fp, [sl, r4, lsl #1]
      sock_pack_info[sn] &= ~(PACK_FIFOBYTE);
 800743e:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
      *buf = sock_remained_byte[sn];
 8007442:	9301      	str	r3, [sp, #4]
      sock_pack_info[sn] &= ~(PACK_FIFOBYTE);
 8007444:	552a      	strb	r2, [r5, r4]
      recvsize -= 1;
 8007446:	b2bf      	uxth	r7, r7
   if(recvsize != 0)
 8007448:	bb0f      	cbnz	r7, 800748e <recv+0x13e>
   if(sock_remained_size[sn] != 0)
 800744a:	f1bb 0f00 	cmp.w	fp, #0
 800744e:	d14f      	bne.n	80074f0 <recv+0x1a0>
   else sock_pack_info[sn] = PACK_COMPLETED;
 8007450:	2300      	movs	r3, #0
 8007452:	552b      	strb	r3, [r5, r4]
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
 8007454:	4648      	mov	r0, r9
 8007456:	f7ff fab5 	bl	80069c4 <WIZCHIP_READ>
 800745a:	05c3      	lsls	r3, r0, #23
 800745c:	bf48      	it	mi
 800745e:	2300      	movmi	r3, #0
   return (int32_t)len;
 8007460:	4630      	mov	r0, r6
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
 8007462:	bf48      	it	mi
 8007464:	f82a 3014 	strhmi.w	r3, [sl, r4, lsl #1]
}
 8007468:	b005      	add	sp, #20
 800746a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 800746e:	f8b8 2000 	ldrh.w	r2, [r8]
 8007472:	422a      	tst	r2, r5
 8007474:	d007      	beq.n	8007486 <recv+0x136>
 8007476:	f1bb 0f00 	cmp.w	fp, #0
 800747a:	d0b2      	beq.n	80073e2 <recv+0x92>
   if((sock_remained_size[sn] == 0) || (getSn_MR(sn) & Sn_MR_ALIGN))
 800747c:	f83a 2014 	ldrh.w	r2, [sl, r4, lsl #1]
 8007480:	2a00      	cmp	r2, #0
 8007482:	d0b6      	beq.n	80073f2 <recv+0xa2>
 8007484:	e7b0      	b.n	80073e8 <recv+0x98>
         if(recvsize != 0) break;
 8007486:	f1bb 0f00 	cmp.w	fp, #0
 800748a:	d089      	beq.n	80073a0 <recv+0x50>
 800748c:	e7f6      	b.n	800747c <recv+0x12c>
      wiz_recv_data(sn, buf, recvsize);
 800748e:	4620      	mov	r0, r4
 8007490:	9901      	ldr	r1, [sp, #4]
 8007492:	463a      	mov	r2, r7
      setSn_CR(sn,Sn_CR_RECV);
 8007494:	f109 0802 	add.w	r8, r9, #2
      wiz_recv_data(sn, buf, recvsize);
 8007498:	f7ff fb88 	bl	8006bac <wiz_recv_data>
      setSn_CR(sn,Sn_CR_RECV);
 800749c:	2140      	movs	r1, #64	; 0x40
 800749e:	4640      	mov	r0, r8
 80074a0:	f7ff fa7a 	bl	8006998 <WIZCHIP_WRITE>
      while(getSn_CR(sn));
 80074a4:	4640      	mov	r0, r8
 80074a6:	f7ff fa8d 	bl	80069c4 <WIZCHIP_READ>
 80074aa:	b2c0      	uxtb	r0, r0
 80074ac:	2800      	cmp	r0, #0
 80074ae:	d1f9      	bne.n	80074a4 <recv+0x154>
   sock_remained_size[sn] -= recvsize;
 80074b0:	f83a 3014 	ldrh.w	r3, [sl, r4, lsl #1]
 80074b4:	1bdb      	subs	r3, r3, r7
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	f82a 3014 	strh.w	r3, [sl, r4, lsl #1]
   if(sock_remained_size[sn] != 0)
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d0c7      	beq.n	8007450 <recv+0x100>
      sock_pack_info[sn] |= PACK_REMAINED;
 80074c0:	5d2b      	ldrb	r3, [r5, r4]
      if(recvsize & 0x1) sock_pack_info[sn] |= PACK_FIFOBYTE;
 80074c2:	07fa      	lsls	r2, r7, #31
      sock_pack_info[sn] |= PACK_REMAINED;
 80074c4:	bf54      	ite	pl
 80074c6:	f043 0301 	orrpl.w	r3, r3, #1
      if(recvsize & 0x1) sock_pack_info[sn] |= PACK_FIFOBYTE;
 80074ca:	f043 0303 	orrmi.w	r3, r3, #3
 80074ce:	552b      	strb	r3, [r5, r4]
 80074d0:	e7c0      	b.n	8007454 <recv+0x104>
   if(sock_pack_info[sn] & PACK_FIFOBYTE)
 80074d2:	4d1d      	ldr	r5, [pc, #116]	; (8007548 <recv+0x1f8>)
   if(len > sock_remained_size[sn]) len = sock_remained_size[sn];
 80074d4:	f83a b014 	ldrh.w	fp, [sl, r4, lsl #1]
   if(sock_pack_info[sn] & PACK_FIFOBYTE)
 80074d8:	5d2a      	ldrb	r2, [r5, r4]
 80074da:	f002 0102 	and.w	r1, r2, #2
 80074de:	e797      	b.n	8007410 <recv+0xc0>
	CHECK_SOCKNUM();
 80074e0:	4620      	mov	r0, r4
 80074e2:	f7ff fcdb 	bl	8006e9c <close.part.0>
                  return SOCKERR_SOCKSTATUS;
 80074e6:	f06f 0006 	mvn.w	r0, #6
}
 80074ea:	b005      	add	sp, #20
 80074ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      sock_pack_info[sn] |= PACK_REMAINED;
 80074f0:	f042 0201 	orr.w	r2, r2, #1
 80074f4:	552a      	strb	r2, [r5, r4]
      if(recvsize & 0x1) sock_pack_info[sn] |= PACK_FIFOBYTE;
 80074f6:	e7ad      	b.n	8007454 <recv+0x104>
         wiz_recv_data(sn,head,2);
 80074f8:	a903      	add	r1, sp, #12
 80074fa:	2202      	movs	r2, #2
 80074fc:	4620      	mov	r0, r4
 80074fe:	f7ff fb55 	bl	8006bac <wiz_recv_data>
         if(mr & MR_FS)
 8007502:	05e9      	lsls	r1, r5, #23
 8007504:	d511      	bpl.n	800752a <recv+0x1da>
            recvsize = (((uint16_t)head[1]) << 8) | ((uint16_t)head[0]);
 8007506:	f8bd b00c 	ldrh.w	fp, [sp, #12]
         sock_pack_info[sn] = PACK_FIRST;
 800750a:	9b00      	ldr	r3, [sp, #0]
 800750c:	2280      	movs	r2, #128	; 0x80
 800750e:	429e      	cmp	r6, r3
 8007510:	bf28      	it	cs
 8007512:	461e      	movcs	r6, r3
 8007514:	455e      	cmp	r6, fp
 8007516:	bf28      	it	cs
 8007518:	465e      	movcs	r6, fp
 800751a:	4d0b      	ldr	r5, [pc, #44]	; (8007548 <recv+0x1f8>)
 800751c:	4637      	mov	r7, r6
      sock_remained_size[sn] = recvsize;
 800751e:	f82a b014 	strh.w	fp, [sl, r4, lsl #1]
         sock_pack_info[sn] = PACK_FIRST;
 8007522:	552a      	strb	r2, [r5, r4]
   if(sock_pack_info[sn] & PACK_FIFOBYTE)
 8007524:	e790      	b.n	8007448 <recv+0xf8>
 8007526:	4637      	mov	r7, r6
 8007528:	e78e      	b.n	8007448 <recv+0xf8>
            recvsize = (((uint16_t)head[0]) << 8) | ((uint16_t)head[1]);
 800752a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800752e:	ba5b      	rev16	r3, r3
 8007530:	fa1f fb83 	uxth.w	fp, r3
 8007534:	e7e9      	b.n	800750a <recv+0x1ba>
   CHECK_SOCKNUM();
 8007536:	f04f 30ff 	mov.w	r0, #4294967295
 800753a:	e795      	b.n	8007468 <recv+0x118>
   CHECK_SOCKDATA();
 800753c:	f06f 000d 	mvn.w	r0, #13
 8007540:	e792      	b.n	8007468 <recv+0x118>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8007542:	f06f 0004 	mvn.w	r0, #4
 8007546:	e78f      	b.n	8007468 <recv+0x118>
 8007548:	20000f7c 	.word	0x20000f7c
 800754c:	20000f84 	.word	0x20000f84
 8007550:	20000f8c 	.word	0x20000f8c
 8007554:	20000f78 	.word	0x20000f78

08007558 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop

0800755c <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 800755c:	8800      	ldrh	r0, [r0, #0]
 800755e:	b280      	uxth	r0, r0
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop

08007564 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8007564:	8001      	strh	r1, [r0, #0]
 8007566:	4770      	bx	lr

08007568 <wizchip_cris_exit>:
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop

0800756c <wizchip_cs_select>:
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop

08007570 <wizchip_cs_deselect>:
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop

08007574 <reg_wizchip_cs_cbfunc>:
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
   if(!cs_sel || !cs_desel)
 8007574:	b120      	cbz	r0, 8007580 <reg_wizchip_cs_cbfunc+0xc>
 8007576:	b119      	cbz	r1, 8007580 <reg_wizchip_cs_cbfunc+0xc>
 8007578:	4b04      	ldr	r3, [pc, #16]	; (800758c <reg_wizchip_cs_cbfunc+0x18>)
 800757a:	e9c3 0105 	strd	r0, r1, [r3, #20]
   else
   {
      WIZCHIP.CS._select   = cs_sel;
      WIZCHIP.CS._deselect = cs_desel;
   }
}
 800757e:	4770      	bx	lr
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8007580:	4903      	ldr	r1, [pc, #12]	; (8007590 <reg_wizchip_cs_cbfunc+0x1c>)
      WIZCHIP.CS._select   = wizchip_cs_select;
 8007582:	4804      	ldr	r0, [pc, #16]	; (8007594 <reg_wizchip_cs_cbfunc+0x20>)
 8007584:	4b01      	ldr	r3, [pc, #4]	; (800758c <reg_wizchip_cs_cbfunc+0x18>)
 8007586:	e9c3 0105 	strd	r0, r1, [r3, #20]
}
 800758a:	4770      	bx	lr
 800758c:	20000038 	.word	0x20000038
 8007590:	08007571 	.word	0x08007571
 8007594:	0800756d 	.word	0x0800756d

08007598 <reg_wizchip_bus_cbfunc>:

//M20150515 : For integrating with W5300
//void reg_wizchip_bus_cbfunc(uint8_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, uint8_t wb))
void reg_wizchip_bus_cbfunc(iodata_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, iodata_t wb))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_BUS_));
 8007598:	4b07      	ldr	r3, [pc, #28]	; (80075b8 <reg_wizchip_bus_cbfunc+0x20>)
 800759a:	881a      	ldrh	r2, [r3, #0]
 800759c:	05d2      	lsls	r2, r2, #23
 800759e:	d400      	bmi.n	80075a2 <reg_wizchip_bus_cbfunc+0xa>
 80075a0:	e7fe      	b.n	80075a0 <reg_wizchip_bus_cbfunc+0x8>
   {
      WIZCHIP.IF.BUS._read_byte   = bus_rb;
      WIZCHIP.IF.BUS._write_byte  = bus_wb;
   }
   */
   if(!bus_rb || !bus_wb)
 80075a2:	b118      	cbz	r0, 80075ac <reg_wizchip_bus_cbfunc+0x14>
 80075a4:	b111      	cbz	r1, 80075ac <reg_wizchip_bus_cbfunc+0x14>
 80075a6:	e9c3 0107 	strd	r0, r1, [r3, #28]
   else
   {
      WIZCHIP.IF.BUS._read_data   = bus_rb;
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}
 80075aa:	4770      	bx	lr
      WIZCHIP.IF.BUS._write_data  = wizchip_bus_writedata;
 80075ac:	4903      	ldr	r1, [pc, #12]	; (80075bc <reg_wizchip_bus_cbfunc+0x24>)
      WIZCHIP.IF.BUS._read_data   = wizchip_bus_readdata;
 80075ae:	4804      	ldr	r0, [pc, #16]	; (80075c0 <reg_wizchip_bus_cbfunc+0x28>)
 80075b0:	e9c3 0107 	strd	r0, r1, [r3, #28]
}
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	20000038 	.word	0x20000038
 80075bc:	08007565 	.word	0x08007565
 80075c0:	0800755d 	.word	0x0800755d

080075c4 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 80075c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80075c8:	2008      	movs	r0, #8
{
 80075ca:	b08b      	sub	sp, #44	; 0x2c
   getSHAR(mac);
 80075cc:	f7ff f9fa 	bl	80069c4 <WIZCHIP_READ>
 80075d0:	4602      	mov	r2, r0
 80075d2:	2008      	movs	r0, #8
 80075d4:	9209      	str	r2, [sp, #36]	; 0x24
 80075d6:	f7ff f9f5 	bl	80069c4 <WIZCHIP_READ>
 80075da:	4603      	mov	r3, r0
 80075dc:	200a      	movs	r0, #10
 80075de:	9308      	str	r3, [sp, #32]
 80075e0:	f7ff f9f0 	bl	80069c4 <WIZCHIP_READ>
 80075e4:	4683      	mov	fp, r0
 80075e6:	200a      	movs	r0, #10
 80075e8:	f7ff f9ec 	bl	80069c4 <WIZCHIP_READ>
 80075ec:	4682      	mov	sl, r0
 80075ee:	200c      	movs	r0, #12
 80075f0:	f7ff f9e8 	bl	80069c4 <WIZCHIP_READ>
 80075f4:	4601      	mov	r1, r0
 80075f6:	200c      	movs	r0, #12
 80075f8:	9100      	str	r1, [sp, #0]
 80075fa:	f7ff f9e3 	bl	80069c4 <WIZCHIP_READ>
 80075fe:	4601      	mov	r1, r0
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8007600:	2010      	movs	r0, #16
   getSHAR(mac);
 8007602:	9101      	str	r1, [sp, #4]
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8007604:	f7ff f9de 	bl	80069c4 <WIZCHIP_READ>
 8007608:	4601      	mov	r1, r0
 800760a:	2010      	movs	r0, #16
 800760c:	9102      	str	r1, [sp, #8]
 800760e:	f7ff f9d9 	bl	80069c4 <WIZCHIP_READ>
 8007612:	4601      	mov	r1, r0
 8007614:	2012      	movs	r0, #18
 8007616:	9103      	str	r1, [sp, #12]
 8007618:	f7ff f9d4 	bl	80069c4 <WIZCHIP_READ>
 800761c:	4601      	mov	r1, r0
 800761e:	2012      	movs	r0, #18
 8007620:	9104      	str	r1, [sp, #16]
 8007622:	f7ff f9cf 	bl	80069c4 <WIZCHIP_READ>
 8007626:	4601      	mov	r1, r0
 8007628:	2014      	movs	r0, #20
 800762a:	9105      	str	r1, [sp, #20]
 800762c:	f7ff f9ca 	bl	80069c4 <WIZCHIP_READ>
 8007630:	4601      	mov	r1, r0
 8007632:	2014      	movs	r0, #20
 8007634:	9106      	str	r1, [sp, #24]
 8007636:	f7ff f9c5 	bl	80069c4 <WIZCHIP_READ>
 800763a:	4601      	mov	r1, r0
 800763c:	2016      	movs	r0, #22
 800763e:	9107      	str	r1, [sp, #28]
 8007640:	f7ff f9c0 	bl	80069c4 <WIZCHIP_READ>
 8007644:	4681      	mov	r9, r0
 8007646:	2016      	movs	r0, #22
 8007648:	f7ff f9bc 	bl	80069c4 <WIZCHIP_READ>
 800764c:	4680      	mov	r8, r0
 800764e:	2018      	movs	r0, #24
 8007650:	f7ff f9b8 	bl	80069c4 <WIZCHIP_READ>
 8007654:	4607      	mov	r7, r0
 8007656:	2018      	movs	r0, #24
 8007658:	f7ff f9b4 	bl	80069c4 <WIZCHIP_READ>
 800765c:	4606      	mov	r6, r0
 800765e:	201a      	movs	r0, #26
 8007660:	f7ff f9b0 	bl	80069c4 <WIZCHIP_READ>
 8007664:	4605      	mov	r5, r0
 8007666:	201a      	movs	r0, #26
 8007668:	f7ff f9ac 	bl	80069c4 <WIZCHIP_READ>
   setMR(MR_RST);
 800766c:	2180      	movs	r1, #128	; 0x80
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800766e:	4604      	mov	r4, r0
   setMR(MR_RST);
 8007670:	2000      	movs	r0, #0
 8007672:	f7ff f991 	bl	8006998 <WIZCHIP_WRITE>
   getMR(); // for delay
 8007676:	2000      	movs	r0, #0
 8007678:	f7ff f9a4 	bl	80069c4 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800767c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800767e:	9b08      	ldr	r3, [sp, #32]
 8007680:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 8007684:	fa51 f183 	uxtab	r1, r1, r3
 8007688:	2008      	movs	r0, #8
 800768a:	b289      	uxth	r1, r1
 800768c:	f7ff f984 	bl	8006998 <WIZCHIP_WRITE>
 8007690:	f02b 01ff 	bic.w	r1, fp, #255	; 0xff
 8007694:	fa51 f18a 	uxtab	r1, r1, sl
 8007698:	200a      	movs	r0, #10
 800769a:	b289      	uxth	r1, r1
 800769c:	f7ff f97c 	bl	8006998 <WIZCHIP_WRITE>
 80076a0:	9b00      	ldr	r3, [sp, #0]
 80076a2:	200c      	movs	r0, #12
 80076a4:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80076a8:	9b01      	ldr	r3, [sp, #4]
 80076aa:	fa51 f183 	uxtab	r1, r1, r3
 80076ae:	b289      	uxth	r1, r1
 80076b0:	f7ff f972 	bl	8006998 <WIZCHIP_WRITE>
   setGAR(gw);
 80076b4:	9b02      	ldr	r3, [sp, #8]
 80076b6:	2010      	movs	r0, #16
 80076b8:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80076bc:	9b03      	ldr	r3, [sp, #12]
 80076be:	fa51 f183 	uxtab	r1, r1, r3
 80076c2:	b289      	uxth	r1, r1
 80076c4:	f7ff f968 	bl	8006998 <WIZCHIP_WRITE>
 80076c8:	9b04      	ldr	r3, [sp, #16]
 80076ca:	2012      	movs	r0, #18
 80076cc:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80076d0:	9b05      	ldr	r3, [sp, #20]
 80076d2:	fa51 f183 	uxtab	r1, r1, r3
 80076d6:	b289      	uxth	r1, r1
 80076d8:	f7ff f95e 	bl	8006998 <WIZCHIP_WRITE>
   setSUBR(sn);
 80076dc:	9b06      	ldr	r3, [sp, #24]
 80076de:	2014      	movs	r0, #20
 80076e0:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80076e4:	9b07      	ldr	r3, [sp, #28]
 80076e6:	fa51 f183 	uxtab	r1, r1, r3
 80076ea:	b289      	uxth	r1, r1
 80076ec:	f7ff f954 	bl	8006998 <WIZCHIP_WRITE>
 80076f0:	f029 01ff 	bic.w	r1, r9, #255	; 0xff
 80076f4:	fa51 f188 	uxtab	r1, r1, r8
 80076f8:	2016      	movs	r0, #22
 80076fa:	b289      	uxth	r1, r1
 80076fc:	f7ff f94c 	bl	8006998 <WIZCHIP_WRITE>
   setSIPR(sip);
 8007700:	f027 01ff 	bic.w	r1, r7, #255	; 0xff
 8007704:	fa51 f186 	uxtab	r1, r1, r6
 8007708:	2018      	movs	r0, #24
 800770a:	b289      	uxth	r1, r1
 800770c:	f7ff f944 	bl	8006998 <WIZCHIP_WRITE>
 8007710:	201a      	movs	r0, #26
 8007712:	f025 01ff 	bic.w	r1, r5, #255	; 0xff
 8007716:	fa51 f184 	uxtab	r1, r1, r4
 800771a:	b289      	uxth	r1, r1
}
 800771c:	b00b      	add	sp, #44	; 0x2c
 800771e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   setSIPR(sip);
 8007722:	f7ff b939 	b.w	8006998 <WIZCHIP_WRITE>
 8007726:	bf00      	nop

08007728 <ctlwizchip>:
{
 8007728:	b510      	push	{r4, lr}
 800772a:	460c      	mov	r4, r1
   switch(cwtype)
 800772c:	2808      	cmp	r0, #8
 800772e:	d841      	bhi.n	80077b4 <ctlwizchip+0x8c>
 8007730:	e8df f000 	tbb	[pc, r0]
 8007734:	49580544 	.word	0x49580544
 8007738:	40406482 	.word	0x40406482
 800773c:	70          	.byte	0x70
 800773d:	00          	.byte	0x00
         if(arg != 0) 
 800773e:	2900      	cmp	r1, #0
 8007740:	d03c      	beq.n	80077bc <ctlwizchip+0x94>
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
   wizchip_sw_reset();
 8007742:	f7ff ff3f 	bl	80075c4 <wizchip_sw_reset>
      tmp = 0;
   //M20150601 : For integrating with W5300
   #if _WIZCHIP_ == W5300
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
		{
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8007746:	7823      	ldrb	r3, [r4, #0]
 8007748:	2b3f      	cmp	r3, #63	; 0x3f
 800774a:	d833      	bhi.n	80077b4 <ctlwizchip+0x8c>
 800774c:	7862      	ldrb	r2, [r4, #1]
 800774e:	2a3f      	cmp	r2, #63	; 0x3f
 8007750:	d830      	bhi.n	80077b4 <ctlwizchip+0x8c>
 8007752:	78a1      	ldrb	r1, [r4, #2]
			tmp += txsize[i];
 8007754:	4413      	add	r3, r2
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8007756:	293f      	cmp	r1, #63	; 0x3f
			tmp += txsize[i];
 8007758:	b2db      	uxtb	r3, r3
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 800775a:	d82b      	bhi.n	80077b4 <ctlwizchip+0x8c>
 800775c:	78e2      	ldrb	r2, [r4, #3]
			tmp += txsize[i];
 800775e:	440b      	add	r3, r1
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8007760:	2a3f      	cmp	r2, #63	; 0x3f
			tmp += txsize[i];
 8007762:	b2db      	uxtb	r3, r3
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8007764:	d826      	bhi.n	80077b4 <ctlwizchip+0x8c>
 8007766:	7921      	ldrb	r1, [r4, #4]
			tmp += txsize[i];
 8007768:	4413      	add	r3, r2
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 800776a:	293f      	cmp	r1, #63	; 0x3f
			tmp += txsize[i];
 800776c:	b2db      	uxtb	r3, r3
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 800776e:	d821      	bhi.n	80077b4 <ctlwizchip+0x8c>
 8007770:	7962      	ldrb	r2, [r4, #5]
			tmp += txsize[i];
 8007772:	440b      	add	r3, r1
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8007774:	2a3f      	cmp	r2, #63	; 0x3f
			tmp += txsize[i];
 8007776:	b2db      	uxtb	r3, r3
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8007778:	d81c      	bhi.n	80077b4 <ctlwizchip+0x8c>
 800777a:	79a1      	ldrb	r1, [r4, #6]
			tmp += txsize[i];
 800777c:	4413      	add	r3, r2
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 800777e:	293f      	cmp	r1, #63	; 0x3f
			tmp += txsize[i];
 8007780:	b2db      	uxtb	r3, r3
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8007782:	d817      	bhi.n	80077b4 <ctlwizchip+0x8c>
 8007784:	79e2      	ldrb	r2, [r4, #7]
			tmp += txsize[i];
 8007786:	440b      	add	r3, r1
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8007788:	2a3f      	cmp	r2, #63	; 0x3f
			tmp += txsize[i];
 800778a:	b2db      	uxtb	r3, r3
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 800778c:	d812      	bhi.n	80077b4 <ctlwizchip+0x8c>
			tmp += txsize[i];
 800778e:	4413      	add	r3, r2
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
 8007790:	075b      	lsls	r3, r3, #29
 8007792:	d10f      	bne.n	80077b4 <ctlwizchip+0x8c>
   {
      tmp = 0;
   #if _WIZCHIP_ == W5300
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
		{
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8007794:	7a23      	ldrb	r3, [r4, #8]
 8007796:	2b3f      	cmp	r3, #63	; 0x3f
 8007798:	d80c      	bhi.n	80077b4 <ctlwizchip+0x8c>
 800779a:	7a62      	ldrb	r2, [r4, #9]
 800779c:	2a3f      	cmp	r2, #63	; 0x3f
 800779e:	d809      	bhi.n	80077b4 <ctlwizchip+0x8c>
 80077a0:	7aa1      	ldrb	r1, [r4, #10]
			tmp += rxsize[i];
 80077a2:	4413      	add	r3, r2
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80077a4:	293f      	cmp	r1, #63	; 0x3f
			tmp += rxsize[i];
 80077a6:	b2db      	uxtb	r3, r3
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80077a8:	d804      	bhi.n	80077b4 <ctlwizchip+0x8c>
 80077aa:	7ae2      	ldrb	r2, [r4, #11]
			tmp += rxsize[i];
 80077ac:	440b      	add	r3, r1
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80077ae:	2a3f      	cmp	r2, #63	; 0x3f
			tmp += rxsize[i];
 80077b0:	b2db      	uxtb	r3, r3
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80077b2:	d946      	bls.n	8007842 <ctlwizchip+0x11a>
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80077b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	bd10      	pop	{r4, pc}
         wizchip_sw_reset();
 80077bc:	f7ff ff02 	bl	80075c4 <wizchip_sw_reset>
   return 0;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	bd10      	pop	{r4, pc}
#if _WIZCHIP_ <= W5100S
   ir |= sir;
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
 80077c6:	2002      	movs	r0, #2
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80077c8:	880b      	ldrh	r3, [r1, #0]
   uint8_t ir  = (uint8_t)intr;
 80077ca:	b2d9      	uxtb	r1, r3
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
 80077cc:	f041 0210 	orr.w	r2, r1, #16
}

void wizchip_setinterruptmask(intr_kind intr)
{
   uint8_t imr  = (uint8_t)intr;
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 80077d0:	0a19      	lsrs	r1, r3, #8
   simr &= 0x0F;
   imr |= simr;
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
 80077d2:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 80077d6:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
 80077da:	f7ff f8dd 	bl	8006998 <WIZCHIP_WRITE>
   return 0;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	bd10      	pop	{r4, pc}
   ret = getIR();
 80077e4:	2002      	movs	r0, #2
 80077e6:	f7ff f8ed 	bl	80069c4 <WIZCHIP_READ>
   return 0;
 80077ea:	2300      	movs	r3, #0
   ir = (uint8_t)(ret >> 8);
 80077ec:	0a02      	lsrs	r2, r0, #8
 80077ee:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
  ret = (ret << 8) + ir;
 80077f2:	eb02 2000 	add.w	r0, r2, r0, lsl #8
        *((intr_kind*)arg) = wizchip_getinterrupt();
 80077f6:	8020      	strh	r0, [r4, #0]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	bd10      	pop	{r4, pc}
#if _WIZCHIP_ < W5200
   imr  = getIMR();
   simr = imr & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   ret = getIMR();
 80077fc:	2004      	movs	r0, #4
 80077fe:	f7ff f8e1 	bl	80069c4 <WIZCHIP_READ>
   return 0;
 8007802:	2300      	movs	r3, #0
   imr = (uint8_t)(ret >> 8);
 8007804:	0a02      	lsrs	r2, r0, #8
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
  ret = (ret << 8) + imr;
 8007806:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
 800780a:	eb02 2000 	add.w	r0, r2, r0, lsl #8
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 800780e:	8020      	strh	r0, [r4, #0]
}
 8007810:	4618      	mov	r0, r3
 8007812:	bd10      	pop	{r4, pc}
         ((uint8_t*)arg)[6] = 0;
 8007814:	2200      	movs	r2, #0
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8007816:	4b18      	ldr	r3, [pc, #96]	; (8007878 <ctlwizchip+0x150>)
 8007818:	7899      	ldrb	r1, [r3, #2]
 800781a:	7021      	strb	r1, [r4, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 800781c:	78d9      	ldrb	r1, [r3, #3]
 800781e:	7061      	strb	r1, [r4, #1]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8007820:	7919      	ldrb	r1, [r3, #4]
 8007822:	70a1      	strb	r1, [r4, #2]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8007824:	7959      	ldrb	r1, [r3, #5]
 8007826:	70e1      	strb	r1, [r4, #3]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8007828:	7999      	ldrb	r1, [r3, #6]
 800782a:	7121      	strb	r1, [r4, #4]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 800782c:	79db      	ldrb	r3, [r3, #7]
         ((uint8_t*)arg)[6] = 0;
 800782e:	71a2      	strb	r2, [r4, #6]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8007830:	7163      	strb	r3, [r4, #5]
   return 0;
 8007832:	4613      	mov	r3, r2
}
 8007834:	4618      	mov	r0, r3
 8007836:	bd10      	pop	{r4, pc}
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8007838:	880b      	ldrh	r3, [r1, #0]
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
 800783a:	2004      	movs	r0, #4
 800783c:	f003 02ef 	and.w	r2, r3, #239	; 0xef
 8007840:	e7c6      	b.n	80077d0 <ctlwizchip+0xa8>
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8007842:	7b21      	ldrb	r1, [r4, #12]
			tmp += rxsize[i];
 8007844:	4413      	add	r3, r2
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8007846:	293f      	cmp	r1, #63	; 0x3f
			tmp += rxsize[i];
 8007848:	b2db      	uxtb	r3, r3
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 800784a:	d8b3      	bhi.n	80077b4 <ctlwizchip+0x8c>
 800784c:	7b60      	ldrb	r0, [r4, #13]
			tmp += rxsize[i];
 800784e:	440b      	add	r3, r1
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8007850:	283f      	cmp	r0, #63	; 0x3f
			tmp += rxsize[i];
 8007852:	b2db      	uxtb	r3, r3
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8007854:	d8ae      	bhi.n	80077b4 <ctlwizchip+0x8c>
 8007856:	7ba1      	ldrb	r1, [r4, #14]
			tmp += rxsize[i];
 8007858:	4403      	add	r3, r0
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 800785a:	293f      	cmp	r1, #63	; 0x3f
			tmp += rxsize[i];
 800785c:	b2da      	uxtb	r2, r3
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 800785e:	d8a9      	bhi.n	80077b4 <ctlwizchip+0x8c>
 8007860:	7be3      	ldrb	r3, [r4, #15]
			tmp += rxsize[i];
 8007862:	440a      	add	r2, r1
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8007864:	2b3f      	cmp	r3, #63	; 0x3f
			tmp += rxsize[i];
 8007866:	b2d2      	uxtb	r2, r2
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8007868:	d8a4      	bhi.n	80077b4 <ctlwizchip+0x8c>
			tmp += rxsize[i];
 800786a:	4413      	add	r3, r2
		if(tmp % 8) return -1;
 800786c:	f013 0307 	ands.w	r3, r3, #7
 8007870:	bf18      	it	ne
 8007872:	2301      	movne	r3, #1
 8007874:	425b      	negs	r3, r3
 8007876:	e79f      	b.n	80077b8 <ctlwizchip+0x90>
 8007878:	20000038 	.word	0x20000038

0800787c <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800787c:	b510      	push	{r4, lr}
 800787e:	4604      	mov	r4, r0
   setSHAR(pnetinfo->mac);
 8007880:	7823      	ldrb	r3, [r4, #0]
 8007882:	7861      	ldrb	r1, [r4, #1]
 8007884:	2008      	movs	r0, #8
 8007886:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800788a:	b289      	uxth	r1, r1
 800788c:	f7ff f884 	bl	8006998 <WIZCHIP_WRITE>
 8007890:	78a3      	ldrb	r3, [r4, #2]
 8007892:	78e1      	ldrb	r1, [r4, #3]
 8007894:	200a      	movs	r0, #10
 8007896:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800789a:	b289      	uxth	r1, r1
 800789c:	f7ff f87c 	bl	8006998 <WIZCHIP_WRITE>
 80078a0:	7923      	ldrb	r3, [r4, #4]
 80078a2:	7961      	ldrb	r1, [r4, #5]
 80078a4:	200c      	movs	r0, #12
 80078a6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80078aa:	b289      	uxth	r1, r1
 80078ac:	f7ff f874 	bl	8006998 <WIZCHIP_WRITE>
   setGAR(pnetinfo->gw);
 80078b0:	7ba3      	ldrb	r3, [r4, #14]
 80078b2:	7be1      	ldrb	r1, [r4, #15]
 80078b4:	2010      	movs	r0, #16
 80078b6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80078ba:	b289      	uxth	r1, r1
 80078bc:	f7ff f86c 	bl	8006998 <WIZCHIP_WRITE>
 80078c0:	7c23      	ldrb	r3, [r4, #16]
 80078c2:	7c61      	ldrb	r1, [r4, #17]
 80078c4:	2012      	movs	r0, #18
 80078c6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80078ca:	b289      	uxth	r1, r1
 80078cc:	f7ff f864 	bl	8006998 <WIZCHIP_WRITE>
   setSUBR(pnetinfo->sn);
 80078d0:	7aa3      	ldrb	r3, [r4, #10]
 80078d2:	7ae1      	ldrb	r1, [r4, #11]
 80078d4:	2014      	movs	r0, #20
 80078d6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80078da:	b289      	uxth	r1, r1
 80078dc:	f7ff f85c 	bl	8006998 <WIZCHIP_WRITE>
 80078e0:	7b23      	ldrb	r3, [r4, #12]
 80078e2:	7b61      	ldrb	r1, [r4, #13]
 80078e4:	2016      	movs	r0, #22
 80078e6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80078ea:	b289      	uxth	r1, r1
 80078ec:	f7ff f854 	bl	8006998 <WIZCHIP_WRITE>
   setSIPR(pnetinfo->ip);
 80078f0:	79a3      	ldrb	r3, [r4, #6]
 80078f2:	79e1      	ldrb	r1, [r4, #7]
 80078f4:	2018      	movs	r0, #24
 80078f6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80078fa:	b289      	uxth	r1, r1
 80078fc:	f7ff f84c 	bl	8006998 <WIZCHIP_WRITE>
 8007900:	7a23      	ldrb	r3, [r4, #8]
 8007902:	7a61      	ldrb	r1, [r4, #9]
 8007904:	201a      	movs	r0, #26
 8007906:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800790a:	b289      	uxth	r1, r1
 800790c:	f7ff f844 	bl	8006998 <WIZCHIP_WRITE>
   _DNS_[0] = pnetinfo->dns[0];
 8007910:	4903      	ldr	r1, [pc, #12]	; (8007920 <wizchip_setnetinfo+0xa4>)
 8007912:	f8d4 0012 	ldr.w	r0, [r4, #18]
   _DNS_[1] = pnetinfo->dns[1];
   _DNS_[2] = pnetinfo->dns[2];
   _DNS_[3] = pnetinfo->dns[3];
   _DHCP_   = pnetinfo->dhcp;
 8007916:	4b03      	ldr	r3, [pc, #12]	; (8007924 <wizchip_setnetinfo+0xa8>)
 8007918:	7da2      	ldrb	r2, [r4, #22]
   _DNS_[0] = pnetinfo->dns[0];
 800791a:	6008      	str	r0, [r1, #0]
   _DHCP_   = pnetinfo->dhcp;
 800791c:	701a      	strb	r2, [r3, #0]
}
 800791e:	bd10      	pop	{r4, pc}
 8007920:	20000fa0 	.word	0x20000fa0
 8007924:	20000f9c 	.word	0x20000f9c

08007928 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8007928:	b510      	push	{r4, lr}
 800792a:	4604      	mov	r4, r0
   getSHAR(pnetinfo->mac);
 800792c:	2008      	movs	r0, #8
 800792e:	f7ff f849 	bl	80069c4 <WIZCHIP_READ>
 8007932:	4603      	mov	r3, r0
 8007934:	2008      	movs	r0, #8
 8007936:	40c3      	lsrs	r3, r0
 8007938:	7023      	strb	r3, [r4, #0]
 800793a:	f7ff f843 	bl	80069c4 <WIZCHIP_READ>
 800793e:	4603      	mov	r3, r0
 8007940:	200a      	movs	r0, #10
 8007942:	7063      	strb	r3, [r4, #1]
 8007944:	f7ff f83e 	bl	80069c4 <WIZCHIP_READ>
 8007948:	4603      	mov	r3, r0
 800794a:	0a1b      	lsrs	r3, r3, #8
 800794c:	70a3      	strb	r3, [r4, #2]
 800794e:	200a      	movs	r0, #10
 8007950:	f7ff f838 	bl	80069c4 <WIZCHIP_READ>
 8007954:	4603      	mov	r3, r0
 8007956:	200c      	movs	r0, #12
 8007958:	70e3      	strb	r3, [r4, #3]
 800795a:	f7ff f833 	bl	80069c4 <WIZCHIP_READ>
 800795e:	4603      	mov	r3, r0
 8007960:	0a1b      	lsrs	r3, r3, #8
 8007962:	7123      	strb	r3, [r4, #4]
 8007964:	200c      	movs	r0, #12
 8007966:	f7ff f82d 	bl	80069c4 <WIZCHIP_READ>
 800796a:	4603      	mov	r3, r0
   getGAR(pnetinfo->gw);
 800796c:	2010      	movs	r0, #16
   getSHAR(pnetinfo->mac);
 800796e:	7163      	strb	r3, [r4, #5]
   getGAR(pnetinfo->gw);
 8007970:	f7ff f828 	bl	80069c4 <WIZCHIP_READ>
 8007974:	4603      	mov	r3, r0
 8007976:	0a1b      	lsrs	r3, r3, #8
 8007978:	73a3      	strb	r3, [r4, #14]
 800797a:	2010      	movs	r0, #16
 800797c:	f7ff f822 	bl	80069c4 <WIZCHIP_READ>
 8007980:	4603      	mov	r3, r0
 8007982:	2012      	movs	r0, #18
 8007984:	73e3      	strb	r3, [r4, #15]
 8007986:	f7ff f81d 	bl	80069c4 <WIZCHIP_READ>
 800798a:	4603      	mov	r3, r0
 800798c:	0a1b      	lsrs	r3, r3, #8
 800798e:	7423      	strb	r3, [r4, #16]
 8007990:	2012      	movs	r0, #18
 8007992:	f7ff f817 	bl	80069c4 <WIZCHIP_READ>
 8007996:	4603      	mov	r3, r0
   getSUBR(pnetinfo->sn);
 8007998:	2014      	movs	r0, #20
   getGAR(pnetinfo->gw);
 800799a:	7463      	strb	r3, [r4, #17]
   getSUBR(pnetinfo->sn);
 800799c:	f7ff f812 	bl	80069c4 <WIZCHIP_READ>
 80079a0:	4603      	mov	r3, r0
 80079a2:	0a1b      	lsrs	r3, r3, #8
 80079a4:	72a3      	strb	r3, [r4, #10]
 80079a6:	2014      	movs	r0, #20
 80079a8:	f7ff f80c 	bl	80069c4 <WIZCHIP_READ>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2016      	movs	r0, #22
 80079b0:	72e3      	strb	r3, [r4, #11]
 80079b2:	f7ff f807 	bl	80069c4 <WIZCHIP_READ>
 80079b6:	4603      	mov	r3, r0
 80079b8:	0a1b      	lsrs	r3, r3, #8
 80079ba:	7323      	strb	r3, [r4, #12]
 80079bc:	2016      	movs	r0, #22
 80079be:	f7ff f801 	bl	80069c4 <WIZCHIP_READ>
 80079c2:	4603      	mov	r3, r0
   getSIPR(pnetinfo->ip);
 80079c4:	2018      	movs	r0, #24
   getSUBR(pnetinfo->sn);
 80079c6:	7363      	strb	r3, [r4, #13]
   getSIPR(pnetinfo->ip);
 80079c8:	f7fe fffc 	bl	80069c4 <WIZCHIP_READ>
 80079cc:	4603      	mov	r3, r0
 80079ce:	0a1b      	lsrs	r3, r3, #8
 80079d0:	71a3      	strb	r3, [r4, #6]
 80079d2:	2018      	movs	r0, #24
 80079d4:	f7fe fff6 	bl	80069c4 <WIZCHIP_READ>
 80079d8:	4603      	mov	r3, r0
 80079da:	201a      	movs	r0, #26
 80079dc:	71e3      	strb	r3, [r4, #7]
 80079de:	f7fe fff1 	bl	80069c4 <WIZCHIP_READ>
 80079e2:	4603      	mov	r3, r0
 80079e4:	0a1b      	lsrs	r3, r3, #8
 80079e6:	7223      	strb	r3, [r4, #8]
 80079e8:	201a      	movs	r0, #26
 80079ea:	f7fe ffeb 	bl	80069c4 <WIZCHIP_READ>
   pnetinfo->dns[0]= _DNS_[0];
 80079ee:	4b07      	ldr	r3, [pc, #28]	; (8007a0c <wizchip_getnetinfo+0xe4>)
   pnetinfo->dns[1]= _DNS_[1];
   pnetinfo->dns[2]= _DNS_[2];
   pnetinfo->dns[3]= _DNS_[3];
   pnetinfo->dhcp  = _DHCP_;
 80079f0:	4907      	ldr	r1, [pc, #28]	; (8007a10 <wizchip_getnetinfo+0xe8>)
   pnetinfo->dns[0]= _DNS_[0];
 80079f2:	781a      	ldrb	r2, [r3, #0]
   pnetinfo->dhcp  = _DHCP_;
 80079f4:	7809      	ldrb	r1, [r1, #0]
   pnetinfo->dns[0]= _DNS_[0];
 80079f6:	74a2      	strb	r2, [r4, #18]
   pnetinfo->dns[1]= _DNS_[1];
 80079f8:	785a      	ldrb	r2, [r3, #1]
   pnetinfo->dhcp  = _DHCP_;
 80079fa:	75a1      	strb	r1, [r4, #22]
   pnetinfo->dns[1]= _DNS_[1];
 80079fc:	74e2      	strb	r2, [r4, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80079fe:	789a      	ldrb	r2, [r3, #2]
   pnetinfo->dns[3]= _DNS_[3];
 8007a00:	78db      	ldrb	r3, [r3, #3]
   pnetinfo->dns[2]= _DNS_[2];
 8007a02:	7522      	strb	r2, [r4, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8007a04:	7563      	strb	r3, [r4, #21]
   getSIPR(pnetinfo->ip);
 8007a06:	7260      	strb	r0, [r4, #9]
}
 8007a08:	bd10      	pop	{r4, pc}
 8007a0a:	bf00      	nop
 8007a0c:	20000fa0 	.word	0x20000fa0
 8007a10:	20000f9c 	.word	0x20000f9c

08007a14 <ctlnetwork>:
{
 8007a14:	b538      	push	{r3, r4, r5, lr}
 8007a16:	460c      	mov	r4, r1
   switch(cntype)
 8007a18:	2805      	cmp	r0, #5
 8007a1a:	d83a      	bhi.n	8007a92 <ctlnetwork+0x7e>
 8007a1c:	e8df f000 	tbb	[pc, r0]
 8007a20:	2819140f 	.word	0x2819140f
 8007a24:	032f      	.short	0x032f
   setRTR(nettime->time_100us);
}

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
   nettime->retry_cnt = getRCR();
 8007a26:	201e      	movs	r0, #30
 8007a28:	f7fe ffcc 	bl	80069c4 <WIZCHIP_READ>
 8007a2c:	4603      	mov	r3, r0
   nettime->time_100us = getRTR();
 8007a2e:	201c      	movs	r0, #28
   nettime->retry_cnt = getRCR();
 8007a30:	7023      	strb	r3, [r4, #0]
   nettime->time_100us = getRTR();
 8007a32:	f7fe ffc7 	bl	80069c4 <WIZCHIP_READ>
 8007a36:	4603      	mov	r3, r0
   return 0;
 8007a38:	2000      	movs	r0, #0
   nettime->time_100us = getRTR();
 8007a3a:	8063      	strh	r3, [r4, #2]
}
 8007a3c:	bd38      	pop	{r3, r4, r5, pc}
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8007a3e:	4608      	mov	r0, r1
 8007a40:	f7ff ff1c 	bl	800787c <wizchip_setnetinfo>
   return 0;
 8007a44:	2000      	movs	r0, #0
}
 8007a46:	bd38      	pop	{r3, r4, r5, pc}
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8007a48:	4608      	mov	r0, r1
 8007a4a:	f7ff ff6d 	bl	8007928 <wizchip_getnetinfo>
   return 0;
 8007a4e:	2000      	movs	r0, #0
}
 8007a50:	bd38      	pop	{r3, r4, r5, pc}
         return wizchip_setnetmode(*(netmode_type*)arg);
 8007a52:	780d      	ldrb	r5, [r1, #0]
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
 8007a54:	f035 0438 	bics.w	r4, r5, #56	; 0x38
 8007a58:	d11b      	bne.n	8007a92 <ctlnetwork+0x7e>
   tmp = getMR();
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f7fe ffb2 	bl	80069c4 <WIZCHIP_READ>
 8007a60:	4601      	mov	r1, r0
 8007a62:	b2c9      	uxtb	r1, r1
   setMR(tmp);
 8007a64:	4620      	mov	r0, r4
 8007a66:	4329      	orrs	r1, r5
 8007a68:	f7fe ff96 	bl	8006998 <WIZCHIP_WRITE>
   return 0;
 8007a6c:	4620      	mov	r0, r4
}
 8007a6e:	bd38      	pop	{r3, r4, r5, pc}
   return (netmode_type) getMR();
 8007a70:	2000      	movs	r0, #0
 8007a72:	f7fe ffa7 	bl	80069c4 <WIZCHIP_READ>
 8007a76:	4603      	mov	r3, r0
 8007a78:	7023      	strb	r3, [r4, #0]
   return 0;
 8007a7a:	2000      	movs	r0, #0
}
 8007a7c:	bd38      	pop	{r3, r4, r5, pc}
   setRCR(nettime->retry_cnt);
 8007a7e:	201e      	movs	r0, #30
 8007a80:	7809      	ldrb	r1, [r1, #0]
 8007a82:	f7fe ff89 	bl	8006998 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8007a86:	201c      	movs	r0, #28
 8007a88:	8861      	ldrh	r1, [r4, #2]
 8007a8a:	f7fe ff85 	bl	8006998 <WIZCHIP_WRITE>
   return 0;
 8007a8e:	2000      	movs	r0, #0
}
 8007a90:	bd38      	pop	{r3, r4, r5, pc}
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
 8007a92:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007a96:	bd38      	pop	{r3, r4, r5, pc}

08007a98 <__errno>:
 8007a98:	4b01      	ldr	r3, [pc, #4]	; (8007aa0 <__errno+0x8>)
 8007a9a:	6818      	ldr	r0, [r3, #0]
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	20000064 	.word	0x20000064

08007aa4 <__libc_init_array>:
 8007aa4:	b570      	push	{r4, r5, r6, lr}
 8007aa6:	4d0d      	ldr	r5, [pc, #52]	; (8007adc <__libc_init_array+0x38>)
 8007aa8:	2600      	movs	r6, #0
 8007aaa:	4c0d      	ldr	r4, [pc, #52]	; (8007ae0 <__libc_init_array+0x3c>)
 8007aac:	1b64      	subs	r4, r4, r5
 8007aae:	10a4      	asrs	r4, r4, #2
 8007ab0:	42a6      	cmp	r6, r4
 8007ab2:	d109      	bne.n	8007ac8 <__libc_init_array+0x24>
 8007ab4:	4d0b      	ldr	r5, [pc, #44]	; (8007ae4 <__libc_init_array+0x40>)
 8007ab6:	2600      	movs	r6, #0
 8007ab8:	4c0b      	ldr	r4, [pc, #44]	; (8007ae8 <__libc_init_array+0x44>)
 8007aba:	f001 f831 	bl	8008b20 <_init>
 8007abe:	1b64      	subs	r4, r4, r5
 8007ac0:	10a4      	asrs	r4, r4, #2
 8007ac2:	42a6      	cmp	r6, r4
 8007ac4:	d105      	bne.n	8007ad2 <__libc_init_array+0x2e>
 8007ac6:	bd70      	pop	{r4, r5, r6, pc}
 8007ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007acc:	3601      	adds	r6, #1
 8007ace:	4798      	blx	r3
 8007ad0:	e7ee      	b.n	8007ab0 <__libc_init_array+0xc>
 8007ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ad6:	3601      	adds	r6, #1
 8007ad8:	4798      	blx	r3
 8007ada:	e7f2      	b.n	8007ac2 <__libc_init_array+0x1e>
 8007adc:	08008e38 	.word	0x08008e38
 8007ae0:	08008e38 	.word	0x08008e38
 8007ae4:	08008e38 	.word	0x08008e38
 8007ae8:	08008e3c 	.word	0x08008e3c

08007aec <memset>:
 8007aec:	4402      	add	r2, r0
 8007aee:	4603      	mov	r3, r0
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d100      	bne.n	8007af6 <memset+0xa>
 8007af4:	4770      	bx	lr
 8007af6:	f803 1b01 	strb.w	r1, [r3], #1
 8007afa:	e7f9      	b.n	8007af0 <memset+0x4>

08007afc <_free_r>:
 8007afc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007afe:	2900      	cmp	r1, #0
 8007b00:	d043      	beq.n	8007b8a <_free_r+0x8e>
 8007b02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b06:	1f0c      	subs	r4, r1, #4
 8007b08:	9001      	str	r0, [sp, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	bfb8      	it	lt
 8007b0e:	18e4      	addlt	r4, r4, r3
 8007b10:	f000 fcc8 	bl	80084a4 <__malloc_lock>
 8007b14:	4a1e      	ldr	r2, [pc, #120]	; (8007b90 <_free_r+0x94>)
 8007b16:	9801      	ldr	r0, [sp, #4]
 8007b18:	6813      	ldr	r3, [r2, #0]
 8007b1a:	b933      	cbnz	r3, 8007b2a <_free_r+0x2e>
 8007b1c:	6063      	str	r3, [r4, #4]
 8007b1e:	6014      	str	r4, [r2, #0]
 8007b20:	b003      	add	sp, #12
 8007b22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b26:	f000 bcc3 	b.w	80084b0 <__malloc_unlock>
 8007b2a:	42a3      	cmp	r3, r4
 8007b2c:	d908      	bls.n	8007b40 <_free_r+0x44>
 8007b2e:	6825      	ldr	r5, [r4, #0]
 8007b30:	1961      	adds	r1, r4, r5
 8007b32:	428b      	cmp	r3, r1
 8007b34:	bf01      	itttt	eq
 8007b36:	6819      	ldreq	r1, [r3, #0]
 8007b38:	685b      	ldreq	r3, [r3, #4]
 8007b3a:	1949      	addeq	r1, r1, r5
 8007b3c:	6021      	streq	r1, [r4, #0]
 8007b3e:	e7ed      	b.n	8007b1c <_free_r+0x20>
 8007b40:	461a      	mov	r2, r3
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	b10b      	cbz	r3, 8007b4a <_free_r+0x4e>
 8007b46:	42a3      	cmp	r3, r4
 8007b48:	d9fa      	bls.n	8007b40 <_free_r+0x44>
 8007b4a:	6811      	ldr	r1, [r2, #0]
 8007b4c:	1855      	adds	r5, r2, r1
 8007b4e:	42a5      	cmp	r5, r4
 8007b50:	d10b      	bne.n	8007b6a <_free_r+0x6e>
 8007b52:	6824      	ldr	r4, [r4, #0]
 8007b54:	4421      	add	r1, r4
 8007b56:	1854      	adds	r4, r2, r1
 8007b58:	6011      	str	r1, [r2, #0]
 8007b5a:	42a3      	cmp	r3, r4
 8007b5c:	d1e0      	bne.n	8007b20 <_free_r+0x24>
 8007b5e:	681c      	ldr	r4, [r3, #0]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	4421      	add	r1, r4
 8007b64:	6053      	str	r3, [r2, #4]
 8007b66:	6011      	str	r1, [r2, #0]
 8007b68:	e7da      	b.n	8007b20 <_free_r+0x24>
 8007b6a:	d902      	bls.n	8007b72 <_free_r+0x76>
 8007b6c:	230c      	movs	r3, #12
 8007b6e:	6003      	str	r3, [r0, #0]
 8007b70:	e7d6      	b.n	8007b20 <_free_r+0x24>
 8007b72:	6825      	ldr	r5, [r4, #0]
 8007b74:	1961      	adds	r1, r4, r5
 8007b76:	428b      	cmp	r3, r1
 8007b78:	bf02      	ittt	eq
 8007b7a:	6819      	ldreq	r1, [r3, #0]
 8007b7c:	685b      	ldreq	r3, [r3, #4]
 8007b7e:	1949      	addeq	r1, r1, r5
 8007b80:	6063      	str	r3, [r4, #4]
 8007b82:	bf08      	it	eq
 8007b84:	6021      	streq	r1, [r4, #0]
 8007b86:	6054      	str	r4, [r2, #4]
 8007b88:	e7ca      	b.n	8007b20 <_free_r+0x24>
 8007b8a:	b003      	add	sp, #12
 8007b8c:	bd30      	pop	{r4, r5, pc}
 8007b8e:	bf00      	nop
 8007b90:	20000fa4 	.word	0x20000fa4

08007b94 <sbrk_aligned>:
 8007b94:	b570      	push	{r4, r5, r6, lr}
 8007b96:	4e0e      	ldr	r6, [pc, #56]	; (8007bd0 <sbrk_aligned+0x3c>)
 8007b98:	460c      	mov	r4, r1
 8007b9a:	4605      	mov	r5, r0
 8007b9c:	6831      	ldr	r1, [r6, #0]
 8007b9e:	b911      	cbnz	r1, 8007ba6 <sbrk_aligned+0x12>
 8007ba0:	f000 f91a 	bl	8007dd8 <_sbrk_r>
 8007ba4:	6030      	str	r0, [r6, #0]
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	4628      	mov	r0, r5
 8007baa:	f000 f915 	bl	8007dd8 <_sbrk_r>
 8007bae:	1c43      	adds	r3, r0, #1
 8007bb0:	d00a      	beq.n	8007bc8 <sbrk_aligned+0x34>
 8007bb2:	1cc4      	adds	r4, r0, #3
 8007bb4:	f024 0403 	bic.w	r4, r4, #3
 8007bb8:	42a0      	cmp	r0, r4
 8007bba:	d007      	beq.n	8007bcc <sbrk_aligned+0x38>
 8007bbc:	1a21      	subs	r1, r4, r0
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	f000 f90a 	bl	8007dd8 <_sbrk_r>
 8007bc4:	3001      	adds	r0, #1
 8007bc6:	d101      	bne.n	8007bcc <sbrk_aligned+0x38>
 8007bc8:	f04f 34ff 	mov.w	r4, #4294967295
 8007bcc:	4620      	mov	r0, r4
 8007bce:	bd70      	pop	{r4, r5, r6, pc}
 8007bd0:	20000fa8 	.word	0x20000fa8

08007bd4 <_malloc_r>:
 8007bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd8:	1ccd      	adds	r5, r1, #3
 8007bda:	4607      	mov	r7, r0
 8007bdc:	f025 0503 	bic.w	r5, r5, #3
 8007be0:	3508      	adds	r5, #8
 8007be2:	2d0c      	cmp	r5, #12
 8007be4:	bf38      	it	cc
 8007be6:	250c      	movcc	r5, #12
 8007be8:	2d00      	cmp	r5, #0
 8007bea:	db01      	blt.n	8007bf0 <_malloc_r+0x1c>
 8007bec:	42a9      	cmp	r1, r5
 8007bee:	d905      	bls.n	8007bfc <_malloc_r+0x28>
 8007bf0:	230c      	movs	r3, #12
 8007bf2:	2600      	movs	r6, #0
 8007bf4:	603b      	str	r3, [r7, #0]
 8007bf6:	4630      	mov	r0, r6
 8007bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bfc:	4e2e      	ldr	r6, [pc, #184]	; (8007cb8 <_malloc_r+0xe4>)
 8007bfe:	f000 fc51 	bl	80084a4 <__malloc_lock>
 8007c02:	6833      	ldr	r3, [r6, #0]
 8007c04:	461c      	mov	r4, r3
 8007c06:	bb34      	cbnz	r4, 8007c56 <_malloc_r+0x82>
 8007c08:	4629      	mov	r1, r5
 8007c0a:	4638      	mov	r0, r7
 8007c0c:	f7ff ffc2 	bl	8007b94 <sbrk_aligned>
 8007c10:	1c43      	adds	r3, r0, #1
 8007c12:	4604      	mov	r4, r0
 8007c14:	d14d      	bne.n	8007cb2 <_malloc_r+0xde>
 8007c16:	6834      	ldr	r4, [r6, #0]
 8007c18:	4626      	mov	r6, r4
 8007c1a:	2e00      	cmp	r6, #0
 8007c1c:	d140      	bne.n	8007ca0 <_malloc_r+0xcc>
 8007c1e:	6823      	ldr	r3, [r4, #0]
 8007c20:	4631      	mov	r1, r6
 8007c22:	4638      	mov	r0, r7
 8007c24:	eb04 0803 	add.w	r8, r4, r3
 8007c28:	f000 f8d6 	bl	8007dd8 <_sbrk_r>
 8007c2c:	4580      	cmp	r8, r0
 8007c2e:	d13a      	bne.n	8007ca6 <_malloc_r+0xd2>
 8007c30:	6821      	ldr	r1, [r4, #0]
 8007c32:	3503      	adds	r5, #3
 8007c34:	4638      	mov	r0, r7
 8007c36:	1a6d      	subs	r5, r5, r1
 8007c38:	f025 0503 	bic.w	r5, r5, #3
 8007c3c:	3508      	adds	r5, #8
 8007c3e:	2d0c      	cmp	r5, #12
 8007c40:	bf38      	it	cc
 8007c42:	250c      	movcc	r5, #12
 8007c44:	4629      	mov	r1, r5
 8007c46:	f7ff ffa5 	bl	8007b94 <sbrk_aligned>
 8007c4a:	3001      	adds	r0, #1
 8007c4c:	d02b      	beq.n	8007ca6 <_malloc_r+0xd2>
 8007c4e:	6823      	ldr	r3, [r4, #0]
 8007c50:	442b      	add	r3, r5
 8007c52:	6023      	str	r3, [r4, #0]
 8007c54:	e00e      	b.n	8007c74 <_malloc_r+0xa0>
 8007c56:	6822      	ldr	r2, [r4, #0]
 8007c58:	1b52      	subs	r2, r2, r5
 8007c5a:	d41e      	bmi.n	8007c9a <_malloc_r+0xc6>
 8007c5c:	2a0b      	cmp	r2, #11
 8007c5e:	d916      	bls.n	8007c8e <_malloc_r+0xba>
 8007c60:	1961      	adds	r1, r4, r5
 8007c62:	42a3      	cmp	r3, r4
 8007c64:	6025      	str	r5, [r4, #0]
 8007c66:	bf18      	it	ne
 8007c68:	6059      	strne	r1, [r3, #4]
 8007c6a:	6863      	ldr	r3, [r4, #4]
 8007c6c:	bf08      	it	eq
 8007c6e:	6031      	streq	r1, [r6, #0]
 8007c70:	5162      	str	r2, [r4, r5]
 8007c72:	604b      	str	r3, [r1, #4]
 8007c74:	f104 060b 	add.w	r6, r4, #11
 8007c78:	4638      	mov	r0, r7
 8007c7a:	f000 fc19 	bl	80084b0 <__malloc_unlock>
 8007c7e:	1d23      	adds	r3, r4, #4
 8007c80:	f026 0607 	bic.w	r6, r6, #7
 8007c84:	1af2      	subs	r2, r6, r3
 8007c86:	d0b6      	beq.n	8007bf6 <_malloc_r+0x22>
 8007c88:	1b9b      	subs	r3, r3, r6
 8007c8a:	50a3      	str	r3, [r4, r2]
 8007c8c:	e7b3      	b.n	8007bf6 <_malloc_r+0x22>
 8007c8e:	6862      	ldr	r2, [r4, #4]
 8007c90:	42a3      	cmp	r3, r4
 8007c92:	bf0c      	ite	eq
 8007c94:	6032      	streq	r2, [r6, #0]
 8007c96:	605a      	strne	r2, [r3, #4]
 8007c98:	e7ec      	b.n	8007c74 <_malloc_r+0xa0>
 8007c9a:	4623      	mov	r3, r4
 8007c9c:	6864      	ldr	r4, [r4, #4]
 8007c9e:	e7b2      	b.n	8007c06 <_malloc_r+0x32>
 8007ca0:	4634      	mov	r4, r6
 8007ca2:	6876      	ldr	r6, [r6, #4]
 8007ca4:	e7b9      	b.n	8007c1a <_malloc_r+0x46>
 8007ca6:	230c      	movs	r3, #12
 8007ca8:	4638      	mov	r0, r7
 8007caa:	603b      	str	r3, [r7, #0]
 8007cac:	f000 fc00 	bl	80084b0 <__malloc_unlock>
 8007cb0:	e7a1      	b.n	8007bf6 <_malloc_r+0x22>
 8007cb2:	6025      	str	r5, [r4, #0]
 8007cb4:	e7de      	b.n	8007c74 <_malloc_r+0xa0>
 8007cb6:	bf00      	nop
 8007cb8:	20000fa4 	.word	0x20000fa4

08007cbc <iprintf>:
 8007cbc:	b40f      	push	{r0, r1, r2, r3}
 8007cbe:	4b0a      	ldr	r3, [pc, #40]	; (8007ce8 <iprintf+0x2c>)
 8007cc0:	b513      	push	{r0, r1, r4, lr}
 8007cc2:	681c      	ldr	r4, [r3, #0]
 8007cc4:	b124      	cbz	r4, 8007cd0 <iprintf+0x14>
 8007cc6:	69a3      	ldr	r3, [r4, #24]
 8007cc8:	b913      	cbnz	r3, 8007cd0 <iprintf+0x14>
 8007cca:	4620      	mov	r0, r4
 8007ccc:	f000 fad2 	bl	8008274 <__sinit>
 8007cd0:	ab05      	add	r3, sp, #20
 8007cd2:	9a04      	ldr	r2, [sp, #16]
 8007cd4:	68a1      	ldr	r1, [r4, #8]
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	9301      	str	r3, [sp, #4]
 8007cda:	f000 fc19 	bl	8008510 <_vfiprintf_r>
 8007cde:	b002      	add	sp, #8
 8007ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ce4:	b004      	add	sp, #16
 8007ce6:	4770      	bx	lr
 8007ce8:	20000064 	.word	0x20000064

08007cec <_puts_r>:
 8007cec:	b570      	push	{r4, r5, r6, lr}
 8007cee:	460e      	mov	r6, r1
 8007cf0:	4605      	mov	r5, r0
 8007cf2:	b118      	cbz	r0, 8007cfc <_puts_r+0x10>
 8007cf4:	6983      	ldr	r3, [r0, #24]
 8007cf6:	b90b      	cbnz	r3, 8007cfc <_puts_r+0x10>
 8007cf8:	f000 fabc 	bl	8008274 <__sinit>
 8007cfc:	69ab      	ldr	r3, [r5, #24]
 8007cfe:	68ac      	ldr	r4, [r5, #8]
 8007d00:	b913      	cbnz	r3, 8007d08 <_puts_r+0x1c>
 8007d02:	4628      	mov	r0, r5
 8007d04:	f000 fab6 	bl	8008274 <__sinit>
 8007d08:	4b2c      	ldr	r3, [pc, #176]	; (8007dbc <_puts_r+0xd0>)
 8007d0a:	429c      	cmp	r4, r3
 8007d0c:	d120      	bne.n	8007d50 <_puts_r+0x64>
 8007d0e:	686c      	ldr	r4, [r5, #4]
 8007d10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d12:	07db      	lsls	r3, r3, #31
 8007d14:	d405      	bmi.n	8007d22 <_puts_r+0x36>
 8007d16:	89a3      	ldrh	r3, [r4, #12]
 8007d18:	0598      	lsls	r0, r3, #22
 8007d1a:	d402      	bmi.n	8007d22 <_puts_r+0x36>
 8007d1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d1e:	f000 fb47 	bl	80083b0 <__retarget_lock_acquire_recursive>
 8007d22:	89a3      	ldrh	r3, [r4, #12]
 8007d24:	0719      	lsls	r1, r3, #28
 8007d26:	d51d      	bpl.n	8007d64 <_puts_r+0x78>
 8007d28:	6923      	ldr	r3, [r4, #16]
 8007d2a:	b1db      	cbz	r3, 8007d64 <_puts_r+0x78>
 8007d2c:	3e01      	subs	r6, #1
 8007d2e:	68a3      	ldr	r3, [r4, #8]
 8007d30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007d34:	3b01      	subs	r3, #1
 8007d36:	60a3      	str	r3, [r4, #8]
 8007d38:	bb39      	cbnz	r1, 8007d8a <_puts_r+0x9e>
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	da38      	bge.n	8007db0 <_puts_r+0xc4>
 8007d3e:	4622      	mov	r2, r4
 8007d40:	210a      	movs	r1, #10
 8007d42:	4628      	mov	r0, r5
 8007d44:	f000 f89c 	bl	8007e80 <__swbuf_r>
 8007d48:	3001      	adds	r0, #1
 8007d4a:	d011      	beq.n	8007d70 <_puts_r+0x84>
 8007d4c:	250a      	movs	r5, #10
 8007d4e:	e011      	b.n	8007d74 <_puts_r+0x88>
 8007d50:	4b1b      	ldr	r3, [pc, #108]	; (8007dc0 <_puts_r+0xd4>)
 8007d52:	429c      	cmp	r4, r3
 8007d54:	d101      	bne.n	8007d5a <_puts_r+0x6e>
 8007d56:	68ac      	ldr	r4, [r5, #8]
 8007d58:	e7da      	b.n	8007d10 <_puts_r+0x24>
 8007d5a:	4b1a      	ldr	r3, [pc, #104]	; (8007dc4 <_puts_r+0xd8>)
 8007d5c:	429c      	cmp	r4, r3
 8007d5e:	bf08      	it	eq
 8007d60:	68ec      	ldreq	r4, [r5, #12]
 8007d62:	e7d5      	b.n	8007d10 <_puts_r+0x24>
 8007d64:	4621      	mov	r1, r4
 8007d66:	4628      	mov	r0, r5
 8007d68:	f000 f8ee 	bl	8007f48 <__swsetup_r>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	d0dd      	beq.n	8007d2c <_puts_r+0x40>
 8007d70:	f04f 35ff 	mov.w	r5, #4294967295
 8007d74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d76:	07da      	lsls	r2, r3, #31
 8007d78:	d405      	bmi.n	8007d86 <_puts_r+0x9a>
 8007d7a:	89a3      	ldrh	r3, [r4, #12]
 8007d7c:	059b      	lsls	r3, r3, #22
 8007d7e:	d402      	bmi.n	8007d86 <_puts_r+0x9a>
 8007d80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d82:	f000 fb16 	bl	80083b2 <__retarget_lock_release_recursive>
 8007d86:	4628      	mov	r0, r5
 8007d88:	bd70      	pop	{r4, r5, r6, pc}
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	da04      	bge.n	8007d98 <_puts_r+0xac>
 8007d8e:	69a2      	ldr	r2, [r4, #24]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	dc06      	bgt.n	8007da2 <_puts_r+0xb6>
 8007d94:	290a      	cmp	r1, #10
 8007d96:	d004      	beq.n	8007da2 <_puts_r+0xb6>
 8007d98:	6823      	ldr	r3, [r4, #0]
 8007d9a:	1c5a      	adds	r2, r3, #1
 8007d9c:	6022      	str	r2, [r4, #0]
 8007d9e:	7019      	strb	r1, [r3, #0]
 8007da0:	e7c5      	b.n	8007d2e <_puts_r+0x42>
 8007da2:	4622      	mov	r2, r4
 8007da4:	4628      	mov	r0, r5
 8007da6:	f000 f86b 	bl	8007e80 <__swbuf_r>
 8007daa:	3001      	adds	r0, #1
 8007dac:	d1bf      	bne.n	8007d2e <_puts_r+0x42>
 8007dae:	e7df      	b.n	8007d70 <_puts_r+0x84>
 8007db0:	6823      	ldr	r3, [r4, #0]
 8007db2:	250a      	movs	r5, #10
 8007db4:	1c5a      	adds	r2, r3, #1
 8007db6:	6022      	str	r2, [r4, #0]
 8007db8:	701d      	strb	r5, [r3, #0]
 8007dba:	e7db      	b.n	8007d74 <_puts_r+0x88>
 8007dbc:	08008dbc 	.word	0x08008dbc
 8007dc0:	08008ddc 	.word	0x08008ddc
 8007dc4:	08008d9c 	.word	0x08008d9c

08007dc8 <puts>:
 8007dc8:	4b02      	ldr	r3, [pc, #8]	; (8007dd4 <puts+0xc>)
 8007dca:	4601      	mov	r1, r0
 8007dcc:	6818      	ldr	r0, [r3, #0]
 8007dce:	f7ff bf8d 	b.w	8007cec <_puts_r>
 8007dd2:	bf00      	nop
 8007dd4:	20000064 	.word	0x20000064

08007dd8 <_sbrk_r>:
 8007dd8:	b538      	push	{r3, r4, r5, lr}
 8007dda:	2300      	movs	r3, #0
 8007ddc:	4d05      	ldr	r5, [pc, #20]	; (8007df4 <_sbrk_r+0x1c>)
 8007dde:	4604      	mov	r4, r0
 8007de0:	4608      	mov	r0, r1
 8007de2:	602b      	str	r3, [r5, #0]
 8007de4:	f7f9 f86e 	bl	8000ec4 <_sbrk>
 8007de8:	1c43      	adds	r3, r0, #1
 8007dea:	d102      	bne.n	8007df2 <_sbrk_r+0x1a>
 8007dec:	682b      	ldr	r3, [r5, #0]
 8007dee:	b103      	cbz	r3, 8007df2 <_sbrk_r+0x1a>
 8007df0:	6023      	str	r3, [r4, #0]
 8007df2:	bd38      	pop	{r3, r4, r5, pc}
 8007df4:	20000fb0 	.word	0x20000fb0

08007df8 <__sread>:
 8007df8:	b510      	push	{r4, lr}
 8007dfa:	460c      	mov	r4, r1
 8007dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e00:	f000 fe4c 	bl	8008a9c <_read_r>
 8007e04:	2800      	cmp	r0, #0
 8007e06:	bfab      	itete	ge
 8007e08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e0a:	89a3      	ldrhlt	r3, [r4, #12]
 8007e0c:	181b      	addge	r3, r3, r0
 8007e0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e12:	bfac      	ite	ge
 8007e14:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e16:	81a3      	strhlt	r3, [r4, #12]
 8007e18:	bd10      	pop	{r4, pc}

08007e1a <__swrite>:
 8007e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e1e:	461f      	mov	r7, r3
 8007e20:	898b      	ldrh	r3, [r1, #12]
 8007e22:	4605      	mov	r5, r0
 8007e24:	460c      	mov	r4, r1
 8007e26:	05db      	lsls	r3, r3, #23
 8007e28:	4616      	mov	r6, r2
 8007e2a:	d505      	bpl.n	8007e38 <__swrite+0x1e>
 8007e2c:	2302      	movs	r3, #2
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e34:	f000 fabe 	bl	80083b4 <_lseek_r>
 8007e38:	89a3      	ldrh	r3, [r4, #12]
 8007e3a:	4632      	mov	r2, r6
 8007e3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e40:	4628      	mov	r0, r5
 8007e42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e46:	81a3      	strh	r3, [r4, #12]
 8007e48:	463b      	mov	r3, r7
 8007e4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e4e:	f000 b869 	b.w	8007f24 <_write_r>

08007e52 <__sseek>:
 8007e52:	b510      	push	{r4, lr}
 8007e54:	460c      	mov	r4, r1
 8007e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e5a:	f000 faab 	bl	80083b4 <_lseek_r>
 8007e5e:	1c43      	adds	r3, r0, #1
 8007e60:	89a3      	ldrh	r3, [r4, #12]
 8007e62:	bf15      	itete	ne
 8007e64:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e6e:	81a3      	strheq	r3, [r4, #12]
 8007e70:	bf18      	it	ne
 8007e72:	81a3      	strhne	r3, [r4, #12]
 8007e74:	bd10      	pop	{r4, pc}

08007e76 <__sclose>:
 8007e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e7a:	f000 b8d3 	b.w	8008024 <_close_r>
	...

08007e80 <__swbuf_r>:
 8007e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e82:	460e      	mov	r6, r1
 8007e84:	4614      	mov	r4, r2
 8007e86:	4605      	mov	r5, r0
 8007e88:	b118      	cbz	r0, 8007e92 <__swbuf_r+0x12>
 8007e8a:	6983      	ldr	r3, [r0, #24]
 8007e8c:	b90b      	cbnz	r3, 8007e92 <__swbuf_r+0x12>
 8007e8e:	f000 f9f1 	bl	8008274 <__sinit>
 8007e92:	4b21      	ldr	r3, [pc, #132]	; (8007f18 <__swbuf_r+0x98>)
 8007e94:	429c      	cmp	r4, r3
 8007e96:	d12b      	bne.n	8007ef0 <__swbuf_r+0x70>
 8007e98:	686c      	ldr	r4, [r5, #4]
 8007e9a:	69a3      	ldr	r3, [r4, #24]
 8007e9c:	60a3      	str	r3, [r4, #8]
 8007e9e:	89a3      	ldrh	r3, [r4, #12]
 8007ea0:	071a      	lsls	r2, r3, #28
 8007ea2:	d52f      	bpl.n	8007f04 <__swbuf_r+0x84>
 8007ea4:	6923      	ldr	r3, [r4, #16]
 8007ea6:	b36b      	cbz	r3, 8007f04 <__swbuf_r+0x84>
 8007ea8:	6923      	ldr	r3, [r4, #16]
 8007eaa:	b2f6      	uxtb	r6, r6
 8007eac:	6820      	ldr	r0, [r4, #0]
 8007eae:	4637      	mov	r7, r6
 8007eb0:	1ac0      	subs	r0, r0, r3
 8007eb2:	6963      	ldr	r3, [r4, #20]
 8007eb4:	4283      	cmp	r3, r0
 8007eb6:	dc04      	bgt.n	8007ec2 <__swbuf_r+0x42>
 8007eb8:	4621      	mov	r1, r4
 8007eba:	4628      	mov	r0, r5
 8007ebc:	f000 f946 	bl	800814c <_fflush_r>
 8007ec0:	bb30      	cbnz	r0, 8007f10 <__swbuf_r+0x90>
 8007ec2:	68a3      	ldr	r3, [r4, #8]
 8007ec4:	3001      	adds	r0, #1
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	60a3      	str	r3, [r4, #8]
 8007eca:	6823      	ldr	r3, [r4, #0]
 8007ecc:	1c5a      	adds	r2, r3, #1
 8007ece:	6022      	str	r2, [r4, #0]
 8007ed0:	701e      	strb	r6, [r3, #0]
 8007ed2:	6963      	ldr	r3, [r4, #20]
 8007ed4:	4283      	cmp	r3, r0
 8007ed6:	d004      	beq.n	8007ee2 <__swbuf_r+0x62>
 8007ed8:	89a3      	ldrh	r3, [r4, #12]
 8007eda:	07db      	lsls	r3, r3, #31
 8007edc:	d506      	bpl.n	8007eec <__swbuf_r+0x6c>
 8007ede:	2e0a      	cmp	r6, #10
 8007ee0:	d104      	bne.n	8007eec <__swbuf_r+0x6c>
 8007ee2:	4621      	mov	r1, r4
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	f000 f931 	bl	800814c <_fflush_r>
 8007eea:	b988      	cbnz	r0, 8007f10 <__swbuf_r+0x90>
 8007eec:	4638      	mov	r0, r7
 8007eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ef0:	4b0a      	ldr	r3, [pc, #40]	; (8007f1c <__swbuf_r+0x9c>)
 8007ef2:	429c      	cmp	r4, r3
 8007ef4:	d101      	bne.n	8007efa <__swbuf_r+0x7a>
 8007ef6:	68ac      	ldr	r4, [r5, #8]
 8007ef8:	e7cf      	b.n	8007e9a <__swbuf_r+0x1a>
 8007efa:	4b09      	ldr	r3, [pc, #36]	; (8007f20 <__swbuf_r+0xa0>)
 8007efc:	429c      	cmp	r4, r3
 8007efe:	bf08      	it	eq
 8007f00:	68ec      	ldreq	r4, [r5, #12]
 8007f02:	e7ca      	b.n	8007e9a <__swbuf_r+0x1a>
 8007f04:	4621      	mov	r1, r4
 8007f06:	4628      	mov	r0, r5
 8007f08:	f000 f81e 	bl	8007f48 <__swsetup_r>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d0cb      	beq.n	8007ea8 <__swbuf_r+0x28>
 8007f10:	f04f 37ff 	mov.w	r7, #4294967295
 8007f14:	e7ea      	b.n	8007eec <__swbuf_r+0x6c>
 8007f16:	bf00      	nop
 8007f18:	08008dbc 	.word	0x08008dbc
 8007f1c:	08008ddc 	.word	0x08008ddc
 8007f20:	08008d9c 	.word	0x08008d9c

08007f24 <_write_r>:
 8007f24:	b538      	push	{r3, r4, r5, lr}
 8007f26:	4604      	mov	r4, r0
 8007f28:	4d06      	ldr	r5, [pc, #24]	; (8007f44 <_write_r+0x20>)
 8007f2a:	4608      	mov	r0, r1
 8007f2c:	4611      	mov	r1, r2
 8007f2e:	2200      	movs	r2, #0
 8007f30:	602a      	str	r2, [r5, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	f7f8 fb40 	bl	80005b8 <_write>
 8007f38:	1c43      	adds	r3, r0, #1
 8007f3a:	d102      	bne.n	8007f42 <_write_r+0x1e>
 8007f3c:	682b      	ldr	r3, [r5, #0]
 8007f3e:	b103      	cbz	r3, 8007f42 <_write_r+0x1e>
 8007f40:	6023      	str	r3, [r4, #0]
 8007f42:	bd38      	pop	{r3, r4, r5, pc}
 8007f44:	20000fb0 	.word	0x20000fb0

08007f48 <__swsetup_r>:
 8007f48:	4b32      	ldr	r3, [pc, #200]	; (8008014 <__swsetup_r+0xcc>)
 8007f4a:	b570      	push	{r4, r5, r6, lr}
 8007f4c:	681d      	ldr	r5, [r3, #0]
 8007f4e:	4606      	mov	r6, r0
 8007f50:	460c      	mov	r4, r1
 8007f52:	b125      	cbz	r5, 8007f5e <__swsetup_r+0x16>
 8007f54:	69ab      	ldr	r3, [r5, #24]
 8007f56:	b913      	cbnz	r3, 8007f5e <__swsetup_r+0x16>
 8007f58:	4628      	mov	r0, r5
 8007f5a:	f000 f98b 	bl	8008274 <__sinit>
 8007f5e:	4b2e      	ldr	r3, [pc, #184]	; (8008018 <__swsetup_r+0xd0>)
 8007f60:	429c      	cmp	r4, r3
 8007f62:	d10f      	bne.n	8007f84 <__swsetup_r+0x3c>
 8007f64:	686c      	ldr	r4, [r5, #4]
 8007f66:	89a3      	ldrh	r3, [r4, #12]
 8007f68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f6c:	0719      	lsls	r1, r3, #28
 8007f6e:	d42c      	bmi.n	8007fca <__swsetup_r+0x82>
 8007f70:	06dd      	lsls	r5, r3, #27
 8007f72:	d411      	bmi.n	8007f98 <__swsetup_r+0x50>
 8007f74:	2309      	movs	r3, #9
 8007f76:	6033      	str	r3, [r6, #0]
 8007f78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f80:	81a3      	strh	r3, [r4, #12]
 8007f82:	e03e      	b.n	8008002 <__swsetup_r+0xba>
 8007f84:	4b25      	ldr	r3, [pc, #148]	; (800801c <__swsetup_r+0xd4>)
 8007f86:	429c      	cmp	r4, r3
 8007f88:	d101      	bne.n	8007f8e <__swsetup_r+0x46>
 8007f8a:	68ac      	ldr	r4, [r5, #8]
 8007f8c:	e7eb      	b.n	8007f66 <__swsetup_r+0x1e>
 8007f8e:	4b24      	ldr	r3, [pc, #144]	; (8008020 <__swsetup_r+0xd8>)
 8007f90:	429c      	cmp	r4, r3
 8007f92:	bf08      	it	eq
 8007f94:	68ec      	ldreq	r4, [r5, #12]
 8007f96:	e7e6      	b.n	8007f66 <__swsetup_r+0x1e>
 8007f98:	0758      	lsls	r0, r3, #29
 8007f9a:	d512      	bpl.n	8007fc2 <__swsetup_r+0x7a>
 8007f9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f9e:	b141      	cbz	r1, 8007fb2 <__swsetup_r+0x6a>
 8007fa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fa4:	4299      	cmp	r1, r3
 8007fa6:	d002      	beq.n	8007fae <__swsetup_r+0x66>
 8007fa8:	4630      	mov	r0, r6
 8007faa:	f7ff fda7 	bl	8007afc <_free_r>
 8007fae:	2300      	movs	r3, #0
 8007fb0:	6363      	str	r3, [r4, #52]	; 0x34
 8007fb2:	89a3      	ldrh	r3, [r4, #12]
 8007fb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007fb8:	81a3      	strh	r3, [r4, #12]
 8007fba:	2300      	movs	r3, #0
 8007fbc:	6063      	str	r3, [r4, #4]
 8007fbe:	6923      	ldr	r3, [r4, #16]
 8007fc0:	6023      	str	r3, [r4, #0]
 8007fc2:	89a3      	ldrh	r3, [r4, #12]
 8007fc4:	f043 0308 	orr.w	r3, r3, #8
 8007fc8:	81a3      	strh	r3, [r4, #12]
 8007fca:	6923      	ldr	r3, [r4, #16]
 8007fcc:	b94b      	cbnz	r3, 8007fe2 <__swsetup_r+0x9a>
 8007fce:	89a3      	ldrh	r3, [r4, #12]
 8007fd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007fd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fd8:	d003      	beq.n	8007fe2 <__swsetup_r+0x9a>
 8007fda:	4621      	mov	r1, r4
 8007fdc:	4630      	mov	r0, r6
 8007fde:	f000 fa21 	bl	8008424 <__smakebuf_r>
 8007fe2:	89a0      	ldrh	r0, [r4, #12]
 8007fe4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fe8:	f010 0301 	ands.w	r3, r0, #1
 8007fec:	d00a      	beq.n	8008004 <__swsetup_r+0xbc>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	60a3      	str	r3, [r4, #8]
 8007ff2:	6963      	ldr	r3, [r4, #20]
 8007ff4:	425b      	negs	r3, r3
 8007ff6:	61a3      	str	r3, [r4, #24]
 8007ff8:	6923      	ldr	r3, [r4, #16]
 8007ffa:	b943      	cbnz	r3, 800800e <__swsetup_r+0xc6>
 8007ffc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008000:	d1ba      	bne.n	8007f78 <__swsetup_r+0x30>
 8008002:	bd70      	pop	{r4, r5, r6, pc}
 8008004:	0781      	lsls	r1, r0, #30
 8008006:	bf58      	it	pl
 8008008:	6963      	ldrpl	r3, [r4, #20]
 800800a:	60a3      	str	r3, [r4, #8]
 800800c:	e7f4      	b.n	8007ff8 <__swsetup_r+0xb0>
 800800e:	2000      	movs	r0, #0
 8008010:	e7f7      	b.n	8008002 <__swsetup_r+0xba>
 8008012:	bf00      	nop
 8008014:	20000064 	.word	0x20000064
 8008018:	08008dbc 	.word	0x08008dbc
 800801c:	08008ddc 	.word	0x08008ddc
 8008020:	08008d9c 	.word	0x08008d9c

08008024 <_close_r>:
 8008024:	b538      	push	{r3, r4, r5, lr}
 8008026:	2300      	movs	r3, #0
 8008028:	4d05      	ldr	r5, [pc, #20]	; (8008040 <_close_r+0x1c>)
 800802a:	4604      	mov	r4, r0
 800802c:	4608      	mov	r0, r1
 800802e:	602b      	str	r3, [r5, #0]
 8008030:	f7f8 ff3a 	bl	8000ea8 <_close>
 8008034:	1c43      	adds	r3, r0, #1
 8008036:	d102      	bne.n	800803e <_close_r+0x1a>
 8008038:	682b      	ldr	r3, [r5, #0]
 800803a:	b103      	cbz	r3, 800803e <_close_r+0x1a>
 800803c:	6023      	str	r3, [r4, #0]
 800803e:	bd38      	pop	{r3, r4, r5, pc}
 8008040:	20000fb0 	.word	0x20000fb0

08008044 <__sflush_r>:
 8008044:	898a      	ldrh	r2, [r1, #12]
 8008046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800804a:	4605      	mov	r5, r0
 800804c:	0710      	lsls	r0, r2, #28
 800804e:	460c      	mov	r4, r1
 8008050:	d458      	bmi.n	8008104 <__sflush_r+0xc0>
 8008052:	684b      	ldr	r3, [r1, #4]
 8008054:	2b00      	cmp	r3, #0
 8008056:	dc05      	bgt.n	8008064 <__sflush_r+0x20>
 8008058:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800805a:	2b00      	cmp	r3, #0
 800805c:	dc02      	bgt.n	8008064 <__sflush_r+0x20>
 800805e:	2000      	movs	r0, #0
 8008060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008064:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008066:	2e00      	cmp	r6, #0
 8008068:	d0f9      	beq.n	800805e <__sflush_r+0x1a>
 800806a:	2300      	movs	r3, #0
 800806c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008070:	682f      	ldr	r7, [r5, #0]
 8008072:	602b      	str	r3, [r5, #0]
 8008074:	d032      	beq.n	80080dc <__sflush_r+0x98>
 8008076:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008078:	89a3      	ldrh	r3, [r4, #12]
 800807a:	075a      	lsls	r2, r3, #29
 800807c:	d505      	bpl.n	800808a <__sflush_r+0x46>
 800807e:	6863      	ldr	r3, [r4, #4]
 8008080:	1ac0      	subs	r0, r0, r3
 8008082:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008084:	b10b      	cbz	r3, 800808a <__sflush_r+0x46>
 8008086:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008088:	1ac0      	subs	r0, r0, r3
 800808a:	2300      	movs	r3, #0
 800808c:	4602      	mov	r2, r0
 800808e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008090:	4628      	mov	r0, r5
 8008092:	6a21      	ldr	r1, [r4, #32]
 8008094:	47b0      	blx	r6
 8008096:	1c43      	adds	r3, r0, #1
 8008098:	89a3      	ldrh	r3, [r4, #12]
 800809a:	d106      	bne.n	80080aa <__sflush_r+0x66>
 800809c:	6829      	ldr	r1, [r5, #0]
 800809e:	291d      	cmp	r1, #29
 80080a0:	d82c      	bhi.n	80080fc <__sflush_r+0xb8>
 80080a2:	4a29      	ldr	r2, [pc, #164]	; (8008148 <__sflush_r+0x104>)
 80080a4:	40ca      	lsrs	r2, r1
 80080a6:	07d6      	lsls	r6, r2, #31
 80080a8:	d528      	bpl.n	80080fc <__sflush_r+0xb8>
 80080aa:	2200      	movs	r2, #0
 80080ac:	04d9      	lsls	r1, r3, #19
 80080ae:	6062      	str	r2, [r4, #4]
 80080b0:	6922      	ldr	r2, [r4, #16]
 80080b2:	6022      	str	r2, [r4, #0]
 80080b4:	d504      	bpl.n	80080c0 <__sflush_r+0x7c>
 80080b6:	1c42      	adds	r2, r0, #1
 80080b8:	d101      	bne.n	80080be <__sflush_r+0x7a>
 80080ba:	682b      	ldr	r3, [r5, #0]
 80080bc:	b903      	cbnz	r3, 80080c0 <__sflush_r+0x7c>
 80080be:	6560      	str	r0, [r4, #84]	; 0x54
 80080c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080c2:	602f      	str	r7, [r5, #0]
 80080c4:	2900      	cmp	r1, #0
 80080c6:	d0ca      	beq.n	800805e <__sflush_r+0x1a>
 80080c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080cc:	4299      	cmp	r1, r3
 80080ce:	d002      	beq.n	80080d6 <__sflush_r+0x92>
 80080d0:	4628      	mov	r0, r5
 80080d2:	f7ff fd13 	bl	8007afc <_free_r>
 80080d6:	2000      	movs	r0, #0
 80080d8:	6360      	str	r0, [r4, #52]	; 0x34
 80080da:	e7c1      	b.n	8008060 <__sflush_r+0x1c>
 80080dc:	6a21      	ldr	r1, [r4, #32]
 80080de:	2301      	movs	r3, #1
 80080e0:	4628      	mov	r0, r5
 80080e2:	47b0      	blx	r6
 80080e4:	1c41      	adds	r1, r0, #1
 80080e6:	d1c7      	bne.n	8008078 <__sflush_r+0x34>
 80080e8:	682b      	ldr	r3, [r5, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d0c4      	beq.n	8008078 <__sflush_r+0x34>
 80080ee:	2b1d      	cmp	r3, #29
 80080f0:	d001      	beq.n	80080f6 <__sflush_r+0xb2>
 80080f2:	2b16      	cmp	r3, #22
 80080f4:	d101      	bne.n	80080fa <__sflush_r+0xb6>
 80080f6:	602f      	str	r7, [r5, #0]
 80080f8:	e7b1      	b.n	800805e <__sflush_r+0x1a>
 80080fa:	89a3      	ldrh	r3, [r4, #12]
 80080fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008100:	81a3      	strh	r3, [r4, #12]
 8008102:	e7ad      	b.n	8008060 <__sflush_r+0x1c>
 8008104:	690f      	ldr	r7, [r1, #16]
 8008106:	2f00      	cmp	r7, #0
 8008108:	d0a9      	beq.n	800805e <__sflush_r+0x1a>
 800810a:	0793      	lsls	r3, r2, #30
 800810c:	680e      	ldr	r6, [r1, #0]
 800810e:	600f      	str	r7, [r1, #0]
 8008110:	bf0c      	ite	eq
 8008112:	694b      	ldreq	r3, [r1, #20]
 8008114:	2300      	movne	r3, #0
 8008116:	eba6 0807 	sub.w	r8, r6, r7
 800811a:	608b      	str	r3, [r1, #8]
 800811c:	f1b8 0f00 	cmp.w	r8, #0
 8008120:	dd9d      	ble.n	800805e <__sflush_r+0x1a>
 8008122:	4643      	mov	r3, r8
 8008124:	463a      	mov	r2, r7
 8008126:	6a21      	ldr	r1, [r4, #32]
 8008128:	4628      	mov	r0, r5
 800812a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800812c:	47b0      	blx	r6
 800812e:	2800      	cmp	r0, #0
 8008130:	dc06      	bgt.n	8008140 <__sflush_r+0xfc>
 8008132:	89a3      	ldrh	r3, [r4, #12]
 8008134:	f04f 30ff 	mov.w	r0, #4294967295
 8008138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800813c:	81a3      	strh	r3, [r4, #12]
 800813e:	e78f      	b.n	8008060 <__sflush_r+0x1c>
 8008140:	4407      	add	r7, r0
 8008142:	eba8 0800 	sub.w	r8, r8, r0
 8008146:	e7e9      	b.n	800811c <__sflush_r+0xd8>
 8008148:	20400001 	.word	0x20400001

0800814c <_fflush_r>:
 800814c:	b538      	push	{r3, r4, r5, lr}
 800814e:	690b      	ldr	r3, [r1, #16]
 8008150:	4605      	mov	r5, r0
 8008152:	460c      	mov	r4, r1
 8008154:	b913      	cbnz	r3, 800815c <_fflush_r+0x10>
 8008156:	2500      	movs	r5, #0
 8008158:	4628      	mov	r0, r5
 800815a:	bd38      	pop	{r3, r4, r5, pc}
 800815c:	b118      	cbz	r0, 8008166 <_fflush_r+0x1a>
 800815e:	6983      	ldr	r3, [r0, #24]
 8008160:	b90b      	cbnz	r3, 8008166 <_fflush_r+0x1a>
 8008162:	f000 f887 	bl	8008274 <__sinit>
 8008166:	4b14      	ldr	r3, [pc, #80]	; (80081b8 <_fflush_r+0x6c>)
 8008168:	429c      	cmp	r4, r3
 800816a:	d11b      	bne.n	80081a4 <_fflush_r+0x58>
 800816c:	686c      	ldr	r4, [r5, #4]
 800816e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d0ef      	beq.n	8008156 <_fflush_r+0xa>
 8008176:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008178:	07d0      	lsls	r0, r2, #31
 800817a:	d404      	bmi.n	8008186 <_fflush_r+0x3a>
 800817c:	0599      	lsls	r1, r3, #22
 800817e:	d402      	bmi.n	8008186 <_fflush_r+0x3a>
 8008180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008182:	f000 f915 	bl	80083b0 <__retarget_lock_acquire_recursive>
 8008186:	4628      	mov	r0, r5
 8008188:	4621      	mov	r1, r4
 800818a:	f7ff ff5b 	bl	8008044 <__sflush_r>
 800818e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008190:	4605      	mov	r5, r0
 8008192:	07da      	lsls	r2, r3, #31
 8008194:	d4e0      	bmi.n	8008158 <_fflush_r+0xc>
 8008196:	89a3      	ldrh	r3, [r4, #12]
 8008198:	059b      	lsls	r3, r3, #22
 800819a:	d4dd      	bmi.n	8008158 <_fflush_r+0xc>
 800819c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800819e:	f000 f908 	bl	80083b2 <__retarget_lock_release_recursive>
 80081a2:	e7d9      	b.n	8008158 <_fflush_r+0xc>
 80081a4:	4b05      	ldr	r3, [pc, #20]	; (80081bc <_fflush_r+0x70>)
 80081a6:	429c      	cmp	r4, r3
 80081a8:	d101      	bne.n	80081ae <_fflush_r+0x62>
 80081aa:	68ac      	ldr	r4, [r5, #8]
 80081ac:	e7df      	b.n	800816e <_fflush_r+0x22>
 80081ae:	4b04      	ldr	r3, [pc, #16]	; (80081c0 <_fflush_r+0x74>)
 80081b0:	429c      	cmp	r4, r3
 80081b2:	bf08      	it	eq
 80081b4:	68ec      	ldreq	r4, [r5, #12]
 80081b6:	e7da      	b.n	800816e <_fflush_r+0x22>
 80081b8:	08008dbc 	.word	0x08008dbc
 80081bc:	08008ddc 	.word	0x08008ddc
 80081c0:	08008d9c 	.word	0x08008d9c

080081c4 <std>:
 80081c4:	2300      	movs	r3, #0
 80081c6:	b510      	push	{r4, lr}
 80081c8:	4604      	mov	r4, r0
 80081ca:	6083      	str	r3, [r0, #8]
 80081cc:	8181      	strh	r1, [r0, #12]
 80081ce:	4619      	mov	r1, r3
 80081d0:	6643      	str	r3, [r0, #100]	; 0x64
 80081d2:	81c2      	strh	r2, [r0, #14]
 80081d4:	2208      	movs	r2, #8
 80081d6:	6183      	str	r3, [r0, #24]
 80081d8:	e9c0 3300 	strd	r3, r3, [r0]
 80081dc:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081e0:	305c      	adds	r0, #92	; 0x5c
 80081e2:	f7ff fc83 	bl	8007aec <memset>
 80081e6:	4b05      	ldr	r3, [pc, #20]	; (80081fc <std+0x38>)
 80081e8:	6224      	str	r4, [r4, #32]
 80081ea:	6263      	str	r3, [r4, #36]	; 0x24
 80081ec:	4b04      	ldr	r3, [pc, #16]	; (8008200 <std+0x3c>)
 80081ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80081f0:	4b04      	ldr	r3, [pc, #16]	; (8008204 <std+0x40>)
 80081f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081f4:	4b04      	ldr	r3, [pc, #16]	; (8008208 <std+0x44>)
 80081f6:	6323      	str	r3, [r4, #48]	; 0x30
 80081f8:	bd10      	pop	{r4, pc}
 80081fa:	bf00      	nop
 80081fc:	08007df9 	.word	0x08007df9
 8008200:	08007e1b 	.word	0x08007e1b
 8008204:	08007e53 	.word	0x08007e53
 8008208:	08007e77 	.word	0x08007e77

0800820c <_cleanup_r>:
 800820c:	4901      	ldr	r1, [pc, #4]	; (8008214 <_cleanup_r+0x8>)
 800820e:	f000 b8af 	b.w	8008370 <_fwalk_reent>
 8008212:	bf00      	nop
 8008214:	0800814d 	.word	0x0800814d

08008218 <__sfmoreglue>:
 8008218:	b570      	push	{r4, r5, r6, lr}
 800821a:	2268      	movs	r2, #104	; 0x68
 800821c:	1e4d      	subs	r5, r1, #1
 800821e:	460e      	mov	r6, r1
 8008220:	4355      	muls	r5, r2
 8008222:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008226:	f7ff fcd5 	bl	8007bd4 <_malloc_r>
 800822a:	4604      	mov	r4, r0
 800822c:	b140      	cbz	r0, 8008240 <__sfmoreglue+0x28>
 800822e:	2100      	movs	r1, #0
 8008230:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008234:	e9c0 1600 	strd	r1, r6, [r0]
 8008238:	300c      	adds	r0, #12
 800823a:	60a0      	str	r0, [r4, #8]
 800823c:	f7ff fc56 	bl	8007aec <memset>
 8008240:	4620      	mov	r0, r4
 8008242:	bd70      	pop	{r4, r5, r6, pc}

08008244 <__sfp_lock_acquire>:
 8008244:	4801      	ldr	r0, [pc, #4]	; (800824c <__sfp_lock_acquire+0x8>)
 8008246:	f000 b8b3 	b.w	80083b0 <__retarget_lock_acquire_recursive>
 800824a:	bf00      	nop
 800824c:	20000fad 	.word	0x20000fad

08008250 <__sfp_lock_release>:
 8008250:	4801      	ldr	r0, [pc, #4]	; (8008258 <__sfp_lock_release+0x8>)
 8008252:	f000 b8ae 	b.w	80083b2 <__retarget_lock_release_recursive>
 8008256:	bf00      	nop
 8008258:	20000fad 	.word	0x20000fad

0800825c <__sinit_lock_acquire>:
 800825c:	4801      	ldr	r0, [pc, #4]	; (8008264 <__sinit_lock_acquire+0x8>)
 800825e:	f000 b8a7 	b.w	80083b0 <__retarget_lock_acquire_recursive>
 8008262:	bf00      	nop
 8008264:	20000fae 	.word	0x20000fae

08008268 <__sinit_lock_release>:
 8008268:	4801      	ldr	r0, [pc, #4]	; (8008270 <__sinit_lock_release+0x8>)
 800826a:	f000 b8a2 	b.w	80083b2 <__retarget_lock_release_recursive>
 800826e:	bf00      	nop
 8008270:	20000fae 	.word	0x20000fae

08008274 <__sinit>:
 8008274:	b510      	push	{r4, lr}
 8008276:	4604      	mov	r4, r0
 8008278:	f7ff fff0 	bl	800825c <__sinit_lock_acquire>
 800827c:	69a3      	ldr	r3, [r4, #24]
 800827e:	b11b      	cbz	r3, 8008288 <__sinit+0x14>
 8008280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008284:	f7ff bff0 	b.w	8008268 <__sinit_lock_release>
 8008288:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800828c:	6523      	str	r3, [r4, #80]	; 0x50
 800828e:	4620      	mov	r0, r4
 8008290:	4b12      	ldr	r3, [pc, #72]	; (80082dc <__sinit+0x68>)
 8008292:	4a13      	ldr	r2, [pc, #76]	; (80082e0 <__sinit+0x6c>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	62a2      	str	r2, [r4, #40]	; 0x28
 8008298:	42a3      	cmp	r3, r4
 800829a:	bf04      	itt	eq
 800829c:	2301      	moveq	r3, #1
 800829e:	61a3      	streq	r3, [r4, #24]
 80082a0:	f000 f820 	bl	80082e4 <__sfp>
 80082a4:	6060      	str	r0, [r4, #4]
 80082a6:	4620      	mov	r0, r4
 80082a8:	f000 f81c 	bl	80082e4 <__sfp>
 80082ac:	60a0      	str	r0, [r4, #8]
 80082ae:	4620      	mov	r0, r4
 80082b0:	f000 f818 	bl	80082e4 <__sfp>
 80082b4:	2200      	movs	r2, #0
 80082b6:	2104      	movs	r1, #4
 80082b8:	60e0      	str	r0, [r4, #12]
 80082ba:	6860      	ldr	r0, [r4, #4]
 80082bc:	f7ff ff82 	bl	80081c4 <std>
 80082c0:	2201      	movs	r2, #1
 80082c2:	2109      	movs	r1, #9
 80082c4:	68a0      	ldr	r0, [r4, #8]
 80082c6:	f7ff ff7d 	bl	80081c4 <std>
 80082ca:	2202      	movs	r2, #2
 80082cc:	2112      	movs	r1, #18
 80082ce:	68e0      	ldr	r0, [r4, #12]
 80082d0:	f7ff ff78 	bl	80081c4 <std>
 80082d4:	2301      	movs	r3, #1
 80082d6:	61a3      	str	r3, [r4, #24]
 80082d8:	e7d2      	b.n	8008280 <__sinit+0xc>
 80082da:	bf00      	nop
 80082dc:	08008d98 	.word	0x08008d98
 80082e0:	0800820d 	.word	0x0800820d

080082e4 <__sfp>:
 80082e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082e6:	4607      	mov	r7, r0
 80082e8:	f7ff ffac 	bl	8008244 <__sfp_lock_acquire>
 80082ec:	4b1e      	ldr	r3, [pc, #120]	; (8008368 <__sfp+0x84>)
 80082ee:	681e      	ldr	r6, [r3, #0]
 80082f0:	69b3      	ldr	r3, [r6, #24]
 80082f2:	b913      	cbnz	r3, 80082fa <__sfp+0x16>
 80082f4:	4630      	mov	r0, r6
 80082f6:	f7ff ffbd 	bl	8008274 <__sinit>
 80082fa:	3648      	adds	r6, #72	; 0x48
 80082fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008300:	3b01      	subs	r3, #1
 8008302:	d503      	bpl.n	800830c <__sfp+0x28>
 8008304:	6833      	ldr	r3, [r6, #0]
 8008306:	b30b      	cbz	r3, 800834c <__sfp+0x68>
 8008308:	6836      	ldr	r6, [r6, #0]
 800830a:	e7f7      	b.n	80082fc <__sfp+0x18>
 800830c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008310:	b9d5      	cbnz	r5, 8008348 <__sfp+0x64>
 8008312:	4b16      	ldr	r3, [pc, #88]	; (800836c <__sfp+0x88>)
 8008314:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008318:	6665      	str	r5, [r4, #100]	; 0x64
 800831a:	60e3      	str	r3, [r4, #12]
 800831c:	f000 f847 	bl	80083ae <__retarget_lock_init_recursive>
 8008320:	f7ff ff96 	bl	8008250 <__sfp_lock_release>
 8008324:	2208      	movs	r2, #8
 8008326:	4629      	mov	r1, r5
 8008328:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800832c:	6025      	str	r5, [r4, #0]
 800832e:	61a5      	str	r5, [r4, #24]
 8008330:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008334:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008338:	f7ff fbd8 	bl	8007aec <memset>
 800833c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008340:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008344:	4620      	mov	r0, r4
 8008346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008348:	3468      	adds	r4, #104	; 0x68
 800834a:	e7d9      	b.n	8008300 <__sfp+0x1c>
 800834c:	2104      	movs	r1, #4
 800834e:	4638      	mov	r0, r7
 8008350:	f7ff ff62 	bl	8008218 <__sfmoreglue>
 8008354:	4604      	mov	r4, r0
 8008356:	6030      	str	r0, [r6, #0]
 8008358:	2800      	cmp	r0, #0
 800835a:	d1d5      	bne.n	8008308 <__sfp+0x24>
 800835c:	f7ff ff78 	bl	8008250 <__sfp_lock_release>
 8008360:	230c      	movs	r3, #12
 8008362:	603b      	str	r3, [r7, #0]
 8008364:	e7ee      	b.n	8008344 <__sfp+0x60>
 8008366:	bf00      	nop
 8008368:	08008d98 	.word	0x08008d98
 800836c:	ffff0001 	.word	0xffff0001

08008370 <_fwalk_reent>:
 8008370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008374:	4606      	mov	r6, r0
 8008376:	4688      	mov	r8, r1
 8008378:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800837c:	2700      	movs	r7, #0
 800837e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008382:	f1b9 0901 	subs.w	r9, r9, #1
 8008386:	d505      	bpl.n	8008394 <_fwalk_reent+0x24>
 8008388:	6824      	ldr	r4, [r4, #0]
 800838a:	2c00      	cmp	r4, #0
 800838c:	d1f7      	bne.n	800837e <_fwalk_reent+0xe>
 800838e:	4638      	mov	r0, r7
 8008390:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008394:	89ab      	ldrh	r3, [r5, #12]
 8008396:	2b01      	cmp	r3, #1
 8008398:	d907      	bls.n	80083aa <_fwalk_reent+0x3a>
 800839a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800839e:	3301      	adds	r3, #1
 80083a0:	d003      	beq.n	80083aa <_fwalk_reent+0x3a>
 80083a2:	4629      	mov	r1, r5
 80083a4:	4630      	mov	r0, r6
 80083a6:	47c0      	blx	r8
 80083a8:	4307      	orrs	r7, r0
 80083aa:	3568      	adds	r5, #104	; 0x68
 80083ac:	e7e9      	b.n	8008382 <_fwalk_reent+0x12>

080083ae <__retarget_lock_init_recursive>:
 80083ae:	4770      	bx	lr

080083b0 <__retarget_lock_acquire_recursive>:
 80083b0:	4770      	bx	lr

080083b2 <__retarget_lock_release_recursive>:
 80083b2:	4770      	bx	lr

080083b4 <_lseek_r>:
 80083b4:	b538      	push	{r3, r4, r5, lr}
 80083b6:	4604      	mov	r4, r0
 80083b8:	4d06      	ldr	r5, [pc, #24]	; (80083d4 <_lseek_r+0x20>)
 80083ba:	4608      	mov	r0, r1
 80083bc:	4611      	mov	r1, r2
 80083be:	2200      	movs	r2, #0
 80083c0:	602a      	str	r2, [r5, #0]
 80083c2:	461a      	mov	r2, r3
 80083c4:	f7f8 fd7c 	bl	8000ec0 <_lseek>
 80083c8:	1c43      	adds	r3, r0, #1
 80083ca:	d102      	bne.n	80083d2 <_lseek_r+0x1e>
 80083cc:	682b      	ldr	r3, [r5, #0]
 80083ce:	b103      	cbz	r3, 80083d2 <_lseek_r+0x1e>
 80083d0:	6023      	str	r3, [r4, #0]
 80083d2:	bd38      	pop	{r3, r4, r5, pc}
 80083d4:	20000fb0 	.word	0x20000fb0

080083d8 <__swhatbuf_r>:
 80083d8:	b570      	push	{r4, r5, r6, lr}
 80083da:	460e      	mov	r6, r1
 80083dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083e0:	b096      	sub	sp, #88	; 0x58
 80083e2:	4614      	mov	r4, r2
 80083e4:	2900      	cmp	r1, #0
 80083e6:	461d      	mov	r5, r3
 80083e8:	da08      	bge.n	80083fc <__swhatbuf_r+0x24>
 80083ea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80083ee:	2200      	movs	r2, #0
 80083f0:	602a      	str	r2, [r5, #0]
 80083f2:	061a      	lsls	r2, r3, #24
 80083f4:	d410      	bmi.n	8008418 <__swhatbuf_r+0x40>
 80083f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083fa:	e00e      	b.n	800841a <__swhatbuf_r+0x42>
 80083fc:	466a      	mov	r2, sp
 80083fe:	f000 fb5f 	bl	8008ac0 <_fstat_r>
 8008402:	2800      	cmp	r0, #0
 8008404:	dbf1      	blt.n	80083ea <__swhatbuf_r+0x12>
 8008406:	9a01      	ldr	r2, [sp, #4]
 8008408:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800840c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008410:	425a      	negs	r2, r3
 8008412:	415a      	adcs	r2, r3
 8008414:	602a      	str	r2, [r5, #0]
 8008416:	e7ee      	b.n	80083f6 <__swhatbuf_r+0x1e>
 8008418:	2340      	movs	r3, #64	; 0x40
 800841a:	2000      	movs	r0, #0
 800841c:	6023      	str	r3, [r4, #0]
 800841e:	b016      	add	sp, #88	; 0x58
 8008420:	bd70      	pop	{r4, r5, r6, pc}
	...

08008424 <__smakebuf_r>:
 8008424:	898b      	ldrh	r3, [r1, #12]
 8008426:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008428:	079d      	lsls	r5, r3, #30
 800842a:	4606      	mov	r6, r0
 800842c:	460c      	mov	r4, r1
 800842e:	d507      	bpl.n	8008440 <__smakebuf_r+0x1c>
 8008430:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008434:	6023      	str	r3, [r4, #0]
 8008436:	6123      	str	r3, [r4, #16]
 8008438:	2301      	movs	r3, #1
 800843a:	6163      	str	r3, [r4, #20]
 800843c:	b002      	add	sp, #8
 800843e:	bd70      	pop	{r4, r5, r6, pc}
 8008440:	ab01      	add	r3, sp, #4
 8008442:	466a      	mov	r2, sp
 8008444:	f7ff ffc8 	bl	80083d8 <__swhatbuf_r>
 8008448:	9900      	ldr	r1, [sp, #0]
 800844a:	4605      	mov	r5, r0
 800844c:	4630      	mov	r0, r6
 800844e:	f7ff fbc1 	bl	8007bd4 <_malloc_r>
 8008452:	b948      	cbnz	r0, 8008468 <__smakebuf_r+0x44>
 8008454:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008458:	059a      	lsls	r2, r3, #22
 800845a:	d4ef      	bmi.n	800843c <__smakebuf_r+0x18>
 800845c:	f023 0303 	bic.w	r3, r3, #3
 8008460:	f043 0302 	orr.w	r3, r3, #2
 8008464:	81a3      	strh	r3, [r4, #12]
 8008466:	e7e3      	b.n	8008430 <__smakebuf_r+0xc>
 8008468:	4b0d      	ldr	r3, [pc, #52]	; (80084a0 <__smakebuf_r+0x7c>)
 800846a:	62b3      	str	r3, [r6, #40]	; 0x28
 800846c:	89a3      	ldrh	r3, [r4, #12]
 800846e:	6020      	str	r0, [r4, #0]
 8008470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008474:	6120      	str	r0, [r4, #16]
 8008476:	81a3      	strh	r3, [r4, #12]
 8008478:	9b00      	ldr	r3, [sp, #0]
 800847a:	6163      	str	r3, [r4, #20]
 800847c:	9b01      	ldr	r3, [sp, #4]
 800847e:	b15b      	cbz	r3, 8008498 <__smakebuf_r+0x74>
 8008480:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008484:	4630      	mov	r0, r6
 8008486:	f000 fb2d 	bl	8008ae4 <_isatty_r>
 800848a:	b128      	cbz	r0, 8008498 <__smakebuf_r+0x74>
 800848c:	89a3      	ldrh	r3, [r4, #12]
 800848e:	f023 0303 	bic.w	r3, r3, #3
 8008492:	f043 0301 	orr.w	r3, r3, #1
 8008496:	81a3      	strh	r3, [r4, #12]
 8008498:	89a0      	ldrh	r0, [r4, #12]
 800849a:	4305      	orrs	r5, r0
 800849c:	81a5      	strh	r5, [r4, #12]
 800849e:	e7cd      	b.n	800843c <__smakebuf_r+0x18>
 80084a0:	0800820d 	.word	0x0800820d

080084a4 <__malloc_lock>:
 80084a4:	4801      	ldr	r0, [pc, #4]	; (80084ac <__malloc_lock+0x8>)
 80084a6:	f7ff bf83 	b.w	80083b0 <__retarget_lock_acquire_recursive>
 80084aa:	bf00      	nop
 80084ac:	20000fac 	.word	0x20000fac

080084b0 <__malloc_unlock>:
 80084b0:	4801      	ldr	r0, [pc, #4]	; (80084b8 <__malloc_unlock+0x8>)
 80084b2:	f7ff bf7e 	b.w	80083b2 <__retarget_lock_release_recursive>
 80084b6:	bf00      	nop
 80084b8:	20000fac 	.word	0x20000fac

080084bc <__sfputc_r>:
 80084bc:	6893      	ldr	r3, [r2, #8]
 80084be:	3b01      	subs	r3, #1
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	6093      	str	r3, [r2, #8]
 80084c4:	b410      	push	{r4}
 80084c6:	da08      	bge.n	80084da <__sfputc_r+0x1e>
 80084c8:	6994      	ldr	r4, [r2, #24]
 80084ca:	42a3      	cmp	r3, r4
 80084cc:	db01      	blt.n	80084d2 <__sfputc_r+0x16>
 80084ce:	290a      	cmp	r1, #10
 80084d0:	d103      	bne.n	80084da <__sfputc_r+0x1e>
 80084d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084d6:	f7ff bcd3 	b.w	8007e80 <__swbuf_r>
 80084da:	6813      	ldr	r3, [r2, #0]
 80084dc:	1c58      	adds	r0, r3, #1
 80084de:	6010      	str	r0, [r2, #0]
 80084e0:	4608      	mov	r0, r1
 80084e2:	7019      	strb	r1, [r3, #0]
 80084e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084e8:	4770      	bx	lr

080084ea <__sfputs_r>:
 80084ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ec:	4606      	mov	r6, r0
 80084ee:	460f      	mov	r7, r1
 80084f0:	4614      	mov	r4, r2
 80084f2:	18d5      	adds	r5, r2, r3
 80084f4:	42ac      	cmp	r4, r5
 80084f6:	d101      	bne.n	80084fc <__sfputs_r+0x12>
 80084f8:	2000      	movs	r0, #0
 80084fa:	e007      	b.n	800850c <__sfputs_r+0x22>
 80084fc:	463a      	mov	r2, r7
 80084fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008502:	4630      	mov	r0, r6
 8008504:	f7ff ffda 	bl	80084bc <__sfputc_r>
 8008508:	1c43      	adds	r3, r0, #1
 800850a:	d1f3      	bne.n	80084f4 <__sfputs_r+0xa>
 800850c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008510 <_vfiprintf_r>:
 8008510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008514:	460d      	mov	r5, r1
 8008516:	b09d      	sub	sp, #116	; 0x74
 8008518:	4614      	mov	r4, r2
 800851a:	4698      	mov	r8, r3
 800851c:	4606      	mov	r6, r0
 800851e:	b118      	cbz	r0, 8008528 <_vfiprintf_r+0x18>
 8008520:	6983      	ldr	r3, [r0, #24]
 8008522:	b90b      	cbnz	r3, 8008528 <_vfiprintf_r+0x18>
 8008524:	f7ff fea6 	bl	8008274 <__sinit>
 8008528:	4b89      	ldr	r3, [pc, #548]	; (8008750 <_vfiprintf_r+0x240>)
 800852a:	429d      	cmp	r5, r3
 800852c:	d11b      	bne.n	8008566 <_vfiprintf_r+0x56>
 800852e:	6875      	ldr	r5, [r6, #4]
 8008530:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008532:	07d9      	lsls	r1, r3, #31
 8008534:	d405      	bmi.n	8008542 <_vfiprintf_r+0x32>
 8008536:	89ab      	ldrh	r3, [r5, #12]
 8008538:	059a      	lsls	r2, r3, #22
 800853a:	d402      	bmi.n	8008542 <_vfiprintf_r+0x32>
 800853c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800853e:	f7ff ff37 	bl	80083b0 <__retarget_lock_acquire_recursive>
 8008542:	89ab      	ldrh	r3, [r5, #12]
 8008544:	071b      	lsls	r3, r3, #28
 8008546:	d501      	bpl.n	800854c <_vfiprintf_r+0x3c>
 8008548:	692b      	ldr	r3, [r5, #16]
 800854a:	b9eb      	cbnz	r3, 8008588 <_vfiprintf_r+0x78>
 800854c:	4629      	mov	r1, r5
 800854e:	4630      	mov	r0, r6
 8008550:	f7ff fcfa 	bl	8007f48 <__swsetup_r>
 8008554:	b1c0      	cbz	r0, 8008588 <_vfiprintf_r+0x78>
 8008556:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008558:	07dc      	lsls	r4, r3, #31
 800855a:	d50e      	bpl.n	800857a <_vfiprintf_r+0x6a>
 800855c:	f04f 30ff 	mov.w	r0, #4294967295
 8008560:	b01d      	add	sp, #116	; 0x74
 8008562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008566:	4b7b      	ldr	r3, [pc, #492]	; (8008754 <_vfiprintf_r+0x244>)
 8008568:	429d      	cmp	r5, r3
 800856a:	d101      	bne.n	8008570 <_vfiprintf_r+0x60>
 800856c:	68b5      	ldr	r5, [r6, #8]
 800856e:	e7df      	b.n	8008530 <_vfiprintf_r+0x20>
 8008570:	4b79      	ldr	r3, [pc, #484]	; (8008758 <_vfiprintf_r+0x248>)
 8008572:	429d      	cmp	r5, r3
 8008574:	bf08      	it	eq
 8008576:	68f5      	ldreq	r5, [r6, #12]
 8008578:	e7da      	b.n	8008530 <_vfiprintf_r+0x20>
 800857a:	89ab      	ldrh	r3, [r5, #12]
 800857c:	0598      	lsls	r0, r3, #22
 800857e:	d4ed      	bmi.n	800855c <_vfiprintf_r+0x4c>
 8008580:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008582:	f7ff ff16 	bl	80083b2 <__retarget_lock_release_recursive>
 8008586:	e7e9      	b.n	800855c <_vfiprintf_r+0x4c>
 8008588:	2300      	movs	r3, #0
 800858a:	f8cd 800c 	str.w	r8, [sp, #12]
 800858e:	f04f 0901 	mov.w	r9, #1
 8008592:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 800875c <_vfiprintf_r+0x24c>
 8008596:	9309      	str	r3, [sp, #36]	; 0x24
 8008598:	2320      	movs	r3, #32
 800859a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800859e:	2330      	movs	r3, #48	; 0x30
 80085a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085a4:	4623      	mov	r3, r4
 80085a6:	469a      	mov	sl, r3
 80085a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085ac:	b10a      	cbz	r2, 80085b2 <_vfiprintf_r+0xa2>
 80085ae:	2a25      	cmp	r2, #37	; 0x25
 80085b0:	d1f9      	bne.n	80085a6 <_vfiprintf_r+0x96>
 80085b2:	ebba 0b04 	subs.w	fp, sl, r4
 80085b6:	d00b      	beq.n	80085d0 <_vfiprintf_r+0xc0>
 80085b8:	465b      	mov	r3, fp
 80085ba:	4622      	mov	r2, r4
 80085bc:	4629      	mov	r1, r5
 80085be:	4630      	mov	r0, r6
 80085c0:	f7ff ff93 	bl	80084ea <__sfputs_r>
 80085c4:	3001      	adds	r0, #1
 80085c6:	f000 80aa 	beq.w	800871e <_vfiprintf_r+0x20e>
 80085ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085cc:	445a      	add	r2, fp
 80085ce:	9209      	str	r2, [sp, #36]	; 0x24
 80085d0:	f89a 3000 	ldrb.w	r3, [sl]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f000 80a2 	beq.w	800871e <_vfiprintf_r+0x20e>
 80085da:	2300      	movs	r3, #0
 80085dc:	f04f 32ff 	mov.w	r2, #4294967295
 80085e0:	f10a 0a01 	add.w	sl, sl, #1
 80085e4:	9304      	str	r3, [sp, #16]
 80085e6:	9307      	str	r3, [sp, #28]
 80085e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085ec:	931a      	str	r3, [sp, #104]	; 0x68
 80085ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085f2:	4654      	mov	r4, sl
 80085f4:	2205      	movs	r2, #5
 80085f6:	4859      	ldr	r0, [pc, #356]	; (800875c <_vfiprintf_r+0x24c>)
 80085f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085fc:	f000 fa82 	bl	8008b04 <memchr>
 8008600:	9a04      	ldr	r2, [sp, #16]
 8008602:	b9d8      	cbnz	r0, 800863c <_vfiprintf_r+0x12c>
 8008604:	06d1      	lsls	r1, r2, #27
 8008606:	bf44      	itt	mi
 8008608:	2320      	movmi	r3, #32
 800860a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800860e:	0713      	lsls	r3, r2, #28
 8008610:	bf44      	itt	mi
 8008612:	232b      	movmi	r3, #43	; 0x2b
 8008614:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008618:	f89a 3000 	ldrb.w	r3, [sl]
 800861c:	2b2a      	cmp	r3, #42	; 0x2a
 800861e:	d015      	beq.n	800864c <_vfiprintf_r+0x13c>
 8008620:	9a07      	ldr	r2, [sp, #28]
 8008622:	4654      	mov	r4, sl
 8008624:	2000      	movs	r0, #0
 8008626:	f04f 0c0a 	mov.w	ip, #10
 800862a:	4621      	mov	r1, r4
 800862c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008630:	3b30      	subs	r3, #48	; 0x30
 8008632:	2b09      	cmp	r3, #9
 8008634:	d94e      	bls.n	80086d4 <_vfiprintf_r+0x1c4>
 8008636:	b1b0      	cbz	r0, 8008666 <_vfiprintf_r+0x156>
 8008638:	9207      	str	r2, [sp, #28]
 800863a:	e014      	b.n	8008666 <_vfiprintf_r+0x156>
 800863c:	eba0 0308 	sub.w	r3, r0, r8
 8008640:	46a2      	mov	sl, r4
 8008642:	fa09 f303 	lsl.w	r3, r9, r3
 8008646:	4313      	orrs	r3, r2
 8008648:	9304      	str	r3, [sp, #16]
 800864a:	e7d2      	b.n	80085f2 <_vfiprintf_r+0xe2>
 800864c:	9b03      	ldr	r3, [sp, #12]
 800864e:	1d19      	adds	r1, r3, #4
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	9103      	str	r1, [sp, #12]
 8008656:	bfbb      	ittet	lt
 8008658:	425b      	neglt	r3, r3
 800865a:	f042 0202 	orrlt.w	r2, r2, #2
 800865e:	9307      	strge	r3, [sp, #28]
 8008660:	9307      	strlt	r3, [sp, #28]
 8008662:	bfb8      	it	lt
 8008664:	9204      	strlt	r2, [sp, #16]
 8008666:	7823      	ldrb	r3, [r4, #0]
 8008668:	2b2e      	cmp	r3, #46	; 0x2e
 800866a:	d10c      	bne.n	8008686 <_vfiprintf_r+0x176>
 800866c:	7863      	ldrb	r3, [r4, #1]
 800866e:	2b2a      	cmp	r3, #42	; 0x2a
 8008670:	d135      	bne.n	80086de <_vfiprintf_r+0x1ce>
 8008672:	9b03      	ldr	r3, [sp, #12]
 8008674:	3402      	adds	r4, #2
 8008676:	1d1a      	adds	r2, r3, #4
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	9203      	str	r2, [sp, #12]
 800867e:	bfb8      	it	lt
 8008680:	f04f 33ff 	movlt.w	r3, #4294967295
 8008684:	9305      	str	r3, [sp, #20]
 8008686:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800876c <_vfiprintf_r+0x25c>
 800868a:	2203      	movs	r2, #3
 800868c:	7821      	ldrb	r1, [r4, #0]
 800868e:	4650      	mov	r0, sl
 8008690:	f000 fa38 	bl	8008b04 <memchr>
 8008694:	b140      	cbz	r0, 80086a8 <_vfiprintf_r+0x198>
 8008696:	2340      	movs	r3, #64	; 0x40
 8008698:	eba0 000a 	sub.w	r0, r0, sl
 800869c:	3401      	adds	r4, #1
 800869e:	fa03 f000 	lsl.w	r0, r3, r0
 80086a2:	9b04      	ldr	r3, [sp, #16]
 80086a4:	4303      	orrs	r3, r0
 80086a6:	9304      	str	r3, [sp, #16]
 80086a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086ac:	2206      	movs	r2, #6
 80086ae:	482c      	ldr	r0, [pc, #176]	; (8008760 <_vfiprintf_r+0x250>)
 80086b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086b4:	f000 fa26 	bl	8008b04 <memchr>
 80086b8:	2800      	cmp	r0, #0
 80086ba:	d03f      	beq.n	800873c <_vfiprintf_r+0x22c>
 80086bc:	4b29      	ldr	r3, [pc, #164]	; (8008764 <_vfiprintf_r+0x254>)
 80086be:	bb1b      	cbnz	r3, 8008708 <_vfiprintf_r+0x1f8>
 80086c0:	9b03      	ldr	r3, [sp, #12]
 80086c2:	3307      	adds	r3, #7
 80086c4:	f023 0307 	bic.w	r3, r3, #7
 80086c8:	3308      	adds	r3, #8
 80086ca:	9303      	str	r3, [sp, #12]
 80086cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086ce:	443b      	add	r3, r7
 80086d0:	9309      	str	r3, [sp, #36]	; 0x24
 80086d2:	e767      	b.n	80085a4 <_vfiprintf_r+0x94>
 80086d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80086d8:	460c      	mov	r4, r1
 80086da:	2001      	movs	r0, #1
 80086dc:	e7a5      	b.n	800862a <_vfiprintf_r+0x11a>
 80086de:	2300      	movs	r3, #0
 80086e0:	3401      	adds	r4, #1
 80086e2:	f04f 0c0a 	mov.w	ip, #10
 80086e6:	4619      	mov	r1, r3
 80086e8:	9305      	str	r3, [sp, #20]
 80086ea:	4620      	mov	r0, r4
 80086ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086f0:	3a30      	subs	r2, #48	; 0x30
 80086f2:	2a09      	cmp	r2, #9
 80086f4:	d903      	bls.n	80086fe <_vfiprintf_r+0x1ee>
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d0c5      	beq.n	8008686 <_vfiprintf_r+0x176>
 80086fa:	9105      	str	r1, [sp, #20]
 80086fc:	e7c3      	b.n	8008686 <_vfiprintf_r+0x176>
 80086fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8008702:	4604      	mov	r4, r0
 8008704:	2301      	movs	r3, #1
 8008706:	e7f0      	b.n	80086ea <_vfiprintf_r+0x1da>
 8008708:	ab03      	add	r3, sp, #12
 800870a:	462a      	mov	r2, r5
 800870c:	a904      	add	r1, sp, #16
 800870e:	4630      	mov	r0, r6
 8008710:	9300      	str	r3, [sp, #0]
 8008712:	4b15      	ldr	r3, [pc, #84]	; (8008768 <_vfiprintf_r+0x258>)
 8008714:	e000      	b.n	8008718 <_vfiprintf_r+0x208>
 8008716:	bf00      	nop
 8008718:	4607      	mov	r7, r0
 800871a:	1c78      	adds	r0, r7, #1
 800871c:	d1d6      	bne.n	80086cc <_vfiprintf_r+0x1bc>
 800871e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008720:	07d9      	lsls	r1, r3, #31
 8008722:	d405      	bmi.n	8008730 <_vfiprintf_r+0x220>
 8008724:	89ab      	ldrh	r3, [r5, #12]
 8008726:	059a      	lsls	r2, r3, #22
 8008728:	d402      	bmi.n	8008730 <_vfiprintf_r+0x220>
 800872a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800872c:	f7ff fe41 	bl	80083b2 <__retarget_lock_release_recursive>
 8008730:	89ab      	ldrh	r3, [r5, #12]
 8008732:	065b      	lsls	r3, r3, #25
 8008734:	f53f af12 	bmi.w	800855c <_vfiprintf_r+0x4c>
 8008738:	9809      	ldr	r0, [sp, #36]	; 0x24
 800873a:	e711      	b.n	8008560 <_vfiprintf_r+0x50>
 800873c:	ab03      	add	r3, sp, #12
 800873e:	462a      	mov	r2, r5
 8008740:	a904      	add	r1, sp, #16
 8008742:	4630      	mov	r0, r6
 8008744:	9300      	str	r3, [sp, #0]
 8008746:	4b08      	ldr	r3, [pc, #32]	; (8008768 <_vfiprintf_r+0x258>)
 8008748:	f000 f882 	bl	8008850 <_printf_i>
 800874c:	e7e4      	b.n	8008718 <_vfiprintf_r+0x208>
 800874e:	bf00      	nop
 8008750:	08008dbc 	.word	0x08008dbc
 8008754:	08008ddc 	.word	0x08008ddc
 8008758:	08008d9c 	.word	0x08008d9c
 800875c:	08008dfc 	.word	0x08008dfc
 8008760:	08008e06 	.word	0x08008e06
 8008764:	00000000 	.word	0x00000000
 8008768:	080084eb 	.word	0x080084eb
 800876c:	08008e02 	.word	0x08008e02

08008770 <_printf_common>:
 8008770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008774:	4616      	mov	r6, r2
 8008776:	4699      	mov	r9, r3
 8008778:	688a      	ldr	r2, [r1, #8]
 800877a:	4607      	mov	r7, r0
 800877c:	690b      	ldr	r3, [r1, #16]
 800877e:	460c      	mov	r4, r1
 8008780:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008784:	4293      	cmp	r3, r2
 8008786:	bfb8      	it	lt
 8008788:	4613      	movlt	r3, r2
 800878a:	6033      	str	r3, [r6, #0]
 800878c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008790:	b10a      	cbz	r2, 8008796 <_printf_common+0x26>
 8008792:	3301      	adds	r3, #1
 8008794:	6033      	str	r3, [r6, #0]
 8008796:	6823      	ldr	r3, [r4, #0]
 8008798:	0699      	lsls	r1, r3, #26
 800879a:	bf42      	ittt	mi
 800879c:	6833      	ldrmi	r3, [r6, #0]
 800879e:	3302      	addmi	r3, #2
 80087a0:	6033      	strmi	r3, [r6, #0]
 80087a2:	6825      	ldr	r5, [r4, #0]
 80087a4:	f015 0506 	ands.w	r5, r5, #6
 80087a8:	d106      	bne.n	80087b8 <_printf_common+0x48>
 80087aa:	f104 0a19 	add.w	sl, r4, #25
 80087ae:	68e3      	ldr	r3, [r4, #12]
 80087b0:	6832      	ldr	r2, [r6, #0]
 80087b2:	1a9b      	subs	r3, r3, r2
 80087b4:	42ab      	cmp	r3, r5
 80087b6:	dc29      	bgt.n	800880c <_printf_common+0x9c>
 80087b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80087bc:	1e13      	subs	r3, r2, #0
 80087be:	6822      	ldr	r2, [r4, #0]
 80087c0:	bf18      	it	ne
 80087c2:	2301      	movne	r3, #1
 80087c4:	0692      	lsls	r2, r2, #26
 80087c6:	d42e      	bmi.n	8008826 <_printf_common+0xb6>
 80087c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087cc:	4649      	mov	r1, r9
 80087ce:	4638      	mov	r0, r7
 80087d0:	47c0      	blx	r8
 80087d2:	3001      	adds	r0, #1
 80087d4:	d021      	beq.n	800881a <_printf_common+0xaa>
 80087d6:	6823      	ldr	r3, [r4, #0]
 80087d8:	341a      	adds	r4, #26
 80087da:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 80087de:	f003 0306 	and.w	r3, r3, #6
 80087e2:	6832      	ldr	r2, [r6, #0]
 80087e4:	2600      	movs	r6, #0
 80087e6:	2b04      	cmp	r3, #4
 80087e8:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80087ec:	bf08      	it	eq
 80087ee:	1aad      	subeq	r5, r5, r2
 80087f0:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80087f4:	bf14      	ite	ne
 80087f6:	2500      	movne	r5, #0
 80087f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087fc:	4293      	cmp	r3, r2
 80087fe:	bfc4      	itt	gt
 8008800:	1a9b      	subgt	r3, r3, r2
 8008802:	18ed      	addgt	r5, r5, r3
 8008804:	42b5      	cmp	r5, r6
 8008806:	d11a      	bne.n	800883e <_printf_common+0xce>
 8008808:	2000      	movs	r0, #0
 800880a:	e008      	b.n	800881e <_printf_common+0xae>
 800880c:	2301      	movs	r3, #1
 800880e:	4652      	mov	r2, sl
 8008810:	4649      	mov	r1, r9
 8008812:	4638      	mov	r0, r7
 8008814:	47c0      	blx	r8
 8008816:	3001      	adds	r0, #1
 8008818:	d103      	bne.n	8008822 <_printf_common+0xb2>
 800881a:	f04f 30ff 	mov.w	r0, #4294967295
 800881e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008822:	3501      	adds	r5, #1
 8008824:	e7c3      	b.n	80087ae <_printf_common+0x3e>
 8008826:	18e1      	adds	r1, r4, r3
 8008828:	1c5a      	adds	r2, r3, #1
 800882a:	2030      	movs	r0, #48	; 0x30
 800882c:	3302      	adds	r3, #2
 800882e:	4422      	add	r2, r4
 8008830:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008834:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008838:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800883c:	e7c4      	b.n	80087c8 <_printf_common+0x58>
 800883e:	2301      	movs	r3, #1
 8008840:	4622      	mov	r2, r4
 8008842:	4649      	mov	r1, r9
 8008844:	4638      	mov	r0, r7
 8008846:	47c0      	blx	r8
 8008848:	3001      	adds	r0, #1
 800884a:	d0e6      	beq.n	800881a <_printf_common+0xaa>
 800884c:	3601      	adds	r6, #1
 800884e:	e7d9      	b.n	8008804 <_printf_common+0x94>

08008850 <_printf_i>:
 8008850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008854:	7e0f      	ldrb	r7, [r1, #24]
 8008856:	4691      	mov	r9, r2
 8008858:	4680      	mov	r8, r0
 800885a:	460c      	mov	r4, r1
 800885c:	2f78      	cmp	r7, #120	; 0x78
 800885e:	469a      	mov	sl, r3
 8008860:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008862:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008866:	d807      	bhi.n	8008878 <_printf_i+0x28>
 8008868:	2f62      	cmp	r7, #98	; 0x62
 800886a:	d80a      	bhi.n	8008882 <_printf_i+0x32>
 800886c:	2f00      	cmp	r7, #0
 800886e:	f000 80d8 	beq.w	8008a22 <_printf_i+0x1d2>
 8008872:	2f58      	cmp	r7, #88	; 0x58
 8008874:	f000 80a3 	beq.w	80089be <_printf_i+0x16e>
 8008878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800887c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008880:	e03a      	b.n	80088f8 <_printf_i+0xa8>
 8008882:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008886:	2b15      	cmp	r3, #21
 8008888:	d8f6      	bhi.n	8008878 <_printf_i+0x28>
 800888a:	a101      	add	r1, pc, #4	; (adr r1, 8008890 <_printf_i+0x40>)
 800888c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008890:	080088e9 	.word	0x080088e9
 8008894:	080088fd 	.word	0x080088fd
 8008898:	08008879 	.word	0x08008879
 800889c:	08008879 	.word	0x08008879
 80088a0:	08008879 	.word	0x08008879
 80088a4:	08008879 	.word	0x08008879
 80088a8:	080088fd 	.word	0x080088fd
 80088ac:	08008879 	.word	0x08008879
 80088b0:	08008879 	.word	0x08008879
 80088b4:	08008879 	.word	0x08008879
 80088b8:	08008879 	.word	0x08008879
 80088bc:	08008a09 	.word	0x08008a09
 80088c0:	0800892d 	.word	0x0800892d
 80088c4:	080089eb 	.word	0x080089eb
 80088c8:	08008879 	.word	0x08008879
 80088cc:	08008879 	.word	0x08008879
 80088d0:	08008a2b 	.word	0x08008a2b
 80088d4:	08008879 	.word	0x08008879
 80088d8:	0800892d 	.word	0x0800892d
 80088dc:	08008879 	.word	0x08008879
 80088e0:	08008879 	.word	0x08008879
 80088e4:	080089f3 	.word	0x080089f3
 80088e8:	682b      	ldr	r3, [r5, #0]
 80088ea:	1d1a      	adds	r2, r3, #4
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	602a      	str	r2, [r5, #0]
 80088f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088f8:	2301      	movs	r3, #1
 80088fa:	e0a3      	b.n	8008a44 <_printf_i+0x1f4>
 80088fc:	6820      	ldr	r0, [r4, #0]
 80088fe:	6829      	ldr	r1, [r5, #0]
 8008900:	0606      	lsls	r6, r0, #24
 8008902:	f101 0304 	add.w	r3, r1, #4
 8008906:	d50a      	bpl.n	800891e <_printf_i+0xce>
 8008908:	680e      	ldr	r6, [r1, #0]
 800890a:	602b      	str	r3, [r5, #0]
 800890c:	2e00      	cmp	r6, #0
 800890e:	da03      	bge.n	8008918 <_printf_i+0xc8>
 8008910:	232d      	movs	r3, #45	; 0x2d
 8008912:	4276      	negs	r6, r6
 8008914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008918:	485e      	ldr	r0, [pc, #376]	; (8008a94 <_printf_i+0x244>)
 800891a:	230a      	movs	r3, #10
 800891c:	e019      	b.n	8008952 <_printf_i+0x102>
 800891e:	680e      	ldr	r6, [r1, #0]
 8008920:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008924:	602b      	str	r3, [r5, #0]
 8008926:	bf18      	it	ne
 8008928:	b236      	sxthne	r6, r6
 800892a:	e7ef      	b.n	800890c <_printf_i+0xbc>
 800892c:	682b      	ldr	r3, [r5, #0]
 800892e:	6820      	ldr	r0, [r4, #0]
 8008930:	1d19      	adds	r1, r3, #4
 8008932:	6029      	str	r1, [r5, #0]
 8008934:	0601      	lsls	r1, r0, #24
 8008936:	d501      	bpl.n	800893c <_printf_i+0xec>
 8008938:	681e      	ldr	r6, [r3, #0]
 800893a:	e002      	b.n	8008942 <_printf_i+0xf2>
 800893c:	0646      	lsls	r6, r0, #25
 800893e:	d5fb      	bpl.n	8008938 <_printf_i+0xe8>
 8008940:	881e      	ldrh	r6, [r3, #0]
 8008942:	2f6f      	cmp	r7, #111	; 0x6f
 8008944:	4853      	ldr	r0, [pc, #332]	; (8008a94 <_printf_i+0x244>)
 8008946:	bf0c      	ite	eq
 8008948:	2308      	moveq	r3, #8
 800894a:	230a      	movne	r3, #10
 800894c:	2100      	movs	r1, #0
 800894e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008952:	6865      	ldr	r5, [r4, #4]
 8008954:	2d00      	cmp	r5, #0
 8008956:	60a5      	str	r5, [r4, #8]
 8008958:	bfa2      	ittt	ge
 800895a:	6821      	ldrge	r1, [r4, #0]
 800895c:	f021 0104 	bicge.w	r1, r1, #4
 8008960:	6021      	strge	r1, [r4, #0]
 8008962:	b90e      	cbnz	r6, 8008968 <_printf_i+0x118>
 8008964:	2d00      	cmp	r5, #0
 8008966:	d04d      	beq.n	8008a04 <_printf_i+0x1b4>
 8008968:	4615      	mov	r5, r2
 800896a:	fbb6 f1f3 	udiv	r1, r6, r3
 800896e:	fb03 6711 	mls	r7, r3, r1, r6
 8008972:	5dc7      	ldrb	r7, [r0, r7]
 8008974:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008978:	4637      	mov	r7, r6
 800897a:	460e      	mov	r6, r1
 800897c:	42bb      	cmp	r3, r7
 800897e:	d9f4      	bls.n	800896a <_printf_i+0x11a>
 8008980:	2b08      	cmp	r3, #8
 8008982:	d10b      	bne.n	800899c <_printf_i+0x14c>
 8008984:	6823      	ldr	r3, [r4, #0]
 8008986:	07de      	lsls	r6, r3, #31
 8008988:	d508      	bpl.n	800899c <_printf_i+0x14c>
 800898a:	6923      	ldr	r3, [r4, #16]
 800898c:	6861      	ldr	r1, [r4, #4]
 800898e:	4299      	cmp	r1, r3
 8008990:	bfde      	ittt	le
 8008992:	2330      	movle	r3, #48	; 0x30
 8008994:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008998:	f105 35ff 	addle.w	r5, r5, #4294967295
 800899c:	1b52      	subs	r2, r2, r5
 800899e:	6122      	str	r2, [r4, #16]
 80089a0:	464b      	mov	r3, r9
 80089a2:	aa03      	add	r2, sp, #12
 80089a4:	4621      	mov	r1, r4
 80089a6:	4640      	mov	r0, r8
 80089a8:	f8cd a000 	str.w	sl, [sp]
 80089ac:	f7ff fee0 	bl	8008770 <_printf_common>
 80089b0:	3001      	adds	r0, #1
 80089b2:	d14c      	bne.n	8008a4e <_printf_i+0x1fe>
 80089b4:	f04f 30ff 	mov.w	r0, #4294967295
 80089b8:	b004      	add	sp, #16
 80089ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089be:	4835      	ldr	r0, [pc, #212]	; (8008a94 <_printf_i+0x244>)
 80089c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80089c4:	6829      	ldr	r1, [r5, #0]
 80089c6:	6823      	ldr	r3, [r4, #0]
 80089c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80089cc:	6029      	str	r1, [r5, #0]
 80089ce:	061d      	lsls	r5, r3, #24
 80089d0:	d514      	bpl.n	80089fc <_printf_i+0x1ac>
 80089d2:	07df      	lsls	r7, r3, #31
 80089d4:	bf44      	itt	mi
 80089d6:	f043 0320 	orrmi.w	r3, r3, #32
 80089da:	6023      	strmi	r3, [r4, #0]
 80089dc:	b91e      	cbnz	r6, 80089e6 <_printf_i+0x196>
 80089de:	6823      	ldr	r3, [r4, #0]
 80089e0:	f023 0320 	bic.w	r3, r3, #32
 80089e4:	6023      	str	r3, [r4, #0]
 80089e6:	2310      	movs	r3, #16
 80089e8:	e7b0      	b.n	800894c <_printf_i+0xfc>
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	f043 0320 	orr.w	r3, r3, #32
 80089f0:	6023      	str	r3, [r4, #0]
 80089f2:	2378      	movs	r3, #120	; 0x78
 80089f4:	4828      	ldr	r0, [pc, #160]	; (8008a98 <_printf_i+0x248>)
 80089f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80089fa:	e7e3      	b.n	80089c4 <_printf_i+0x174>
 80089fc:	0659      	lsls	r1, r3, #25
 80089fe:	bf48      	it	mi
 8008a00:	b2b6      	uxthmi	r6, r6
 8008a02:	e7e6      	b.n	80089d2 <_printf_i+0x182>
 8008a04:	4615      	mov	r5, r2
 8008a06:	e7bb      	b.n	8008980 <_printf_i+0x130>
 8008a08:	682b      	ldr	r3, [r5, #0]
 8008a0a:	6826      	ldr	r6, [r4, #0]
 8008a0c:	1d18      	adds	r0, r3, #4
 8008a0e:	6961      	ldr	r1, [r4, #20]
 8008a10:	6028      	str	r0, [r5, #0]
 8008a12:	0635      	lsls	r5, r6, #24
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	d501      	bpl.n	8008a1c <_printf_i+0x1cc>
 8008a18:	6019      	str	r1, [r3, #0]
 8008a1a:	e002      	b.n	8008a22 <_printf_i+0x1d2>
 8008a1c:	0670      	lsls	r0, r6, #25
 8008a1e:	d5fb      	bpl.n	8008a18 <_printf_i+0x1c8>
 8008a20:	8019      	strh	r1, [r3, #0]
 8008a22:	2300      	movs	r3, #0
 8008a24:	4615      	mov	r5, r2
 8008a26:	6123      	str	r3, [r4, #16]
 8008a28:	e7ba      	b.n	80089a0 <_printf_i+0x150>
 8008a2a:	682b      	ldr	r3, [r5, #0]
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	1d1a      	adds	r2, r3, #4
 8008a30:	602a      	str	r2, [r5, #0]
 8008a32:	681d      	ldr	r5, [r3, #0]
 8008a34:	6862      	ldr	r2, [r4, #4]
 8008a36:	4628      	mov	r0, r5
 8008a38:	f000 f864 	bl	8008b04 <memchr>
 8008a3c:	b108      	cbz	r0, 8008a42 <_printf_i+0x1f2>
 8008a3e:	1b40      	subs	r0, r0, r5
 8008a40:	6060      	str	r0, [r4, #4]
 8008a42:	6863      	ldr	r3, [r4, #4]
 8008a44:	6123      	str	r3, [r4, #16]
 8008a46:	2300      	movs	r3, #0
 8008a48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a4c:	e7a8      	b.n	80089a0 <_printf_i+0x150>
 8008a4e:	6923      	ldr	r3, [r4, #16]
 8008a50:	462a      	mov	r2, r5
 8008a52:	4649      	mov	r1, r9
 8008a54:	4640      	mov	r0, r8
 8008a56:	47d0      	blx	sl
 8008a58:	3001      	adds	r0, #1
 8008a5a:	d0ab      	beq.n	80089b4 <_printf_i+0x164>
 8008a5c:	6823      	ldr	r3, [r4, #0]
 8008a5e:	079b      	lsls	r3, r3, #30
 8008a60:	d413      	bmi.n	8008a8a <_printf_i+0x23a>
 8008a62:	68e0      	ldr	r0, [r4, #12]
 8008a64:	9b03      	ldr	r3, [sp, #12]
 8008a66:	4298      	cmp	r0, r3
 8008a68:	bfb8      	it	lt
 8008a6a:	4618      	movlt	r0, r3
 8008a6c:	e7a4      	b.n	80089b8 <_printf_i+0x168>
 8008a6e:	2301      	movs	r3, #1
 8008a70:	4632      	mov	r2, r6
 8008a72:	4649      	mov	r1, r9
 8008a74:	4640      	mov	r0, r8
 8008a76:	47d0      	blx	sl
 8008a78:	3001      	adds	r0, #1
 8008a7a:	d09b      	beq.n	80089b4 <_printf_i+0x164>
 8008a7c:	3501      	adds	r5, #1
 8008a7e:	68e3      	ldr	r3, [r4, #12]
 8008a80:	9903      	ldr	r1, [sp, #12]
 8008a82:	1a5b      	subs	r3, r3, r1
 8008a84:	42ab      	cmp	r3, r5
 8008a86:	dcf2      	bgt.n	8008a6e <_printf_i+0x21e>
 8008a88:	e7eb      	b.n	8008a62 <_printf_i+0x212>
 8008a8a:	2500      	movs	r5, #0
 8008a8c:	f104 0619 	add.w	r6, r4, #25
 8008a90:	e7f5      	b.n	8008a7e <_printf_i+0x22e>
 8008a92:	bf00      	nop
 8008a94:	08008e0d 	.word	0x08008e0d
 8008a98:	08008e1e 	.word	0x08008e1e

08008a9c <_read_r>:
 8008a9c:	b538      	push	{r3, r4, r5, lr}
 8008a9e:	4604      	mov	r4, r0
 8008aa0:	4d06      	ldr	r5, [pc, #24]	; (8008abc <_read_r+0x20>)
 8008aa2:	4608      	mov	r0, r1
 8008aa4:	4611      	mov	r1, r2
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	602a      	str	r2, [r5, #0]
 8008aaa:	461a      	mov	r2, r3
 8008aac:	f7f8 f9ee 	bl	8000e8c <_read>
 8008ab0:	1c43      	adds	r3, r0, #1
 8008ab2:	d102      	bne.n	8008aba <_read_r+0x1e>
 8008ab4:	682b      	ldr	r3, [r5, #0]
 8008ab6:	b103      	cbz	r3, 8008aba <_read_r+0x1e>
 8008ab8:	6023      	str	r3, [r4, #0]
 8008aba:	bd38      	pop	{r3, r4, r5, pc}
 8008abc:	20000fb0 	.word	0x20000fb0

08008ac0 <_fstat_r>:
 8008ac0:	b538      	push	{r3, r4, r5, lr}
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	4d06      	ldr	r5, [pc, #24]	; (8008ae0 <_fstat_r+0x20>)
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	4608      	mov	r0, r1
 8008aca:	4611      	mov	r1, r2
 8008acc:	602b      	str	r3, [r5, #0]
 8008ace:	f7f8 f9ef 	bl	8000eb0 <_fstat>
 8008ad2:	1c43      	adds	r3, r0, #1
 8008ad4:	d102      	bne.n	8008adc <_fstat_r+0x1c>
 8008ad6:	682b      	ldr	r3, [r5, #0]
 8008ad8:	b103      	cbz	r3, 8008adc <_fstat_r+0x1c>
 8008ada:	6023      	str	r3, [r4, #0]
 8008adc:	bd38      	pop	{r3, r4, r5, pc}
 8008ade:	bf00      	nop
 8008ae0:	20000fb0 	.word	0x20000fb0

08008ae4 <_isatty_r>:
 8008ae4:	b538      	push	{r3, r4, r5, lr}
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	4d05      	ldr	r5, [pc, #20]	; (8008b00 <_isatty_r+0x1c>)
 8008aea:	4604      	mov	r4, r0
 8008aec:	4608      	mov	r0, r1
 8008aee:	602b      	str	r3, [r5, #0]
 8008af0:	f7f8 f9e4 	bl	8000ebc <_isatty>
 8008af4:	1c43      	adds	r3, r0, #1
 8008af6:	d102      	bne.n	8008afe <_isatty_r+0x1a>
 8008af8:	682b      	ldr	r3, [r5, #0]
 8008afa:	b103      	cbz	r3, 8008afe <_isatty_r+0x1a>
 8008afc:	6023      	str	r3, [r4, #0]
 8008afe:	bd38      	pop	{r3, r4, r5, pc}
 8008b00:	20000fb0 	.word	0x20000fb0

08008b04 <memchr>:
 8008b04:	b2c9      	uxtb	r1, r1
 8008b06:	4402      	add	r2, r0
 8008b08:	b510      	push	{r4, lr}
 8008b0a:	4290      	cmp	r0, r2
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	d101      	bne.n	8008b14 <memchr+0x10>
 8008b10:	2300      	movs	r3, #0
 8008b12:	e003      	b.n	8008b1c <memchr+0x18>
 8008b14:	781c      	ldrb	r4, [r3, #0]
 8008b16:	3001      	adds	r0, #1
 8008b18:	428c      	cmp	r4, r1
 8008b1a:	d1f6      	bne.n	8008b0a <memchr+0x6>
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	bd10      	pop	{r4, pc}

08008b20 <_init>:
 8008b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b22:	bf00      	nop
 8008b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b26:	bc08      	pop	{r3}
 8008b28:	469e      	mov	lr, r3
 8008b2a:	4770      	bx	lr

08008b2c <_fini>:
 8008b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b2e:	bf00      	nop
 8008b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b32:	bc08      	pop	{r3}
 8008b34:	469e      	mov	lr, r3
 8008b36:	4770      	bx	lr
