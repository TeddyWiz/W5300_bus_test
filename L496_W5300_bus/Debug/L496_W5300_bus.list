
L496_W5300_bus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000738c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  0800753c  0800753c  0001753c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007834  08007834  000200c4  2**0
                  CONTENTS
  4 .ARM          00000008  08007834  08007834  00017834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800783c  0800783c  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800783c  0800783c  0001783c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007840  08007840  00017840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08007844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000093c  200000c4  08007908  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a00  08007908  00020a00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ec7  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bec  00000000  00000000  00030fbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  00033ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d58  00000000  00000000  00034a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aa82  00000000  00000000  00035768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000121f7  00000000  00000000  000601ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001003b7  00000000  00000000  000723e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00172798  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041d4  00000000  00000000  001727e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000c4 	.word	0x200000c4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007524 	.word	0x08007524

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000c8 	.word	0x200000c8
 80001ec:	08007524 	.word	0x08007524

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <_write>:
static void MX_FMC_Init(void);
/* USER CODE BEGIN PFP */
uint8_t rxData[2];

int _write(int fd, char *str, int len)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++)
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]
 80005a4:	e00b      	b.n	80005be <_write+0x2a>
	{
		HAL_UART_Transmit(&hlpuart1, (uint8_t *)&str[i], 1, 0xFFFF);
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	68ba      	ldr	r2, [r7, #8]
 80005aa:	18d1      	adds	r1, r2, r3
 80005ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005b0:	2201      	movs	r2, #1
 80005b2:	4807      	ldr	r0, [pc, #28]	; (80005d0 <_write+0x3c>)
 80005b4:	f002 fcd4 	bl	8002f60 <HAL_UART_Transmit>
	for(int i=0; i<len; i++)
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	3301      	adds	r3, #1
 80005bc:	617b      	str	r3, [r7, #20]
 80005be:	697a      	ldr	r2, [r7, #20]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	dbef      	blt.n	80005a6 <_write+0x12>
	}
	return len;
 80005c6:	687b      	ldr	r3, [r7, #4]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3718      	adds	r7, #24
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200000e0 	.word	0x200000e0

080005d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
    */

     /*
       loop back received data
     */
     HAL_UART_Receive_IT(&hlpuart1, rxData, 1);
 80005dc:	2201      	movs	r2, #1
 80005de:	4907      	ldr	r1, [pc, #28]	; (80005fc <HAL_UART_RxCpltCallback+0x28>)
 80005e0:	4807      	ldr	r0, [pc, #28]	; (8000600 <HAL_UART_RxCpltCallback+0x2c>)
 80005e2:	f002 fd51 	bl	8003088 <HAL_UART_Receive_IT>
     HAL_UART_Transmit(&hlpuart1, rxData, 1, 1000);
 80005e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ea:	2201      	movs	r2, #1
 80005ec:	4903      	ldr	r1, [pc, #12]	; (80005fc <HAL_UART_RxCpltCallback+0x28>)
 80005ee:	4804      	ldr	r0, [pc, #16]	; (8000600 <HAL_UART_RxCpltCallback+0x2c>)
 80005f0:	f002 fcb6 	bl	8002f60 <HAL_UART_Transmit>
}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	200009b4 	.word	0x200009b4
 8000600:	200000e0 	.word	0x200000e0

08000604 <Reset_W5300>:
void Reset_W5300()
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_W5300_GPIO_Port, RESET_W5300_Pin, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2180      	movs	r1, #128	; 0x80
 800060c:	4807      	ldr	r0, [pc, #28]	; (800062c <Reset_W5300+0x28>)
 800060e:	f001 f87d 	bl	800170c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000612:	200a      	movs	r0, #10
 8000614:	f000 fd34 	bl	8001080 <HAL_Delay>
	HAL_GPIO_WritePin(RESET_W5300_GPIO_Port, RESET_W5300_Pin, GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2180      	movs	r1, #128	; 0x80
 800061c:	4803      	ldr	r0, [pc, #12]	; (800062c <Reset_W5300+0x28>)
 800061e:	f001 f875 	bl	800170c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000622:	2064      	movs	r0, #100	; 0x64
 8000624:	f000 fd2c 	bl	8001080 <HAL_Delay>
}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	48001400 	.word	0x48001400

08000630 <W5300_write>:

void W5300_write(uint32_t addr, iodata_t wd)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	460b      	mov	r3, r1
 800063a:	807b      	strh	r3, [r7, #2]
	_W5300_DATA(addr) = wd;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 8000644:	461a      	mov	r2, r3
 8000646:	887b      	ldrh	r3, [r7, #2]
 8000648:	8013      	strh	r3, [r2, #0]
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr

08000656 <W5300_read>:

iodata_t W5300_read(uint32_t addr)
{
 8000656:	b480      	push	{r7}
 8000658:	b083      	sub	sp, #12
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
	return _W5300_DATA(addr);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 8000666:	881b      	ldrh	r3, [r3, #0]
 8000668:	b29b      	uxth	r3, r3
}
 800066a:	4618      	mov	r0, r3
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <W5300CsEnable>:
void W5300CsEnable(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0

}
 800067a:	bf00      	nop
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <W5300CsDisable>:
void W5300CsDisable(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0

}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <print_network_information>:
void print_network_information(void)
{
 8000694:	b5b0      	push	{r4, r5, r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af04      	add	r7, sp, #16
    wizchip_getnetinfo(&gWIZNETINFO);
 800069a:	4830      	ldr	r0, [pc, #192]	; (800075c <print_network_information+0xc8>)
 800069c:	f005 fe04 	bl	80062a8 <wizchip_getnetinfo>
    printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 80006a0:	4b2e      	ldr	r3, [pc, #184]	; (800075c <print_network_information+0xc8>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	4618      	mov	r0, r3
 80006a6:	4b2d      	ldr	r3, [pc, #180]	; (800075c <print_network_information+0xc8>)
 80006a8:	785b      	ldrb	r3, [r3, #1]
 80006aa:	461c      	mov	r4, r3
 80006ac:	4b2b      	ldr	r3, [pc, #172]	; (800075c <print_network_information+0xc8>)
 80006ae:	789b      	ldrb	r3, [r3, #2]
 80006b0:	461d      	mov	r5, r3
 80006b2:	4b2a      	ldr	r3, [pc, #168]	; (800075c <print_network_information+0xc8>)
 80006b4:	78db      	ldrb	r3, [r3, #3]
 80006b6:	461a      	mov	r2, r3
 80006b8:	4b28      	ldr	r3, [pc, #160]	; (800075c <print_network_information+0xc8>)
 80006ba:	791b      	ldrb	r3, [r3, #4]
 80006bc:	4619      	mov	r1, r3
 80006be:	4b27      	ldr	r3, [pc, #156]	; (800075c <print_network_information+0xc8>)
 80006c0:	795b      	ldrb	r3, [r3, #5]
 80006c2:	9302      	str	r3, [sp, #8]
 80006c4:	9101      	str	r1, [sp, #4]
 80006c6:	9200      	str	r2, [sp, #0]
 80006c8:	462b      	mov	r3, r5
 80006ca:	4622      	mov	r2, r4
 80006cc:	4601      	mov	r1, r0
 80006ce:	4824      	ldr	r0, [pc, #144]	; (8000760 <print_network_information+0xcc>)
 80006d0:	f006 f804 	bl	80066dc <iprintf>
    printf("IP address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 80006d4:	4b21      	ldr	r3, [pc, #132]	; (800075c <print_network_information+0xc8>)
 80006d6:	799b      	ldrb	r3, [r3, #6]
 80006d8:	4619      	mov	r1, r3
 80006da:	4b20      	ldr	r3, [pc, #128]	; (800075c <print_network_information+0xc8>)
 80006dc:	79db      	ldrb	r3, [r3, #7]
 80006de:	461a      	mov	r2, r3
 80006e0:	4b1e      	ldr	r3, [pc, #120]	; (800075c <print_network_information+0xc8>)
 80006e2:	7a1b      	ldrb	r3, [r3, #8]
 80006e4:	4618      	mov	r0, r3
 80006e6:	4b1d      	ldr	r3, [pc, #116]	; (800075c <print_network_information+0xc8>)
 80006e8:	7a5b      	ldrb	r3, [r3, #9]
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	4603      	mov	r3, r0
 80006ee:	481d      	ldr	r0, [pc, #116]	; (8000764 <print_network_information+0xd0>)
 80006f0:	f005 fff4 	bl	80066dc <iprintf>
    printf("SM Mask    : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 80006f4:	4b19      	ldr	r3, [pc, #100]	; (800075c <print_network_information+0xc8>)
 80006f6:	7a9b      	ldrb	r3, [r3, #10]
 80006f8:	4619      	mov	r1, r3
 80006fa:	4b18      	ldr	r3, [pc, #96]	; (800075c <print_network_information+0xc8>)
 80006fc:	7adb      	ldrb	r3, [r3, #11]
 80006fe:	461a      	mov	r2, r3
 8000700:	4b16      	ldr	r3, [pc, #88]	; (800075c <print_network_information+0xc8>)
 8000702:	7b1b      	ldrb	r3, [r3, #12]
 8000704:	4618      	mov	r0, r3
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <print_network_information+0xc8>)
 8000708:	7b5b      	ldrb	r3, [r3, #13]
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	4603      	mov	r3, r0
 800070e:	4816      	ldr	r0, [pc, #88]	; (8000768 <print_network_information+0xd4>)
 8000710:	f005 ffe4 	bl	80066dc <iprintf>
    printf("Gate way   : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <print_network_information+0xc8>)
 8000716:	7b9b      	ldrb	r3, [r3, #14]
 8000718:	4619      	mov	r1, r3
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <print_network_information+0xc8>)
 800071c:	7bdb      	ldrb	r3, [r3, #15]
 800071e:	461a      	mov	r2, r3
 8000720:	4b0e      	ldr	r3, [pc, #56]	; (800075c <print_network_information+0xc8>)
 8000722:	7c1b      	ldrb	r3, [r3, #16]
 8000724:	4618      	mov	r0, r3
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <print_network_information+0xc8>)
 8000728:	7c5b      	ldrb	r3, [r3, #17]
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	4603      	mov	r3, r0
 800072e:	480f      	ldr	r0, [pc, #60]	; (800076c <print_network_information+0xd8>)
 8000730:	f005 ffd4 	bl	80066dc <iprintf>
    printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <print_network_information+0xc8>)
 8000736:	7c9b      	ldrb	r3, [r3, #18]
 8000738:	4619      	mov	r1, r3
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <print_network_information+0xc8>)
 800073c:	7cdb      	ldrb	r3, [r3, #19]
 800073e:	461a      	mov	r2, r3
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <print_network_information+0xc8>)
 8000742:	7d1b      	ldrb	r3, [r3, #20]
 8000744:	4618      	mov	r0, r3
 8000746:	4b05      	ldr	r3, [pc, #20]	; (800075c <print_network_information+0xc8>)
 8000748:	7d5b      	ldrb	r3, [r3, #21]
 800074a:	9300      	str	r3, [sp, #0]
 800074c:	4603      	mov	r3, r0
 800074e:	4808      	ldr	r0, [pc, #32]	; (8000770 <print_network_information+0xdc>)
 8000750:	f005 ffc4 	bl	80066dc <iprintf>
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	bdb0      	pop	{r4, r5, r7, pc}
 800075a:	bf00      	nop
 800075c:	20000010 	.word	0x20000010
 8000760:	0800753c 	.word	0x0800753c
 8000764:	0800756c 	.word	0x0800756c
 8000768:	08007588 	.word	0x08007588
 800076c:	080075a4 	.word	0x080075a4
 8000770:	080075c0 	.word	0x080075c0

08000774 <_InitW5300>:

void _InitW5300(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
	unsigned int tmpaddr[4];

	Reset_W5300();
 800077a:	f7ff ff43 	bl	8000604 <Reset_W5300>
	reg_wizchip_bus_cbfunc(W5300_read, W5300_write);
 800077e:	4912      	ldr	r1, [pc, #72]	; (80007c8 <_InitW5300+0x54>)
 8000780:	4812      	ldr	r0, [pc, #72]	; (80007cc <_InitW5300+0x58>)
 8000782:	f005 fa1b 	bl	8005bbc <reg_wizchip_bus_cbfunc>
	reg_wizchip_cs_cbfunc(W5300CsEnable, W5300CsDisable);
 8000786:	4912      	ldr	r1, [pc, #72]	; (80007d0 <_InitW5300+0x5c>)
 8000788:	4812      	ldr	r0, [pc, #72]	; (80007d4 <_InitW5300+0x60>)
 800078a:	f005 f9f1 	bl	8005b70 <reg_wizchip_cs_cbfunc>
	printf("getMR() = %04X\r\n", getMR());
 800078e:	2000      	movs	r0, #0
 8000790:	f004 f97c 	bl	8004a8c <WIZCHIP_READ>
 8000794:	4603      	mov	r3, r0
 8000796:	4619      	mov	r1, r3
 8000798:	480f      	ldr	r0, [pc, #60]	; (80007d8 <_InitW5300+0x64>)
 800079a:	f005 ff9f 	bl	80066dc <iprintf>

	if (ctlwizchip(CW_INIT_WIZCHIP, (void*)wiznet_memsize) == -1)
 800079e:	490f      	ldr	r1, [pc, #60]	; (80007dc <_InitW5300+0x68>)
 80007a0:	2001      	movs	r0, #1
 80007a2:	f005 fa37 	bl	8005c14 <ctlwizchip>
 80007a6:	4603      	mov	r3, r0
 80007a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007ac:	d102      	bne.n	80007b4 <_InitW5300+0x40>
	{
		printf("W5300 memory initialization failed\r\n");
 80007ae:	480c      	ldr	r0, [pc, #48]	; (80007e0 <_InitW5300+0x6c>)
 80007b0:	f006 f81a 	bl	80067e8 <puts>
	}

	ctlnetwork(CN_SET_NETINFO, (void *)&gWIZNETINFO);
 80007b4:	490b      	ldr	r1, [pc, #44]	; (80007e4 <_InitW5300+0x70>)
 80007b6:	2000      	movs	r0, #0
 80007b8:	f005 faa8 	bl	8005d0c <ctlnetwork>
	print_network_information();
 80007bc:	f7ff ff6a 	bl	8000694 <print_network_information>
}
 80007c0:	bf00      	nop
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	08000631 	.word	0x08000631
 80007cc:	08000657 	.word	0x08000657
 80007d0:	08000685 	.word	0x08000685
 80007d4:	08000677 	.word	0x08000677
 80007d8:	080075dc 	.word	0x080075dc
 80007dc:	20000000 	.word	0x20000000
 80007e0:	080075f0 	.word	0x080075f0
 80007e4:	20000010 	.word	0x20000010

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ec:	f000 fbd3 	bl	8000f96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f0:	f000 f820 	bl	8000834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f4:	f000 f8fe 	bl	80009f4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80007f8:	f000 f870 	bl	80008dc <MX_LPUART1_UART_Init>
  MX_FMC_Init();
 80007fc:	f000 f89a 	bl	8000934 <MX_FMC_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello! W5300 BUS loopback System \r\n");
 8000800:	4808      	ldr	r0, [pc, #32]	; (8000824 <main+0x3c>)
 8000802:	f005 fff1 	bl	80067e8 <puts>
  HAL_UART_Receive_IT(&hlpuart1, rxData, 1);
 8000806:	2201      	movs	r2, #1
 8000808:	4907      	ldr	r1, [pc, #28]	; (8000828 <main+0x40>)
 800080a:	4808      	ldr	r0, [pc, #32]	; (800082c <main+0x44>)
 800080c:	f002 fc3c 	bl	8003088 <HAL_UART_Receive_IT>

  _InitW5300();
 8000810:	f7ff ffb0 	bl	8000774 <_InitW5300>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 loopback_tcps(0, ethBuf0, 3000);
 8000814:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000818:	4905      	ldr	r1, [pc, #20]	; (8000830 <main+0x48>)
 800081a:	2000      	movs	r0, #0
 800081c:	f003 ffe4 	bl	80047e8 <loopback_tcps>
  {
 8000820:	e7f8      	b.n	8000814 <main+0x2c>
 8000822:	bf00      	nop
 8000824:	08007614 	.word	0x08007614
 8000828:	200009b4 	.word	0x200009b4
 800082c:	200000e0 	.word	0x200000e0
 8000830:	200001b4 	.word	0x200001b4

08000834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b096      	sub	sp, #88	; 0x58
 8000838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	2244      	movs	r2, #68	; 0x44
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f005 fe62 	bl	800650c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000848:	463b      	mov	r3, r7
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000856:	f44f 7000 	mov.w	r0, #512	; 0x200
 800085a:	f000 ff7d 	bl	8001758 <HAL_PWREx_ControlVoltageScaling>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000864:	f000 f9a8 	bl	8000bb8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000868:	2310      	movs	r3, #16
 800086a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800086c:	2301      	movs	r3, #1
 800086e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000874:	2360      	movs	r3, #96	; 0x60
 8000876:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000878:	2302      	movs	r3, #2
 800087a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800087c:	2301      	movs	r3, #1
 800087e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000880:	2301      	movs	r3, #1
 8000882:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 8000884:	2347      	movs	r3, #71	; 0x47
 8000886:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000888:	2302      	movs	r3, #2
 800088a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800088c:	2302      	movs	r3, #2
 800088e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8000890:	2306      	movs	r3, #6
 8000892:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4618      	mov	r0, r3
 800089a:	f000 ffc3 	bl	8001824 <HAL_RCC_OscConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80008a4:	f000 f988 	bl	8000bb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a8:	230f      	movs	r3, #15
 80008aa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ac:	2303      	movs	r3, #3
 80008ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008be:	463b      	mov	r3, r7
 80008c0:	2102      	movs	r1, #2
 80008c2:	4618      	mov	r0, r3
 80008c4:	f001 fbc8 	bl	8002058 <HAL_RCC_ClockConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008ce:	f000 f973 	bl	8000bb8 <Error_Handler>
  }
}
 80008d2:	bf00      	nop
 80008d4:	3758      	adds	r7, #88	; 0x58
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_LPUART1_UART_Init+0x50>)
 80008e2:	4a13      	ldr	r2, [pc, #76]	; (8000930 <MX_LPUART1_UART_Init+0x54>)
 80008e4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_LPUART1_UART_Init+0x50>)
 80008e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008ec:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_LPUART1_UART_Init+0x50>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008f4:	4b0d      	ldr	r3, [pc, #52]	; (800092c <MX_LPUART1_UART_Init+0x50>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_LPUART1_UART_Init+0x50>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <MX_LPUART1_UART_Init+0x50>)
 8000902:	220c      	movs	r2, #12
 8000904:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_LPUART1_UART_Init+0x50>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800090c:	4b07      	ldr	r3, [pc, #28]	; (800092c <MX_LPUART1_UART_Init+0x50>)
 800090e:	2200      	movs	r2, #0
 8000910:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_LPUART1_UART_Init+0x50>)
 8000914:	2200      	movs	r2, #0
 8000916:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000918:	4804      	ldr	r0, [pc, #16]	; (800092c <MX_LPUART1_UART_Init+0x50>)
 800091a:	f002 fad3 	bl	8002ec4 <HAL_UART_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000924:	f000 f948 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200000e0 	.word	0x200000e0
 8000930:	40008000 	.word	0x40008000

08000934 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b088      	sub	sp, #32
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800093a:	463b      	mov	r3, r7
 800093c:	2220      	movs	r2, #32
 800093e:	2100      	movs	r1, #0
 8000940:	4618      	mov	r0, r3
 8000942:	f005 fde3 	bl	800650c <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000946:	4b29      	ldr	r3, [pc, #164]	; (80009ec <MX_FMC_Init+0xb8>)
 8000948:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800094c:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800094e:	4b27      	ldr	r3, [pc, #156]	; (80009ec <MX_FMC_Init+0xb8>)
 8000950:	4a27      	ldr	r2, [pc, #156]	; (80009f0 <MX_FMC_Init+0xbc>)
 8000952:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000954:	4b25      	ldr	r3, [pc, #148]	; (80009ec <MX_FMC_Init+0xb8>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800095a:	4b24      	ldr	r3, [pc, #144]	; (80009ec <MX_FMC_Init+0xb8>)
 800095c:	2200      	movs	r2, #0
 800095e:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000960:	4b22      	ldr	r3, [pc, #136]	; (80009ec <MX_FMC_Init+0xb8>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000966:	4b21      	ldr	r3, [pc, #132]	; (80009ec <MX_FMC_Init+0xb8>)
 8000968:	2210      	movs	r2, #16
 800096a:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800096c:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <MX_FMC_Init+0xb8>)
 800096e:	2200      	movs	r2, #0
 8000970:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000972:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <MX_FMC_Init+0xb8>)
 8000974:	2200      	movs	r2, #0
 8000976:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000978:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <MX_FMC_Init+0xb8>)
 800097a:	2200      	movs	r2, #0
 800097c:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 800097e:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <MX_FMC_Init+0xb8>)
 8000980:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000984:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000986:	4b19      	ldr	r3, [pc, #100]	; (80009ec <MX_FMC_Init+0xb8>)
 8000988:	2200      	movs	r2, #0
 800098a:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800098c:	4b17      	ldr	r3, [pc, #92]	; (80009ec <MX_FMC_Init+0xb8>)
 800098e:	2200      	movs	r2, #0
 8000990:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000992:	4b16      	ldr	r3, [pc, #88]	; (80009ec <MX_FMC_Init+0xb8>)
 8000994:	2200      	movs	r2, #0
 8000996:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <MX_FMC_Init+0xb8>)
 800099a:	2200      	movs	r2, #0
 800099c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800099e:	4b13      	ldr	r3, [pc, #76]	; (80009ec <MX_FMC_Init+0xb8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_FMC_Init+0xb8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <MX_FMC_Init+0xb8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 3;
 80009b0:	2303      	movs	r3, #3
 80009b2:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 3;
 80009b4:	2303      	movs	r3, #3
 80009b6:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 4;
 80009b8:	2304      	movs	r3, #4
 80009ba:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 4;
 80009bc:	2304      	movs	r3, #4
 80009be:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 10;
 80009c0:	230a      	movs	r3, #10
 80009c2:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 10;
 80009c4:	230a      	movs	r3, #10
 80009c6:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80009cc:	463b      	mov	r3, r7
 80009ce:	2200      	movs	r2, #0
 80009d0:	4619      	mov	r1, r3
 80009d2:	4806      	ldr	r0, [pc, #24]	; (80009ec <MX_FMC_Init+0xb8>)
 80009d4:	f002 fa2e 	bl	8002e34 <HAL_SRAM_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_FMC_Init+0xae>
  {
    Error_Handler( );
 80009de:	f000 f8eb 	bl	8000bb8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80009e2:	bf00      	nop
 80009e4:	3720      	adds	r7, #32
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000164 	.word	0x20000164
 80009f0:	a0000104 	.word	0xa0000104

080009f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08e      	sub	sp, #56	; 0x38
 80009f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0a:	4b66      	ldr	r3, [pc, #408]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	4a65      	ldr	r2, [pc, #404]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a16:	4b63      	ldr	r3, [pc, #396]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	623b      	str	r3, [r7, #32]
 8000a20:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a22:	4b60      	ldr	r3, [pc, #384]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	4a5f      	ldr	r2, [pc, #380]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a28:	f043 0320 	orr.w	r3, r3, #32
 8000a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2e:	4b5d      	ldr	r3, [pc, #372]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	f003 0320 	and.w	r3, r3, #32
 8000a36:	61fb      	str	r3, [r7, #28]
 8000a38:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a3a:	4b5a      	ldr	r3, [pc, #360]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	4a59      	ldr	r2, [pc, #356]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a46:	4b57      	ldr	r3, [pc, #348]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a4e:	61bb      	str	r3, [r7, #24]
 8000a50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a52:	4b54      	ldr	r3, [pc, #336]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	4a53      	ldr	r2, [pc, #332]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a58:	f043 0310 	orr.w	r3, r3, #16
 8000a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5e:	4b51      	ldr	r3, [pc, #324]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	f003 0310 	and.w	r3, r3, #16
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	4b4e      	ldr	r3, [pc, #312]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	4a4d      	ldr	r2, [pc, #308]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a70:	f043 0302 	orr.w	r3, r3, #2
 8000a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a76:	4b4b      	ldr	r3, [pc, #300]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a82:	4b48      	ldr	r3, [pc, #288]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	4a47      	ldr	r2, [pc, #284]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a88:	f043 0308 	orr.w	r3, r3, #8
 8000a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8e:	4b45      	ldr	r3, [pc, #276]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	f003 0308 	and.w	r3, r3, #8
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a9a:	4b42      	ldr	r3, [pc, #264]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	4a41      	ldr	r2, [pc, #260]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa6:	4b3f      	ldr	r3, [pc, #252]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000ab2:	f000 fea7 	bl	8001804 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	4b3b      	ldr	r3, [pc, #236]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	4a3a      	ldr	r2, [pc, #232]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac2:	4b38      	ldr	r3, [pc, #224]	; (8000ba4 <MX_GPIO_Init+0x1b0>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5300_Reset_GPIO_Port, W5300_Reset_Pin, GPIO_PIN_SET);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2180      	movs	r1, #128	; 0x80
 8000ad2:	4835      	ldr	r0, [pc, #212]	; (8000ba8 <MX_GPIO_Init+0x1b4>)
 8000ad4:	f000 fe1a 	bl	800170c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000ade:	4833      	ldr	r0, [pc, #204]	; (8000bac <MX_GPIO_Init+0x1b8>)
 8000ae0:	f000 fe14 	bl	800170c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2140      	movs	r1, #64	; 0x40
 8000ae8:	4831      	ldr	r0, [pc, #196]	; (8000bb0 <MX_GPIO_Init+0x1bc>)
 8000aea:	f000 fe0f 	bl	800170c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b02:	4619      	mov	r1, r3
 8000b04:	482b      	ldr	r0, [pc, #172]	; (8000bb4 <MX_GPIO_Init+0x1c0>)
 8000b06:	f000 fc6f 	bl	80013e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : W5300_Reset_Pin */
  GPIO_InitStruct.Pin = W5300_Reset_Pin;
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(W5300_Reset_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4821      	ldr	r0, [pc, #132]	; (8000ba8 <MX_GPIO_Init+0x1b4>)
 8000b22:	f000 fc61 	bl	80013e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000b26:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	481b      	ldr	r0, [pc, #108]	; (8000bac <MX_GPIO_Init+0x1b8>)
 8000b40:	f000 fc52 	bl	80013e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b44:	2320      	movs	r3, #32
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b54:	4619      	mov	r1, r3
 8000b56:	4816      	ldr	r0, [pc, #88]	; (8000bb0 <MX_GPIO_Init+0x1bc>)
 8000b58:	f000 fc46 	bl	80013e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b5c:	2340      	movs	r3, #64	; 0x40
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b70:	4619      	mov	r1, r3
 8000b72:	480f      	ldr	r0, [pc, #60]	; (8000bb0 <MX_GPIO_Init+0x1bc>)
 8000b74:	f000 fc38 	bl	80013e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b78:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b86:	2303      	movs	r3, #3
 8000b88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b8a:	230a      	movs	r3, #10
 8000b8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b92:	4619      	mov	r1, r3
 8000b94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b98:	f000 fc26 	bl	80013e8 <HAL_GPIO_Init>

}
 8000b9c:	bf00      	nop
 8000b9e:	3738      	adds	r7, #56	; 0x38
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	48001400 	.word	0x48001400
 8000bac:	48000400 	.word	0x48000400
 8000bb0:	48001800 	.word	0x48001800
 8000bb4:	48000800 	.word	0x48000800

08000bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bbc:	b672      	cpsid	i
}
 8000bbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <Error_Handler+0x8>
	...

08000bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bca:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <HAL_MspInit+0x44>)
 8000bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bce:	4a0e      	ldr	r2, [pc, #56]	; (8000c08 <HAL_MspInit+0x44>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6613      	str	r3, [r2, #96]	; 0x60
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <HAL_MspInit+0x44>)
 8000bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <HAL_MspInit+0x44>)
 8000be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be6:	4a08      	ldr	r2, [pc, #32]	; (8000c08 <HAL_MspInit+0x44>)
 8000be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bec:	6593      	str	r3, [r2, #88]	; 0x58
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_MspInit+0x44>)
 8000bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	40021000 	.word	0x40021000

08000c0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b0ac      	sub	sp, #176	; 0xb0
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c24:	f107 0310 	add.w	r3, r7, #16
 8000c28:	228c      	movs	r2, #140	; 0x8c
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f005 fc6d 	bl	800650c <memset>
  if(huart->Instance==LPUART1)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a26      	ldr	r2, [pc, #152]	; (8000cd0 <HAL_UART_MspInit+0xc4>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d145      	bne.n	8000cc8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c3c:	2320      	movs	r3, #32
 8000c3e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c44:	f107 0310 	add.w	r3, r7, #16
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f001 fc29 	bl	80024a0 <HAL_RCCEx_PeriphCLKConfig>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c54:	f7ff ffb0 	bl	8000bb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c58:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <HAL_UART_MspInit+0xc8>)
 8000c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c5c:	4a1d      	ldr	r2, [pc, #116]	; (8000cd4 <HAL_UART_MspInit+0xc8>)
 8000c5e:	f043 0301 	orr.w	r3, r3, #1
 8000c62:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000c64:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <HAL_UART_MspInit+0xc8>)
 8000c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c70:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <HAL_UART_MspInit+0xc8>)
 8000c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c74:	4a17      	ldr	r2, [pc, #92]	; (8000cd4 <HAL_UART_MspInit+0xc8>)
 8000c76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c7c:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <HAL_UART_MspInit+0xc8>)
 8000c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000c88:	f000 fdbc 	bl	8001804 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c8c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000ca6:	2308      	movs	r3, #8
 8000ca8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4809      	ldr	r0, [pc, #36]	; (8000cd8 <HAL_UART_MspInit+0xcc>)
 8000cb4:	f000 fb98 	bl	80013e8 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2046      	movs	r0, #70	; 0x46
 8000cbe:	f000 fade 	bl	800127e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000cc2:	2046      	movs	r0, #70	; 0x46
 8000cc4:	f000 faf7 	bl	80012b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000cc8:	bf00      	nop
 8000cca:	37b0      	adds	r7, #176	; 0xb0
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40008000 	.word	0x40008000
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	48001800 	.word	0x48001800

08000cdc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000cf0:	4b23      	ldr	r3, [pc, #140]	; (8000d80 <HAL_FMC_MspInit+0xa4>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d13f      	bne.n	8000d78 <HAL_FMC_MspInit+0x9c>
    return;
  }
  FMC_Initialized = 1;
 8000cf8:	4b21      	ldr	r3, [pc, #132]	; (8000d80 <HAL_FMC_MspInit+0xa4>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000cfe:	4b21      	ldr	r3, [pc, #132]	; (8000d84 <HAL_FMC_MspInit+0xa8>)
 8000d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d02:	4a20      	ldr	r2, [pc, #128]	; (8000d84 <HAL_FMC_MspInit+0xa8>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6513      	str	r3, [r2, #80]	; 0x50
 8000d0a:	4b1e      	ldr	r3, [pc, #120]	; (8000d84 <HAL_FMC_MspInit+0xa8>)
 8000d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d16:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8000d1a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d24:	2303      	movs	r3, #3
 8000d26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d28:	230c      	movs	r3, #12
 8000d2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4815      	ldr	r0, [pc, #84]	; (8000d88 <HAL_FMC_MspInit+0xac>)
 8000d32:	f000 fb59 	bl	80013e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000d36:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000d3a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d44:	2303      	movs	r3, #3
 8000d46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d48:	230c      	movs	r3, #12
 8000d4a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480e      	ldr	r0, [pc, #56]	; (8000d8c <HAL_FMC_MspInit+0xb0>)
 8000d52:	f000 fb49 	bl	80013e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000d56:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000d5a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d68:	230c      	movs	r3, #12
 8000d6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4807      	ldr	r0, [pc, #28]	; (8000d90 <HAL_FMC_MspInit+0xb4>)
 8000d72:	f000 fb39 	bl	80013e8 <HAL_GPIO_Init>
 8000d76:	e000      	b.n	8000d7a <HAL_FMC_MspInit+0x9e>
    return;
 8000d78:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	200009b8 	.word	0x200009b8
 8000d84:	40021000 	.word	0x40021000
 8000d88:	48001400 	.word	0x48001400
 8000d8c:	48001000 	.word	0x48001000
 8000d90:	48000c00 	.word	0x48000c00

08000d94 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000d9c:	f7ff ff9e 	bl	8000cdc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <NMI_Handler+0x4>

08000dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <HardFault_Handler+0x4>

08000db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <MemManage_Handler+0x4>

08000dba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <BusFault_Handler+0x4>

08000dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <UsageFault_Handler+0x4>

08000dc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df4:	f000 f924 	bl	8001040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <LPUART1_IRQHandler+0x10>)
 8000e02:	f002 f997 	bl	8003134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200000e0 	.word	0x200000e0

08000e10 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	e00a      	b.n	8000e38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e22:	f3af 8000 	nop.w
 8000e26:	4601      	mov	r1, r0
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	1c5a      	adds	r2, r3, #1
 8000e2c:	60ba      	str	r2, [r7, #8]
 8000e2e:	b2ca      	uxtb	r2, r1
 8000e30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	3301      	adds	r3, #1
 8000e36:	617b      	str	r3, [r7, #20]
 8000e38:	697a      	ldr	r2, [r7, #20]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	dbf0      	blt.n	8000e22 <_read+0x12>
	}

return len;
 8000e40:	687b      	ldr	r3, [r7, #4]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
	return -1;
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
 8000e6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e72:	605a      	str	r2, [r3, #4]
	return 0;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <_isatty>:

int _isatty(int file)
{
 8000e82:	b480      	push	{r7}
 8000e84:	b083      	sub	sp, #12
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
	return 1;
 8000e8a:	2301      	movs	r3, #1
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
	return 0;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
	...

08000eb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ebc:	4a14      	ldr	r2, [pc, #80]	; (8000f10 <_sbrk+0x5c>)
 8000ebe:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <_sbrk+0x60>)
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec8:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <_sbrk+0x64>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d102      	bne.n	8000ed6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <_sbrk+0x64>)
 8000ed2:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <_sbrk+0x68>)
 8000ed4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d207      	bcs.n	8000ef4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee4:	f005 fae8 	bl	80064b8 <__errno>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	220c      	movs	r2, #12
 8000eec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef2:	e009      	b.n	8000f08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000efa:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <_sbrk+0x64>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <_sbrk+0x64>)
 8000f04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f06:	68fb      	ldr	r3, [r7, #12]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20050000 	.word	0x20050000
 8000f14:	00000400 	.word	0x00000400
 8000f18:	200009bc 	.word	0x200009bc
 8000f1c:	20000a00 	.word	0x20000a00

08000f20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <SystemInit+0x20>)
 8000f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f2a:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <SystemInit+0x20>)
 8000f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f7c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f48:	f7ff ffea 	bl	8000f20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f4c:	480c      	ldr	r0, [pc, #48]	; (8000f80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f4e:	490d      	ldr	r1, [pc, #52]	; (8000f84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f50:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <LoopForever+0xe>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f54:	e002      	b.n	8000f5c <LoopCopyDataInit>

08000f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5a:	3304      	adds	r3, #4

08000f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f60:	d3f9      	bcc.n	8000f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f62:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f64:	4c0a      	ldr	r4, [pc, #40]	; (8000f90 <LoopForever+0x16>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f68:	e001      	b.n	8000f6e <LoopFillZerobss>

08000f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f6c:	3204      	adds	r2, #4

08000f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f70:	d3fb      	bcc.n	8000f6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f72:	f005 faa7 	bl	80064c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f76:	f7ff fc37 	bl	80007e8 <main>

08000f7a <LoopForever>:

LoopForever:
    b LoopForever
 8000f7a:	e7fe      	b.n	8000f7a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f7c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f84:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8000f88:	08007844 	.word	0x08007844
  ldr r2, =_sbss
 8000f8c:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8000f90:	20000a00 	.word	0x20000a00

08000f94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f94:	e7fe      	b.n	8000f94 <ADC1_2_IRQHandler>

08000f96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa0:	2003      	movs	r0, #3
 8000fa2:	f000 f961 	bl	8001268 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f000 f80e 	bl	8000fc8 <HAL_InitTick>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d002      	beq.n	8000fb8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	71fb      	strb	r3, [r7, #7]
 8000fb6:	e001      	b.n	8000fbc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fb8:	f7ff fe04 	bl	8000bc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fd4:	4b17      	ldr	r3, [pc, #92]	; (8001034 <HAL_InitTick+0x6c>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d023      	beq.n	8001024 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fdc:	4b16      	ldr	r3, [pc, #88]	; (8001038 <HAL_InitTick+0x70>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b14      	ldr	r3, [pc, #80]	; (8001034 <HAL_InitTick+0x6c>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f96d 	bl	80012d2 <HAL_SYSTICK_Config>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10f      	bne.n	800101e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b0f      	cmp	r3, #15
 8001002:	d809      	bhi.n	8001018 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001004:	2200      	movs	r2, #0
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	f04f 30ff 	mov.w	r0, #4294967295
 800100c:	f000 f937 	bl	800127e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001010:	4a0a      	ldr	r2, [pc, #40]	; (800103c <HAL_InitTick+0x74>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6013      	str	r3, [r2, #0]
 8001016:	e007      	b.n	8001028 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	73fb      	strb	r3, [r7, #15]
 800101c:	e004      	b.n	8001028 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	73fb      	strb	r3, [r7, #15]
 8001022:	e001      	b.n	8001028 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001028:	7bfb      	ldrb	r3, [r7, #15]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000030 	.word	0x20000030
 8001038:	20000028 	.word	0x20000028
 800103c:	2000002c 	.word	0x2000002c

08001040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x20>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_IncTick+0x24>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <HAL_IncTick+0x24>)
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000030 	.word	0x20000030
 8001064:	200009c0 	.word	0x200009c0

08001068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return uwTick;
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <HAL_GetTick+0x14>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	200009c0 	.word	0x200009c0

08001080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001088:	f7ff ffee 	bl	8001068 <HAL_GetTick>
 800108c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001098:	d005      	beq.n	80010a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800109a:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <HAL_Delay+0x44>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4413      	add	r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010a6:	bf00      	nop
 80010a8:	f7ff ffde 	bl	8001068 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d8f7      	bhi.n	80010a8 <HAL_Delay+0x28>
  {
  }
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000030 	.word	0x20000030

080010c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <__NVIC_SetPriorityGrouping+0x44>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e4:	4013      	ands	r3, r2
 80010e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fa:	4a04      	ldr	r2, [pc, #16]	; (800110c <__NVIC_SetPriorityGrouping+0x44>)
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	60d3      	str	r3, [r2, #12]
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001114:	4b04      	ldr	r3, [pc, #16]	; (8001128 <__NVIC_GetPriorityGrouping+0x18>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	0a1b      	lsrs	r3, r3, #8
 800111a:	f003 0307 	and.w	r3, r3, #7
}
 800111e:	4618      	mov	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	2b00      	cmp	r3, #0
 800113c:	db0b      	blt.n	8001156 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	f003 021f 	and.w	r2, r3, #31
 8001144:	4907      	ldr	r1, [pc, #28]	; (8001164 <__NVIC_EnableIRQ+0x38>)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	095b      	lsrs	r3, r3, #5
 800114c:	2001      	movs	r0, #1
 800114e:	fa00 f202 	lsl.w	r2, r0, r2
 8001152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000e100 	.word	0xe000e100

08001168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001178:	2b00      	cmp	r3, #0
 800117a:	db0a      	blt.n	8001192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	b2da      	uxtb	r2, r3
 8001180:	490c      	ldr	r1, [pc, #48]	; (80011b4 <__NVIC_SetPriority+0x4c>)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	0112      	lsls	r2, r2, #4
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	440b      	add	r3, r1
 800118c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001190:	e00a      	b.n	80011a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4908      	ldr	r1, [pc, #32]	; (80011b8 <__NVIC_SetPriority+0x50>)
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	3b04      	subs	r3, #4
 80011a0:	0112      	lsls	r2, r2, #4
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	440b      	add	r3, r1
 80011a6:	761a      	strb	r2, [r3, #24]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000e100 	.word	0xe000e100
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	; 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f1c3 0307 	rsb	r3, r3, #7
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	bf28      	it	cs
 80011da:	2304      	movcs	r3, #4
 80011dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3304      	adds	r3, #4
 80011e2:	2b06      	cmp	r3, #6
 80011e4:	d902      	bls.n	80011ec <NVIC_EncodePriority+0x30>
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3b03      	subs	r3, #3
 80011ea:	e000      	b.n	80011ee <NVIC_EncodePriority+0x32>
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	f04f 32ff 	mov.w	r2, #4294967295
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43da      	mvns	r2, r3
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	401a      	ands	r2, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001204:	f04f 31ff 	mov.w	r1, #4294967295
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa01 f303 	lsl.w	r3, r1, r3
 800120e:	43d9      	mvns	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	4313      	orrs	r3, r2
         );
}
 8001216:	4618      	mov	r0, r3
 8001218:	3724      	adds	r7, #36	; 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001234:	d301      	bcc.n	800123a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001236:	2301      	movs	r3, #1
 8001238:	e00f      	b.n	800125a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123a:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <SysTick_Config+0x40>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3b01      	subs	r3, #1
 8001240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001242:	210f      	movs	r1, #15
 8001244:	f04f 30ff 	mov.w	r0, #4294967295
 8001248:	f7ff ff8e 	bl	8001168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <SysTick_Config+0x40>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001252:	4b04      	ldr	r3, [pc, #16]	; (8001264 <SysTick_Config+0x40>)
 8001254:	2207      	movs	r2, #7
 8001256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	e000e010 	.word	0xe000e010

08001268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff ff29 	bl	80010c8 <__NVIC_SetPriorityGrouping>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b086      	sub	sp, #24
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
 800128a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001290:	f7ff ff3e 	bl	8001110 <__NVIC_GetPriorityGrouping>
 8001294:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	68b9      	ldr	r1, [r7, #8]
 800129a:	6978      	ldr	r0, [r7, #20]
 800129c:	f7ff ff8e 	bl	80011bc <NVIC_EncodePriority>
 80012a0:	4602      	mov	r2, r0
 80012a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff5d 	bl	8001168 <__NVIC_SetPriority>
}
 80012ae:	bf00      	nop
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff31 	bl	800112c <__NVIC_EnableIRQ>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff ffa2 	bl	8001224 <SysTick_Config>
 80012e0:	4603      	mov	r3, r0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b085      	sub	sp, #20
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012f2:	2300      	movs	r3, #0
 80012f4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d008      	beq.n	8001314 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2204      	movs	r2, #4
 8001306:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e022      	b.n	800135a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 020e 	bic.w	r2, r2, #14
 8001322:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f022 0201 	bic.w	r2, r2, #1
 8001332:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001338:	f003 021c 	and.w	r2, r3, #28
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	2101      	movs	r1, #1
 8001342:	fa01 f202 	lsl.w	r2, r1, r2
 8001346:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2201      	movs	r2, #1
 800134c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001358:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800135a:	4618      	mov	r0, r3
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b084      	sub	sp, #16
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800136e:	2300      	movs	r3, #0
 8001370:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d005      	beq.n	800138a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2204      	movs	r2, #4
 8001382:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	73fb      	strb	r3, [r7, #15]
 8001388:	e029      	b.n	80013de <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 020e 	bic.w	r2, r2, #14
 8001398:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f022 0201 	bic.w	r2, r2, #1
 80013a8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	f003 021c 	and.w	r2, r3, #28
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	2101      	movs	r1, #1
 80013b8:	fa01 f202 	lsl.w	r2, r1, r2
 80013bc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2201      	movs	r2, #1
 80013c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	4798      	blx	r3
    }
  }
  return status;
 80013de:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b087      	sub	sp, #28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f6:	e166      	b.n	80016c6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	2101      	movs	r1, #1
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	fa01 f303 	lsl.w	r3, r1, r3
 8001404:	4013      	ands	r3, r2
 8001406:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2b00      	cmp	r3, #0
 800140c:	f000 8158 	beq.w	80016c0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	2b01      	cmp	r3, #1
 800141a:	d005      	beq.n	8001428 <HAL_GPIO_Init+0x40>
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d130      	bne.n	800148a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	2203      	movs	r2, #3
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	68da      	ldr	r2, [r3, #12]
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4313      	orrs	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800145e:	2201      	movs	r2, #1
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	091b      	lsrs	r3, r3, #4
 8001474:	f003 0201 	and.w	r2, r3, #1
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 0303 	and.w	r3, r3, #3
 8001492:	2b03      	cmp	r3, #3
 8001494:	d017      	beq.n	80014c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	2203      	movs	r2, #3
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 0303 	and.w	r3, r3, #3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d123      	bne.n	800151a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	08da      	lsrs	r2, r3, #3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	3208      	adds	r2, #8
 80014da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	220f      	movs	r2, #15
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	691a      	ldr	r2, [r3, #16]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	f003 0307 	and.w	r3, r3, #7
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	08da      	lsrs	r2, r3, #3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3208      	adds	r2, #8
 8001514:	6939      	ldr	r1, [r7, #16]
 8001516:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	2203      	movs	r2, #3
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 0203 	and.w	r2, r3, #3
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 80b2 	beq.w	80016c0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155c:	4b61      	ldr	r3, [pc, #388]	; (80016e4 <HAL_GPIO_Init+0x2fc>)
 800155e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001560:	4a60      	ldr	r2, [pc, #384]	; (80016e4 <HAL_GPIO_Init+0x2fc>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	6613      	str	r3, [r2, #96]	; 0x60
 8001568:	4b5e      	ldr	r3, [pc, #376]	; (80016e4 <HAL_GPIO_Init+0x2fc>)
 800156a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001574:	4a5c      	ldr	r2, [pc, #368]	; (80016e8 <HAL_GPIO_Init+0x300>)
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	089b      	lsrs	r3, r3, #2
 800157a:	3302      	adds	r3, #2
 800157c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001580:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	f003 0303 	and.w	r3, r3, #3
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	220f      	movs	r2, #15
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800159e:	d02b      	beq.n	80015f8 <HAL_GPIO_Init+0x210>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a52      	ldr	r2, [pc, #328]	; (80016ec <HAL_GPIO_Init+0x304>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d025      	beq.n	80015f4 <HAL_GPIO_Init+0x20c>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a51      	ldr	r2, [pc, #324]	; (80016f0 <HAL_GPIO_Init+0x308>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d01f      	beq.n	80015f0 <HAL_GPIO_Init+0x208>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a50      	ldr	r2, [pc, #320]	; (80016f4 <HAL_GPIO_Init+0x30c>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d019      	beq.n	80015ec <HAL_GPIO_Init+0x204>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a4f      	ldr	r2, [pc, #316]	; (80016f8 <HAL_GPIO_Init+0x310>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d013      	beq.n	80015e8 <HAL_GPIO_Init+0x200>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a4e      	ldr	r2, [pc, #312]	; (80016fc <HAL_GPIO_Init+0x314>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d00d      	beq.n	80015e4 <HAL_GPIO_Init+0x1fc>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a4d      	ldr	r2, [pc, #308]	; (8001700 <HAL_GPIO_Init+0x318>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d007      	beq.n	80015e0 <HAL_GPIO_Init+0x1f8>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a4c      	ldr	r2, [pc, #304]	; (8001704 <HAL_GPIO_Init+0x31c>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d101      	bne.n	80015dc <HAL_GPIO_Init+0x1f4>
 80015d8:	2307      	movs	r3, #7
 80015da:	e00e      	b.n	80015fa <HAL_GPIO_Init+0x212>
 80015dc:	2308      	movs	r3, #8
 80015de:	e00c      	b.n	80015fa <HAL_GPIO_Init+0x212>
 80015e0:	2306      	movs	r3, #6
 80015e2:	e00a      	b.n	80015fa <HAL_GPIO_Init+0x212>
 80015e4:	2305      	movs	r3, #5
 80015e6:	e008      	b.n	80015fa <HAL_GPIO_Init+0x212>
 80015e8:	2304      	movs	r3, #4
 80015ea:	e006      	b.n	80015fa <HAL_GPIO_Init+0x212>
 80015ec:	2303      	movs	r3, #3
 80015ee:	e004      	b.n	80015fa <HAL_GPIO_Init+0x212>
 80015f0:	2302      	movs	r3, #2
 80015f2:	e002      	b.n	80015fa <HAL_GPIO_Init+0x212>
 80015f4:	2301      	movs	r3, #1
 80015f6:	e000      	b.n	80015fa <HAL_GPIO_Init+0x212>
 80015f8:	2300      	movs	r3, #0
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	f002 0203 	and.w	r2, r2, #3
 8001600:	0092      	lsls	r2, r2, #2
 8001602:	4093      	lsls	r3, r2
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4313      	orrs	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800160a:	4937      	ldr	r1, [pc, #220]	; (80016e8 <HAL_GPIO_Init+0x300>)
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	089b      	lsrs	r3, r3, #2
 8001610:	3302      	adds	r3, #2
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001618:	4b3b      	ldr	r3, [pc, #236]	; (8001708 <HAL_GPIO_Init+0x320>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	43db      	mvns	r3, r3
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4013      	ands	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d003      	beq.n	800163c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	4313      	orrs	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800163c:	4a32      	ldr	r2, [pc, #200]	; (8001708 <HAL_GPIO_Init+0x320>)
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001642:	4b31      	ldr	r3, [pc, #196]	; (8001708 <HAL_GPIO_Init+0x320>)
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	43db      	mvns	r3, r3
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	4013      	ands	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4313      	orrs	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001666:	4a28      	ldr	r2, [pc, #160]	; (8001708 <HAL_GPIO_Init+0x320>)
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800166c:	4b26      	ldr	r3, [pc, #152]	; (8001708 <HAL_GPIO_Init+0x320>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	43db      	mvns	r3, r3
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4013      	ands	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	4313      	orrs	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001690:	4a1d      	ldr	r2, [pc, #116]	; (8001708 <HAL_GPIO_Init+0x320>)
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001696:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <HAL_GPIO_Init+0x320>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	43db      	mvns	r3, r3
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	4013      	ands	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016ba:	4a13      	ldr	r2, [pc, #76]	; (8001708 <HAL_GPIO_Init+0x320>)
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	3301      	adds	r3, #1
 80016c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	fa22 f303 	lsr.w	r3, r2, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f47f ae91 	bne.w	80013f8 <HAL_GPIO_Init+0x10>
  }
}
 80016d6:	bf00      	nop
 80016d8:	bf00      	nop
 80016da:	371c      	adds	r7, #28
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40010000 	.word	0x40010000
 80016ec:	48000400 	.word	0x48000400
 80016f0:	48000800 	.word	0x48000800
 80016f4:	48000c00 	.word	0x48000c00
 80016f8:	48001000 	.word	0x48001000
 80016fc:	48001400 	.word	0x48001400
 8001700:	48001800 	.word	0x48001800
 8001704:	48001c00 	.word	0x48001c00
 8001708:	40010400 	.word	0x40010400

0800170c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	807b      	strh	r3, [r7, #2]
 8001718:	4613      	mov	r3, r2
 800171a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800171c:	787b      	ldrb	r3, [r7, #1]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001722:	887a      	ldrh	r2, [r7, #2]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001728:	e002      	b.n	8001730 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800172a:	887a      	ldrh	r2, [r7, #2]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <HAL_PWREx_GetVoltageRange+0x18>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40007000 	.word	0x40007000

08001758 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001766:	d130      	bne.n	80017ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001768:	4b23      	ldr	r3, [pc, #140]	; (80017f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001774:	d038      	beq.n	80017e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001776:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800177e:	4a1e      	ldr	r2, [pc, #120]	; (80017f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001780:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001784:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001786:	4b1d      	ldr	r3, [pc, #116]	; (80017fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2232      	movs	r2, #50	; 0x32
 800178c:	fb02 f303 	mul.w	r3, r2, r3
 8001790:	4a1b      	ldr	r2, [pc, #108]	; (8001800 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001792:	fba2 2303 	umull	r2, r3, r2, r3
 8001796:	0c9b      	lsrs	r3, r3, #18
 8001798:	3301      	adds	r3, #1
 800179a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800179c:	e002      	b.n	80017a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	3b01      	subs	r3, #1
 80017a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017a4:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017a6:	695b      	ldr	r3, [r3, #20]
 80017a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017b0:	d102      	bne.n	80017b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1f2      	bne.n	800179e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017c4:	d110      	bne.n	80017e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e00f      	b.n	80017ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017ca:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017d6:	d007      	beq.n	80017e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017d8:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017e0:	4a05      	ldr	r2, [pc, #20]	; (80017f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40007000 	.word	0x40007000
 80017fc:	20000028 	.word	0x20000028
 8001800:	431bde83 	.word	0x431bde83

08001804 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001808:	4b05      	ldr	r3, [pc, #20]	; (8001820 <HAL_PWREx_EnableVddIO2+0x1c>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	4a04      	ldr	r2, [pc, #16]	; (8001820 <HAL_PWREx_EnableVddIO2+0x1c>)
 800180e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001812:	6053      	str	r3, [r2, #4]
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	40007000 	.word	0x40007000

08001824 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d102      	bne.n	8001838 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	f000 bc08 	b.w	8002048 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001838:	4b96      	ldr	r3, [pc, #600]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 030c 	and.w	r3, r3, #12
 8001840:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001842:	4b94      	ldr	r3, [pc, #592]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0310 	and.w	r3, r3, #16
 8001854:	2b00      	cmp	r3, #0
 8001856:	f000 80e4 	beq.w	8001a22 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d007      	beq.n	8001870 <HAL_RCC_OscConfig+0x4c>
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	2b0c      	cmp	r3, #12
 8001864:	f040 808b 	bne.w	800197e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	2b01      	cmp	r3, #1
 800186c:	f040 8087 	bne.w	800197e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001870:	4b88      	ldr	r3, [pc, #544]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d005      	beq.n	8001888 <HAL_RCC_OscConfig+0x64>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e3df      	b.n	8002048 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a1a      	ldr	r2, [r3, #32]
 800188c:	4b81      	ldr	r3, [pc, #516]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0308 	and.w	r3, r3, #8
 8001894:	2b00      	cmp	r3, #0
 8001896:	d004      	beq.n	80018a2 <HAL_RCC_OscConfig+0x7e>
 8001898:	4b7e      	ldr	r3, [pc, #504]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018a0:	e005      	b.n	80018ae <HAL_RCC_OscConfig+0x8a>
 80018a2:	4b7c      	ldr	r3, [pc, #496]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 80018a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018a8:	091b      	lsrs	r3, r3, #4
 80018aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d223      	bcs.n	80018fa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a1b      	ldr	r3, [r3, #32]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f000 fd92 	bl	80023e0 <RCC_SetFlashLatencyFromMSIRange>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e3c0      	b.n	8002048 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018c6:	4b73      	ldr	r3, [pc, #460]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a72      	ldr	r2, [pc, #456]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 80018cc:	f043 0308 	orr.w	r3, r3, #8
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	4b70      	ldr	r3, [pc, #448]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	496d      	ldr	r1, [pc, #436]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018e4:	4b6b      	ldr	r3, [pc, #428]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	021b      	lsls	r3, r3, #8
 80018f2:	4968      	ldr	r1, [pc, #416]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	604b      	str	r3, [r1, #4]
 80018f8:	e025      	b.n	8001946 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018fa:	4b66      	ldr	r3, [pc, #408]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a65      	ldr	r2, [pc, #404]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 8001900:	f043 0308 	orr.w	r3, r3, #8
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	4b63      	ldr	r3, [pc, #396]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	4960      	ldr	r1, [pc, #384]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 8001914:	4313      	orrs	r3, r2
 8001916:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001918:	4b5e      	ldr	r3, [pc, #376]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69db      	ldr	r3, [r3, #28]
 8001924:	021b      	lsls	r3, r3, #8
 8001926:	495b      	ldr	r1, [pc, #364]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 8001928:	4313      	orrs	r3, r2
 800192a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d109      	bne.n	8001946 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	4618      	mov	r0, r3
 8001938:	f000 fd52 	bl	80023e0 <RCC_SetFlashLatencyFromMSIRange>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e380      	b.n	8002048 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001946:	f000 fc87 	bl	8002258 <HAL_RCC_GetSysClockFreq>
 800194a:	4602      	mov	r2, r0
 800194c:	4b51      	ldr	r3, [pc, #324]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	091b      	lsrs	r3, r3, #4
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	4950      	ldr	r1, [pc, #320]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 8001958:	5ccb      	ldrb	r3, [r1, r3]
 800195a:	f003 031f 	and.w	r3, r3, #31
 800195e:	fa22 f303 	lsr.w	r3, r2, r3
 8001962:	4a4e      	ldr	r2, [pc, #312]	; (8001a9c <HAL_RCC_OscConfig+0x278>)
 8001964:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001966:	4b4e      	ldr	r3, [pc, #312]	; (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fb2c 	bl	8000fc8 <HAL_InitTick>
 8001970:	4603      	mov	r3, r0
 8001972:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001974:	7bfb      	ldrb	r3, [r7, #15]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d052      	beq.n	8001a20 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800197a:	7bfb      	ldrb	r3, [r7, #15]
 800197c:	e364      	b.n	8002048 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d032      	beq.n	80019ec <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001986:	4b43      	ldr	r3, [pc, #268]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a42      	ldr	r2, [pc, #264]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001992:	f7ff fb69 	bl	8001068 <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800199a:	f7ff fb65 	bl	8001068 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e34d      	b.n	8002048 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019ac:	4b39      	ldr	r3, [pc, #228]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0f0      	beq.n	800199a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019b8:	4b36      	ldr	r3, [pc, #216]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a35      	ldr	r2, [pc, #212]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 80019be:	f043 0308 	orr.w	r3, r3, #8
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	4b33      	ldr	r3, [pc, #204]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	4930      	ldr	r1, [pc, #192]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019d6:	4b2f      	ldr	r3, [pc, #188]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	021b      	lsls	r3, r3, #8
 80019e4:	492b      	ldr	r1, [pc, #172]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	604b      	str	r3, [r1, #4]
 80019ea:	e01a      	b.n	8001a22 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019ec:	4b29      	ldr	r3, [pc, #164]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a28      	ldr	r2, [pc, #160]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 80019f2:	f023 0301 	bic.w	r3, r3, #1
 80019f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019f8:	f7ff fb36 	bl	8001068 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a00:	f7ff fb32 	bl	8001068 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e31a      	b.n	8002048 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a12:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f0      	bne.n	8001a00 <HAL_RCC_OscConfig+0x1dc>
 8001a1e:	e000      	b.n	8001a22 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a20:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d073      	beq.n	8001b16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	d005      	beq.n	8001a40 <HAL_RCC_OscConfig+0x21c>
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	2b0c      	cmp	r3, #12
 8001a38:	d10e      	bne.n	8001a58 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d10b      	bne.n	8001a58 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a40:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d063      	beq.n	8001b14 <HAL_RCC_OscConfig+0x2f0>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d15f      	bne.n	8001b14 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e2f7      	b.n	8002048 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a60:	d106      	bne.n	8001a70 <HAL_RCC_OscConfig+0x24c>
 8001a62:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a0b      	ldr	r2, [pc, #44]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 8001a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a6c:	6013      	str	r3, [r2, #0]
 8001a6e:	e025      	b.n	8001abc <HAL_RCC_OscConfig+0x298>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a78:	d114      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x280>
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a05      	ldr	r2, [pc, #20]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 8001a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a02      	ldr	r2, [pc, #8]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 8001a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	e013      	b.n	8001abc <HAL_RCC_OscConfig+0x298>
 8001a94:	40021000 	.word	0x40021000
 8001a98:	08007754 	.word	0x08007754
 8001a9c:	20000028 	.word	0x20000028
 8001aa0:	2000002c 	.word	0x2000002c
 8001aa4:	4ba0      	ldr	r3, [pc, #640]	; (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a9f      	ldr	r2, [pc, #636]	; (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	4b9d      	ldr	r3, [pc, #628]	; (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a9c      	ldr	r2, [pc, #624]	; (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001ab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d013      	beq.n	8001aec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac4:	f7ff fad0 	bl	8001068 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001acc:	f7ff facc 	bl	8001068 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b64      	cmp	r3, #100	; 0x64
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e2b4      	b.n	8002048 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ade:	4b92      	ldr	r3, [pc, #584]	; (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0f0      	beq.n	8001acc <HAL_RCC_OscConfig+0x2a8>
 8001aea:	e014      	b.n	8001b16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aec:	f7ff fabc 	bl	8001068 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af4:	f7ff fab8 	bl	8001068 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b64      	cmp	r3, #100	; 0x64
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e2a0      	b.n	8002048 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b06:	4b88      	ldr	r3, [pc, #544]	; (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0x2d0>
 8001b12:	e000      	b.n	8001b16 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d060      	beq.n	8001be4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d005      	beq.n	8001b34 <HAL_RCC_OscConfig+0x310>
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	2b0c      	cmp	r3, #12
 8001b2c:	d119      	bne.n	8001b62 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d116      	bne.n	8001b62 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b34:	4b7c      	ldr	r3, [pc, #496]	; (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d005      	beq.n	8001b4c <HAL_RCC_OscConfig+0x328>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e27d      	b.n	8002048 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4c:	4b76      	ldr	r3, [pc, #472]	; (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	061b      	lsls	r3, r3, #24
 8001b5a:	4973      	ldr	r1, [pc, #460]	; (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b60:	e040      	b.n	8001be4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d023      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b6a:	4b6f      	ldr	r3, [pc, #444]	; (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a6e      	ldr	r2, [pc, #440]	; (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b76:	f7ff fa77 	bl	8001068 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b7e:	f7ff fa73 	bl	8001068 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e25b      	b.n	8002048 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b90:	4b65      	ldr	r3, [pc, #404]	; (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0f0      	beq.n	8001b7e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b9c:	4b62      	ldr	r3, [pc, #392]	; (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	061b      	lsls	r3, r3, #24
 8001baa:	495f      	ldr	r1, [pc, #380]	; (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	604b      	str	r3, [r1, #4]
 8001bb0:	e018      	b.n	8001be4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bb2:	4b5d      	ldr	r3, [pc, #372]	; (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a5c      	ldr	r2, [pc, #368]	; (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbe:	f7ff fa53 	bl	8001068 <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc6:	f7ff fa4f 	bl	8001068 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e237      	b.n	8002048 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bd8:	4b53      	ldr	r3, [pc, #332]	; (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1f0      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0308 	and.w	r3, r3, #8
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d03c      	beq.n	8001c6a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	695b      	ldr	r3, [r3, #20]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d01c      	beq.n	8001c32 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bf8:	4b4b      	ldr	r3, [pc, #300]	; (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bfe:	4a4a      	ldr	r2, [pc, #296]	; (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c08:	f7ff fa2e 	bl	8001068 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c10:	f7ff fa2a 	bl	8001068 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e212      	b.n	8002048 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c22:	4b41      	ldr	r3, [pc, #260]	; (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0ef      	beq.n	8001c10 <HAL_RCC_OscConfig+0x3ec>
 8001c30:	e01b      	b.n	8001c6a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c32:	4b3d      	ldr	r3, [pc, #244]	; (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c38:	4a3b      	ldr	r2, [pc, #236]	; (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001c3a:	f023 0301 	bic.w	r3, r3, #1
 8001c3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c42:	f7ff fa11 	bl	8001068 <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c4a:	f7ff fa0d 	bl	8001068 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e1f5      	b.n	8002048 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c5c:	4b32      	ldr	r3, [pc, #200]	; (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1ef      	bne.n	8001c4a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0304 	and.w	r3, r3, #4
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 80a6 	beq.w	8001dc4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c7c:	4b2a      	ldr	r3, [pc, #168]	; (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10d      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c88:	4b27      	ldr	r3, [pc, #156]	; (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8c:	4a26      	ldr	r2, [pc, #152]	; (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c92:	6593      	str	r3, [r2, #88]	; 0x58
 8001c94:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ca4:	4b21      	ldr	r3, [pc, #132]	; (8001d2c <HAL_RCC_OscConfig+0x508>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d118      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cb0:	4b1e      	ldr	r3, [pc, #120]	; (8001d2c <HAL_RCC_OscConfig+0x508>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a1d      	ldr	r2, [pc, #116]	; (8001d2c <HAL_RCC_OscConfig+0x508>)
 8001cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cbc:	f7ff f9d4 	bl	8001068 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc4:	f7ff f9d0 	bl	8001068 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e1b8      	b.n	8002048 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cd6:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <HAL_RCC_OscConfig+0x508>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0f0      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d108      	bne.n	8001cfc <HAL_RCC_OscConfig+0x4d8>
 8001cea:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf0:	4a0d      	ldr	r2, [pc, #52]	; (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cfa:	e029      	b.n	8001d50 <HAL_RCC_OscConfig+0x52c>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2b05      	cmp	r3, #5
 8001d02:	d115      	bne.n	8001d30 <HAL_RCC_OscConfig+0x50c>
 8001d04:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d0a:	4a07      	ldr	r2, [pc, #28]	; (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001d0c:	f043 0304 	orr.w	r3, r3, #4
 8001d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d14:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1a:	4a03      	ldr	r2, [pc, #12]	; (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d24:	e014      	b.n	8001d50 <HAL_RCC_OscConfig+0x52c>
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40007000 	.word	0x40007000
 8001d30:	4b9d      	ldr	r3, [pc, #628]	; (8001fa8 <HAL_RCC_OscConfig+0x784>)
 8001d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d36:	4a9c      	ldr	r2, [pc, #624]	; (8001fa8 <HAL_RCC_OscConfig+0x784>)
 8001d38:	f023 0301 	bic.w	r3, r3, #1
 8001d3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d40:	4b99      	ldr	r3, [pc, #612]	; (8001fa8 <HAL_RCC_OscConfig+0x784>)
 8001d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d46:	4a98      	ldr	r2, [pc, #608]	; (8001fa8 <HAL_RCC_OscConfig+0x784>)
 8001d48:	f023 0304 	bic.w	r3, r3, #4
 8001d4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d016      	beq.n	8001d86 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d58:	f7ff f986 	bl	8001068 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d5e:	e00a      	b.n	8001d76 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d60:	f7ff f982 	bl	8001068 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e168      	b.n	8002048 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d76:	4b8c      	ldr	r3, [pc, #560]	; (8001fa8 <HAL_RCC_OscConfig+0x784>)
 8001d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0ed      	beq.n	8001d60 <HAL_RCC_OscConfig+0x53c>
 8001d84:	e015      	b.n	8001db2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d86:	f7ff f96f 	bl	8001068 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d8c:	e00a      	b.n	8001da4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d8e:	f7ff f96b 	bl	8001068 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e151      	b.n	8002048 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001da4:	4b80      	ldr	r3, [pc, #512]	; (8001fa8 <HAL_RCC_OscConfig+0x784>)
 8001da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1ed      	bne.n	8001d8e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001db2:	7ffb      	ldrb	r3, [r7, #31]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d105      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db8:	4b7b      	ldr	r3, [pc, #492]	; (8001fa8 <HAL_RCC_OscConfig+0x784>)
 8001dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbc:	4a7a      	ldr	r2, [pc, #488]	; (8001fa8 <HAL_RCC_OscConfig+0x784>)
 8001dbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0320 	and.w	r3, r3, #32
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d03c      	beq.n	8001e4a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d01c      	beq.n	8001e12 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001dd8:	4b73      	ldr	r3, [pc, #460]	; (8001fa8 <HAL_RCC_OscConfig+0x784>)
 8001dda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dde:	4a72      	ldr	r2, [pc, #456]	; (8001fa8 <HAL_RCC_OscConfig+0x784>)
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de8:	f7ff f93e 	bl	8001068 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001df0:	f7ff f93a 	bl	8001068 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e122      	b.n	8002048 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e02:	4b69      	ldr	r3, [pc, #420]	; (8001fa8 <HAL_RCC_OscConfig+0x784>)
 8001e04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0ef      	beq.n	8001df0 <HAL_RCC_OscConfig+0x5cc>
 8001e10:	e01b      	b.n	8001e4a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e12:	4b65      	ldr	r3, [pc, #404]	; (8001fa8 <HAL_RCC_OscConfig+0x784>)
 8001e14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e18:	4a63      	ldr	r2, [pc, #396]	; (8001fa8 <HAL_RCC_OscConfig+0x784>)
 8001e1a:	f023 0301 	bic.w	r3, r3, #1
 8001e1e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e22:	f7ff f921 	bl	8001068 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e2a:	f7ff f91d 	bl	8001068 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e105      	b.n	8002048 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e3c:	4b5a      	ldr	r3, [pc, #360]	; (8001fa8 <HAL_RCC_OscConfig+0x784>)
 8001e3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1ef      	bne.n	8001e2a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 80f9 	beq.w	8002046 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	f040 80cf 	bne.w	8001ffc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e5e:	4b52      	ldr	r3, [pc, #328]	; (8001fa8 <HAL_RCC_OscConfig+0x784>)
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	f003 0203 	and.w	r2, r3, #3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d12c      	bne.n	8001ecc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d123      	bne.n	8001ecc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e8e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d11b      	bne.n	8001ecc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e9e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d113      	bne.n	8001ecc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eae:	085b      	lsrs	r3, r3, #1
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d109      	bne.n	8001ecc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	085b      	lsrs	r3, r3, #1
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d071      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	2b0c      	cmp	r3, #12
 8001ed0:	d068      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ed2:	4b35      	ldr	r3, [pc, #212]	; (8001fa8 <HAL_RCC_OscConfig+0x784>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d105      	bne.n	8001eea <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ede:	4b32      	ldr	r3, [pc, #200]	; (8001fa8 <HAL_RCC_OscConfig+0x784>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e0ac      	b.n	8002048 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001eee:	4b2e      	ldr	r3, [pc, #184]	; (8001fa8 <HAL_RCC_OscConfig+0x784>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a2d      	ldr	r2, [pc, #180]	; (8001fa8 <HAL_RCC_OscConfig+0x784>)
 8001ef4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ef8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001efa:	f7ff f8b5 	bl	8001068 <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f02:	f7ff f8b1 	bl	8001068 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e099      	b.n	8002048 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f14:	4b24      	ldr	r3, [pc, #144]	; (8001fa8 <HAL_RCC_OscConfig+0x784>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1f0      	bne.n	8001f02 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f20:	4b21      	ldr	r3, [pc, #132]	; (8001fa8 <HAL_RCC_OscConfig+0x784>)
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	4b21      	ldr	r3, [pc, #132]	; (8001fac <HAL_RCC_OscConfig+0x788>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f30:	3a01      	subs	r2, #1
 8001f32:	0112      	lsls	r2, r2, #4
 8001f34:	4311      	orrs	r1, r2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f3a:	0212      	lsls	r2, r2, #8
 8001f3c:	4311      	orrs	r1, r2
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f42:	0852      	lsrs	r2, r2, #1
 8001f44:	3a01      	subs	r2, #1
 8001f46:	0552      	lsls	r2, r2, #21
 8001f48:	4311      	orrs	r1, r2
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f4e:	0852      	lsrs	r2, r2, #1
 8001f50:	3a01      	subs	r2, #1
 8001f52:	0652      	lsls	r2, r2, #25
 8001f54:	4311      	orrs	r1, r2
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f5a:	06d2      	lsls	r2, r2, #27
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	4912      	ldr	r1, [pc, #72]	; (8001fa8 <HAL_RCC_OscConfig+0x784>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f64:	4b10      	ldr	r3, [pc, #64]	; (8001fa8 <HAL_RCC_OscConfig+0x784>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a0f      	ldr	r2, [pc, #60]	; (8001fa8 <HAL_RCC_OscConfig+0x784>)
 8001f6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f70:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <HAL_RCC_OscConfig+0x784>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	4a0c      	ldr	r2, [pc, #48]	; (8001fa8 <HAL_RCC_OscConfig+0x784>)
 8001f76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f7c:	f7ff f874 	bl	8001068 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f84:	f7ff f870 	bl	8001068 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e058      	b.n	8002048 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f96:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <HAL_RCC_OscConfig+0x784>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0f0      	beq.n	8001f84 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fa2:	e050      	b.n	8002046 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e04f      	b.n	8002048 <HAL_RCC_OscConfig+0x824>
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fb0:	4b27      	ldr	r3, [pc, #156]	; (8002050 <HAL_RCC_OscConfig+0x82c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d144      	bne.n	8002046 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001fbc:	4b24      	ldr	r3, [pc, #144]	; (8002050 <HAL_RCC_OscConfig+0x82c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a23      	ldr	r2, [pc, #140]	; (8002050 <HAL_RCC_OscConfig+0x82c>)
 8001fc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fc6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fc8:	4b21      	ldr	r3, [pc, #132]	; (8002050 <HAL_RCC_OscConfig+0x82c>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	4a20      	ldr	r2, [pc, #128]	; (8002050 <HAL_RCC_OscConfig+0x82c>)
 8001fce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fd2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fd4:	f7ff f848 	bl	8001068 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fdc:	f7ff f844 	bl	8001068 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e02c      	b.n	8002048 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fee:	4b18      	ldr	r3, [pc, #96]	; (8002050 <HAL_RCC_OscConfig+0x82c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0f0      	beq.n	8001fdc <HAL_RCC_OscConfig+0x7b8>
 8001ffa:	e024      	b.n	8002046 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	2b0c      	cmp	r3, #12
 8002000:	d01f      	beq.n	8002042 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002002:	4b13      	ldr	r3, [pc, #76]	; (8002050 <HAL_RCC_OscConfig+0x82c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a12      	ldr	r2, [pc, #72]	; (8002050 <HAL_RCC_OscConfig+0x82c>)
 8002008:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800200c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200e:	f7ff f82b 	bl	8001068 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002016:	f7ff f827 	bl	8001068 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e00f      	b.n	8002048 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002028:	4b09      	ldr	r3, [pc, #36]	; (8002050 <HAL_RCC_OscConfig+0x82c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1f0      	bne.n	8002016 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <HAL_RCC_OscConfig+0x82c>)
 8002036:	68da      	ldr	r2, [r3, #12]
 8002038:	4905      	ldr	r1, [pc, #20]	; (8002050 <HAL_RCC_OscConfig+0x82c>)
 800203a:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_RCC_OscConfig+0x830>)
 800203c:	4013      	ands	r3, r2
 800203e:	60cb      	str	r3, [r1, #12]
 8002040:	e001      	b.n	8002046 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3720      	adds	r7, #32
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40021000 	.word	0x40021000
 8002054:	feeefffc 	.word	0xfeeefffc

08002058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e0e7      	b.n	800223c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800206c:	4b75      	ldr	r3, [pc, #468]	; (8002244 <HAL_RCC_ClockConfig+0x1ec>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d910      	bls.n	800209c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207a:	4b72      	ldr	r3, [pc, #456]	; (8002244 <HAL_RCC_ClockConfig+0x1ec>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f023 0207 	bic.w	r2, r3, #7
 8002082:	4970      	ldr	r1, [pc, #448]	; (8002244 <HAL_RCC_ClockConfig+0x1ec>)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	4313      	orrs	r3, r2
 8002088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800208a:	4b6e      	ldr	r3, [pc, #440]	; (8002244 <HAL_RCC_ClockConfig+0x1ec>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d001      	beq.n	800209c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e0cf      	b.n	800223c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d010      	beq.n	80020ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	4b66      	ldr	r3, [pc, #408]	; (8002248 <HAL_RCC_ClockConfig+0x1f0>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d908      	bls.n	80020ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b8:	4b63      	ldr	r3, [pc, #396]	; (8002248 <HAL_RCC_ClockConfig+0x1f0>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	4960      	ldr	r1, [pc, #384]	; (8002248 <HAL_RCC_ClockConfig+0x1f0>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d04c      	beq.n	8002170 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b03      	cmp	r3, #3
 80020dc:	d107      	bne.n	80020ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020de:	4b5a      	ldr	r3, [pc, #360]	; (8002248 <HAL_RCC_ClockConfig+0x1f0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d121      	bne.n	800212e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e0a6      	b.n	800223c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d107      	bne.n	8002106 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020f6:	4b54      	ldr	r3, [pc, #336]	; (8002248 <HAL_RCC_ClockConfig+0x1f0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d115      	bne.n	800212e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e09a      	b.n	800223c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d107      	bne.n	800211e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800210e:	4b4e      	ldr	r3, [pc, #312]	; (8002248 <HAL_RCC_ClockConfig+0x1f0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d109      	bne.n	800212e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e08e      	b.n	800223c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800211e:	4b4a      	ldr	r3, [pc, #296]	; (8002248 <HAL_RCC_ClockConfig+0x1f0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e086      	b.n	800223c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800212e:	4b46      	ldr	r3, [pc, #280]	; (8002248 <HAL_RCC_ClockConfig+0x1f0>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f023 0203 	bic.w	r2, r3, #3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	4943      	ldr	r1, [pc, #268]	; (8002248 <HAL_RCC_ClockConfig+0x1f0>)
 800213c:	4313      	orrs	r3, r2
 800213e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002140:	f7fe ff92 	bl	8001068 <HAL_GetTick>
 8002144:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002146:	e00a      	b.n	800215e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002148:	f7fe ff8e 	bl	8001068 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	f241 3288 	movw	r2, #5000	; 0x1388
 8002156:	4293      	cmp	r3, r2
 8002158:	d901      	bls.n	800215e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e06e      	b.n	800223c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215e:	4b3a      	ldr	r3, [pc, #232]	; (8002248 <HAL_RCC_ClockConfig+0x1f0>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 020c 	and.w	r2, r3, #12
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	429a      	cmp	r2, r3
 800216e:	d1eb      	bne.n	8002148 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d010      	beq.n	800219e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	4b31      	ldr	r3, [pc, #196]	; (8002248 <HAL_RCC_ClockConfig+0x1f0>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002188:	429a      	cmp	r2, r3
 800218a:	d208      	bcs.n	800219e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800218c:	4b2e      	ldr	r3, [pc, #184]	; (8002248 <HAL_RCC_ClockConfig+0x1f0>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	492b      	ldr	r1, [pc, #172]	; (8002248 <HAL_RCC_ClockConfig+0x1f0>)
 800219a:	4313      	orrs	r3, r2
 800219c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800219e:	4b29      	ldr	r3, [pc, #164]	; (8002244 <HAL_RCC_ClockConfig+0x1ec>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d210      	bcs.n	80021ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ac:	4b25      	ldr	r3, [pc, #148]	; (8002244 <HAL_RCC_ClockConfig+0x1ec>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f023 0207 	bic.w	r2, r3, #7
 80021b4:	4923      	ldr	r1, [pc, #140]	; (8002244 <HAL_RCC_ClockConfig+0x1ec>)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021bc:	4b21      	ldr	r3, [pc, #132]	; (8002244 <HAL_RCC_ClockConfig+0x1ec>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d001      	beq.n	80021ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e036      	b.n	800223c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0304 	and.w	r3, r3, #4
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d008      	beq.n	80021ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021da:	4b1b      	ldr	r3, [pc, #108]	; (8002248 <HAL_RCC_ClockConfig+0x1f0>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	4918      	ldr	r1, [pc, #96]	; (8002248 <HAL_RCC_ClockConfig+0x1f0>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0308 	and.w	r3, r3, #8
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d009      	beq.n	800220c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021f8:	4b13      	ldr	r3, [pc, #76]	; (8002248 <HAL_RCC_ClockConfig+0x1f0>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	4910      	ldr	r1, [pc, #64]	; (8002248 <HAL_RCC_ClockConfig+0x1f0>)
 8002208:	4313      	orrs	r3, r2
 800220a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800220c:	f000 f824 	bl	8002258 <HAL_RCC_GetSysClockFreq>
 8002210:	4602      	mov	r2, r0
 8002212:	4b0d      	ldr	r3, [pc, #52]	; (8002248 <HAL_RCC_ClockConfig+0x1f0>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	091b      	lsrs	r3, r3, #4
 8002218:	f003 030f 	and.w	r3, r3, #15
 800221c:	490b      	ldr	r1, [pc, #44]	; (800224c <HAL_RCC_ClockConfig+0x1f4>)
 800221e:	5ccb      	ldrb	r3, [r1, r3]
 8002220:	f003 031f 	and.w	r3, r3, #31
 8002224:	fa22 f303 	lsr.w	r3, r2, r3
 8002228:	4a09      	ldr	r2, [pc, #36]	; (8002250 <HAL_RCC_ClockConfig+0x1f8>)
 800222a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800222c:	4b09      	ldr	r3, [pc, #36]	; (8002254 <HAL_RCC_ClockConfig+0x1fc>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f7fe fec9 	bl	8000fc8 <HAL_InitTick>
 8002236:	4603      	mov	r3, r0
 8002238:	72fb      	strb	r3, [r7, #11]

  return status;
 800223a:	7afb      	ldrb	r3, [r7, #11]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40022000 	.word	0x40022000
 8002248:	40021000 	.word	0x40021000
 800224c:	08007754 	.word	0x08007754
 8002250:	20000028 	.word	0x20000028
 8002254:	2000002c 	.word	0x2000002c

08002258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002258:	b480      	push	{r7}
 800225a:	b089      	sub	sp, #36	; 0x24
 800225c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800225e:	2300      	movs	r3, #0
 8002260:	61fb      	str	r3, [r7, #28]
 8002262:	2300      	movs	r3, #0
 8002264:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002266:	4b3e      	ldr	r3, [pc, #248]	; (8002360 <HAL_RCC_GetSysClockFreq+0x108>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 030c 	and.w	r3, r3, #12
 800226e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002270:	4b3b      	ldr	r3, [pc, #236]	; (8002360 <HAL_RCC_GetSysClockFreq+0x108>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f003 0303 	and.w	r3, r3, #3
 8002278:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d005      	beq.n	800228c <HAL_RCC_GetSysClockFreq+0x34>
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	2b0c      	cmp	r3, #12
 8002284:	d121      	bne.n	80022ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d11e      	bne.n	80022ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800228c:	4b34      	ldr	r3, [pc, #208]	; (8002360 <HAL_RCC_GetSysClockFreq+0x108>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b00      	cmp	r3, #0
 8002296:	d107      	bne.n	80022a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002298:	4b31      	ldr	r3, [pc, #196]	; (8002360 <HAL_RCC_GetSysClockFreq+0x108>)
 800229a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800229e:	0a1b      	lsrs	r3, r3, #8
 80022a0:	f003 030f 	and.w	r3, r3, #15
 80022a4:	61fb      	str	r3, [r7, #28]
 80022a6:	e005      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022a8:	4b2d      	ldr	r3, [pc, #180]	; (8002360 <HAL_RCC_GetSysClockFreq+0x108>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	091b      	lsrs	r3, r3, #4
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022b4:	4a2b      	ldr	r2, [pc, #172]	; (8002364 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10d      	bne.n	80022e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022c8:	e00a      	b.n	80022e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	2b04      	cmp	r3, #4
 80022ce:	d102      	bne.n	80022d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022d0:	4b25      	ldr	r3, [pc, #148]	; (8002368 <HAL_RCC_GetSysClockFreq+0x110>)
 80022d2:	61bb      	str	r3, [r7, #24]
 80022d4:	e004      	b.n	80022e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d101      	bne.n	80022e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022dc:	4b23      	ldr	r3, [pc, #140]	; (800236c <HAL_RCC_GetSysClockFreq+0x114>)
 80022de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	2b0c      	cmp	r3, #12
 80022e4:	d134      	bne.n	8002350 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022e6:	4b1e      	ldr	r3, [pc, #120]	; (8002360 <HAL_RCC_GetSysClockFreq+0x108>)
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d003      	beq.n	80022fe <HAL_RCC_GetSysClockFreq+0xa6>
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	2b03      	cmp	r3, #3
 80022fa:	d003      	beq.n	8002304 <HAL_RCC_GetSysClockFreq+0xac>
 80022fc:	e005      	b.n	800230a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022fe:	4b1a      	ldr	r3, [pc, #104]	; (8002368 <HAL_RCC_GetSysClockFreq+0x110>)
 8002300:	617b      	str	r3, [r7, #20]
      break;
 8002302:	e005      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002304:	4b19      	ldr	r3, [pc, #100]	; (800236c <HAL_RCC_GetSysClockFreq+0x114>)
 8002306:	617b      	str	r3, [r7, #20]
      break;
 8002308:	e002      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	617b      	str	r3, [r7, #20]
      break;
 800230e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002310:	4b13      	ldr	r3, [pc, #76]	; (8002360 <HAL_RCC_GetSysClockFreq+0x108>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	091b      	lsrs	r3, r3, #4
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	3301      	adds	r3, #1
 800231c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800231e:	4b10      	ldr	r3, [pc, #64]	; (8002360 <HAL_RCC_GetSysClockFreq+0x108>)
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	0a1b      	lsrs	r3, r3, #8
 8002324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	fb03 f202 	mul.w	r2, r3, r2
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	fbb2 f3f3 	udiv	r3, r2, r3
 8002334:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002336:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <HAL_RCC_GetSysClockFreq+0x108>)
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	0e5b      	lsrs	r3, r3, #25
 800233c:	f003 0303 	and.w	r3, r3, #3
 8002340:	3301      	adds	r3, #1
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	fbb2 f3f3 	udiv	r3, r2, r3
 800234e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002350:	69bb      	ldr	r3, [r7, #24]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3724      	adds	r7, #36	; 0x24
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40021000 	.word	0x40021000
 8002364:	0800776c 	.word	0x0800776c
 8002368:	00f42400 	.word	0x00f42400
 800236c:	007a1200 	.word	0x007a1200

08002370 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002374:	4b03      	ldr	r3, [pc, #12]	; (8002384 <HAL_RCC_GetHCLKFreq+0x14>)
 8002376:	681b      	ldr	r3, [r3, #0]
}
 8002378:	4618      	mov	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	20000028 	.word	0x20000028

08002388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800238c:	f7ff fff0 	bl	8002370 <HAL_RCC_GetHCLKFreq>
 8002390:	4602      	mov	r2, r0
 8002392:	4b06      	ldr	r3, [pc, #24]	; (80023ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	0a1b      	lsrs	r3, r3, #8
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	4904      	ldr	r1, [pc, #16]	; (80023b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800239e:	5ccb      	ldrb	r3, [r1, r3]
 80023a0:	f003 031f 	and.w	r3, r3, #31
 80023a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40021000 	.word	0x40021000
 80023b0:	08007764 	.word	0x08007764

080023b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023b8:	f7ff ffda 	bl	8002370 <HAL_RCC_GetHCLKFreq>
 80023bc:	4602      	mov	r2, r0
 80023be:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	0adb      	lsrs	r3, r3, #11
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	4904      	ldr	r1, [pc, #16]	; (80023dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80023ca:	5ccb      	ldrb	r3, [r1, r3]
 80023cc:	f003 031f 	and.w	r3, r3, #31
 80023d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40021000 	.word	0x40021000
 80023dc:	08007764 	.word	0x08007764

080023e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023e8:	2300      	movs	r3, #0
 80023ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023ec:	4b2a      	ldr	r3, [pc, #168]	; (8002498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023f8:	f7ff f9a0 	bl	800173c <HAL_PWREx_GetVoltageRange>
 80023fc:	6178      	str	r0, [r7, #20]
 80023fe:	e014      	b.n	800242a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002400:	4b25      	ldr	r3, [pc, #148]	; (8002498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002404:	4a24      	ldr	r2, [pc, #144]	; (8002498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240a:	6593      	str	r3, [r2, #88]	; 0x58
 800240c:	4b22      	ldr	r3, [pc, #136]	; (8002498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800240e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002418:	f7ff f990 	bl	800173c <HAL_PWREx_GetVoltageRange>
 800241c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800241e:	4b1e      	ldr	r3, [pc, #120]	; (8002498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002422:	4a1d      	ldr	r2, [pc, #116]	; (8002498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002424:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002428:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002430:	d10b      	bne.n	800244a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b80      	cmp	r3, #128	; 0x80
 8002436:	d919      	bls.n	800246c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2ba0      	cmp	r3, #160	; 0xa0
 800243c:	d902      	bls.n	8002444 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800243e:	2302      	movs	r3, #2
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	e013      	b.n	800246c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002444:	2301      	movs	r3, #1
 8002446:	613b      	str	r3, [r7, #16]
 8002448:	e010      	b.n	800246c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b80      	cmp	r3, #128	; 0x80
 800244e:	d902      	bls.n	8002456 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002450:	2303      	movs	r3, #3
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	e00a      	b.n	800246c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b80      	cmp	r3, #128	; 0x80
 800245a:	d102      	bne.n	8002462 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800245c:	2302      	movs	r3, #2
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	e004      	b.n	800246c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b70      	cmp	r3, #112	; 0x70
 8002466:	d101      	bne.n	800246c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002468:	2301      	movs	r3, #1
 800246a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800246c:	4b0b      	ldr	r3, [pc, #44]	; (800249c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f023 0207 	bic.w	r2, r3, #7
 8002474:	4909      	ldr	r1, [pc, #36]	; (800249c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800247c:	4b07      	ldr	r3, [pc, #28]	; (800249c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	429a      	cmp	r2, r3
 8002488:	d001      	beq.n	800248e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40021000 	.word	0x40021000
 800249c:	40022000 	.word	0x40022000

080024a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024a8:	2300      	movs	r3, #0
 80024aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024ac:	2300      	movs	r3, #0
 80024ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d041      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024c4:	d02a      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80024c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024ca:	d824      	bhi.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024d0:	d008      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80024d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024d6:	d81e      	bhi.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00a      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80024dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024e0:	d010      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80024e2:	e018      	b.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024e4:	4b86      	ldr	r3, [pc, #536]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4a85      	ldr	r2, [pc, #532]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024f0:	e015      	b.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3304      	adds	r3, #4
 80024f6:	2100      	movs	r1, #0
 80024f8:	4618      	mov	r0, r3
 80024fa:	f000 facd 	bl	8002a98 <RCCEx_PLLSAI1_Config>
 80024fe:	4603      	mov	r3, r0
 8002500:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002502:	e00c      	b.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3320      	adds	r3, #32
 8002508:	2100      	movs	r1, #0
 800250a:	4618      	mov	r0, r3
 800250c:	f000 fbb6 	bl	8002c7c <RCCEx_PLLSAI2_Config>
 8002510:	4603      	mov	r3, r0
 8002512:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002514:	e003      	b.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	74fb      	strb	r3, [r7, #19]
      break;
 800251a:	e000      	b.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800251c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800251e:	7cfb      	ldrb	r3, [r7, #19]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10b      	bne.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002524:	4b76      	ldr	r3, [pc, #472]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002532:	4973      	ldr	r1, [pc, #460]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002534:	4313      	orrs	r3, r2
 8002536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800253a:	e001      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800253c:	7cfb      	ldrb	r3, [r7, #19]
 800253e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d041      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002550:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002554:	d02a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002556:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800255a:	d824      	bhi.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800255c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002560:	d008      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002562:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002566:	d81e      	bhi.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00a      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800256c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002570:	d010      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002572:	e018      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002574:	4b62      	ldr	r3, [pc, #392]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	4a61      	ldr	r2, [pc, #388]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800257a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800257e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002580:	e015      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3304      	adds	r3, #4
 8002586:	2100      	movs	r1, #0
 8002588:	4618      	mov	r0, r3
 800258a:	f000 fa85 	bl	8002a98 <RCCEx_PLLSAI1_Config>
 800258e:	4603      	mov	r3, r0
 8002590:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002592:	e00c      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3320      	adds	r3, #32
 8002598:	2100      	movs	r1, #0
 800259a:	4618      	mov	r0, r3
 800259c:	f000 fb6e 	bl	8002c7c <RCCEx_PLLSAI2_Config>
 80025a0:	4603      	mov	r3, r0
 80025a2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025a4:	e003      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	74fb      	strb	r3, [r7, #19]
      break;
 80025aa:	e000      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80025ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025ae:	7cfb      	ldrb	r3, [r7, #19]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10b      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025b4:	4b52      	ldr	r3, [pc, #328]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025c2:	494f      	ldr	r1, [pc, #316]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025ca:	e001      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025cc:	7cfb      	ldrb	r3, [r7, #19]
 80025ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 80a0 	beq.w	800271e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025de:	2300      	movs	r3, #0
 80025e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025e2:	4b47      	ldr	r3, [pc, #284]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80025f2:	2300      	movs	r3, #0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00d      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025f8:	4b41      	ldr	r3, [pc, #260]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fc:	4a40      	ldr	r2, [pc, #256]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002602:	6593      	str	r3, [r2, #88]	; 0x58
 8002604:	4b3e      	ldr	r3, [pc, #248]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002610:	2301      	movs	r3, #1
 8002612:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002614:	4b3b      	ldr	r3, [pc, #236]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a3a      	ldr	r2, [pc, #232]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800261a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800261e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002620:	f7fe fd22 	bl	8001068 <HAL_GetTick>
 8002624:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002626:	e009      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002628:	f7fe fd1e 	bl	8001068 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d902      	bls.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	74fb      	strb	r3, [r7, #19]
        break;
 800263a:	e005      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800263c:	4b31      	ldr	r3, [pc, #196]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0ef      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002648:	7cfb      	ldrb	r3, [r7, #19]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d15c      	bne.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800264e:	4b2c      	ldr	r3, [pc, #176]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002654:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002658:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d01f      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	429a      	cmp	r2, r3
 800266a:	d019      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800266c:	4b24      	ldr	r3, [pc, #144]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800266e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002676:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002678:	4b21      	ldr	r3, [pc, #132]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800267a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800267e:	4a20      	ldr	r2, [pc, #128]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002684:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002688:	4b1d      	ldr	r3, [pc, #116]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800268a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268e:	4a1c      	ldr	r2, [pc, #112]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002698:	4a19      	ldr	r2, [pc, #100]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d016      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026aa:	f7fe fcdd 	bl	8001068 <HAL_GetTick>
 80026ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026b0:	e00b      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b2:	f7fe fcd9 	bl	8001068 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d902      	bls.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	74fb      	strb	r3, [r7, #19]
            break;
 80026c8:	e006      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ca:	4b0d      	ldr	r3, [pc, #52]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0ec      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80026d8:	7cfb      	ldrb	r3, [r7, #19]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10c      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026de:	4b08      	ldr	r3, [pc, #32]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ee:	4904      	ldr	r1, [pc, #16]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80026f6:	e009      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026f8:	7cfb      	ldrb	r3, [r7, #19]
 80026fa:	74bb      	strb	r3, [r7, #18]
 80026fc:	e006      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80026fe:	bf00      	nop
 8002700:	40021000 	.word	0x40021000
 8002704:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002708:	7cfb      	ldrb	r3, [r7, #19]
 800270a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800270c:	7c7b      	ldrb	r3, [r7, #17]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d105      	bne.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002712:	4ba6      	ldr	r3, [pc, #664]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002716:	4aa5      	ldr	r2, [pc, #660]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800271c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00a      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800272a:	4ba0      	ldr	r3, [pc, #640]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800272c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002730:	f023 0203 	bic.w	r2, r3, #3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002738:	499c      	ldr	r1, [pc, #624]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800273a:	4313      	orrs	r3, r2
 800273c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00a      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800274c:	4b97      	ldr	r3, [pc, #604]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800274e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002752:	f023 020c 	bic.w	r2, r3, #12
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275a:	4994      	ldr	r1, [pc, #592]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800275c:	4313      	orrs	r3, r2
 800275e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0304 	and.w	r3, r3, #4
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00a      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800276e:	4b8f      	ldr	r3, [pc, #572]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002774:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	498b      	ldr	r1, [pc, #556]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800277e:	4313      	orrs	r3, r2
 8002780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0308 	and.w	r3, r3, #8
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00a      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002790:	4b86      	ldr	r3, [pc, #536]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002796:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	4983      	ldr	r1, [pc, #524]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0310 	and.w	r3, r3, #16
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00a      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027b2:	4b7e      	ldr	r3, [pc, #504]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c0:	497a      	ldr	r1, [pc, #488]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0320 	and.w	r3, r3, #32
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00a      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027d4:	4b75      	ldr	r3, [pc, #468]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e2:	4972      	ldr	r1, [pc, #456]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00a      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027f6:	4b6d      	ldr	r3, [pc, #436]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002804:	4969      	ldr	r1, [pc, #420]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00a      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002818:	4b64      	ldr	r3, [pc, #400]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002826:	4961      	ldr	r1, [pc, #388]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800283a:	4b5c      	ldr	r3, [pc, #368]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800283c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002840:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002848:	4958      	ldr	r1, [pc, #352]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800284a:	4313      	orrs	r3, r2
 800284c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00a      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800285c:	4b53      	ldr	r3, [pc, #332]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800285e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002862:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286a:	4950      	ldr	r1, [pc, #320]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800287e:	4b4b      	ldr	r3, [pc, #300]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002884:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288c:	4947      	ldr	r1, [pc, #284]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00a      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028a0:	4b42      	ldr	r3, [pc, #264]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028a6:	f023 0203 	bic.w	r2, r3, #3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ae:	493f      	ldr	r1, [pc, #252]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d028      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028c2:	4b3a      	ldr	r3, [pc, #232]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d0:	4936      	ldr	r1, [pc, #216]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028e0:	d106      	bne.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028e2:	4b32      	ldr	r3, [pc, #200]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	4a31      	ldr	r2, [pc, #196]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ec:	60d3      	str	r3, [r2, #12]
 80028ee:	e011      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028f8:	d10c      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3304      	adds	r3, #4
 80028fe:	2101      	movs	r1, #1
 8002900:	4618      	mov	r0, r3
 8002902:	f000 f8c9 	bl	8002a98 <RCCEx_PLLSAI1_Config>
 8002906:	4603      	mov	r3, r0
 8002908:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800290a:	7cfb      	ldrb	r3, [r7, #19]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002910:	7cfb      	ldrb	r3, [r7, #19]
 8002912:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d028      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002920:	4b22      	ldr	r3, [pc, #136]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002926:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800292e:	491f      	ldr	r1, [pc, #124]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002930:	4313      	orrs	r3, r2
 8002932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800293a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800293e:	d106      	bne.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002940:	4b1a      	ldr	r3, [pc, #104]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	4a19      	ldr	r2, [pc, #100]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002946:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800294a:	60d3      	str	r3, [r2, #12]
 800294c:	e011      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002952:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002956:	d10c      	bne.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3304      	adds	r3, #4
 800295c:	2101      	movs	r1, #1
 800295e:	4618      	mov	r0, r3
 8002960:	f000 f89a 	bl	8002a98 <RCCEx_PLLSAI1_Config>
 8002964:	4603      	mov	r3, r0
 8002966:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002968:	7cfb      	ldrb	r3, [r7, #19]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800296e:	7cfb      	ldrb	r3, [r7, #19]
 8002970:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d02a      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800297e:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002984:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800298c:	4907      	ldr	r1, [pc, #28]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800298e:	4313      	orrs	r3, r2
 8002990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002998:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800299c:	d108      	bne.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800299e:	4b03      	ldr	r3, [pc, #12]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	4a02      	ldr	r2, [pc, #8]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029a8:	60d3      	str	r3, [r2, #12]
 80029aa:	e013      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80029ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029b8:	d10c      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3304      	adds	r3, #4
 80029be:	2101      	movs	r1, #1
 80029c0:	4618      	mov	r0, r3
 80029c2:	f000 f869 	bl	8002a98 <RCCEx_PLLSAI1_Config>
 80029c6:	4603      	mov	r3, r0
 80029c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029ca:	7cfb      	ldrb	r3, [r7, #19]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80029d0:	7cfb      	ldrb	r3, [r7, #19]
 80029d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d02f      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029e0:	4b2c      	ldr	r3, [pc, #176]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80029e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029ee:	4929      	ldr	r1, [pc, #164]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029fe:	d10d      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3304      	adds	r3, #4
 8002a04:	2102      	movs	r1, #2
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 f846 	bl	8002a98 <RCCEx_PLLSAI1_Config>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a10:	7cfb      	ldrb	r3, [r7, #19]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d014      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002a16:	7cfb      	ldrb	r3, [r7, #19]
 8002a18:	74bb      	strb	r3, [r7, #18]
 8002a1a:	e011      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a24:	d10c      	bne.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3320      	adds	r3, #32
 8002a2a:	2102      	movs	r1, #2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f000 f925 	bl	8002c7c <RCCEx_PLLSAI2_Config>
 8002a32:	4603      	mov	r3, r0
 8002a34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a36:	7cfb      	ldrb	r3, [r7, #19]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002a3c:	7cfb      	ldrb	r3, [r7, #19]
 8002a3e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00b      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a4c:	4b11      	ldr	r3, [pc, #68]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a52:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a5c:	490d      	ldr	r1, [pc, #52]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00b      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a70:	4b08      	ldr	r3, [pc, #32]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a80:	4904      	ldr	r1, [pc, #16]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a88:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40021000 	.word	0x40021000

08002a98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002aa6:	4b74      	ldr	r3, [pc, #464]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d018      	beq.n	8002ae4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ab2:	4b71      	ldr	r3, [pc, #452]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f003 0203 	and.w	r2, r3, #3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d10d      	bne.n	8002ade <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
       ||
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d009      	beq.n	8002ade <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002aca:	4b6b      	ldr	r3, [pc, #428]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	091b      	lsrs	r3, r3, #4
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
       ||
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d047      	beq.n	8002b6e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	73fb      	strb	r3, [r7, #15]
 8002ae2:	e044      	b.n	8002b6e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b03      	cmp	r3, #3
 8002aea:	d018      	beq.n	8002b1e <RCCEx_PLLSAI1_Config+0x86>
 8002aec:	2b03      	cmp	r3, #3
 8002aee:	d825      	bhi.n	8002b3c <RCCEx_PLLSAI1_Config+0xa4>
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d002      	beq.n	8002afa <RCCEx_PLLSAI1_Config+0x62>
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d009      	beq.n	8002b0c <RCCEx_PLLSAI1_Config+0x74>
 8002af8:	e020      	b.n	8002b3c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002afa:	4b5f      	ldr	r3, [pc, #380]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d11d      	bne.n	8002b42 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b0a:	e01a      	b.n	8002b42 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b0c:	4b5a      	ldr	r3, [pc, #360]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d116      	bne.n	8002b46 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b1c:	e013      	b.n	8002b46 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b1e:	4b56      	ldr	r3, [pc, #344]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10f      	bne.n	8002b4a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b2a:	4b53      	ldr	r3, [pc, #332]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d109      	bne.n	8002b4a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b3a:	e006      	b.n	8002b4a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b40:	e004      	b.n	8002b4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b42:	bf00      	nop
 8002b44:	e002      	b.n	8002b4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b46:	bf00      	nop
 8002b48:	e000      	b.n	8002b4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10d      	bne.n	8002b6e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b52:	4b49      	ldr	r3, [pc, #292]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6819      	ldr	r1, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	011b      	lsls	r3, r3, #4
 8002b66:	430b      	orrs	r3, r1
 8002b68:	4943      	ldr	r1, [pc, #268]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d17c      	bne.n	8002c6e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b74:	4b40      	ldr	r3, [pc, #256]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a3f      	ldr	r2, [pc, #252]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b80:	f7fe fa72 	bl	8001068 <HAL_GetTick>
 8002b84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b86:	e009      	b.n	8002b9c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b88:	f7fe fa6e 	bl	8001068 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d902      	bls.n	8002b9c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	73fb      	strb	r3, [r7, #15]
        break;
 8002b9a:	e005      	b.n	8002ba8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b9c:	4b36      	ldr	r3, [pc, #216]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1ef      	bne.n	8002b88 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d15f      	bne.n	8002c6e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d110      	bne.n	8002bd6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bb4:	4b30      	ldr	r3, [pc, #192]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002bbc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6892      	ldr	r2, [r2, #8]
 8002bc4:	0211      	lsls	r1, r2, #8
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	68d2      	ldr	r2, [r2, #12]
 8002bca:	06d2      	lsls	r2, r2, #27
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	492a      	ldr	r1, [pc, #168]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	610b      	str	r3, [r1, #16]
 8002bd4:	e027      	b.n	8002c26 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d112      	bne.n	8002c02 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bdc:	4b26      	ldr	r3, [pc, #152]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002be4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	6892      	ldr	r2, [r2, #8]
 8002bec:	0211      	lsls	r1, r2, #8
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6912      	ldr	r2, [r2, #16]
 8002bf2:	0852      	lsrs	r2, r2, #1
 8002bf4:	3a01      	subs	r2, #1
 8002bf6:	0552      	lsls	r2, r2, #21
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	491f      	ldr	r1, [pc, #124]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	610b      	str	r3, [r1, #16]
 8002c00:	e011      	b.n	8002c26 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c02:	4b1d      	ldr	r3, [pc, #116]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c0a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6892      	ldr	r2, [r2, #8]
 8002c12:	0211      	lsls	r1, r2, #8
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6952      	ldr	r2, [r2, #20]
 8002c18:	0852      	lsrs	r2, r2, #1
 8002c1a:	3a01      	subs	r2, #1
 8002c1c:	0652      	lsls	r2, r2, #25
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	4915      	ldr	r1, [pc, #84]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c26:	4b14      	ldr	r3, [pc, #80]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a13      	ldr	r2, [pc, #76]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c30:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c32:	f7fe fa19 	bl	8001068 <HAL_GetTick>
 8002c36:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c38:	e009      	b.n	8002c4e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c3a:	f7fe fa15 	bl	8001068 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d902      	bls.n	8002c4e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	73fb      	strb	r3, [r7, #15]
          break;
 8002c4c:	e005      	b.n	8002c5a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0ef      	beq.n	8002c3a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d106      	bne.n	8002c6e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c62:	691a      	ldr	r2, [r3, #16]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	4903      	ldr	r1, [pc, #12]	; (8002c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40021000 	.word	0x40021000

08002c7c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c86:	2300      	movs	r3, #0
 8002c88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c8a:	4b69      	ldr	r3, [pc, #420]	; (8002e30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d018      	beq.n	8002cc8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c96:	4b66      	ldr	r3, [pc, #408]	; (8002e30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f003 0203 	and.w	r2, r3, #3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d10d      	bne.n	8002cc2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
       ||
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d009      	beq.n	8002cc2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002cae:	4b60      	ldr	r3, [pc, #384]	; (8002e30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	091b      	lsrs	r3, r3, #4
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
       ||
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d047      	beq.n	8002d52 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	73fb      	strb	r3, [r7, #15]
 8002cc6:	e044      	b.n	8002d52 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	d018      	beq.n	8002d02 <RCCEx_PLLSAI2_Config+0x86>
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	d825      	bhi.n	8002d20 <RCCEx_PLLSAI2_Config+0xa4>
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d002      	beq.n	8002cde <RCCEx_PLLSAI2_Config+0x62>
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d009      	beq.n	8002cf0 <RCCEx_PLLSAI2_Config+0x74>
 8002cdc:	e020      	b.n	8002d20 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cde:	4b54      	ldr	r3, [pc, #336]	; (8002e30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d11d      	bne.n	8002d26 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cee:	e01a      	b.n	8002d26 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cf0:	4b4f      	ldr	r3, [pc, #316]	; (8002e30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d116      	bne.n	8002d2a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d00:	e013      	b.n	8002d2a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d02:	4b4b      	ldr	r3, [pc, #300]	; (8002e30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10f      	bne.n	8002d2e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d0e:	4b48      	ldr	r3, [pc, #288]	; (8002e30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d109      	bne.n	8002d2e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d1e:	e006      	b.n	8002d2e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	73fb      	strb	r3, [r7, #15]
      break;
 8002d24:	e004      	b.n	8002d30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d26:	bf00      	nop
 8002d28:	e002      	b.n	8002d30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d2a:	bf00      	nop
 8002d2c:	e000      	b.n	8002d30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10d      	bne.n	8002d52 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d36:	4b3e      	ldr	r3, [pc, #248]	; (8002e30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6819      	ldr	r1, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	3b01      	subs	r3, #1
 8002d48:	011b      	lsls	r3, r3, #4
 8002d4a:	430b      	orrs	r3, r1
 8002d4c:	4938      	ldr	r1, [pc, #224]	; (8002e30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d166      	bne.n	8002e26 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d58:	4b35      	ldr	r3, [pc, #212]	; (8002e30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a34      	ldr	r2, [pc, #208]	; (8002e30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d64:	f7fe f980 	bl	8001068 <HAL_GetTick>
 8002d68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d6a:	e009      	b.n	8002d80 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d6c:	f7fe f97c 	bl	8001068 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d902      	bls.n	8002d80 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	73fb      	strb	r3, [r7, #15]
        break;
 8002d7e:	e005      	b.n	8002d8c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d80:	4b2b      	ldr	r3, [pc, #172]	; (8002e30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1ef      	bne.n	8002d6c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d149      	bne.n	8002e26 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d110      	bne.n	8002dba <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d98:	4b25      	ldr	r3, [pc, #148]	; (8002e30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002da0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6892      	ldr	r2, [r2, #8]
 8002da8:	0211      	lsls	r1, r2, #8
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	68d2      	ldr	r2, [r2, #12]
 8002dae:	06d2      	lsls	r2, r2, #27
 8002db0:	430a      	orrs	r2, r1
 8002db2:	491f      	ldr	r1, [pc, #124]	; (8002e30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	614b      	str	r3, [r1, #20]
 8002db8:	e011      	b.n	8002dde <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002dba:	4b1d      	ldr	r3, [pc, #116]	; (8002e30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002dc2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6892      	ldr	r2, [r2, #8]
 8002dca:	0211      	lsls	r1, r2, #8
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6912      	ldr	r2, [r2, #16]
 8002dd0:	0852      	lsrs	r2, r2, #1
 8002dd2:	3a01      	subs	r2, #1
 8002dd4:	0652      	lsls	r2, r2, #25
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	4915      	ldr	r1, [pc, #84]	; (8002e30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002dde:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a13      	ldr	r2, [pc, #76]	; (8002e30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dea:	f7fe f93d 	bl	8001068 <HAL_GetTick>
 8002dee:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002df0:	e009      	b.n	8002e06 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002df2:	f7fe f939 	bl	8001068 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d902      	bls.n	8002e06 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	73fb      	strb	r3, [r7, #15]
          break;
 8002e04:	e005      	b.n	8002e12 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e06:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0ef      	beq.n	8002df2 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d106      	bne.n	8002e26 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e18:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e1a:	695a      	ldr	r2, [r3, #20]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	4903      	ldr	r1, [pc, #12]	; (8002e30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40021000 	.word	0x40021000

08002e34 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e038      	b.n	8002ebc <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d106      	bne.n	8002e64 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f7fd ff98 	bl	8000d94 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	3308      	adds	r3, #8
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4610      	mov	r0, r2
 8002e70:	f001 fba2 	bl	80045b8 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6818      	ldr	r0, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	68b9      	ldr	r1, [r7, #8]
 8002e80:	f001 fc2a 	bl	80046d8 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6858      	ldr	r0, [r3, #4]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	f001 fc71 	bl	8004778 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	6892      	ldr	r2, [r2, #8]
 8002e9e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	6892      	ldr	r2, [r2, #8]
 8002eaa:	f041 0101 	orr.w	r1, r1, #1
 8002eae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e040      	b.n	8002f58 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d106      	bne.n	8002eec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7fd fe90 	bl	8000c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2224      	movs	r2, #36	; 0x24
 8002ef0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0201 	bic.w	r2, r2, #1
 8002f00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 fc18 	bl	8003738 <UART_SetConfig>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e022      	b.n	8002f58 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d002      	beq.n	8002f20 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 fec4 	bl	8003ca8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 0201 	orr.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 ff4b 	bl	8003dec <UART_CheckIdleState>
 8002f56:	4603      	mov	r3, r0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b08a      	sub	sp, #40	; 0x28
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	603b      	str	r3, [r7, #0]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f74:	2b20      	cmp	r3, #32
 8002f76:	f040 8082 	bne.w	800307e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d002      	beq.n	8002f86 <HAL_UART_Transmit+0x26>
 8002f80:	88fb      	ldrh	r3, [r7, #6]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e07a      	b.n	8003080 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <HAL_UART_Transmit+0x38>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e073      	b.n	8003080 <HAL_UART_Transmit+0x120>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2221      	movs	r2, #33	; 0x21
 8002fac:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fae:	f7fe f85b 	bl	8001068 <HAL_GetTick>
 8002fb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	88fa      	ldrh	r2, [r7, #6]
 8002fb8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	88fa      	ldrh	r2, [r7, #6]
 8002fc0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fcc:	d108      	bne.n	8002fe0 <HAL_UART_Transmit+0x80>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d104      	bne.n	8002fe0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	61bb      	str	r3, [r7, #24]
 8002fde:	e003      	b.n	8002fe8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002ff0:	e02d      	b.n	800304e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2180      	movs	r1, #128	; 0x80
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 ff3e 	bl	8003e7e <UART_WaitOnFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e039      	b.n	8003080 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10b      	bne.n	800302a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	881a      	ldrh	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800301e:	b292      	uxth	r2, r2
 8003020:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	3302      	adds	r3, #2
 8003026:	61bb      	str	r3, [r7, #24]
 8003028:	e008      	b.n	800303c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	781a      	ldrb	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	b292      	uxth	r2, r2
 8003034:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	3301      	adds	r3, #1
 800303a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003042:	b29b      	uxth	r3, r3
 8003044:	3b01      	subs	r3, #1
 8003046:	b29a      	uxth	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1cb      	bne.n	8002ff2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2200      	movs	r2, #0
 8003062:	2140      	movs	r1, #64	; 0x40
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 ff0a 	bl	8003e7e <UART_WaitOnFlagUntilTimeout>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e005      	b.n	8003080 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2220      	movs	r2, #32
 8003078:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	e000      	b.n	8003080 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800307e:	2302      	movs	r3, #2
  }
}
 8003080:	4618      	mov	r0, r3
 8003082:	3720      	adds	r7, #32
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b08a      	sub	sp, #40	; 0x28
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	4613      	mov	r3, r2
 8003094:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800309a:	2b20      	cmp	r3, #32
 800309c:	d142      	bne.n	8003124 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d002      	beq.n	80030aa <HAL_UART_Receive_IT+0x22>
 80030a4:	88fb      	ldrh	r3, [r7, #6]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e03b      	b.n	8003126 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <HAL_UART_Receive_IT+0x34>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e034      	b.n	8003126 <HAL_UART_Receive_IT+0x9e>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a18      	ldr	r2, [pc, #96]	; (8003130 <HAL_UART_Receive_IT+0xa8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d01f      	beq.n	8003114 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d018      	beq.n	8003114 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	e853 3f00 	ldrex	r3, [r3]
 80030ee:	613b      	str	r3, [r7, #16]
   return(result);
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	623b      	str	r3, [r7, #32]
 8003102:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003104:	69f9      	ldr	r1, [r7, #28]
 8003106:	6a3a      	ldr	r2, [r7, #32]
 8003108:	e841 2300 	strex	r3, r2, [r1]
 800310c:	61bb      	str	r3, [r7, #24]
   return(result);
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1e6      	bne.n	80030e2 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003114:	88fb      	ldrh	r3, [r7, #6]
 8003116:	461a      	mov	r2, r3
 8003118:	68b9      	ldr	r1, [r7, #8]
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 ff74 	bl	8004008 <UART_Start_Receive_IT>
 8003120:	4603      	mov	r3, r0
 8003122:	e000      	b.n	8003126 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003124:	2302      	movs	r3, #2
  }
}
 8003126:	4618      	mov	r0, r3
 8003128:	3728      	adds	r7, #40	; 0x28
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40008000 	.word	0x40008000

08003134 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b0ba      	sub	sp, #232	; 0xe8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800315a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800315e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003162:	4013      	ands	r3, r2
 8003164:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003168:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800316c:	2b00      	cmp	r3, #0
 800316e:	d115      	bne.n	800319c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003174:	f003 0320 	and.w	r3, r3, #32
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00f      	beq.n	800319c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800317c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003180:	f003 0320 	and.w	r3, r3, #32
 8003184:	2b00      	cmp	r3, #0
 8003186:	d009      	beq.n	800319c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 82a6 	beq.w	80036de <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	4798      	blx	r3
      }
      return;
 800319a:	e2a0      	b.n	80036de <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800319c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 8117 	beq.w	80033d4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80031a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d106      	bne.n	80031c0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80031b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80031b6:	4b85      	ldr	r3, [pc, #532]	; (80033cc <HAL_UART_IRQHandler+0x298>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 810a 	beq.w	80033d4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80031c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d011      	beq.n	80031f0 <HAL_UART_IRQHandler+0xbc>
 80031cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00b      	beq.n	80031f0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2201      	movs	r2, #1
 80031de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031e6:	f043 0201 	orr.w	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d011      	beq.n	8003220 <HAL_UART_IRQHandler+0xec>
 80031fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00b      	beq.n	8003220 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2202      	movs	r2, #2
 800320e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003216:	f043 0204 	orr.w	r2, r3, #4
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d011      	beq.n	8003250 <HAL_UART_IRQHandler+0x11c>
 800322c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00b      	beq.n	8003250 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2204      	movs	r2, #4
 800323e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003246:	f043 0202 	orr.w	r2, r3, #2
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003254:	f003 0308 	and.w	r3, r3, #8
 8003258:	2b00      	cmp	r3, #0
 800325a:	d017      	beq.n	800328c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800325c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003260:	f003 0320 	and.w	r3, r3, #32
 8003264:	2b00      	cmp	r3, #0
 8003266:	d105      	bne.n	8003274 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800326c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00b      	beq.n	800328c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2208      	movs	r2, #8
 800327a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003282:	f043 0208 	orr.w	r2, r3, #8
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800328c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003294:	2b00      	cmp	r3, #0
 8003296:	d012      	beq.n	80032be <HAL_UART_IRQHandler+0x18a>
 8003298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800329c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00c      	beq.n	80032be <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032b4:	f043 0220 	orr.w	r2, r3, #32
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 820c 	beq.w	80036e2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80032ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ce:	f003 0320 	and.w	r3, r3, #32
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00d      	beq.n	80032f2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032da:	f003 0320 	and.w	r3, r3, #32
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d007      	beq.n	80032f2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003306:	2b40      	cmp	r3, #64	; 0x40
 8003308:	d005      	beq.n	8003316 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800330a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800330e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003312:	2b00      	cmp	r3, #0
 8003314:	d04f      	beq.n	80033b6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 ff40 	bl	800419c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003326:	2b40      	cmp	r3, #64	; 0x40
 8003328:	d141      	bne.n	80033ae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	3308      	adds	r3, #8
 8003330:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003334:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003338:	e853 3f00 	ldrex	r3, [r3]
 800333c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003340:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003348:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	3308      	adds	r3, #8
 8003352:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003356:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800335a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003362:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003366:	e841 2300 	strex	r3, r2, [r1]
 800336a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800336e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1d9      	bne.n	800332a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337a:	2b00      	cmp	r3, #0
 800337c:	d013      	beq.n	80033a6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003382:	4a13      	ldr	r2, [pc, #76]	; (80033d0 <HAL_UART_IRQHandler+0x29c>)
 8003384:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338a:	4618      	mov	r0, r3
 800338c:	f7fd ffeb 	bl	8001366 <HAL_DMA_Abort_IT>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d017      	beq.n	80033c6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80033a0:	4610      	mov	r0, r2
 80033a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a4:	e00f      	b.n	80033c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f9b0 	bl	800370c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ac:	e00b      	b.n	80033c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 f9ac 	bl	800370c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b4:	e007      	b.n	80033c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f9a8 	bl	800370c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80033c4:	e18d      	b.n	80036e2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c6:	bf00      	nop
    return;
 80033c8:	e18b      	b.n	80036e2 <HAL_UART_IRQHandler+0x5ae>
 80033ca:	bf00      	nop
 80033cc:	04000120 	.word	0x04000120
 80033d0:	08004263 	.word	0x08004263

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d8:	2b01      	cmp	r3, #1
 80033da:	f040 8146 	bne.w	800366a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80033de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 813f 	beq.w	800366a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80033ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033f0:	f003 0310 	and.w	r3, r3, #16
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 8138 	beq.w	800366a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2210      	movs	r2, #16
 8003400:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340c:	2b40      	cmp	r3, #64	; 0x40
 800340e:	f040 80b4 	bne.w	800357a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800341e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 815f 	beq.w	80036e6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800342e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003432:	429a      	cmp	r2, r3
 8003434:	f080 8157 	bcs.w	80036e6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800343e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0320 	and.w	r3, r3, #32
 800344e:	2b00      	cmp	r3, #0
 8003450:	f040 8085 	bne.w	800355e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003460:	e853 3f00 	ldrex	r3, [r3]
 8003464:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003468:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800346c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003470:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	461a      	mov	r2, r3
 800347a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800347e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003482:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003486:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800348a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800348e:	e841 2300 	strex	r3, r2, [r1]
 8003492:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003496:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1da      	bne.n	8003454 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	3308      	adds	r3, #8
 80034a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034a8:	e853 3f00 	ldrex	r3, [r3]
 80034ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80034ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034b0:	f023 0301 	bic.w	r3, r3, #1
 80034b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3308      	adds	r3, #8
 80034be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80034c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80034ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80034ce:	e841 2300 	strex	r3, r2, [r1]
 80034d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80034d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1e1      	bne.n	800349e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	3308      	adds	r3, #8
 80034e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034e4:	e853 3f00 	ldrex	r3, [r3]
 80034e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80034ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	3308      	adds	r3, #8
 80034fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80034fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003500:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003502:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003504:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003506:	e841 2300 	strex	r3, r2, [r1]
 800350a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800350c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1e3      	bne.n	80034da <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2220      	movs	r2, #32
 8003516:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003526:	e853 3f00 	ldrex	r3, [r3]
 800352a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800352c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800352e:	f023 0310 	bic.w	r3, r3, #16
 8003532:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	461a      	mov	r2, r3
 800353c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003540:	65bb      	str	r3, [r7, #88]	; 0x58
 8003542:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003544:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003546:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003548:	e841 2300 	strex	r3, r2, [r1]
 800354c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800354e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1e4      	bne.n	800351e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003558:	4618      	mov	r0, r3
 800355a:	f7fd fec6 	bl	80012ea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800356a:	b29b      	uxth	r3, r3
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	b29b      	uxth	r3, r3
 8003570:	4619      	mov	r1, r3
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f8d4 	bl	8003720 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003578:	e0b5      	b.n	80036e6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003586:	b29b      	uxth	r3, r3
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 80a7 	beq.w	80036ea <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800359c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 80a2 	beq.w	80036ea <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ae:	e853 3f00 	ldrex	r3, [r3]
 80035b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80035b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	461a      	mov	r2, r3
 80035c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80035c8:	647b      	str	r3, [r7, #68]	; 0x44
 80035ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035d0:	e841 2300 	strex	r3, r2, [r1]
 80035d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1e4      	bne.n	80035a6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	3308      	adds	r3, #8
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e6:	e853 3f00 	ldrex	r3, [r3]
 80035ea:	623b      	str	r3, [r7, #32]
   return(result);
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	f023 0301 	bic.w	r3, r3, #1
 80035f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	3308      	adds	r3, #8
 80035fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003600:	633a      	str	r2, [r7, #48]	; 0x30
 8003602:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003604:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003608:	e841 2300 	strex	r3, r2, [r1]
 800360c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800360e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1e3      	bne.n	80035dc <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2220      	movs	r2, #32
 8003618:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	e853 3f00 	ldrex	r3, [r3]
 8003632:	60fb      	str	r3, [r7, #12]
   return(result);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f023 0310 	bic.w	r3, r3, #16
 800363a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	461a      	mov	r2, r3
 8003644:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003648:	61fb      	str	r3, [r7, #28]
 800364a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364c:	69b9      	ldr	r1, [r7, #24]
 800364e:	69fa      	ldr	r2, [r7, #28]
 8003650:	e841 2300 	strex	r3, r2, [r1]
 8003654:	617b      	str	r3, [r7, #20]
   return(result);
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1e4      	bne.n	8003626 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800365c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003660:	4619      	mov	r1, r3
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f85c 	bl	8003720 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003668:	e03f      	b.n	80036ea <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800366a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800366e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00e      	beq.n	8003694 <HAL_UART_IRQHandler+0x560>
 8003676:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800367a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d008      	beq.n	8003694 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800368a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 ff88 	bl	80045a2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003692:	e02d      	b.n	80036f0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00e      	beq.n	80036be <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80036a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d008      	beq.n	80036be <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d01c      	beq.n	80036ee <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	4798      	blx	r3
    }
    return;
 80036bc:	e017      	b.n	80036ee <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80036be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d012      	beq.n	80036f0 <HAL_UART_IRQHandler+0x5bc>
 80036ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00c      	beq.n	80036f0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 fdd9 	bl	800428e <UART_EndTransmit_IT>
    return;
 80036dc:	e008      	b.n	80036f0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80036de:	bf00      	nop
 80036e0:	e006      	b.n	80036f0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80036e2:	bf00      	nop
 80036e4:	e004      	b.n	80036f0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80036e6:	bf00      	nop
 80036e8:	e002      	b.n	80036f0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80036ea:	bf00      	nop
 80036ec:	e000      	b.n	80036f0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80036ee:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80036f0:	37e8      	adds	r7, #232	; 0xe8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop

080036f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003738:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800373c:	b08a      	sub	sp, #40	; 0x28
 800373e:	af00      	add	r7, sp, #0
 8003740:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	431a      	orrs	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	431a      	orrs	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	4313      	orrs	r3, r2
 800375e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	4ba4      	ldr	r3, [pc, #656]	; (80039f8 <UART_SetConfig+0x2c0>)
 8003768:	4013      	ands	r3, r2
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	6812      	ldr	r2, [r2, #0]
 800376e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003770:	430b      	orrs	r3, r1
 8003772:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a99      	ldr	r2, [pc, #612]	; (80039fc <UART_SetConfig+0x2c4>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d004      	beq.n	80037a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a0:	4313      	orrs	r3, r2
 80037a2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b4:	430a      	orrs	r2, r1
 80037b6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a90      	ldr	r2, [pc, #576]	; (8003a00 <UART_SetConfig+0x2c8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d126      	bne.n	8003810 <UART_SetConfig+0xd8>
 80037c2:	4b90      	ldr	r3, [pc, #576]	; (8003a04 <UART_SetConfig+0x2cc>)
 80037c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c8:	f003 0303 	and.w	r3, r3, #3
 80037cc:	2b03      	cmp	r3, #3
 80037ce:	d81b      	bhi.n	8003808 <UART_SetConfig+0xd0>
 80037d0:	a201      	add	r2, pc, #4	; (adr r2, 80037d8 <UART_SetConfig+0xa0>)
 80037d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d6:	bf00      	nop
 80037d8:	080037e9 	.word	0x080037e9
 80037dc:	080037f9 	.word	0x080037f9
 80037e0:	080037f1 	.word	0x080037f1
 80037e4:	08003801 	.word	0x08003801
 80037e8:	2301      	movs	r3, #1
 80037ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ee:	e116      	b.n	8003a1e <UART_SetConfig+0x2e6>
 80037f0:	2302      	movs	r3, #2
 80037f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037f6:	e112      	b.n	8003a1e <UART_SetConfig+0x2e6>
 80037f8:	2304      	movs	r3, #4
 80037fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037fe:	e10e      	b.n	8003a1e <UART_SetConfig+0x2e6>
 8003800:	2308      	movs	r3, #8
 8003802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003806:	e10a      	b.n	8003a1e <UART_SetConfig+0x2e6>
 8003808:	2310      	movs	r3, #16
 800380a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800380e:	e106      	b.n	8003a1e <UART_SetConfig+0x2e6>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a7c      	ldr	r2, [pc, #496]	; (8003a08 <UART_SetConfig+0x2d0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d138      	bne.n	800388c <UART_SetConfig+0x154>
 800381a:	4b7a      	ldr	r3, [pc, #488]	; (8003a04 <UART_SetConfig+0x2cc>)
 800381c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003820:	f003 030c 	and.w	r3, r3, #12
 8003824:	2b0c      	cmp	r3, #12
 8003826:	d82d      	bhi.n	8003884 <UART_SetConfig+0x14c>
 8003828:	a201      	add	r2, pc, #4	; (adr r2, 8003830 <UART_SetConfig+0xf8>)
 800382a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382e:	bf00      	nop
 8003830:	08003865 	.word	0x08003865
 8003834:	08003885 	.word	0x08003885
 8003838:	08003885 	.word	0x08003885
 800383c:	08003885 	.word	0x08003885
 8003840:	08003875 	.word	0x08003875
 8003844:	08003885 	.word	0x08003885
 8003848:	08003885 	.word	0x08003885
 800384c:	08003885 	.word	0x08003885
 8003850:	0800386d 	.word	0x0800386d
 8003854:	08003885 	.word	0x08003885
 8003858:	08003885 	.word	0x08003885
 800385c:	08003885 	.word	0x08003885
 8003860:	0800387d 	.word	0x0800387d
 8003864:	2300      	movs	r3, #0
 8003866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800386a:	e0d8      	b.n	8003a1e <UART_SetConfig+0x2e6>
 800386c:	2302      	movs	r3, #2
 800386e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003872:	e0d4      	b.n	8003a1e <UART_SetConfig+0x2e6>
 8003874:	2304      	movs	r3, #4
 8003876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800387a:	e0d0      	b.n	8003a1e <UART_SetConfig+0x2e6>
 800387c:	2308      	movs	r3, #8
 800387e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003882:	e0cc      	b.n	8003a1e <UART_SetConfig+0x2e6>
 8003884:	2310      	movs	r3, #16
 8003886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800388a:	e0c8      	b.n	8003a1e <UART_SetConfig+0x2e6>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a5e      	ldr	r2, [pc, #376]	; (8003a0c <UART_SetConfig+0x2d4>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d125      	bne.n	80038e2 <UART_SetConfig+0x1aa>
 8003896:	4b5b      	ldr	r3, [pc, #364]	; (8003a04 <UART_SetConfig+0x2cc>)
 8003898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80038a0:	2b30      	cmp	r3, #48	; 0x30
 80038a2:	d016      	beq.n	80038d2 <UART_SetConfig+0x19a>
 80038a4:	2b30      	cmp	r3, #48	; 0x30
 80038a6:	d818      	bhi.n	80038da <UART_SetConfig+0x1a2>
 80038a8:	2b20      	cmp	r3, #32
 80038aa:	d00a      	beq.n	80038c2 <UART_SetConfig+0x18a>
 80038ac:	2b20      	cmp	r3, #32
 80038ae:	d814      	bhi.n	80038da <UART_SetConfig+0x1a2>
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <UART_SetConfig+0x182>
 80038b4:	2b10      	cmp	r3, #16
 80038b6:	d008      	beq.n	80038ca <UART_SetConfig+0x192>
 80038b8:	e00f      	b.n	80038da <UART_SetConfig+0x1a2>
 80038ba:	2300      	movs	r3, #0
 80038bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038c0:	e0ad      	b.n	8003a1e <UART_SetConfig+0x2e6>
 80038c2:	2302      	movs	r3, #2
 80038c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038c8:	e0a9      	b.n	8003a1e <UART_SetConfig+0x2e6>
 80038ca:	2304      	movs	r3, #4
 80038cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038d0:	e0a5      	b.n	8003a1e <UART_SetConfig+0x2e6>
 80038d2:	2308      	movs	r3, #8
 80038d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038d8:	e0a1      	b.n	8003a1e <UART_SetConfig+0x2e6>
 80038da:	2310      	movs	r3, #16
 80038dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038e0:	e09d      	b.n	8003a1e <UART_SetConfig+0x2e6>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a4a      	ldr	r2, [pc, #296]	; (8003a10 <UART_SetConfig+0x2d8>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d125      	bne.n	8003938 <UART_SetConfig+0x200>
 80038ec:	4b45      	ldr	r3, [pc, #276]	; (8003a04 <UART_SetConfig+0x2cc>)
 80038ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80038f6:	2bc0      	cmp	r3, #192	; 0xc0
 80038f8:	d016      	beq.n	8003928 <UART_SetConfig+0x1f0>
 80038fa:	2bc0      	cmp	r3, #192	; 0xc0
 80038fc:	d818      	bhi.n	8003930 <UART_SetConfig+0x1f8>
 80038fe:	2b80      	cmp	r3, #128	; 0x80
 8003900:	d00a      	beq.n	8003918 <UART_SetConfig+0x1e0>
 8003902:	2b80      	cmp	r3, #128	; 0x80
 8003904:	d814      	bhi.n	8003930 <UART_SetConfig+0x1f8>
 8003906:	2b00      	cmp	r3, #0
 8003908:	d002      	beq.n	8003910 <UART_SetConfig+0x1d8>
 800390a:	2b40      	cmp	r3, #64	; 0x40
 800390c:	d008      	beq.n	8003920 <UART_SetConfig+0x1e8>
 800390e:	e00f      	b.n	8003930 <UART_SetConfig+0x1f8>
 8003910:	2300      	movs	r3, #0
 8003912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003916:	e082      	b.n	8003a1e <UART_SetConfig+0x2e6>
 8003918:	2302      	movs	r3, #2
 800391a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800391e:	e07e      	b.n	8003a1e <UART_SetConfig+0x2e6>
 8003920:	2304      	movs	r3, #4
 8003922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003926:	e07a      	b.n	8003a1e <UART_SetConfig+0x2e6>
 8003928:	2308      	movs	r3, #8
 800392a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800392e:	e076      	b.n	8003a1e <UART_SetConfig+0x2e6>
 8003930:	2310      	movs	r3, #16
 8003932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003936:	e072      	b.n	8003a1e <UART_SetConfig+0x2e6>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a35      	ldr	r2, [pc, #212]	; (8003a14 <UART_SetConfig+0x2dc>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d12a      	bne.n	8003998 <UART_SetConfig+0x260>
 8003942:	4b30      	ldr	r3, [pc, #192]	; (8003a04 <UART_SetConfig+0x2cc>)
 8003944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003948:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800394c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003950:	d01a      	beq.n	8003988 <UART_SetConfig+0x250>
 8003952:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003956:	d81b      	bhi.n	8003990 <UART_SetConfig+0x258>
 8003958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800395c:	d00c      	beq.n	8003978 <UART_SetConfig+0x240>
 800395e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003962:	d815      	bhi.n	8003990 <UART_SetConfig+0x258>
 8003964:	2b00      	cmp	r3, #0
 8003966:	d003      	beq.n	8003970 <UART_SetConfig+0x238>
 8003968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800396c:	d008      	beq.n	8003980 <UART_SetConfig+0x248>
 800396e:	e00f      	b.n	8003990 <UART_SetConfig+0x258>
 8003970:	2300      	movs	r3, #0
 8003972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003976:	e052      	b.n	8003a1e <UART_SetConfig+0x2e6>
 8003978:	2302      	movs	r3, #2
 800397a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800397e:	e04e      	b.n	8003a1e <UART_SetConfig+0x2e6>
 8003980:	2304      	movs	r3, #4
 8003982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003986:	e04a      	b.n	8003a1e <UART_SetConfig+0x2e6>
 8003988:	2308      	movs	r3, #8
 800398a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800398e:	e046      	b.n	8003a1e <UART_SetConfig+0x2e6>
 8003990:	2310      	movs	r3, #16
 8003992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003996:	e042      	b.n	8003a1e <UART_SetConfig+0x2e6>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a17      	ldr	r2, [pc, #92]	; (80039fc <UART_SetConfig+0x2c4>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d13a      	bne.n	8003a18 <UART_SetConfig+0x2e0>
 80039a2:	4b18      	ldr	r3, [pc, #96]	; (8003a04 <UART_SetConfig+0x2cc>)
 80039a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80039ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039b0:	d01a      	beq.n	80039e8 <UART_SetConfig+0x2b0>
 80039b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039b6:	d81b      	bhi.n	80039f0 <UART_SetConfig+0x2b8>
 80039b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039bc:	d00c      	beq.n	80039d8 <UART_SetConfig+0x2a0>
 80039be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039c2:	d815      	bhi.n	80039f0 <UART_SetConfig+0x2b8>
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <UART_SetConfig+0x298>
 80039c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039cc:	d008      	beq.n	80039e0 <UART_SetConfig+0x2a8>
 80039ce:	e00f      	b.n	80039f0 <UART_SetConfig+0x2b8>
 80039d0:	2300      	movs	r3, #0
 80039d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039d6:	e022      	b.n	8003a1e <UART_SetConfig+0x2e6>
 80039d8:	2302      	movs	r3, #2
 80039da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039de:	e01e      	b.n	8003a1e <UART_SetConfig+0x2e6>
 80039e0:	2304      	movs	r3, #4
 80039e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039e6:	e01a      	b.n	8003a1e <UART_SetConfig+0x2e6>
 80039e8:	2308      	movs	r3, #8
 80039ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ee:	e016      	b.n	8003a1e <UART_SetConfig+0x2e6>
 80039f0:	2310      	movs	r3, #16
 80039f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039f6:	e012      	b.n	8003a1e <UART_SetConfig+0x2e6>
 80039f8:	efff69f3 	.word	0xefff69f3
 80039fc:	40008000 	.word	0x40008000
 8003a00:	40013800 	.word	0x40013800
 8003a04:	40021000 	.word	0x40021000
 8003a08:	40004400 	.word	0x40004400
 8003a0c:	40004800 	.word	0x40004800
 8003a10:	40004c00 	.word	0x40004c00
 8003a14:	40005000 	.word	0x40005000
 8003a18:	2310      	movs	r3, #16
 8003a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a9f      	ldr	r2, [pc, #636]	; (8003ca0 <UART_SetConfig+0x568>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d17a      	bne.n	8003b1e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d824      	bhi.n	8003a7a <UART_SetConfig+0x342>
 8003a30:	a201      	add	r2, pc, #4	; (adr r2, 8003a38 <UART_SetConfig+0x300>)
 8003a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a36:	bf00      	nop
 8003a38:	08003a5d 	.word	0x08003a5d
 8003a3c:	08003a7b 	.word	0x08003a7b
 8003a40:	08003a65 	.word	0x08003a65
 8003a44:	08003a7b 	.word	0x08003a7b
 8003a48:	08003a6b 	.word	0x08003a6b
 8003a4c:	08003a7b 	.word	0x08003a7b
 8003a50:	08003a7b 	.word	0x08003a7b
 8003a54:	08003a7b 	.word	0x08003a7b
 8003a58:	08003a73 	.word	0x08003a73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a5c:	f7fe fc94 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 8003a60:	61f8      	str	r0, [r7, #28]
        break;
 8003a62:	e010      	b.n	8003a86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a64:	4b8f      	ldr	r3, [pc, #572]	; (8003ca4 <UART_SetConfig+0x56c>)
 8003a66:	61fb      	str	r3, [r7, #28]
        break;
 8003a68:	e00d      	b.n	8003a86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a6a:	f7fe fbf5 	bl	8002258 <HAL_RCC_GetSysClockFreq>
 8003a6e:	61f8      	str	r0, [r7, #28]
        break;
 8003a70:	e009      	b.n	8003a86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a76:	61fb      	str	r3, [r7, #28]
        break;
 8003a78:	e005      	b.n	8003a86 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a84:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 80fb 	beq.w	8003c84 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	4413      	add	r3, r2
 8003a98:	69fa      	ldr	r2, [r7, #28]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d305      	bcc.n	8003aaa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003aa4:	69fa      	ldr	r2, [r7, #28]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d903      	bls.n	8003ab2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ab0:	e0e8      	b.n	8003c84 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	461c      	mov	r4, r3
 8003ab8:	4615      	mov	r5, r2
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	f04f 0300 	mov.w	r3, #0
 8003ac2:	022b      	lsls	r3, r5, #8
 8003ac4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003ac8:	0222      	lsls	r2, r4, #8
 8003aca:	68f9      	ldr	r1, [r7, #12]
 8003acc:	6849      	ldr	r1, [r1, #4]
 8003ace:	0849      	lsrs	r1, r1, #1
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	4688      	mov	r8, r1
 8003ad4:	4681      	mov	r9, r0
 8003ad6:	eb12 0a08 	adds.w	sl, r2, r8
 8003ada:	eb43 0b09 	adc.w	fp, r3, r9
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	603b      	str	r3, [r7, #0]
 8003ae6:	607a      	str	r2, [r7, #4]
 8003ae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003aec:	4650      	mov	r0, sl
 8003aee:	4659      	mov	r1, fp
 8003af0:	f7fc fbce 	bl	8000290 <__aeabi_uldivmod>
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	4613      	mov	r3, r2
 8003afa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b02:	d308      	bcc.n	8003b16 <UART_SetConfig+0x3de>
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b0a:	d204      	bcs.n	8003b16 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	60da      	str	r2, [r3, #12]
 8003b14:	e0b6      	b.n	8003c84 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b1c:	e0b2      	b.n	8003c84 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b26:	d15e      	bne.n	8003be6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003b28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d828      	bhi.n	8003b82 <UART_SetConfig+0x44a>
 8003b30:	a201      	add	r2, pc, #4	; (adr r2, 8003b38 <UART_SetConfig+0x400>)
 8003b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b36:	bf00      	nop
 8003b38:	08003b5d 	.word	0x08003b5d
 8003b3c:	08003b65 	.word	0x08003b65
 8003b40:	08003b6d 	.word	0x08003b6d
 8003b44:	08003b83 	.word	0x08003b83
 8003b48:	08003b73 	.word	0x08003b73
 8003b4c:	08003b83 	.word	0x08003b83
 8003b50:	08003b83 	.word	0x08003b83
 8003b54:	08003b83 	.word	0x08003b83
 8003b58:	08003b7b 	.word	0x08003b7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b5c:	f7fe fc14 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 8003b60:	61f8      	str	r0, [r7, #28]
        break;
 8003b62:	e014      	b.n	8003b8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b64:	f7fe fc26 	bl	80023b4 <HAL_RCC_GetPCLK2Freq>
 8003b68:	61f8      	str	r0, [r7, #28]
        break;
 8003b6a:	e010      	b.n	8003b8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b6c:	4b4d      	ldr	r3, [pc, #308]	; (8003ca4 <UART_SetConfig+0x56c>)
 8003b6e:	61fb      	str	r3, [r7, #28]
        break;
 8003b70:	e00d      	b.n	8003b8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b72:	f7fe fb71 	bl	8002258 <HAL_RCC_GetSysClockFreq>
 8003b76:	61f8      	str	r0, [r7, #28]
        break;
 8003b78:	e009      	b.n	8003b8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b7e:	61fb      	str	r3, [r7, #28]
        break;
 8003b80:	e005      	b.n	8003b8e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003b82:	2300      	movs	r3, #0
 8003b84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d077      	beq.n	8003c84 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	005a      	lsls	r2, r3, #1
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	085b      	lsrs	r3, r3, #1
 8003b9e:	441a      	add	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	2b0f      	cmp	r3, #15
 8003bae:	d916      	bls.n	8003bde <UART_SetConfig+0x4a6>
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb6:	d212      	bcs.n	8003bde <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	f023 030f 	bic.w	r3, r3, #15
 8003bc0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	085b      	lsrs	r3, r3, #1
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	8afb      	ldrh	r3, [r7, #22]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	8afa      	ldrh	r2, [r7, #22]
 8003bda:	60da      	str	r2, [r3, #12]
 8003bdc:	e052      	b.n	8003c84 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003be4:	e04e      	b.n	8003c84 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003be6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	d827      	bhi.n	8003c3e <UART_SetConfig+0x506>
 8003bee:	a201      	add	r2, pc, #4	; (adr r2, 8003bf4 <UART_SetConfig+0x4bc>)
 8003bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf4:	08003c19 	.word	0x08003c19
 8003bf8:	08003c21 	.word	0x08003c21
 8003bfc:	08003c29 	.word	0x08003c29
 8003c00:	08003c3f 	.word	0x08003c3f
 8003c04:	08003c2f 	.word	0x08003c2f
 8003c08:	08003c3f 	.word	0x08003c3f
 8003c0c:	08003c3f 	.word	0x08003c3f
 8003c10:	08003c3f 	.word	0x08003c3f
 8003c14:	08003c37 	.word	0x08003c37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c18:	f7fe fbb6 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 8003c1c:	61f8      	str	r0, [r7, #28]
        break;
 8003c1e:	e014      	b.n	8003c4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c20:	f7fe fbc8 	bl	80023b4 <HAL_RCC_GetPCLK2Freq>
 8003c24:	61f8      	str	r0, [r7, #28]
        break;
 8003c26:	e010      	b.n	8003c4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c28:	4b1e      	ldr	r3, [pc, #120]	; (8003ca4 <UART_SetConfig+0x56c>)
 8003c2a:	61fb      	str	r3, [r7, #28]
        break;
 8003c2c:	e00d      	b.n	8003c4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c2e:	f7fe fb13 	bl	8002258 <HAL_RCC_GetSysClockFreq>
 8003c32:	61f8      	str	r0, [r7, #28]
        break;
 8003c34:	e009      	b.n	8003c4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c3a:	61fb      	str	r3, [r7, #28]
        break;
 8003c3c:	e005      	b.n	8003c4a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c48:	bf00      	nop
    }

    if (pclk != 0U)
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d019      	beq.n	8003c84 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	085a      	lsrs	r2, r3, #1
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	441a      	add	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c62:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	2b0f      	cmp	r3, #15
 8003c68:	d909      	bls.n	8003c7e <UART_SetConfig+0x546>
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c70:	d205      	bcs.n	8003c7e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	60da      	str	r2, [r3, #12]
 8003c7c:	e002      	b.n	8003c84 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003c90:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3728      	adds	r7, #40	; 0x28
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40008000 	.word	0x40008000
 8003ca4:	00f42400 	.word	0x00f42400

08003ca8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00a      	beq.n	8003cd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00a      	beq.n	8003cf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00a      	beq.n	8003d16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	f003 0308 	and.w	r3, r3, #8
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00a      	beq.n	8003d38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	f003 0310 	and.w	r3, r3, #16
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00a      	beq.n	8003d5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	f003 0320 	and.w	r3, r3, #32
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00a      	beq.n	8003d7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d01a      	beq.n	8003dbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003da6:	d10a      	bne.n	8003dbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00a      	beq.n	8003de0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	605a      	str	r2, [r3, #4]
  }
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af02      	add	r7, sp, #8
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dfc:	f7fd f934 	bl	8001068 <HAL_GetTick>
 8003e00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0308 	and.w	r3, r3, #8
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d10e      	bne.n	8003e2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f82d 	bl	8003e7e <UART_WaitOnFlagUntilTimeout>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e023      	b.n	8003e76 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d10e      	bne.n	8003e5a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f817 	bl	8003e7e <UART_WaitOnFlagUntilTimeout>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e00d      	b.n	8003e76 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2220      	movs	r2, #32
 8003e64:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b09c      	sub	sp, #112	; 0x70
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	60f8      	str	r0, [r7, #12]
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	603b      	str	r3, [r7, #0]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e8e:	e0a5      	b.n	8003fdc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e96:	f000 80a1 	beq.w	8003fdc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e9a:	f7fd f8e5 	bl	8001068 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d302      	bcc.n	8003eb0 <UART_WaitOnFlagUntilTimeout+0x32>
 8003eaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d13e      	bne.n	8003f2e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eb8:	e853 3f00 	ldrex	r3, [r3]
 8003ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ec0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ec4:	667b      	str	r3, [r7, #100]	; 0x64
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ece:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ed0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ed4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ed6:	e841 2300 	strex	r3, r2, [r1]
 8003eda:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003edc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1e6      	bne.n	8003eb0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	3308      	adds	r3, #8
 8003ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eec:	e853 3f00 	ldrex	r3, [r3]
 8003ef0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef4:	f023 0301 	bic.w	r3, r3, #1
 8003ef8:	663b      	str	r3, [r7, #96]	; 0x60
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3308      	adds	r3, #8
 8003f00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f02:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f0a:	e841 2300 	strex	r3, r2, [r1]
 8003f0e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1e5      	bne.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e067      	b.n	8003ffe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d04f      	beq.n	8003fdc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f4a:	d147      	bne.n	8003fdc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f54:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5e:	e853 3f00 	ldrex	r3, [r3]
 8003f62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	461a      	mov	r2, r3
 8003f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f74:	637b      	str	r3, [r7, #52]	; 0x34
 8003f76:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f7c:	e841 2300 	strex	r3, r2, [r1]
 8003f80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1e6      	bne.n	8003f56 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3308      	adds	r3, #8
 8003f8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	e853 3f00 	ldrex	r3, [r3]
 8003f96:	613b      	str	r3, [r7, #16]
   return(result);
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	f023 0301 	bic.w	r3, r3, #1
 8003f9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	3308      	adds	r3, #8
 8003fa6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003fa8:	623a      	str	r2, [r7, #32]
 8003faa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fac:	69f9      	ldr	r1, [r7, #28]
 8003fae:	6a3a      	ldr	r2, [r7, #32]
 8003fb0:	e841 2300 	strex	r3, r2, [r1]
 8003fb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1e5      	bne.n	8003f88 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e010      	b.n	8003ffe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	69da      	ldr	r2, [r3, #28]
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	bf0c      	ite	eq
 8003fec:	2301      	moveq	r3, #1
 8003fee:	2300      	movne	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	79fb      	ldrb	r3, [r7, #7]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	f43f af4a 	beq.w	8003e90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3770      	adds	r7, #112	; 0x70
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
	...

08004008 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004008:	b480      	push	{r7}
 800400a:	b097      	sub	sp, #92	; 0x5c
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	4613      	mov	r3, r2
 8004014:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	88fa      	ldrh	r2, [r7, #6]
 8004020:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	88fa      	ldrh	r2, [r7, #6]
 8004028:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800403a:	d10e      	bne.n	800405a <UART_Start_Receive_IT+0x52>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d105      	bne.n	8004050 <UART_Start_Receive_IT+0x48>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f240 12ff 	movw	r2, #511	; 0x1ff
 800404a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800404e:	e02d      	b.n	80040ac <UART_Start_Receive_IT+0xa4>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	22ff      	movs	r2, #255	; 0xff
 8004054:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004058:	e028      	b.n	80040ac <UART_Start_Receive_IT+0xa4>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10d      	bne.n	800407e <UART_Start_Receive_IT+0x76>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d104      	bne.n	8004074 <UART_Start_Receive_IT+0x6c>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	22ff      	movs	r2, #255	; 0xff
 800406e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004072:	e01b      	b.n	80040ac <UART_Start_Receive_IT+0xa4>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	227f      	movs	r2, #127	; 0x7f
 8004078:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800407c:	e016      	b.n	80040ac <UART_Start_Receive_IT+0xa4>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004086:	d10d      	bne.n	80040a4 <UART_Start_Receive_IT+0x9c>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d104      	bne.n	800409a <UART_Start_Receive_IT+0x92>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	227f      	movs	r2, #127	; 0x7f
 8004094:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004098:	e008      	b.n	80040ac <UART_Start_Receive_IT+0xa4>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	223f      	movs	r2, #63	; 0x3f
 800409e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040a2:	e003      	b.n	80040ac <UART_Start_Receive_IT+0xa4>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2222      	movs	r2, #34	; 0x22
 80040b8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	3308      	adds	r3, #8
 80040c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040c4:	e853 3f00 	ldrex	r3, [r3]
 80040c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040cc:	f043 0301 	orr.w	r3, r3, #1
 80040d0:	657b      	str	r3, [r7, #84]	; 0x54
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3308      	adds	r3, #8
 80040d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040da:	64ba      	str	r2, [r7, #72]	; 0x48
 80040dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80040e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040e2:	e841 2300 	strex	r3, r2, [r1]
 80040e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80040e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1e5      	bne.n	80040ba <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f6:	d107      	bne.n	8004108 <UART_Start_Receive_IT+0x100>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d103      	bne.n	8004108 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4a24      	ldr	r2, [pc, #144]	; (8004194 <UART_Start_Receive_IT+0x18c>)
 8004104:	665a      	str	r2, [r3, #100]	; 0x64
 8004106:	e002      	b.n	800410e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4a23      	ldr	r2, [pc, #140]	; (8004198 <UART_Start_Receive_IT+0x190>)
 800410c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d019      	beq.n	8004152 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004126:	e853 3f00 	ldrex	r3, [r3]
 800412a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004132:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	461a      	mov	r2, r3
 800413a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800413c:	637b      	str	r3, [r7, #52]	; 0x34
 800413e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004140:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004144:	e841 2300 	strex	r3, r2, [r1]
 8004148:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800414a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1e6      	bne.n	800411e <UART_Start_Receive_IT+0x116>
 8004150:	e018      	b.n	8004184 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	e853 3f00 	ldrex	r3, [r3]
 800415e:	613b      	str	r3, [r7, #16]
   return(result);
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	f043 0320 	orr.w	r3, r3, #32
 8004166:	653b      	str	r3, [r7, #80]	; 0x50
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004170:	623b      	str	r3, [r7, #32]
 8004172:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004174:	69f9      	ldr	r1, [r7, #28]
 8004176:	6a3a      	ldr	r2, [r7, #32]
 8004178:	e841 2300 	strex	r3, r2, [r1]
 800417c:	61bb      	str	r3, [r7, #24]
   return(result);
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1e6      	bne.n	8004152 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	375c      	adds	r7, #92	; 0x5c
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	08004443 	.word	0x08004443
 8004198:	080042e3 	.word	0x080042e3

0800419c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800419c:	b480      	push	{r7}
 800419e:	b095      	sub	sp, #84	; 0x54
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ac:	e853 3f00 	ldrex	r3, [r3]
 80041b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	461a      	mov	r2, r3
 80041c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041c2:	643b      	str	r3, [r7, #64]	; 0x40
 80041c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041ca:	e841 2300 	strex	r3, r2, [r1]
 80041ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1e6      	bne.n	80041a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3308      	adds	r3, #8
 80041dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	e853 3f00 	ldrex	r3, [r3]
 80041e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	f023 0301 	bic.w	r3, r3, #1
 80041ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	3308      	adds	r3, #8
 80041f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041fe:	e841 2300 	strex	r3, r2, [r1]
 8004202:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1e5      	bne.n	80041d6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800420e:	2b01      	cmp	r3, #1
 8004210:	d118      	bne.n	8004244 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	e853 3f00 	ldrex	r3, [r3]
 800421e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	f023 0310 	bic.w	r3, r3, #16
 8004226:	647b      	str	r3, [r7, #68]	; 0x44
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	461a      	mov	r2, r3
 800422e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004230:	61bb      	str	r3, [r7, #24]
 8004232:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004234:	6979      	ldr	r1, [r7, #20]
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	e841 2300 	strex	r3, r2, [r1]
 800423c:	613b      	str	r3, [r7, #16]
   return(result);
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1e6      	bne.n	8004212 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2220      	movs	r2, #32
 8004248:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004256:	bf00      	nop
 8004258:	3754      	adds	r7, #84	; 0x54
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b084      	sub	sp, #16
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f7ff fa43 	bl	800370c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004286:	bf00      	nop
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b088      	sub	sp, #32
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	e853 3f00 	ldrex	r3, [r3]
 80042a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042aa:	61fb      	str	r3, [r7, #28]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	461a      	mov	r2, r3
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	61bb      	str	r3, [r7, #24]
 80042b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b8:	6979      	ldr	r1, [r7, #20]
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	e841 2300 	strex	r3, r2, [r1]
 80042c0:	613b      	str	r3, [r7, #16]
   return(result);
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1e6      	bne.n	8004296 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2220      	movs	r2, #32
 80042cc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f7ff fa0f 	bl	80036f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042da:	bf00      	nop
 80042dc:	3720      	adds	r7, #32
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b096      	sub	sp, #88	; 0x58
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80042f0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042f8:	2b22      	cmp	r3, #34	; 0x22
 80042fa:	f040 8094 	bne.w	8004426 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004304:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004308:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800430c:	b2d9      	uxtb	r1, r3
 800430e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004312:	b2da      	uxtb	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004318:	400a      	ands	r2, r1
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004322:	1c5a      	adds	r2, r3, #1
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800432e:	b29b      	uxth	r3, r3
 8004330:	3b01      	subs	r3, #1
 8004332:	b29a      	uxth	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004340:	b29b      	uxth	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d179      	bne.n	800443a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434e:	e853 3f00 	ldrex	r3, [r3]
 8004352:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004356:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800435a:	653b      	str	r3, [r7, #80]	; 0x50
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	461a      	mov	r2, r3
 8004362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004364:	647b      	str	r3, [r7, #68]	; 0x44
 8004366:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004368:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800436a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800436c:	e841 2300 	strex	r3, r2, [r1]
 8004370:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1e6      	bne.n	8004346 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	3308      	adds	r3, #8
 800437e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004382:	e853 3f00 	ldrex	r3, [r3]
 8004386:	623b      	str	r3, [r7, #32]
   return(result);
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	f023 0301 	bic.w	r3, r3, #1
 800438e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	3308      	adds	r3, #8
 8004396:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004398:	633a      	str	r2, [r7, #48]	; 0x30
 800439a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800439e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043a0:	e841 2300 	strex	r3, r2, [r1]
 80043a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1e5      	bne.n	8004378 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2220      	movs	r2, #32
 80043b0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d12e      	bne.n	800441e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	e853 3f00 	ldrex	r3, [r3]
 80043d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 0310 	bic.w	r3, r3, #16
 80043da:	64bb      	str	r3, [r7, #72]	; 0x48
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	461a      	mov	r2, r3
 80043e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043e4:	61fb      	str	r3, [r7, #28]
 80043e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e8:	69b9      	ldr	r1, [r7, #24]
 80043ea:	69fa      	ldr	r2, [r7, #28]
 80043ec:	e841 2300 	strex	r3, r2, [r1]
 80043f0:	617b      	str	r3, [r7, #20]
   return(result);
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1e6      	bne.n	80043c6 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	f003 0310 	and.w	r3, r3, #16
 8004402:	2b10      	cmp	r3, #16
 8004404:	d103      	bne.n	800440e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2210      	movs	r2, #16
 800440c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004414:	4619      	mov	r1, r3
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7ff f982 	bl	8003720 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800441c:	e00d      	b.n	800443a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7fc f8d8 	bl	80005d4 <HAL_UART_RxCpltCallback>
}
 8004424:	e009      	b.n	800443a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	8b1b      	ldrh	r3, [r3, #24]
 800442c:	b29a      	uxth	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f042 0208 	orr.w	r2, r2, #8
 8004436:	b292      	uxth	r2, r2
 8004438:	831a      	strh	r2, [r3, #24]
}
 800443a:	bf00      	nop
 800443c:	3758      	adds	r7, #88	; 0x58
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b096      	sub	sp, #88	; 0x58
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004450:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004458:	2b22      	cmp	r3, #34	; 0x22
 800445a:	f040 8094 	bne.w	8004586 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004464:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800446e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004472:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004476:	4013      	ands	r3, r2
 8004478:	b29a      	uxth	r2, r3
 800447a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800447c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004482:	1c9a      	adds	r2, r3, #2
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800448e:	b29b      	uxth	r3, r3
 8004490:	3b01      	subs	r3, #1
 8004492:	b29a      	uxth	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d179      	bne.n	800459a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ae:	e853 3f00 	ldrex	r3, [r3]
 80044b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	461a      	mov	r2, r3
 80044c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044c4:	643b      	str	r3, [r7, #64]	; 0x40
 80044c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044cc:	e841 2300 	strex	r3, r2, [r1]
 80044d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1e6      	bne.n	80044a6 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3308      	adds	r3, #8
 80044de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	e853 3f00 	ldrex	r3, [r3]
 80044e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	f023 0301 	bic.w	r3, r3, #1
 80044ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	3308      	adds	r3, #8
 80044f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004500:	e841 2300 	strex	r3, r2, [r1]
 8004504:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1e5      	bne.n	80044d8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2220      	movs	r2, #32
 8004510:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800451c:	2b01      	cmp	r3, #1
 800451e:	d12e      	bne.n	800457e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	e853 3f00 	ldrex	r3, [r3]
 8004532:	60bb      	str	r3, [r7, #8]
   return(result);
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f023 0310 	bic.w	r3, r3, #16
 800453a:	647b      	str	r3, [r7, #68]	; 0x44
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	461a      	mov	r2, r3
 8004542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004544:	61bb      	str	r3, [r7, #24]
 8004546:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004548:	6979      	ldr	r1, [r7, #20]
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	e841 2300 	strex	r3, r2, [r1]
 8004550:	613b      	str	r3, [r7, #16]
   return(result);
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1e6      	bne.n	8004526 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	f003 0310 	and.w	r3, r3, #16
 8004562:	2b10      	cmp	r3, #16
 8004564:	d103      	bne.n	800456e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2210      	movs	r2, #16
 800456c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004574:	4619      	mov	r1, r3
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7ff f8d2 	bl	8003720 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800457c:	e00d      	b.n	800459a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7fc f828 	bl	80005d4 <HAL_UART_RxCpltCallback>
}
 8004584:	e009      	b.n	800459a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	8b1b      	ldrh	r3, [r3, #24]
 800458c:	b29a      	uxth	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0208 	orr.w	r2, r2, #8
 8004596:	b292      	uxth	r2, r2
 8004598:	831a      	strh	r2, [r3, #24]
}
 800459a:	bf00      	nop
 800459c:	3758      	adds	r7, #88	; 0x58
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
	...

080045b8 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	6812      	ldr	r2, [r2, #0]
 80045d0:	f023 0101 	bic.w	r1, r3, #1
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	2b08      	cmp	r3, #8
 80045e0:	d102      	bne.n	80045e8 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80045e2:	2340      	movs	r3, #64	; 0x40
 80045e4:	617b      	str	r3, [r7, #20]
 80045e6:	e001      	b.n	80045ec <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80045e8:	2300      	movs	r3, #0
 80045ea:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80045f8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80045fe:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8004604:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800460a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8004610:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8004616:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800461c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8004622:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8004628:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800462e:	4313      	orrs	r3, r2
 8004630:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	4313      	orrs	r3, r2
 800463a:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	4313      	orrs	r3, r2
 8004644:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	4313      	orrs	r3, r2
 800464e:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8004650:	4b20      	ldr	r3, [pc, #128]	; (80046d4 <FMC_NORSRAM_Init+0x11c>)
 8004652:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800465a:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004662:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800466a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	43db      	mvns	r3, r3
 800467a:	ea02 0103 	and.w	r1, r2, r3
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	4319      	orrs	r1, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004690:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004694:	d10c      	bne.n	80046b0 <FMC_NORSRAM_Init+0xf8>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d008      	beq.n	80046b0 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d006      	beq.n	80046c6 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c0:	431a      	orrs	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	371c      	adds	r7, #28
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	0008fb7f 	.word	0x0008fb7f

080046d8 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80046d8:	b480      	push	{r7}
 80046da:	b087      	sub	sp, #28
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
                                                       ((Timing->BusTurnAroundDuration)  << FMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#else /* FMC_BTRx_DATAHLD */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	1c5a      	adds	r2, r3, #1
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046ee:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	431a      	orrs	r2, r3
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	021b      	lsls	r3, r3, #8
 8004704:	431a      	orrs	r2, r3
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	041b      	lsls	r3, r3, #16
 800470c:	431a      	orrs	r2, r3
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	3b01      	subs	r3, #1
 8004714:	051b      	lsls	r3, r3, #20
 8004716:	431a      	orrs	r2, r3
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	3b02      	subs	r3, #2
 800471e:	061b      	lsls	r3, r3, #24
 8004720:	431a      	orrs	r2, r3
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	4313      	orrs	r3, r2
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	3201      	adds	r2, #1
 800472c:	4319      	orrs	r1, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800473c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004740:	d113      	bne.n	800476a <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800474a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	3b01      	subs	r3, #1
 8004752:	051b      	lsls	r3, r3, #20
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	4313      	orrs	r3, r2
 8004758:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	431a      	orrs	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	371c      	adds	r7, #28
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
 8004784:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800478c:	d11d      	bne.n	80047ca <FMC_NORSRAM_Extended_Timing_Init+0x52>
                                                     ((Timing->DataSetupTime)          << FMC_BWTRx_DATAST_Pos)  |
                                                     ((Timing->DataHoldTime)           << FMC_BWTRx_DATAHLD_Pos) |
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#else /* FMC_BTRx_DATAHLD */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004796:	4b13      	ldr	r3, [pc, #76]	; (80047e4 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8004798:	4013      	ands	r3, r2
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	6811      	ldr	r1, [r2, #0]
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	6852      	ldr	r2, [r2, #4]
 80047a2:	0112      	lsls	r2, r2, #4
 80047a4:	4311      	orrs	r1, r2
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	6892      	ldr	r2, [r2, #8]
 80047aa:	0212      	lsls	r2, r2, #8
 80047ac:	4311      	orrs	r1, r2
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	69d2      	ldr	r2, [r2, #28]
 80047b2:	4311      	orrs	r1, r2
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	6912      	ldr	r2, [r2, #16]
 80047b8:	0412      	lsls	r2, r2, #16
 80047ba:	430a      	orrs	r2, r1
 80047bc:	ea43 0102 	orr.w	r1, r3, r2
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80047c8:	e005      	b.n	80047d6 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80047d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	cff00000 	.word	0xcff00000

080047e8 <loopback_tcps>:
#include "wizchip_conf.h"

#if LOOPBACK_MODE == LOOPBACK_MAIN_NOBLCOK

int32_t loopback_tcps(uint8_t sn, uint8_t* buf, uint16_t port)
{
 80047e8:	b5b0      	push	{r4, r5, r7, lr}
 80047ea:	b08a      	sub	sp, #40	; 0x28
 80047ec:	af04      	add	r7, sp, #16
 80047ee:	4603      	mov	r3, r0
 80047f0:	6039      	str	r1, [r7, #0]
 80047f2:	71fb      	strb	r3, [r7, #7]
 80047f4:	4613      	mov	r3, r2
 80047f6:	80bb      	strh	r3, [r7, #4]
   int32_t ret;
   uint16_t size = 0, sentsize=0;
 80047f8:	2300      	movs	r3, #0
 80047fa:	82fb      	strh	r3, [r7, #22]
 80047fc:	2300      	movs	r3, #0
 80047fe:	82bb      	strh	r3, [r7, #20]
#ifdef _LOOPBACK_DEBUG_
   uint8_t destip[4];
   uint16_t destport;
#endif

   switch(getSn_SR(sn))
 8004800:	79fb      	ldrb	r3, [r7, #7]
 8004802:	3308      	adds	r3, #8
 8004804:	019b      	lsls	r3, r3, #6
 8004806:	3308      	adds	r3, #8
 8004808:	4618      	mov	r0, r3
 800480a:	f000 f93f 	bl	8004a8c <WIZCHIP_READ>
 800480e:	4603      	mov	r3, r0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b1c      	cmp	r3, #28
 8004814:	f200 810a 	bhi.w	8004a2c <loopback_tcps+0x244>
 8004818:	a201      	add	r2, pc, #4	; (adr r2, 8004820 <loopback_tcps+0x38>)
 800481a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481e:	bf00      	nop
 8004820:	08004a11 	.word	0x08004a11
 8004824:	08004a2d 	.word	0x08004a2d
 8004828:	08004a2d 	.word	0x08004a2d
 800482c:	08004a2d 	.word	0x08004a2d
 8004830:	08004a2d 	.word	0x08004a2d
 8004834:	08004a2d 	.word	0x08004a2d
 8004838:	08004a2d 	.word	0x08004a2d
 800483c:	08004a2d 	.word	0x08004a2d
 8004840:	08004a2d 	.word	0x08004a2d
 8004844:	08004a2d 	.word	0x08004a2d
 8004848:	08004a2d 	.word	0x08004a2d
 800484c:	08004a2d 	.word	0x08004a2d
 8004850:	08004a2d 	.word	0x08004a2d
 8004854:	08004a2d 	.word	0x08004a2d
 8004858:	08004a2d 	.word	0x08004a2d
 800485c:	08004a2d 	.word	0x08004a2d
 8004860:	08004a2d 	.word	0x08004a2d
 8004864:	08004a2d 	.word	0x08004a2d
 8004868:	08004a2d 	.word	0x08004a2d
 800486c:	080049ef 	.word	0x080049ef
 8004870:	08004a2d 	.word	0x08004a2d
 8004874:	08004a2d 	.word	0x08004a2d
 8004878:	08004a2d 	.word	0x08004a2d
 800487c:	08004895 	.word	0x08004895
 8004880:	08004a2d 	.word	0x08004a2d
 8004884:	08004a2d 	.word	0x08004a2d
 8004888:	08004a2d 	.word	0x08004a2d
 800488c:	08004a2d 	.word	0x08004a2d
 8004890:	080049cd 	.word	0x080049cd
   {
      case SOCK_ESTABLISHED :
         if(getSn_IR(sn) & Sn_IR_CON)
 8004894:	79fb      	ldrb	r3, [r7, #7]
 8004896:	3308      	adds	r3, #8
 8004898:	019b      	lsls	r3, r3, #6
 800489a:	3306      	adds	r3, #6
 800489c:	4618      	mov	r0, r3
 800489e:	f000 f8f5 	bl	8004a8c <WIZCHIP_READ>
 80048a2:	4603      	mov	r3, r0
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d04e      	beq.n	800494c <loopback_tcps+0x164>
         {
#ifdef _LOOPBACK_DEBUG_
			getSn_DIPR(sn, destip);
 80048ae:	79fb      	ldrb	r3, [r7, #7]
 80048b0:	3308      	adds	r3, #8
 80048b2:	019b      	lsls	r3, r3, #6
 80048b4:	3314      	adds	r3, #20
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 f8e8 	bl	8004a8c <WIZCHIP_READ>
 80048bc:	4603      	mov	r3, r0
 80048be:	0a1b      	lsrs	r3, r3, #8
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	723b      	strb	r3, [r7, #8]
 80048c6:	79fb      	ldrb	r3, [r7, #7]
 80048c8:	3308      	adds	r3, #8
 80048ca:	019b      	lsls	r3, r3, #6
 80048cc:	3314      	adds	r3, #20
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 f8dc 	bl	8004a8c <WIZCHIP_READ>
 80048d4:	4603      	mov	r3, r0
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	727b      	strb	r3, [r7, #9]
 80048da:	79fb      	ldrb	r3, [r7, #7]
 80048dc:	3308      	adds	r3, #8
 80048de:	019b      	lsls	r3, r3, #6
 80048e0:	3316      	adds	r3, #22
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 f8d2 	bl	8004a8c <WIZCHIP_READ>
 80048e8:	4603      	mov	r3, r0
 80048ea:	0a1b      	lsrs	r3, r3, #8
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	72bb      	strb	r3, [r7, #10]
 80048f2:	79fb      	ldrb	r3, [r7, #7]
 80048f4:	3308      	adds	r3, #8
 80048f6:	019b      	lsls	r3, r3, #6
 80048f8:	3316      	adds	r3, #22
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 f8c6 	bl	8004a8c <WIZCHIP_READ>
 8004900:	4603      	mov	r3, r0
 8004902:	b2db      	uxtb	r3, r3
 8004904:	72fb      	strb	r3, [r7, #11]
			destport = getSn_DPORT(sn);
 8004906:	79fb      	ldrb	r3, [r7, #7]
 8004908:	3308      	adds	r3, #8
 800490a:	019b      	lsls	r3, r3, #6
 800490c:	3312      	adds	r3, #18
 800490e:	4618      	mov	r0, r3
 8004910:	f000 f8bc 	bl	8004a8c <WIZCHIP_READ>
 8004914:	4603      	mov	r3, r0
 8004916:	81fb      	strh	r3, [r7, #14]

			printf("%d:Connected - %d.%d.%d.%d : %d\r\n",sn, destip[0], destip[1], destip[2], destip[3], destport);
 8004918:	79f9      	ldrb	r1, [r7, #7]
 800491a:	7a3b      	ldrb	r3, [r7, #8]
 800491c:	461c      	mov	r4, r3
 800491e:	7a7b      	ldrb	r3, [r7, #9]
 8004920:	461d      	mov	r5, r3
 8004922:	7abb      	ldrb	r3, [r7, #10]
 8004924:	461a      	mov	r2, r3
 8004926:	7afb      	ldrb	r3, [r7, #11]
 8004928:	4618      	mov	r0, r3
 800492a:	89fb      	ldrh	r3, [r7, #14]
 800492c:	9302      	str	r3, [sp, #8]
 800492e:	9001      	str	r0, [sp, #4]
 8004930:	9200      	str	r2, [sp, #0]
 8004932:	462b      	mov	r3, r5
 8004934:	4622      	mov	r2, r4
 8004936:	4843      	ldr	r0, [pc, #268]	; (8004a44 <loopback_tcps+0x25c>)
 8004938:	f001 fed0 	bl	80066dc <iprintf>
#endif
			setSn_IR(sn,Sn_IR_CON);
 800493c:	79fb      	ldrb	r3, [r7, #7]
 800493e:	3308      	adds	r3, #8
 8004940:	019b      	lsls	r3, r3, #6
 8004942:	3306      	adds	r3, #6
 8004944:	2101      	movs	r1, #1
 8004946:	4618      	mov	r0, r3
 8004948:	f000 f882 	bl	8004a50 <WIZCHIP_WRITE>
         }
		 if((size = getSn_RX_RSR(sn)) > 0) // Don't need to check SOCKERR_BUSY because it doesn't not occur.
 800494c:	79fb      	ldrb	r3, [r7, #7]
 800494e:	4618      	mov	r0, r3
 8004950:	f000 f92a 	bl	8004ba8 <getSn_RX_RSR>
 8004954:	4603      	mov	r3, r0
 8004956:	82fb      	strh	r3, [r7, #22]
 8004958:	8afb      	ldrh	r3, [r7, #22]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d068      	beq.n	8004a30 <loopback_tcps+0x248>
         {
			if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 800495e:	8afb      	ldrh	r3, [r7, #22]
 8004960:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004964:	d902      	bls.n	800496c <loopback_tcps+0x184>
 8004966:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800496a:	82fb      	strh	r3, [r7, #22]
			ret = recv(sn, buf, size);
 800496c:	8afa      	ldrh	r2, [r7, #22]
 800496e:	79fb      	ldrb	r3, [r7, #7]
 8004970:	6839      	ldr	r1, [r7, #0]
 8004972:	4618      	mov	r0, r3
 8004974:	f000 fd58 	bl	8005428 <recv>
 8004978:	6138      	str	r0, [r7, #16]

			if(ret <= 0) return ret;      // check SOCKERR_BUSY & SOCKERR_XXX. For showing the occurrence of SOCKERR_BUSY.
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	2b00      	cmp	r3, #0
 800497e:	dc01      	bgt.n	8004984 <loopback_tcps+0x19c>
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	e05b      	b.n	8004a3c <loopback_tcps+0x254>
			size = (uint16_t) ret;
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	82fb      	strh	r3, [r7, #22]
			sentsize = 0;
 8004988:	2300      	movs	r3, #0
 800498a:	82bb      	strh	r3, [r7, #20]

			while(size != sentsize)
 800498c:	e019      	b.n	80049c2 <loopback_tcps+0x1da>
			{
				ret = send(sn, buf+sentsize, size-sentsize);
 800498e:	8abb      	ldrh	r3, [r7, #20]
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	18d1      	adds	r1, r2, r3
 8004994:	8afa      	ldrh	r2, [r7, #22]
 8004996:	8abb      	ldrh	r3, [r7, #20]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	b29a      	uxth	r2, r3
 800499c:	79fb      	ldrb	r3, [r7, #7]
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 fc46 	bl	8005230 <send>
 80049a4:	6138      	str	r0, [r7, #16]
				if(ret < 0)
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	da05      	bge.n	80049b8 <loopback_tcps+0x1d0>
				{
					close(sn);
 80049ac:	79fb      	ldrb	r3, [r7, #7]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 fabc 	bl	8004f2c <close>
					return ret;
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	e041      	b.n	8004a3c <loopback_tcps+0x254>
				}
				sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	8abb      	ldrh	r3, [r7, #20]
 80049be:	4413      	add	r3, r2
 80049c0:	82bb      	strh	r3, [r7, #20]
			while(size != sentsize)
 80049c2:	8afa      	ldrh	r2, [r7, #22]
 80049c4:	8abb      	ldrh	r3, [r7, #20]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d1e1      	bne.n	800498e <loopback_tcps+0x1a6>
			}
         }
         break;
 80049ca:	e031      	b.n	8004a30 <loopback_tcps+0x248>
      case SOCK_CLOSE_WAIT :
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:CloseWait\r\n",sn);
#endif
         if((ret = disconnect(sn)) != SOCK_OK) return ret;
 80049cc:	79fb      	ldrb	r3, [r7, #7]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 fbbe 	bl	8005150 <disconnect>
 80049d4:	4603      	mov	r3, r0
 80049d6:	613b      	str	r3, [r7, #16]
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d001      	beq.n	80049e2 <loopback_tcps+0x1fa>
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	e02c      	b.n	8004a3c <loopback_tcps+0x254>
#ifdef _LOOPBACK_DEBUG_
         printf("%d:Socket Closed\r\n", sn);
 80049e2:	79fb      	ldrb	r3, [r7, #7]
 80049e4:	4619      	mov	r1, r3
 80049e6:	4818      	ldr	r0, [pc, #96]	; (8004a48 <loopback_tcps+0x260>)
 80049e8:	f001 fe78 	bl	80066dc <iprintf>
#endif
         break;
 80049ec:	e025      	b.n	8004a3a <loopback_tcps+0x252>
      case SOCK_INIT :
#ifdef _LOOPBACK_DEBUG_
    	 printf("%d:Listen, TCP server loopback, port [%d]\r\n", sn, port);
 80049ee:	79fb      	ldrb	r3, [r7, #7]
 80049f0:	88ba      	ldrh	r2, [r7, #4]
 80049f2:	4619      	mov	r1, r3
 80049f4:	4815      	ldr	r0, [pc, #84]	; (8004a4c <loopback_tcps+0x264>)
 80049f6:	f001 fe71 	bl	80066dc <iprintf>
#endif
         if( (ret = listen(sn)) != SOCK_OK) return ret;
 80049fa:	79fb      	ldrb	r3, [r7, #7]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f000 fb53 	bl	80050a8 <listen>
 8004a02:	4603      	mov	r3, r0
 8004a04:	613b      	str	r3, [r7, #16]
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d013      	beq.n	8004a34 <loopback_tcps+0x24c>
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	e015      	b.n	8004a3c <loopback_tcps+0x254>
         break;
      case SOCK_CLOSED:
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:TCP server loopback start\r\n",sn);
#endif
         if((ret = socket(sn, Sn_MR_TCP, port, 0x00)) != sn) return ret;
 8004a10:	88ba      	ldrh	r2, [r7, #4]
 8004a12:	79f8      	ldrb	r0, [r7, #7]
 8004a14:	2300      	movs	r3, #0
 8004a16:	2101      	movs	r1, #1
 8004a18:	f000 f96c 	bl	8004cf4 <socket>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	613b      	str	r3, [r7, #16]
 8004a20:	79fb      	ldrb	r3, [r7, #7]
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d007      	beq.n	8004a38 <loopback_tcps+0x250>
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	e007      	b.n	8004a3c <loopback_tcps+0x254>
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:Socket opened\r\n",sn);
#endif
         break;
      default:
         break;
 8004a2c:	bf00      	nop
 8004a2e:	e004      	b.n	8004a3a <loopback_tcps+0x252>
         break;
 8004a30:	bf00      	nop
 8004a32:	e002      	b.n	8004a3a <loopback_tcps+0x252>
         break;
 8004a34:	bf00      	nop
 8004a36:	e000      	b.n	8004a3a <loopback_tcps+0x252>
         break;
 8004a38:	bf00      	nop
   }
   return 1;
 8004a3a:	2301      	movs	r3, #1
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3718      	adds	r7, #24
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bdb0      	pop	{r4, r5, r7, pc}
 8004a44:	08007638 	.word	0x08007638
 8004a48:	0800765c 	.word	0x0800765c
 8004a4c:	08007670 	.word	0x08007670

08004a50 <WIZCHIP_WRITE>:
/***********************
 * Basic I/O  Function *
 ***********************/
 
void     WIZCHIP_WRITE(uint32_t AddrSel, uint16_t wb )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	807b      	strh	r3, [r7, #2]
#if _USE_W5300_OPTIMIZE
	_W5300_DATA(AddrSel) = wb;
#else
	WIZCHIP_CRITICAL_ENTER();
 8004a5c:	4b0a      	ldr	r3, [pc, #40]	; (8004a88 <WIZCHIP_WRITE+0x38>)
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	4798      	blx	r3
    WIZCHIP.CS._select();
 8004a62:	4b09      	ldr	r3, [pc, #36]	; (8004a88 <WIZCHIP_WRITE+0x38>)
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	4798      	blx	r3
#if ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_) )
   #if(_WIZCHIP_IO_BUS_WIDTH_ == 8)
      WIZCHIP.IF.BUS._write_data(AddrSel,  (uint8_t)(wb>>8));
      WIZCHIP.IF.BUS._write_data(WIZCHIP_OFFSET_INC(AddrSel,1),(uint8_t)wb);
   #elif(_WIZCHIP_IO_BUS_WIDTH_ == 16)
      WIZCHIP.IF.BUS._write_data(AddrSel,  wb);   
 8004a68:	4b07      	ldr	r3, [pc, #28]	; (8004a88 <WIZCHIP_WRITE+0x38>)
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	887a      	ldrh	r2, [r7, #2]
 8004a6e:	4611      	mov	r1, r2
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	4798      	blx	r3
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5300. !!!"
#endif

   WIZCHIP.CS._deselect();
 8004a74:	4b04      	ldr	r3, [pc, #16]	; (8004a88 <WIZCHIP_WRITE+0x38>)
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004a7a:	4b03      	ldr	r3, [pc, #12]	; (8004a88 <WIZCHIP_WRITE+0x38>)
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	4798      	blx	r3
#endif
}
 8004a80:	bf00      	nop
 8004a82:	3708      	adds	r7, #8
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	20000034 	.word	0x20000034

08004a8c <WIZCHIP_READ>:

uint16_t WIZCHIP_READ(uint32_t AddrSel)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
   uint16_t ret;
#if _USE_W5300_OPTIMIZE
   ret = _W5300_DATA(AddrSel);
#else
   WIZCHIP_CRITICAL_ENTER();
 8004a94:	4b0b      	ldr	r3, [pc, #44]	; (8004ac4 <WIZCHIP_READ+0x38>)
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004a9a:	4b0a      	ldr	r3, [pc, #40]	; (8004ac4 <WIZCHIP_READ+0x38>)
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	4798      	blx	r3
#if ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_) )
   #if (_WIZCHIP_IO_BUS_WIDTH_ == 8)
      ret = (((uint16_t)WIZCHIP.IF.BUS._read_data(AddrSel)) << 8) | 
            (((uint16_t)WIZCHIP.IF.BUS._read_data(WIZCHIP_OFFSET_INC(AddrSel,1))) & 0x00FF) ;   
   #elif(_WIZCHIP_IO_BUS_WIDTH_ == 16)
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 8004aa0:	4b08      	ldr	r3, [pc, #32]	; (8004ac4 <WIZCHIP_READ+0x38>)
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	4798      	blx	r3
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	81fb      	strh	r3, [r7, #14]
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5300. !!!"
#endif

   WIZCHIP.CS._deselect();
 8004aac:	4b05      	ldr	r3, [pc, #20]	; (8004ac4 <WIZCHIP_READ+0x38>)
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004ab2:	4b04      	ldr	r3, [pc, #16]	; (8004ac4 <WIZCHIP_READ+0x38>)
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	4798      	blx	r3
   #endif
   return ret;
 8004ab8:	89fb      	ldrh	r3, [r7, #14]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	20000034 	.word	0x20000034

08004ac8 <getTMSR>:
   else tmem =  (tmem & 0x00FF) | (((uint16_t)tmsr) << 8) ;
   WIZCHIP_WRITE(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE)),tmem);
}
   
uint8_t getTMSR(uint8_t sn)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	4603      	mov	r3, r0
 8004ad0:	71fb      	strb	r3, [r7, #7]
   if(sn & 0x01)
 8004ad2:	79fb      	ldrb	r3, [r7, #7]
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d009      	beq.n	8004af0 <getTMSR+0x28>
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) & 0x00FF);
 8004adc:	79fb      	ldrb	r3, [r7, #7]
 8004ade:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004ae2:	3320      	adds	r3, #32
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7ff ffd1 	bl	8004a8c <WIZCHIP_READ>
 8004aea:	4603      	mov	r3, r0
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	e00a      	b.n	8004b06 <getTMSR+0x3e>
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) >> 8);
 8004af0:	79fb      	ldrb	r3, [r7, #7]
 8004af2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004af6:	3320      	adds	r3, #32
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7ff ffc7 	bl	8004a8c <WIZCHIP_READ>
 8004afe:	4603      	mov	r3, r0
 8004b00:	0a1b      	lsrs	r3, r3, #8
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	b2db      	uxtb	r3, r3
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <getRMSR>:
   else rmem =  (rmem & 0x00FF) | (((uint16_t)rmsr) << 8) ;
   WIZCHIP_WRITE(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE)),rmem);
}
   
uint8_t getRMSR(uint8_t sn)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b082      	sub	sp, #8
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	4603      	mov	r3, r0
 8004b16:	71fb      	strb	r3, [r7, #7]
   if(sn & 0x01)
 8004b18:	79fb      	ldrb	r3, [r7, #7]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d009      	beq.n	8004b36 <getRMSR+0x28>
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) & 0x00FF);
 8004b22:	79fb      	ldrb	r3, [r7, #7]
 8004b24:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004b28:	3328      	adds	r3, #40	; 0x28
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7ff ffae 	bl	8004a8c <WIZCHIP_READ>
 8004b30:	4603      	mov	r3, r0
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	e00a      	b.n	8004b4c <getRMSR+0x3e>
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) >> 8);
 8004b36:	79fb      	ldrb	r3, [r7, #7]
 8004b38:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004b3c:	3328      	adds	r3, #40	; 0x28
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7ff ffa4 	bl	8004a8c <WIZCHIP_READ>
 8004b44:	4603      	mov	r3, r0
 8004b46:	0a1b      	lsrs	r3, r3, #8
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	b2db      	uxtb	r3, r3
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3708      	adds	r7, #8
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <getSn_TX_FSR>:

uint32_t getSn_TX_FSR(uint8_t sn)
{
 8004b54:	b590      	push	{r4, r7, lr}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	71fb      	strb	r3, [r7, #7]
   uint32_t free_tx_size=0;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60bb      	str	r3, [r7, #8]
   uint32_t free_tx_size1=1;
 8004b62:	2301      	movs	r3, #1
 8004b64:	60fb      	str	r3, [r7, #12]
   while(1)
   {
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 8004b66:	79fb      	ldrb	r3, [r7, #7]
 8004b68:	3308      	adds	r3, #8
 8004b6a:	019b      	lsls	r3, r3, #6
 8004b6c:	3324      	adds	r3, #36	; 0x24
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7ff ff8c 	bl	8004a8c <WIZCHIP_READ>
 8004b74:	4603      	mov	r3, r0
 8004b76:	041c      	lsls	r4, r3, #16
                     (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),2))) & 0x0000FFFF);                           // read
 8004b78:	79fb      	ldrb	r3, [r7, #7]
 8004b7a:	3308      	adds	r3, #8
 8004b7c:	019b      	lsls	r3, r3, #6
 8004b7e:	3326      	adds	r3, #38	; 0x26
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7ff ff83 	bl	8004a8c <WIZCHIP_READ>
 8004b86:	4603      	mov	r3, r0
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 8004b88:	4323      	orrs	r3, r4
 8004b8a:	60bb      	str	r3, [r7, #8]
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d002      	beq.n	8004b9a <getSn_TX_FSR+0x46>
      free_tx_size1 = free_tx_size;             // save second value into first                                                   
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	60fb      	str	r3, [r7, #12]
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 8004b98:	e7e5      	b.n	8004b66 <getSn_TX_FSR+0x12>
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
 8004b9a:	bf00      	nop
   }                                                                       
   return free_tx_size;                                                    
 8004b9c:	68bb      	ldr	r3, [r7, #8]
}                                                                          
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd90      	pop	{r4, r7, pc}
	...

08004ba8 <getSn_RX_RSR>:

uint32_t getSn_RX_RSR(uint8_t sn)
{
 8004ba8:	b590      	push	{r4, r7, lr}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	4603      	mov	r3, r0
 8004bb0:	71fb      	strb	r3, [r7, #7]
   uint32_t received_rx_size=0;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	60bb      	str	r3, [r7, #8]
   uint32_t received_rx_size1=1;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	60fb      	str	r3, [r7, #12]
   while(1)
   {
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 8004bba:	79fb      	ldrb	r3, [r7, #7]
 8004bbc:	3308      	adds	r3, #8
 8004bbe:	019b      	lsls	r3, r3, #6
 8004bc0:	3328      	adds	r3, #40	; 0x28
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7ff ff62 	bl	8004a8c <WIZCHIP_READ>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	041c      	lsls	r4, r3, #16
                         (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),2))) & 0x0000FFFF);
 8004bcc:	79fb      	ldrb	r3, [r7, #7]
 8004bce:	3308      	adds	r3, #8
 8004bd0:	019b      	lsls	r3, r3, #6
 8004bd2:	332a      	adds	r3, #42	; 0x2a
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff ff59 	bl	8004a8c <WIZCHIP_READ>
 8004bda:	4603      	mov	r3, r0
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 8004bdc:	4323      	orrs	r3, r4
 8004bde:	60bb      	str	r3, [r7, #8]
      if(received_rx_size == received_rx_size1) break;                                                                         
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d002      	beq.n	8004bee <getSn_RX_RSR+0x46>
      received_rx_size1 = received_rx_size;                                      // if first == sencond, Sn_RX_RSR value is valid.
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	60fb      	str	r3, [r7, #12]
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 8004bec:	e7e5      	b.n	8004bba <getSn_RX_RSR+0x12>
      if(received_rx_size == received_rx_size1) break;                                                                         
 8004bee:	bf00      	nop
   }                                                                             // save second value into first                
   return received_rx_size + (uint32_t)((sock_pack_info[sn] & 0x02) ? 1 : 0);   
 8004bf0:	79fb      	ldrb	r3, [r7, #7]
 8004bf2:	4a05      	ldr	r2, [pc, #20]	; (8004c08 <getSn_RX_RSR+0x60>)
 8004bf4:	5cd3      	ldrb	r3, [r2, r3]
 8004bf6:	105b      	asrs	r3, r3, #1
 8004bf8:	f003 0201 	and.w	r2, r3, #1
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	4413      	add	r3, r2
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd90      	pop	{r4, r7, pc}
 8004c08:	200009d8 	.word	0x200009d8

08004c0c <wiz_send_data>:


void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	4603      	mov	r3, r0
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
 8004c18:	73fb      	strb	r3, [r7, #15]
   uint32_t i = 0;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	617b      	str	r3, [r7, #20]
   if(len == 0)  return;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d021      	beq.n	8004c68 <wiz_send_data+0x5c>
   
   for(i = 0; i < len ; i += 2)
 8004c24:	2300      	movs	r3, #0
 8004c26:	617b      	str	r3, [r7, #20]
 8004c28:	e019      	b.n	8004c5e <wiz_send_data+0x52>
      setSn_TX_FIFOR(sn, (((uint16_t)wizdata[i]) << 8) | (((uint16_t)wizdata[i+1]) & 0x00FF))
 8004c2a:	7bfb      	ldrb	r3, [r7, #15]
 8004c2c:	3308      	adds	r3, #8
 8004c2e:	019b      	lsls	r3, r3, #6
 8004c30:	332e      	adds	r3, #46	; 0x2e
 8004c32:	4618      	mov	r0, r3
 8004c34:	68ba      	ldr	r2, [r7, #8]
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	4413      	add	r3, r2
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	021b      	lsls	r3, r3, #8
 8004c3e:	b21a      	sxth	r2, r3
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	3301      	adds	r3, #1
 8004c44:	68b9      	ldr	r1, [r7, #8]
 8004c46:	440b      	add	r3, r1
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	b21b      	sxth	r3, r3
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	b21b      	sxth	r3, r3
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	4619      	mov	r1, r3
 8004c54:	f7ff fefc 	bl	8004a50 <WIZCHIP_WRITE>
   for(i = 0; i < len ; i += 2)
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	3302      	adds	r3, #2
 8004c5c:	617b      	str	r3, [r7, #20]
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d3e1      	bcc.n	8004c2a <wiz_send_data+0x1e>
 8004c66:	e000      	b.n	8004c6a <wiz_send_data+0x5e>
   if(len == 0)  return;
 8004c68:	bf00      	nop
}
 8004c6a:	3718      	adds	r7, #24
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	4603      	mov	r3, r0
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
 8004c7c:	73fb      	strb	r3, [r7, #15]
   uint16_t rd = 0;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	82fb      	strh	r3, [r7, #22]
   uint32_t i = 0;
 8004c82:	2300      	movs	r3, #0
 8004c84:	613b      	str	r3, [r7, #16]
   
   if(len == 0) return;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d02c      	beq.n	8004ce6 <wiz_recv_data+0x76>
      
   for(i = 0; i < len; i++)
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	613b      	str	r3, [r7, #16]
 8004c90:	e01f      	b.n	8004cd2 <wiz_recv_data+0x62>
   {
      if((i & 0x01)==0)
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d111      	bne.n	8004cc0 <wiz_recv_data+0x50>
      {
         rd = getSn_RX_FIFOR(sn);
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
 8004c9e:	3308      	adds	r3, #8
 8004ca0:	019b      	lsls	r3, r3, #6
 8004ca2:	3330      	adds	r3, #48	; 0x30
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7ff fef1 	bl	8004a8c <WIZCHIP_READ>
 8004caa:	4603      	mov	r3, r0
 8004cac:	82fb      	strh	r3, [r7, #22]
         wizdata[i]   = (uint8_t)(rd >> 8);
 8004cae:	8afb      	ldrh	r3, [r7, #22]
 8004cb0:	0a1b      	lsrs	r3, r3, #8
 8004cb2:	b299      	uxth	r1, r3
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	4413      	add	r3, r2
 8004cba:	b2ca      	uxtb	r2, r1
 8004cbc:	701a      	strb	r2, [r3, #0]
 8004cbe:	e005      	b.n	8004ccc <wiz_recv_data+0x5c>
      }
      else  wizdata[i] = (uint8_t)rd;  // For checking the memory access violation
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	8afa      	ldrh	r2, [r7, #22]
 8004cc8:	b2d2      	uxtb	r2, r2
 8004cca:	701a      	strb	r2, [r3, #0]
   for(i = 0; i < len; i++)
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	613b      	str	r3, [r7, #16]
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d3db      	bcc.n	8004c92 <wiz_recv_data+0x22>
   }
   sock_remained_byte[sn] = (uint8_t)rd; // back up the remaind fifo byte.
 8004cda:	7bfb      	ldrb	r3, [r7, #15]
 8004cdc:	8afa      	ldrh	r2, [r7, #22]
 8004cde:	b2d1      	uxtb	r1, r2
 8004ce0:	4a03      	ldr	r2, [pc, #12]	; (8004cf0 <wiz_recv_data+0x80>)
 8004ce2:	54d1      	strb	r1, [r2, r3]
 8004ce4:	e000      	b.n	8004ce8 <wiz_recv_data+0x78>
   if(len == 0) return;
 8004ce6:	bf00      	nop
}
 8004ce8:	3718      	adds	r7, #24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	200009e0 	.word	0x200009e0

08004cf4 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8004cf4:	b590      	push	{r4, r7, lr}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	4604      	mov	r4, r0
 8004cfc:	4608      	mov	r0, r1
 8004cfe:	4611      	mov	r1, r2
 8004d00:	461a      	mov	r2, r3
 8004d02:	4623      	mov	r3, r4
 8004d04:	71fb      	strb	r3, [r7, #7]
 8004d06:	4603      	mov	r3, r0
 8004d08:	71bb      	strb	r3, [r7, #6]
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	80bb      	strh	r3, [r7, #4]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8004d12:	79fb      	ldrb	r3, [r7, #7]
 8004d14:	2b08      	cmp	r3, #8
 8004d16:	d902      	bls.n	8004d1e <socket+0x2a>
 8004d18:	f04f 33ff 	mov.w	r3, #4294967295
 8004d1c:	e0f8      	b.n	8004f10 <socket+0x21c>
	switch(protocol)
 8004d1e:	79bb      	ldrb	r3, [r7, #6]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d005      	beq.n	8004d30 <socket+0x3c>
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	dd32      	ble.n	8004d8e <socket+0x9a>
 8004d28:	3b02      	subs	r3, #2
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d82f      	bhi.n	8004d8e <socket+0x9a>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8004d2e:	e032      	b.n	8004d96 <socket+0xa2>
            getSIPR((uint8_t*)&taddr);
 8004d30:	2018      	movs	r0, #24
 8004d32:	f7ff feab 	bl	8004a8c <WIZCHIP_READ>
 8004d36:	4603      	mov	r3, r0
 8004d38:	0a1b      	lsrs	r3, r3, #8
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	f107 030c 	add.w	r3, r7, #12
 8004d40:	b2d2      	uxtb	r2, r2
 8004d42:	701a      	strb	r2, [r3, #0]
 8004d44:	2018      	movs	r0, #24
 8004d46:	f7ff fea1 	bl	8004a8c <WIZCHIP_READ>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	f107 030c 	add.w	r3, r7, #12
 8004d52:	3301      	adds	r3, #1
 8004d54:	b2d2      	uxtb	r2, r2
 8004d56:	701a      	strb	r2, [r3, #0]
 8004d58:	201a      	movs	r0, #26
 8004d5a:	f7ff fe97 	bl	8004a8c <WIZCHIP_READ>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	0a1b      	lsrs	r3, r3, #8
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	f107 030c 	add.w	r3, r7, #12
 8004d68:	3302      	adds	r3, #2
 8004d6a:	b2d2      	uxtb	r2, r2
 8004d6c:	701a      	strb	r2, [r3, #0]
 8004d6e:	201a      	movs	r0, #26
 8004d70:	f7ff fe8c 	bl	8004a8c <WIZCHIP_READ>
 8004d74:	4603      	mov	r3, r0
 8004d76:	461a      	mov	r2, r3
 8004d78:	f107 030c 	add.w	r3, r7, #12
 8004d7c:	3303      	adds	r3, #3
 8004d7e:	b2d2      	uxtb	r2, r2
 8004d80:	701a      	strb	r2, [r3, #0]
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d105      	bne.n	8004d94 <socket+0xa0>
 8004d88:	f06f 0302 	mvn.w	r3, #2
 8004d8c:	e0c0      	b.n	8004f10 <socket+0x21c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8004d8e:	f06f 0304 	mvn.w	r3, #4
 8004d92:	e0bd      	b.n	8004f10 <socket+0x21c>
	    break;
 8004d94:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8004d96:	78fb      	ldrb	r3, [r7, #3]
 8004d98:	f003 0304 	and.w	r3, r3, #4
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d002      	beq.n	8004da6 <socket+0xb2>
 8004da0:	f06f 0305 	mvn.w	r3, #5
 8004da4:	e0b4      	b.n	8004f10 <socket+0x21c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8004da6:	78fb      	ldrb	r3, [r7, #3]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d019      	beq.n	8004de0 <socket+0xec>
	{
   	switch(protocol)
 8004dac:	79bb      	ldrb	r3, [r7, #6]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d002      	beq.n	8004db8 <socket+0xc4>
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d008      	beq.n	8004dc8 <socket+0xd4>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8004db6:	e018      	b.n	8004dea <socket+0xf6>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK|SF_TCP_ALIGN))==0) return SOCKERR_SOCKFLAG;
 8004db8:	78fb      	ldrb	r3, [r7, #3]
 8004dba:	f003 0323 	and.w	r3, r3, #35	; 0x23
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d110      	bne.n	8004de4 <socket+0xf0>
 8004dc2:	f06f 0305 	mvn.w	r3, #5
 8004dc6:	e0a3      	b.n	8004f10 <socket+0x21c>
   	      if(flag & SF_IGMP_VER2)
 8004dc8:	78fb      	ldrb	r3, [r7, #3]
 8004dca:	f003 0320 	and.w	r3, r3, #32
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00a      	beq.n	8004de8 <socket+0xf4>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8004dd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	db06      	blt.n	8004de8 <socket+0xf4>
 8004dda:	f06f 0305 	mvn.w	r3, #5
 8004dde:	e097      	b.n	8004f10 <socket+0x21c>
   	}
   }
 8004de0:	bf00      	nop
 8004de2:	e002      	b.n	8004dea <socket+0xf6>
   	      break;
 8004de4:	bf00      	nop
 8004de6:	e000      	b.n	8004dea <socket+0xf6>
   	      break;
 8004de8:	bf00      	nop
	close(sn);
 8004dea:	79fb      	ldrb	r3, [r7, #7]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 f89d 	bl	8004f2c <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
 8004df2:	79fb      	ldrb	r3, [r7, #7]
 8004df4:	3308      	adds	r3, #8
 8004df6:	019b      	lsls	r3, r3, #6
 8004df8:	4618      	mov	r0, r3
 8004dfa:	79bb      	ldrb	r3, [r7, #6]
 8004dfc:	b21a      	sxth	r2, r3
 8004dfe:	78fb      	ldrb	r3, [r7, #3]
 8004e00:	b21b      	sxth	r3, r3
 8004e02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e06:	b21b      	sxth	r3, r3
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	b21a      	sxth	r2, r3
 8004e0c:	78fb      	ldrb	r3, [r7, #3]
 8004e0e:	01db      	lsls	r3, r3, #7
 8004e10:	b21b      	sxth	r3, r3
 8004e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e16:	b21b      	sxth	r3, r3
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	b21b      	sxth	r3, r3
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	4619      	mov	r1, r3
 8004e20:	f7ff fe16 	bl	8004a50 <WIZCHIP_WRITE>
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
    #endif
	if(!port)
 8004e24:	88bb      	ldrh	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d110      	bne.n	8004e4c <socket+0x158>
	{
	   port = sock_any_port++;
 8004e2a:	4b3b      	ldr	r3, [pc, #236]	; (8004f18 <socket+0x224>)
 8004e2c:	881b      	ldrh	r3, [r3, #0]
 8004e2e:	1c5a      	adds	r2, r3, #1
 8004e30:	b291      	uxth	r1, r2
 8004e32:	4a39      	ldr	r2, [pc, #228]	; (8004f18 <socket+0x224>)
 8004e34:	8011      	strh	r1, [r2, #0]
 8004e36:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8004e38:	4b37      	ldr	r3, [pc, #220]	; (8004f18 <socket+0x224>)
 8004e3a:	881b      	ldrh	r3, [r3, #0]
 8004e3c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d103      	bne.n	8004e4c <socket+0x158>
 8004e44:	4b34      	ldr	r3, [pc, #208]	; (8004f18 <socket+0x224>)
 8004e46:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8004e4a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8004e4c:	79fb      	ldrb	r3, [r7, #7]
 8004e4e:	3308      	adds	r3, #8
 8004e50:	019b      	lsls	r3, r3, #6
 8004e52:	330a      	adds	r3, #10
 8004e54:	461a      	mov	r2, r3
 8004e56:	88bb      	ldrh	r3, [r7, #4]
 8004e58:	4619      	mov	r1, r3
 8004e5a:	4610      	mov	r0, r2
 8004e5c:	f7ff fdf8 	bl	8004a50 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8004e60:	79fb      	ldrb	r3, [r7, #7]
 8004e62:	3308      	adds	r3, #8
 8004e64:	019b      	lsls	r3, r3, #6
 8004e66:	3302      	adds	r3, #2
 8004e68:	2101      	movs	r1, #1
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7ff fdf0 	bl	8004a50 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8004e70:	bf00      	nop
 8004e72:	79fb      	ldrb	r3, [r7, #7]
 8004e74:	3308      	adds	r3, #8
 8004e76:	019b      	lsls	r3, r3, #6
 8004e78:	3302      	adds	r3, #2
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7ff fe06 	bl	8004a8c <WIZCHIP_READ>
 8004e80:	4603      	mov	r3, r0
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1f4      	bne.n	8004e72 <socket+0x17e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8004e88:	79fb      	ldrb	r3, [r7, #7]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e90:	b21b      	sxth	r3, r3
 8004e92:	43db      	mvns	r3, r3
 8004e94:	b21a      	sxth	r2, r3
 8004e96:	4b21      	ldr	r3, [pc, #132]	; (8004f1c <socket+0x228>)
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	b21b      	sxth	r3, r3
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	b21b      	sxth	r3, r3
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	4b1e      	ldr	r3, [pc, #120]	; (8004f1c <socket+0x228>)
 8004ea4:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8004ea6:	78fb      	ldrb	r3, [r7, #3]
 8004ea8:	f003 0201 	and.w	r2, r3, #1
 8004eac:	79fb      	ldrb	r3, [r7, #7]
 8004eae:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb2:	b21a      	sxth	r2, r3
 8004eb4:	4b19      	ldr	r3, [pc, #100]	; (8004f1c <socket+0x228>)
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	b21b      	sxth	r3, r3
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	b21b      	sxth	r3, r3
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	4b16      	ldr	r3, [pc, #88]	; (8004f1c <socket+0x228>)
 8004ec2:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8004ec4:	79fb      	ldrb	r3, [r7, #7]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ecc:	b21b      	sxth	r3, r3
 8004ece:	43db      	mvns	r3, r3
 8004ed0:	b21a      	sxth	r2, r3
 8004ed2:	4b13      	ldr	r3, [pc, #76]	; (8004f20 <socket+0x22c>)
 8004ed4:	881b      	ldrh	r3, [r3, #0]
 8004ed6:	b21b      	sxth	r3, r3
 8004ed8:	4013      	ands	r3, r2
 8004eda:	b21b      	sxth	r3, r3
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	4b10      	ldr	r3, [pc, #64]	; (8004f20 <socket+0x22c>)
 8004ee0:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8004ee2:	79fb      	ldrb	r3, [r7, #7]
 8004ee4:	4a0f      	ldr	r2, [pc, #60]	; (8004f24 <socket+0x230>)
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8004eec:	79fb      	ldrb	r3, [r7, #7]
 8004eee:	4a0e      	ldr	r2, [pc, #56]	; (8004f28 <socket+0x234>)
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8004ef4:	bf00      	nop
 8004ef6:	79fb      	ldrb	r3, [r7, #7]
 8004ef8:	3308      	adds	r3, #8
 8004efa:	019b      	lsls	r3, r3, #6
 8004efc:	3308      	adds	r3, #8
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7ff fdc4 	bl	8004a8c <WIZCHIP_READ>
 8004f04:	4603      	mov	r3, r0
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d0f4      	beq.n	8004ef6 <socket+0x202>
   return (int8_t)sn;
 8004f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8004f10:	4618      	mov	r0, r3
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd90      	pop	{r4, r7, pc}
 8004f18:	20000032 	.word	0x20000032
 8004f1c:	200009c4 	.word	0x200009c4
 8004f20:	200009c6 	.word	0x200009c6
 8004f24:	200009c8 	.word	0x200009c8
 8004f28:	200009d8 	.word	0x200009d8

08004f2c <close>:

int8_t close(uint8_t sn)
{
 8004f2c:	b590      	push	{r4, r7, lr}
 8004f2e:	b087      	sub	sp, #28
 8004f30:	af02      	add	r7, sp, #8
 8004f32:	4603      	mov	r3, r0
 8004f34:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8004f36:	79fb      	ldrb	r3, [r7, #7]
 8004f38:	2b08      	cmp	r3, #8
 8004f3a:	d902      	bls.n	8004f42 <close+0x16>
 8004f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f40:	e0a5      	b.n	800508e <close+0x162>
//A20160426 : Applied the erratum 1 of W5300
#if   (_WIZCHIP_ == 5300) 
   //M20160503 : Wrong socket parameter. s -> sn 
   //if( ((getSn_MR(s)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(s) != getSn_TxMAX(s)) ) 
   if( ((getSn_MR(sn)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(sn) != getSn_TxMAX(sn)) ) 
 8004f42:	79fb      	ldrb	r3, [r7, #7]
 8004f44:	3308      	adds	r3, #8
 8004f46:	019b      	lsls	r3, r3, #6
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7ff fd9f 	bl	8004a8c <WIZCHIP_READ>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	f003 030f 	and.w	r3, r3, #15
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d14a      	bne.n	8004fee <close+0xc2>
 8004f58:	79fb      	ldrb	r3, [r7, #7]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7ff fdfa 	bl	8004b54 <getSn_TX_FSR>
 8004f60:	4604      	mov	r4, r0
 8004f62:	79fb      	ldrb	r3, [r7, #7]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7ff fdaf 	bl	8004ac8 <getTMSR>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	029b      	lsls	r3, r3, #10
 8004f6e:	429c      	cmp	r4, r3
 8004f70:	d03d      	beq.n	8004fee <close+0xc2>
   { 
      uint8_t destip[4] = {0, 0, 0, 1};
 8004f72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f76:	60fb      	str	r3, [r7, #12]
      //     if (getSn_TX_FSR(s) == getSn_TxMAX(s)) continue;
      // 
      //M20160503 : The socket() of close() calls close() itself again. It occures a infinite loop - close()->socket()->close()->socket()-> ~
      //socket(s,Sn_MR_UDP,0x3000,0);
      //sendto(s,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
      setSn_MR(sn,Sn_MR_UDP);
 8004f78:	79fb      	ldrb	r3, [r7, #7]
 8004f7a:	3308      	adds	r3, #8
 8004f7c:	019b      	lsls	r3, r3, #6
 8004f7e:	2102      	movs	r1, #2
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7ff fd65 	bl	8004a50 <WIZCHIP_WRITE>
      setSn_PORTR(sn, 0x3000);
 8004f86:	79fb      	ldrb	r3, [r7, #7]
 8004f88:	3308      	adds	r3, #8
 8004f8a:	019b      	lsls	r3, r3, #6
 8004f8c:	330a      	adds	r3, #10
 8004f8e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7ff fd5c 	bl	8004a50 <WIZCHIP_WRITE>
      setSn_CR(sn,Sn_CR_OPEN);
 8004f98:	79fb      	ldrb	r3, [r7, #7]
 8004f9a:	3308      	adds	r3, #8
 8004f9c:	019b      	lsls	r3, r3, #6
 8004f9e:	3302      	adds	r3, #2
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7ff fd54 	bl	8004a50 <WIZCHIP_WRITE>
      while(getSn_CR(sn) != 0);
 8004fa8:	bf00      	nop
 8004faa:	79fb      	ldrb	r3, [r7, #7]
 8004fac:	3308      	adds	r3, #8
 8004fae:	019b      	lsls	r3, r3, #6
 8004fb0:	3302      	adds	r3, #2
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7ff fd6a 	bl	8004a8c <WIZCHIP_READ>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1f4      	bne.n	8004faa <close+0x7e>
      while(getSn_SR(sn) != SOCK_UDP);
 8004fc0:	bf00      	nop
 8004fc2:	79fb      	ldrb	r3, [r7, #7]
 8004fc4:	3308      	adds	r3, #8
 8004fc6:	019b      	lsls	r3, r3, #6
 8004fc8:	3308      	adds	r3, #8
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7ff fd5e 	bl	8004a8c <WIZCHIP_READ>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b22      	cmp	r3, #34	; 0x22
 8004fd6:	d1f4      	bne.n	8004fc2 <close+0x96>
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
 8004fd8:	f107 030c 	add.w	r3, r7, #12
 8004fdc:	f107 010c 	add.w	r1, r7, #12
 8004fe0:	79f8      	ldrb	r0, [r7, #7]
 8004fe2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004fe6:	9200      	str	r2, [sp, #0]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f000 fb81 	bl	80056f0 <sendto>
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8004fee:	79fb      	ldrb	r3, [r7, #7]
 8004ff0:	3308      	adds	r3, #8
 8004ff2:	019b      	lsls	r3, r3, #6
 8004ff4:	3302      	adds	r3, #2
 8004ff6:	2110      	movs	r1, #16
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7ff fd29 	bl	8004a50 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8004ffe:	bf00      	nop
 8005000:	79fb      	ldrb	r3, [r7, #7]
 8005002:	3308      	adds	r3, #8
 8005004:	019b      	lsls	r3, r3, #6
 8005006:	3302      	adds	r3, #2
 8005008:	4618      	mov	r0, r3
 800500a:	f7ff fd3f 	bl	8004a8c <WIZCHIP_READ>
 800500e:	4603      	mov	r3, r0
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1f4      	bne.n	8005000 <close+0xd4>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8005016:	79fb      	ldrb	r3, [r7, #7]
 8005018:	3308      	adds	r3, #8
 800501a:	019b      	lsls	r3, r3, #6
 800501c:	3306      	adds	r3, #6
 800501e:	21ff      	movs	r1, #255	; 0xff
 8005020:	4618      	mov	r0, r3
 8005022:	f7ff fd15 	bl	8004a50 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8005026:	79fb      	ldrb	r3, [r7, #7]
 8005028:	2201      	movs	r2, #1
 800502a:	fa02 f303 	lsl.w	r3, r2, r3
 800502e:	b21b      	sxth	r3, r3
 8005030:	43db      	mvns	r3, r3
 8005032:	b21a      	sxth	r2, r3
 8005034:	4b18      	ldr	r3, [pc, #96]	; (8005098 <close+0x16c>)
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	b21b      	sxth	r3, r3
 800503a:	4013      	ands	r3, r2
 800503c:	b21b      	sxth	r3, r3
 800503e:	b29a      	uxth	r2, r3
 8005040:	4b15      	ldr	r3, [pc, #84]	; (8005098 <close+0x16c>)
 8005042:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8005044:	79fb      	ldrb	r3, [r7, #7]
 8005046:	2201      	movs	r2, #1
 8005048:	fa02 f303 	lsl.w	r3, r2, r3
 800504c:	b21b      	sxth	r3, r3
 800504e:	43db      	mvns	r3, r3
 8005050:	b21a      	sxth	r2, r3
 8005052:	4b12      	ldr	r3, [pc, #72]	; (800509c <close+0x170>)
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	b21b      	sxth	r3, r3
 8005058:	4013      	ands	r3, r2
 800505a:	b21b      	sxth	r3, r3
 800505c:	b29a      	uxth	r2, r3
 800505e:	4b0f      	ldr	r3, [pc, #60]	; (800509c <close+0x170>)
 8005060:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8005062:	79fb      	ldrb	r3, [r7, #7]
 8005064:	4a0e      	ldr	r2, [pc, #56]	; (80050a0 <close+0x174>)
 8005066:	2100      	movs	r1, #0
 8005068:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 800506c:	79fb      	ldrb	r3, [r7, #7]
 800506e:	4a0d      	ldr	r2, [pc, #52]	; (80050a4 <close+0x178>)
 8005070:	2100      	movs	r1, #0
 8005072:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8005074:	bf00      	nop
 8005076:	79fb      	ldrb	r3, [r7, #7]
 8005078:	3308      	adds	r3, #8
 800507a:	019b      	lsls	r3, r3, #6
 800507c:	3308      	adds	r3, #8
 800507e:	4618      	mov	r0, r3
 8005080:	f7ff fd04 	bl	8004a8c <WIZCHIP_READ>
 8005084:	4603      	mov	r3, r0
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1f4      	bne.n	8005076 <close+0x14a>
	return SOCK_OK;
 800508c:	2301      	movs	r3, #1
}
 800508e:	4618      	mov	r0, r3
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	bd90      	pop	{r4, r7, pc}
 8005096:	bf00      	nop
 8005098:	200009c4 	.word	0x200009c4
 800509c:	200009c6 	.word	0x200009c6
 80050a0:	200009c8 	.word	0x200009c8
 80050a4:	200009d8 	.word	0x200009d8

080050a8 <listen>:

int8_t listen(uint8_t sn)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	4603      	mov	r3, r0
 80050b0:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80050b2:	79fb      	ldrb	r3, [r7, #7]
 80050b4:	2b08      	cmp	r3, #8
 80050b6:	d902      	bls.n	80050be <listen+0x16>
 80050b8:	f04f 33ff 	mov.w	r3, #4294967295
 80050bc:	e043      	b.n	8005146 <listen+0x9e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80050be:	79fb      	ldrb	r3, [r7, #7]
 80050c0:	3308      	adds	r3, #8
 80050c2:	019b      	lsls	r3, r3, #6
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7ff fce1 	bl	8004a8c <WIZCHIP_READ>
 80050ca:	4603      	mov	r3, r0
 80050cc:	f003 030f 	and.w	r3, r3, #15
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d002      	beq.n	80050da <listen+0x32>
 80050d4:	f06f 0304 	mvn.w	r3, #4
 80050d8:	e035      	b.n	8005146 <listen+0x9e>
	CHECK_SOCKINIT();
 80050da:	79fb      	ldrb	r3, [r7, #7]
 80050dc:	3308      	adds	r3, #8
 80050de:	019b      	lsls	r3, r3, #6
 80050e0:	3308      	adds	r3, #8
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7ff fcd2 	bl	8004a8c <WIZCHIP_READ>
 80050e8:	4603      	mov	r3, r0
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b13      	cmp	r3, #19
 80050ee:	d002      	beq.n	80050f6 <listen+0x4e>
 80050f0:	f06f 0302 	mvn.w	r3, #2
 80050f4:	e027      	b.n	8005146 <listen+0x9e>
	setSn_CR(sn,Sn_CR_LISTEN);
 80050f6:	79fb      	ldrb	r3, [r7, #7]
 80050f8:	3308      	adds	r3, #8
 80050fa:	019b      	lsls	r3, r3, #6
 80050fc:	3302      	adds	r3, #2
 80050fe:	2102      	movs	r1, #2
 8005100:	4618      	mov	r0, r3
 8005102:	f7ff fca5 	bl	8004a50 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8005106:	bf00      	nop
 8005108:	79fb      	ldrb	r3, [r7, #7]
 800510a:	3308      	adds	r3, #8
 800510c:	019b      	lsls	r3, r3, #6
 800510e:	3302      	adds	r3, #2
 8005110:	4618      	mov	r0, r3
 8005112:	f7ff fcbb 	bl	8004a8c <WIZCHIP_READ>
 8005116:	4603      	mov	r3, r0
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1f4      	bne.n	8005108 <listen+0x60>
   while(getSn_SR(sn) != SOCK_LISTEN)
 800511e:	e006      	b.n	800512e <listen+0x86>
   {
         close(sn);
 8005120:	79fb      	ldrb	r3, [r7, #7]
 8005122:	4618      	mov	r0, r3
 8005124:	f7ff ff02 	bl	8004f2c <close>
         return SOCKERR_SOCKCLOSED;
 8005128:	f06f 0303 	mvn.w	r3, #3
 800512c:	e00b      	b.n	8005146 <listen+0x9e>
   while(getSn_SR(sn) != SOCK_LISTEN)
 800512e:	79fb      	ldrb	r3, [r7, #7]
 8005130:	3308      	adds	r3, #8
 8005132:	019b      	lsls	r3, r3, #6
 8005134:	3308      	adds	r3, #8
 8005136:	4618      	mov	r0, r3
 8005138:	f7ff fca8 	bl	8004a8c <WIZCHIP_READ>
 800513c:	4603      	mov	r3, r0
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b14      	cmp	r3, #20
 8005142:	d1ed      	bne.n	8005120 <listen+0x78>
   }
   return SOCK_OK;
 8005144:	2301      	movs	r3, #1
}
 8005146:	4618      	mov	r0, r3
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
	...

08005150 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	4603      	mov	r3, r0
 8005158:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800515a:	79fb      	ldrb	r3, [r7, #7]
 800515c:	2b08      	cmp	r3, #8
 800515e:	d902      	bls.n	8005166 <disconnect+0x16>
 8005160:	f04f 33ff 	mov.w	r3, #4294967295
 8005164:	e05c      	b.n	8005220 <disconnect+0xd0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005166:	79fb      	ldrb	r3, [r7, #7]
 8005168:	3308      	adds	r3, #8
 800516a:	019b      	lsls	r3, r3, #6
 800516c:	4618      	mov	r0, r3
 800516e:	f7ff fc8d 	bl	8004a8c <WIZCHIP_READ>
 8005172:	4603      	mov	r3, r0
 8005174:	f003 030f 	and.w	r3, r3, #15
 8005178:	2b01      	cmp	r3, #1
 800517a:	d002      	beq.n	8005182 <disconnect+0x32>
 800517c:	f06f 0304 	mvn.w	r3, #4
 8005180:	e04e      	b.n	8005220 <disconnect+0xd0>
	setSn_CR(sn,Sn_CR_DISCON);
 8005182:	79fb      	ldrb	r3, [r7, #7]
 8005184:	3308      	adds	r3, #8
 8005186:	019b      	lsls	r3, r3, #6
 8005188:	3302      	adds	r3, #2
 800518a:	2108      	movs	r1, #8
 800518c:	4618      	mov	r0, r3
 800518e:	f7ff fc5f 	bl	8004a50 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8005192:	bf00      	nop
 8005194:	79fb      	ldrb	r3, [r7, #7]
 8005196:	3308      	adds	r3, #8
 8005198:	019b      	lsls	r3, r3, #6
 800519a:	3302      	adds	r3, #2
 800519c:	4618      	mov	r0, r3
 800519e:	f7ff fc75 	bl	8004a8c <WIZCHIP_READ>
 80051a2:	4603      	mov	r3, r0
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1f4      	bne.n	8005194 <disconnect+0x44>
	sock_is_sending &= ~(1<<sn);
 80051aa:	79fb      	ldrb	r3, [r7, #7]
 80051ac:	2201      	movs	r2, #1
 80051ae:	fa02 f303 	lsl.w	r3, r2, r3
 80051b2:	b21b      	sxth	r3, r3
 80051b4:	43db      	mvns	r3, r3
 80051b6:	b21a      	sxth	r2, r3
 80051b8:	4b1b      	ldr	r3, [pc, #108]	; (8005228 <disconnect+0xd8>)
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	b21b      	sxth	r3, r3
 80051be:	4013      	ands	r3, r2
 80051c0:	b21b      	sxth	r3, r3
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	4b18      	ldr	r3, [pc, #96]	; (8005228 <disconnect+0xd8>)
 80051c6:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80051c8:	4b18      	ldr	r3, [pc, #96]	; (800522c <disconnect+0xdc>)
 80051ca:	881b      	ldrh	r3, [r3, #0]
 80051cc:	461a      	mov	r2, r3
 80051ce:	79fb      	ldrb	r3, [r7, #7]
 80051d0:	fa42 f303 	asr.w	r3, r2, r3
 80051d4:	f003 0301 	and.w	r3, r3, #1
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d015      	beq.n	8005208 <disconnect+0xb8>
 80051dc:	2300      	movs	r3, #0
 80051de:	e01f      	b.n	8005220 <disconnect+0xd0>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80051e0:	79fb      	ldrb	r3, [r7, #7]
 80051e2:	3308      	adds	r3, #8
 80051e4:	019b      	lsls	r3, r3, #6
 80051e6:	3306      	adds	r3, #6
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7ff fc4f 	bl	8004a8c <WIZCHIP_READ>
 80051ee:	4603      	mov	r3, r0
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	f003 0308 	and.w	r3, r3, #8
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d006      	beq.n	8005208 <disconnect+0xb8>
	   {
	      close(sn);
 80051fa:	79fb      	ldrb	r3, [r7, #7]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7ff fe95 	bl	8004f2c <close>
	      return SOCKERR_TIMEOUT;
 8005202:	f06f 030c 	mvn.w	r3, #12
 8005206:	e00b      	b.n	8005220 <disconnect+0xd0>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8005208:	79fb      	ldrb	r3, [r7, #7]
 800520a:	3308      	adds	r3, #8
 800520c:	019b      	lsls	r3, r3, #6
 800520e:	3308      	adds	r3, #8
 8005210:	4618      	mov	r0, r3
 8005212:	f7ff fc3b 	bl	8004a8c <WIZCHIP_READ>
 8005216:	4603      	mov	r3, r0
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1e0      	bne.n	80051e0 <disconnect+0x90>
	   }
	}
	return SOCK_OK;
 800521e:	2301      	movs	r3, #1
}
 8005220:	4618      	mov	r0, r3
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	200009c6 	.word	0x200009c6
 800522c:	200009c4 	.word	0x200009c4

08005230 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	4603      	mov	r3, r0
 8005238:	6039      	str	r1, [r7, #0]
 800523a:	71fb      	strb	r3, [r7, #7]
 800523c:	4613      	mov	r3, r2
 800523e:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8005240:	2300      	movs	r3, #0
 8005242:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8005244:	2300      	movs	r3, #0
 8005246:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8005248:	79fb      	ldrb	r3, [r7, #7]
 800524a:	2b08      	cmp	r3, #8
 800524c:	d902      	bls.n	8005254 <send+0x24>
 800524e:	f04f 33ff 	mov.w	r3, #4294967295
 8005252:	e0e1      	b.n	8005418 <send+0x1e8>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005254:	79fb      	ldrb	r3, [r7, #7]
 8005256:	3308      	adds	r3, #8
 8005258:	019b      	lsls	r3, r3, #6
 800525a:	4618      	mov	r0, r3
 800525c:	f7ff fc16 	bl	8004a8c <WIZCHIP_READ>
 8005260:	4603      	mov	r3, r0
 8005262:	f003 030f 	and.w	r3, r3, #15
 8005266:	2b01      	cmp	r3, #1
 8005268:	d002      	beq.n	8005270 <send+0x40>
 800526a:	f06f 0304 	mvn.w	r3, #4
 800526e:	e0d3      	b.n	8005418 <send+0x1e8>
   CHECK_SOCKDATA();
 8005270:	88bb      	ldrh	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d102      	bne.n	800527c <send+0x4c>
 8005276:	f06f 030d 	mvn.w	r3, #13
 800527a:	e0cd      	b.n	8005418 <send+0x1e8>
   tmp = getSn_SR(sn);
 800527c:	79fb      	ldrb	r3, [r7, #7]
 800527e:	3308      	adds	r3, #8
 8005280:	019b      	lsls	r3, r3, #6
 8005282:	3308      	adds	r3, #8
 8005284:	4618      	mov	r0, r3
 8005286:	f7ff fc01 	bl	8004a8c <WIZCHIP_READ>
 800528a:	4603      	mov	r3, r0
 800528c:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 800528e:	7bfb      	ldrb	r3, [r7, #15]
 8005290:	2b17      	cmp	r3, #23
 8005292:	d005      	beq.n	80052a0 <send+0x70>
 8005294:	7bfb      	ldrb	r3, [r7, #15]
 8005296:	2b1c      	cmp	r3, #28
 8005298:	d002      	beq.n	80052a0 <send+0x70>
 800529a:	f06f 0306 	mvn.w	r3, #6
 800529e:	e0bb      	b.n	8005418 <send+0x1e8>
   if( sock_is_sending & (1<<sn) )
 80052a0:	4b5f      	ldr	r3, [pc, #380]	; (8005420 <send+0x1f0>)
 80052a2:	881b      	ldrh	r3, [r3, #0]
 80052a4:	461a      	mov	r2, r3
 80052a6:	79fb      	ldrb	r3, [r7, #7]
 80052a8:	fa42 f303 	asr.w	r3, r2, r3
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d033      	beq.n	800531c <send+0xec>
   {
      tmp = getSn_IR(sn);
 80052b4:	79fb      	ldrb	r3, [r7, #7]
 80052b6:	3308      	adds	r3, #8
 80052b8:	019b      	lsls	r3, r3, #6
 80052ba:	3306      	adds	r3, #6
 80052bc:	4618      	mov	r0, r3
 80052be:	f7ff fbe5 	bl	8004a8c <WIZCHIP_READ>
 80052c2:	4603      	mov	r3, r0
 80052c4:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80052c6:	7bfb      	ldrb	r3, [r7, #15]
 80052c8:	f003 0310 	and.w	r3, r3, #16
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d017      	beq.n	8005300 <send+0xd0>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80052d0:	79fb      	ldrb	r3, [r7, #7]
 80052d2:	3308      	adds	r3, #8
 80052d4:	019b      	lsls	r3, r3, #6
 80052d6:	3306      	adds	r3, #6
 80052d8:	2110      	movs	r1, #16
 80052da:	4618      	mov	r0, r3
 80052dc:	f7ff fbb8 	bl	8004a50 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80052e0:	79fb      	ldrb	r3, [r7, #7]
 80052e2:	2201      	movs	r2, #1
 80052e4:	fa02 f303 	lsl.w	r3, r2, r3
 80052e8:	b21b      	sxth	r3, r3
 80052ea:	43db      	mvns	r3, r3
 80052ec:	b21a      	sxth	r2, r3
 80052ee:	4b4c      	ldr	r3, [pc, #304]	; (8005420 <send+0x1f0>)
 80052f0:	881b      	ldrh	r3, [r3, #0]
 80052f2:	b21b      	sxth	r3, r3
 80052f4:	4013      	ands	r3, r2
 80052f6:	b21b      	sxth	r3, r3
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	4b49      	ldr	r3, [pc, #292]	; (8005420 <send+0x1f0>)
 80052fc:	801a      	strh	r2, [r3, #0]
 80052fe:	e00d      	b.n	800531c <send+0xec>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8005300:	7bfb      	ldrb	r3, [r7, #15]
 8005302:	f003 0308 	and.w	r3, r3, #8
 8005306:	2b00      	cmp	r3, #0
 8005308:	d006      	beq.n	8005318 <send+0xe8>
      {
         close(sn);
 800530a:	79fb      	ldrb	r3, [r7, #7]
 800530c:	4618      	mov	r0, r3
 800530e:	f7ff fe0d 	bl	8004f2c <close>
         return SOCKERR_TIMEOUT;
 8005312:	f06f 030c 	mvn.w	r3, #12
 8005316:	e07f      	b.n	8005418 <send+0x1e8>
      }
      else return SOCK_BUSY;
 8005318:	2300      	movs	r3, #0
 800531a:	e07d      	b.n	8005418 <send+0x1e8>
   }
   freesize = getSn_TxMAX(sn);
 800531c:	79fb      	ldrb	r3, [r7, #7]
 800531e:	4618      	mov	r0, r3
 8005320:	f7ff fbd2 	bl	8004ac8 <getTMSR>
 8005324:	4603      	mov	r3, r0
 8005326:	b29b      	uxth	r3, r3
 8005328:	029b      	lsls	r3, r3, #10
 800532a:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800532c:	88ba      	ldrh	r2, [r7, #4]
 800532e:	89bb      	ldrh	r3, [r7, #12]
 8005330:	429a      	cmp	r2, r3
 8005332:	d901      	bls.n	8005338 <send+0x108>
 8005334:	89bb      	ldrh	r3, [r7, #12]
 8005336:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8005338:	79fb      	ldrb	r3, [r7, #7]
 800533a:	4618      	mov	r0, r3
 800533c:	f7ff fc0a 	bl	8004b54 <getSn_TX_FSR>
 8005340:	4603      	mov	r3, r0
 8005342:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8005344:	79fb      	ldrb	r3, [r7, #7]
 8005346:	3308      	adds	r3, #8
 8005348:	019b      	lsls	r3, r3, #6
 800534a:	3308      	adds	r3, #8
 800534c:	4618      	mov	r0, r3
 800534e:	f7ff fb9d 	bl	8004a8c <WIZCHIP_READ>
 8005352:	4603      	mov	r3, r0
 8005354:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8005356:	7bfb      	ldrb	r3, [r7, #15]
 8005358:	2b17      	cmp	r3, #23
 800535a:	d009      	beq.n	8005370 <send+0x140>
 800535c:	7bfb      	ldrb	r3, [r7, #15]
 800535e:	2b1c      	cmp	r3, #28
 8005360:	d006      	beq.n	8005370 <send+0x140>
      {
         close(sn);
 8005362:	79fb      	ldrb	r3, [r7, #7]
 8005364:	4618      	mov	r0, r3
 8005366:	f7ff fde1 	bl	8004f2c <close>
         return SOCKERR_SOCKSTATUS;
 800536a:	f06f 0306 	mvn.w	r3, #6
 800536e:	e053      	b.n	8005418 <send+0x1e8>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8005370:	4b2c      	ldr	r3, [pc, #176]	; (8005424 <send+0x1f4>)
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	461a      	mov	r2, r3
 8005376:	79fb      	ldrb	r3, [r7, #7]
 8005378:	fa42 f303 	asr.w	r3, r2, r3
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	2b00      	cmp	r3, #0
 8005382:	d005      	beq.n	8005390 <send+0x160>
 8005384:	88ba      	ldrh	r2, [r7, #4]
 8005386:	89bb      	ldrh	r3, [r7, #12]
 8005388:	429a      	cmp	r2, r3
 800538a:	d901      	bls.n	8005390 <send+0x160>
 800538c:	2300      	movs	r3, #0
 800538e:	e043      	b.n	8005418 <send+0x1e8>
      if(len <= freesize) break;
 8005390:	88ba      	ldrh	r2, [r7, #4]
 8005392:	89bb      	ldrh	r3, [r7, #12]
 8005394:	429a      	cmp	r2, r3
 8005396:	d900      	bls.n	800539a <send+0x16a>
      freesize = getSn_TX_FSR(sn);
 8005398:	e7ce      	b.n	8005338 <send+0x108>
      if(len <= freesize) break;
 800539a:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 800539c:	88ba      	ldrh	r2, [r7, #4]
 800539e:	79fb      	ldrb	r3, [r7, #7]
 80053a0:	6839      	ldr	r1, [r7, #0]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7ff fc32 	bl	8004c0c <wiz_send_data>
   #if _WIZCHIP_ == 5200
      sock_next_rd[sn] = getSn_TX_RD(sn) + len;
   #endif

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
 80053a8:	79fb      	ldrb	r3, [r7, #7]
 80053aa:	3308      	adds	r3, #8
 80053ac:	019b      	lsls	r3, r3, #6
 80053ae:	3320      	adds	r3, #32
 80053b0:	461a      	mov	r2, r3
 80053b2:	88bb      	ldrh	r3, [r7, #4]
 80053b4:	0c1b      	lsrs	r3, r3, #16
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	4619      	mov	r1, r3
 80053ba:	4610      	mov	r0, r2
 80053bc:	f7ff fb48 	bl	8004a50 <WIZCHIP_WRITE>
 80053c0:	79fb      	ldrb	r3, [r7, #7]
 80053c2:	3308      	adds	r3, #8
 80053c4:	019b      	lsls	r3, r3, #6
 80053c6:	3322      	adds	r3, #34	; 0x22
 80053c8:	461a      	mov	r2, r3
 80053ca:	88bb      	ldrh	r3, [r7, #4]
 80053cc:	4619      	mov	r1, r3
 80053ce:	4610      	mov	r0, r2
 80053d0:	f7ff fb3e 	bl	8004a50 <WIZCHIP_WRITE>
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 80053d4:	79fb      	ldrb	r3, [r7, #7]
 80053d6:	3308      	adds	r3, #8
 80053d8:	019b      	lsls	r3, r3, #6
 80053da:	3302      	adds	r3, #2
 80053dc:	2120      	movs	r1, #32
 80053de:	4618      	mov	r0, r3
 80053e0:	f7ff fb36 	bl	8004a50 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80053e4:	bf00      	nop
 80053e6:	79fb      	ldrb	r3, [r7, #7]
 80053e8:	3308      	adds	r3, #8
 80053ea:	019b      	lsls	r3, r3, #6
 80053ec:	3302      	adds	r3, #2
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7ff fb4c 	bl	8004a8c <WIZCHIP_READ>
 80053f4:	4603      	mov	r3, r0
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1f4      	bne.n	80053e6 <send+0x1b6>
   sock_is_sending |= (1 << sn);
 80053fc:	79fb      	ldrb	r3, [r7, #7]
 80053fe:	2201      	movs	r2, #1
 8005400:	fa02 f303 	lsl.w	r3, r2, r3
 8005404:	b21a      	sxth	r2, r3
 8005406:	4b06      	ldr	r3, [pc, #24]	; (8005420 <send+0x1f0>)
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	b21b      	sxth	r3, r3
 800540c:	4313      	orrs	r3, r2
 800540e:	b21b      	sxth	r3, r3
 8005410:	b29a      	uxth	r2, r3
 8005412:	4b03      	ldr	r3, [pc, #12]	; (8005420 <send+0x1f0>)
 8005414:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8005416:	88bb      	ldrh	r3, [r7, #4]
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	200009c6 	.word	0x200009c6
 8005424:	200009c4 	.word	0x200009c4

08005428 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8005428:	b590      	push	{r4, r7, lr}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	4603      	mov	r3, r0
 8005430:	6039      	str	r1, [r7, #0]
 8005432:	71fb      	strb	r3, [r7, #7]
 8005434:	4613      	mov	r3, r2
 8005436:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8005438:	2300      	movs	r3, #0
 800543a:	737b      	strb	r3, [r7, #13]
   uint16_t recvsize = 0;
 800543c:	2300      	movs	r3, #0
 800543e:	81fb      	strh	r3, [r7, #14]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8005440:	79fb      	ldrb	r3, [r7, #7]
 8005442:	2b08      	cmp	r3, #8
 8005444:	d902      	bls.n	800544c <recv+0x24>
 8005446:	f04f 33ff 	mov.w	r3, #4294967295
 800544a:	e145      	b.n	80056d8 <recv+0x2b0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800544c:	79fb      	ldrb	r3, [r7, #7]
 800544e:	3308      	adds	r3, #8
 8005450:	019b      	lsls	r3, r3, #6
 8005452:	4618      	mov	r0, r3
 8005454:	f7ff fb1a 	bl	8004a8c <WIZCHIP_READ>
 8005458:	4603      	mov	r3, r0
 800545a:	f003 030f 	and.w	r3, r3, #15
 800545e:	2b01      	cmp	r3, #1
 8005460:	d002      	beq.n	8005468 <recv+0x40>
 8005462:	f06f 0304 	mvn.w	r3, #4
 8005466:	e137      	b.n	80056d8 <recv+0x2b0>
   CHECK_SOCKDATA();
 8005468:	88bb      	ldrh	r3, [r7, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d102      	bne.n	8005474 <recv+0x4c>
 800546e:	f06f 030d 	mvn.w	r3, #13
 8005472:	e131      	b.n	80056d8 <recv+0x2b0>
   
   recvsize = getSn_RxMAX(sn);
 8005474:	79fb      	ldrb	r3, [r7, #7]
 8005476:	4618      	mov	r0, r3
 8005478:	f7ff fb49 	bl	8004b0e <getRMSR>
 800547c:	4603      	mov	r3, r0
 800547e:	b29b      	uxth	r3, r3
 8005480:	029b      	lsls	r3, r3, #10
 8005482:	81fb      	strh	r3, [r7, #14]
   if(recvsize < len) len = recvsize;
 8005484:	89fa      	ldrh	r2, [r7, #14]
 8005486:	88bb      	ldrh	r3, [r7, #4]
 8005488:	429a      	cmp	r2, r3
 800548a:	d201      	bcs.n	8005490 <recv+0x68>
 800548c:	89fb      	ldrh	r3, [r7, #14]
 800548e:	80bb      	strh	r3, [r7, #4]
      
//A20150601 : For Integrating with W5300
#if _WIZCHIP_ == 5300
   //sock_pack_info[sn] = PACK_COMPLETED;    // for clear      
   if(sock_remained_size[sn] == 0)
 8005490:	79fb      	ldrb	r3, [r7, #7]
 8005492:	4a93      	ldr	r2, [pc, #588]	; (80056e0 <recv+0x2b8>)
 8005494:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d148      	bne.n	800552e <recv+0x106>
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 800549c:	79fb      	ldrb	r3, [r7, #7]
 800549e:	4618      	mov	r0, r3
 80054a0:	f7ff fb82 	bl	8004ba8 <getSn_RX_RSR>
 80054a4:	4603      	mov	r3, r0
 80054a6:	81fb      	strh	r3, [r7, #14]
         tmp = getSn_SR(sn);
 80054a8:	79fb      	ldrb	r3, [r7, #7]
 80054aa:	3308      	adds	r3, #8
 80054ac:	019b      	lsls	r3, r3, #6
 80054ae:	3308      	adds	r3, #8
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7ff faeb 	bl	8004a8c <WIZCHIP_READ>
 80054b6:	4603      	mov	r3, r0
 80054b8:	737b      	strb	r3, [r7, #13]
         if (tmp != SOCK_ESTABLISHED)
 80054ba:	7b7b      	ldrb	r3, [r7, #13]
 80054bc:	2b17      	cmp	r3, #23
 80054be:	d020      	beq.n	8005502 <recv+0xda>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 80054c0:	7b7b      	ldrb	r3, [r7, #13]
 80054c2:	2b1c      	cmp	r3, #28
 80054c4:	d116      	bne.n	80054f4 <recv+0xcc>
            {
               if(recvsize != 0) break;
 80054c6:	89fb      	ldrh	r3, [r7, #14]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d12d      	bne.n	8005528 <recv+0x100>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80054cc:	79fb      	ldrb	r3, [r7, #7]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7ff fb40 	bl	8004b54 <getSn_TX_FSR>
 80054d4:	4604      	mov	r4, r0
 80054d6:	79fb      	ldrb	r3, [r7, #7]
 80054d8:	4618      	mov	r0, r3
 80054da:	f7ff faf5 	bl	8004ac8 <getTMSR>
 80054de:	4603      	mov	r3, r0
 80054e0:	029b      	lsls	r3, r3, #10
 80054e2:	429c      	cmp	r4, r3
 80054e4:	d10d      	bne.n	8005502 <recv+0xda>
               {
                  close(sn);
 80054e6:	79fb      	ldrb	r3, [r7, #7]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7ff fd1f 	bl	8004f2c <close>
                  return SOCKERR_SOCKSTATUS;
 80054ee:	f06f 0306 	mvn.w	r3, #6
 80054f2:	e0f1      	b.n	80056d8 <recv+0x2b0>
               }
            }
            else
            {
               close(sn);
 80054f4:	79fb      	ldrb	r3, [r7, #7]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7ff fd18 	bl	8004f2c <close>
               return SOCKERR_SOCKSTATUS;
 80054fc:	f06f 0306 	mvn.w	r3, #6
 8005500:	e0ea      	b.n	80056d8 <recv+0x2b0>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8005502:	4b78      	ldr	r3, [pc, #480]	; (80056e4 <recv+0x2bc>)
 8005504:	881b      	ldrh	r3, [r3, #0]
 8005506:	461a      	mov	r2, r3
 8005508:	79fb      	ldrb	r3, [r7, #7]
 800550a:	fa42 f303 	asr.w	r3, r2, r3
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	d004      	beq.n	8005520 <recv+0xf8>
 8005516:	89fb      	ldrh	r3, [r7, #14]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d101      	bne.n	8005520 <recv+0xf8>
 800551c:	2300      	movs	r3, #0
 800551e:	e0db      	b.n	80056d8 <recv+0x2b0>
         if(recvsize != 0) break;
 8005520:	89fb      	ldrh	r3, [r7, #14]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d102      	bne.n	800552c <recv+0x104>
         recvsize = getSn_RX_RSR(sn);
 8005526:	e7b9      	b.n	800549c <recv+0x74>
               if(recvsize != 0) break;
 8005528:	bf00      	nop
 800552a:	e000      	b.n	800552e <recv+0x106>
         if(recvsize != 0) break;
 800552c:	bf00      	nop
   }
#endif

//A20150601 : For integrating with W5300
#if _WIZCHIP_ == 5300
   if((sock_remained_size[sn] == 0) || (getSn_MR(sn) & Sn_MR_ALIGN))
 800552e:	79fb      	ldrb	r3, [r7, #7]
 8005530:	4a6b      	ldr	r2, [pc, #428]	; (80056e0 <recv+0x2b8>)
 8005532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00a      	beq.n	8005550 <recv+0x128>
 800553a:	79fb      	ldrb	r3, [r7, #7]
 800553c:	3308      	adds	r3, #8
 800553e:	019b      	lsls	r3, r3, #6
 8005540:	4618      	mov	r0, r3
 8005542:	f7ff faa3 	bl	8004a8c <WIZCHIP_READ>
 8005546:	4603      	mov	r3, r0
 8005548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800554c:	2b00      	cmp	r3, #0
 800554e:	d035      	beq.n	80055bc <recv+0x194>
   {
      mr = getMR();
 8005550:	2000      	movs	r0, #0
 8005552:	f7ff fa9b 	bl	8004a8c <WIZCHIP_READ>
 8005556:	4603      	mov	r3, r0
 8005558:	817b      	strh	r3, [r7, #10]
      if((getSn_MR(sn) & Sn_MR_ALIGN)==0)
 800555a:	79fb      	ldrb	r3, [r7, #7]
 800555c:	3308      	adds	r3, #8
 800555e:	019b      	lsls	r3, r3, #6
 8005560:	4618      	mov	r0, r3
 8005562:	f7ff fa93 	bl	8004a8c <WIZCHIP_READ>
 8005566:	4603      	mov	r3, r0
 8005568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800556c:	2b00      	cmp	r3, #0
 800556e:	d120      	bne.n	80055b2 <recv+0x18a>
      {
         wiz_recv_data(sn,head,2);
 8005570:	f107 0108 	add.w	r1, r7, #8
 8005574:	79fb      	ldrb	r3, [r7, #7]
 8005576:	2202      	movs	r2, #2
 8005578:	4618      	mov	r0, r3
 800557a:	f7ff fb79 	bl	8004c70 <wiz_recv_data>
         if(mr & MR_FS)
 800557e:	897b      	ldrh	r3, [r7, #10]
 8005580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005584:	2b00      	cmp	r3, #0
 8005586:	d008      	beq.n	800559a <recv+0x172>
            recvsize = (((uint16_t)head[1]) << 8) | ((uint16_t)head[0]);
 8005588:	7a7b      	ldrb	r3, [r7, #9]
 800558a:	021b      	lsls	r3, r3, #8
 800558c:	b21a      	sxth	r2, r3
 800558e:	7a3b      	ldrb	r3, [r7, #8]
 8005590:	b21b      	sxth	r3, r3
 8005592:	4313      	orrs	r3, r2
 8005594:	b21b      	sxth	r3, r3
 8005596:	81fb      	strh	r3, [r7, #14]
 8005598:	e007      	b.n	80055aa <recv+0x182>
         else
            recvsize = (((uint16_t)head[0]) << 8) | ((uint16_t)head[1]);
 800559a:	7a3b      	ldrb	r3, [r7, #8]
 800559c:	021b      	lsls	r3, r3, #8
 800559e:	b21a      	sxth	r2, r3
 80055a0:	7a7b      	ldrb	r3, [r7, #9]
 80055a2:	b21b      	sxth	r3, r3
 80055a4:	4313      	orrs	r3, r2
 80055a6:	b21b      	sxth	r3, r3
 80055a8:	81fb      	strh	r3, [r7, #14]
         sock_pack_info[sn] = PACK_FIRST;
 80055aa:	79fb      	ldrb	r3, [r7, #7]
 80055ac:	4a4e      	ldr	r2, [pc, #312]	; (80056e8 <recv+0x2c0>)
 80055ae:	2180      	movs	r1, #128	; 0x80
 80055b0:	54d1      	strb	r1, [r2, r3]
      }
      sock_remained_size[sn] = recvsize;
 80055b2:	79fb      	ldrb	r3, [r7, #7]
 80055b4:	494a      	ldr	r1, [pc, #296]	; (80056e0 <recv+0x2b8>)
 80055b6:	89fa      	ldrh	r2, [r7, #14]
 80055b8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
   }
   if(len > sock_remained_size[sn]) len = sock_remained_size[sn];
 80055bc:	79fb      	ldrb	r3, [r7, #7]
 80055be:	4a48      	ldr	r2, [pc, #288]	; (80056e0 <recv+0x2b8>)
 80055c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055c4:	88ba      	ldrh	r2, [r7, #4]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d904      	bls.n	80055d4 <recv+0x1ac>
 80055ca:	79fb      	ldrb	r3, [r7, #7]
 80055cc:	4a44      	ldr	r2, [pc, #272]	; (80056e0 <recv+0x2b8>)
 80055ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055d2:	80bb      	strh	r3, [r7, #4]
   recvsize = len;   
 80055d4:	88bb      	ldrh	r3, [r7, #4]
 80055d6:	81fb      	strh	r3, [r7, #14]
   if(sock_pack_info[sn] & PACK_FIFOBYTE)
 80055d8:	79fb      	ldrb	r3, [r7, #7]
 80055da:	4a43      	ldr	r2, [pc, #268]	; (80056e8 <recv+0x2c0>)
 80055dc:	5cd3      	ldrb	r3, [r2, r3]
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d01d      	beq.n	8005622 <recv+0x1fa>
   {
      *buf = sock_remained_byte[sn];
 80055e6:	79fb      	ldrb	r3, [r7, #7]
 80055e8:	4a40      	ldr	r2, [pc, #256]	; (80056ec <recv+0x2c4>)
 80055ea:	5cd2      	ldrb	r2, [r2, r3]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	701a      	strb	r2, [r3, #0]
      buf++;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	3301      	adds	r3, #1
 80055f4:	603b      	str	r3, [r7, #0]
      sock_pack_info[sn] &= ~(PACK_FIFOBYTE);
 80055f6:	79fb      	ldrb	r3, [r7, #7]
 80055f8:	4a3b      	ldr	r2, [pc, #236]	; (80056e8 <recv+0x2c0>)
 80055fa:	5cd2      	ldrb	r2, [r2, r3]
 80055fc:	79fb      	ldrb	r3, [r7, #7]
 80055fe:	f022 0202 	bic.w	r2, r2, #2
 8005602:	b2d1      	uxtb	r1, r2
 8005604:	4a38      	ldr	r2, [pc, #224]	; (80056e8 <recv+0x2c0>)
 8005606:	54d1      	strb	r1, [r2, r3]
      recvsize -= 1;
 8005608:	89fb      	ldrh	r3, [r7, #14]
 800560a:	3b01      	subs	r3, #1
 800560c:	81fb      	strh	r3, [r7, #14]
      sock_remained_size[sn] -= 1;
 800560e:	79fb      	ldrb	r3, [r7, #7]
 8005610:	4a33      	ldr	r2, [pc, #204]	; (80056e0 <recv+0x2b8>)
 8005612:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005616:	79fb      	ldrb	r3, [r7, #7]
 8005618:	3a01      	subs	r2, #1
 800561a:	b291      	uxth	r1, r2
 800561c:	4a30      	ldr	r2, [pc, #192]	; (80056e0 <recv+0x2b8>)
 800561e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   }
   if(recvsize != 0)
 8005622:	89fb      	ldrh	r3, [r7, #14]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d019      	beq.n	800565c <recv+0x234>
   {
      wiz_recv_data(sn, buf, recvsize);
 8005628:	89fa      	ldrh	r2, [r7, #14]
 800562a:	79fb      	ldrb	r3, [r7, #7]
 800562c:	6839      	ldr	r1, [r7, #0]
 800562e:	4618      	mov	r0, r3
 8005630:	f7ff fb1e 	bl	8004c70 <wiz_recv_data>
      setSn_CR(sn,Sn_CR_RECV);
 8005634:	79fb      	ldrb	r3, [r7, #7]
 8005636:	3308      	adds	r3, #8
 8005638:	019b      	lsls	r3, r3, #6
 800563a:	3302      	adds	r3, #2
 800563c:	2140      	movs	r1, #64	; 0x40
 800563e:	4618      	mov	r0, r3
 8005640:	f7ff fa06 	bl	8004a50 <WIZCHIP_WRITE>
      while(getSn_CR(sn));
 8005644:	bf00      	nop
 8005646:	79fb      	ldrb	r3, [r7, #7]
 8005648:	3308      	adds	r3, #8
 800564a:	019b      	lsls	r3, r3, #6
 800564c:	3302      	adds	r3, #2
 800564e:	4618      	mov	r0, r3
 8005650:	f7ff fa1c 	bl	8004a8c <WIZCHIP_READ>
 8005654:	4603      	mov	r3, r0
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1f4      	bne.n	8005646 <recv+0x21e>
   }
   sock_remained_size[sn] -= recvsize;
 800565c:	79fb      	ldrb	r3, [r7, #7]
 800565e:	4a20      	ldr	r2, [pc, #128]	; (80056e0 <recv+0x2b8>)
 8005660:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005664:	79fb      	ldrb	r3, [r7, #7]
 8005666:	89fa      	ldrh	r2, [r7, #14]
 8005668:	1a8a      	subs	r2, r1, r2
 800566a:	b291      	uxth	r1, r2
 800566c:	4a1c      	ldr	r2, [pc, #112]	; (80056e0 <recv+0x2b8>)
 800566e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   if(sock_remained_size[sn] != 0)
 8005672:	79fb      	ldrb	r3, [r7, #7]
 8005674:	4a1a      	ldr	r2, [pc, #104]	; (80056e0 <recv+0x2b8>)
 8005676:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d017      	beq.n	80056ae <recv+0x286>
   {
      sock_pack_info[sn] |= PACK_REMAINED;
 800567e:	79fb      	ldrb	r3, [r7, #7]
 8005680:	4a19      	ldr	r2, [pc, #100]	; (80056e8 <recv+0x2c0>)
 8005682:	5cd2      	ldrb	r2, [r2, r3]
 8005684:	79fb      	ldrb	r3, [r7, #7]
 8005686:	f042 0201 	orr.w	r2, r2, #1
 800568a:	b2d1      	uxtb	r1, r2
 800568c:	4a16      	ldr	r2, [pc, #88]	; (80056e8 <recv+0x2c0>)
 800568e:	54d1      	strb	r1, [r2, r3]
      if(recvsize & 0x1) sock_pack_info[sn] |= PACK_FIFOBYTE;
 8005690:	89fb      	ldrh	r3, [r7, #14]
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00d      	beq.n	80056b6 <recv+0x28e>
 800569a:	79fb      	ldrb	r3, [r7, #7]
 800569c:	4a12      	ldr	r2, [pc, #72]	; (80056e8 <recv+0x2c0>)
 800569e:	5cd2      	ldrb	r2, [r2, r3]
 80056a0:	79fb      	ldrb	r3, [r7, #7]
 80056a2:	f042 0202 	orr.w	r2, r2, #2
 80056a6:	b2d1      	uxtb	r1, r2
 80056a8:	4a0f      	ldr	r2, [pc, #60]	; (80056e8 <recv+0x2c0>)
 80056aa:	54d1      	strb	r1, [r2, r3]
 80056ac:	e003      	b.n	80056b6 <recv+0x28e>
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
 80056ae:	79fb      	ldrb	r3, [r7, #7]
 80056b0:	4a0d      	ldr	r2, [pc, #52]	; (80056e8 <recv+0x2c0>)
 80056b2:	2100      	movs	r1, #0
 80056b4:	54d1      	strb	r1, [r2, r3]
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
 80056b6:	79fb      	ldrb	r3, [r7, #7]
 80056b8:	3308      	adds	r3, #8
 80056ba:	019b      	lsls	r3, r3, #6
 80056bc:	4618      	mov	r0, r3
 80056be:	f7ff f9e5 	bl	8004a8c <WIZCHIP_READ>
 80056c2:	4603      	mov	r3, r0
 80056c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d004      	beq.n	80056d6 <recv+0x2ae>
 80056cc:	79fb      	ldrb	r3, [r7, #7]
 80056ce:	4a04      	ldr	r2, [pc, #16]	; (80056e0 <recv+0x2b8>)
 80056d0:	2100      	movs	r1, #0
 80056d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   while(getSn_CR(sn));
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80056d6:	88bb      	ldrh	r3, [r7, #4]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd90      	pop	{r4, r7, pc}
 80056e0:	200009c8 	.word	0x200009c8
 80056e4:	200009c4 	.word	0x200009c4
 80056e8:	200009d8 	.word	0x200009d8
 80056ec:	200009e0 	.word	0x200009e0

080056f0 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60b9      	str	r1, [r7, #8]
 80056f8:	607b      	str	r3, [r7, #4]
 80056fa:	4603      	mov	r3, r0
 80056fc:	73fb      	strb	r3, [r7, #15]
 80056fe:	4613      	mov	r3, r2
 8005700:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8005702:	2300      	movs	r3, #0
 8005704:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8005706:	2300      	movs	r3, #0
 8005708:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 800570a:	7bfb      	ldrb	r3, [r7, #15]
 800570c:	2b08      	cmp	r3, #8
 800570e:	d902      	bls.n	8005716 <sendto+0x26>
 8005710:	f04f 33ff 	mov.w	r3, #4294967295
 8005714:	e1e6      	b.n	8005ae4 <sendto+0x3f4>
   switch(getSn_MR(sn) & 0x0F)
 8005716:	7bfb      	ldrb	r3, [r7, #15]
 8005718:	3308      	adds	r3, #8
 800571a:	019b      	lsls	r3, r3, #6
 800571c:	4618      	mov	r0, r3
 800571e:	f7ff f9b5 	bl	8004a8c <WIZCHIP_READ>
 8005722:	4603      	mov	r3, r0
 8005724:	f003 030f 	and.w	r3, r3, #15
 8005728:	3b02      	subs	r3, #2
 800572a:	2b02      	cmp	r3, #2
 800572c:	d902      	bls.n	8005734 <sendto+0x44>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 800572e:	f06f 0304 	mvn.w	r3, #4
 8005732:	e1d7      	b.n	8005ae4 <sendto+0x3f4>
         break;
 8005734:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8005736:	89bb      	ldrh	r3, [r7, #12]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d102      	bne.n	8005742 <sendto+0x52>
 800573c:	f06f 030d 	mvn.w	r3, #13
 8005740:	e1d0      	b.n	8005ae4 <sendto+0x3f4>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	021b      	lsls	r3, r3, #8
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	3201      	adds	r2, #1
 8005750:	7812      	ldrb	r2, [r2, #0]
 8005752:	4413      	add	r3, r2
 8005754:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	021b      	lsls	r3, r3, #8
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	3202      	adds	r2, #2
 800575e:	7812      	ldrb	r2, [r2, #0]
 8005760:	4413      	add	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	021b      	lsls	r3, r3, #8
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	3203      	adds	r2, #3
 800576c:	7812      	ldrb	r2, [r2, #0]
 800576e:	4413      	add	r3, r2
 8005770:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10d      	bne.n	8005794 <sendto+0xa4>
 8005778:	7bfb      	ldrb	r3, [r7, #15]
 800577a:	3308      	adds	r3, #8
 800577c:	019b      	lsls	r3, r3, #6
 800577e:	4618      	mov	r0, r3
 8005780:	f7ff f984 	bl	8004a8c <WIZCHIP_READ>
 8005784:	4603      	mov	r3, r0
 8005786:	f003 0304 	and.w	r3, r3, #4
 800578a:	2b04      	cmp	r3, #4
 800578c:	d002      	beq.n	8005794 <sendto+0xa4>
 800578e:	f06f 030b 	mvn.w	r3, #11
 8005792:	e1a7      	b.n	8005ae4 <sendto+0x3f4>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8005794:	8c3b      	ldrh	r3, [r7, #32]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10d      	bne.n	80057b6 <sendto+0xc6>
 800579a:	7bfb      	ldrb	r3, [r7, #15]
 800579c:	3308      	adds	r3, #8
 800579e:	019b      	lsls	r3, r3, #6
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7ff f973 	bl	8004a8c <WIZCHIP_READ>
 80057a6:	4603      	mov	r3, r0
 80057a8:	f003 0304 	and.w	r3, r3, #4
 80057ac:	2b04      	cmp	r3, #4
 80057ae:	d002      	beq.n	80057b6 <sendto+0xc6>
 80057b0:	f06f 030a 	mvn.w	r3, #10
 80057b4:	e196      	b.n	8005ae4 <sendto+0x3f4>
   tmp = getSn_SR(sn);
 80057b6:	7bfb      	ldrb	r3, [r7, #15]
 80057b8:	3308      	adds	r3, #8
 80057ba:	019b      	lsls	r3, r3, #6
 80057bc:	3308      	adds	r3, #8
 80057be:	4618      	mov	r0, r3
 80057c0:	f7ff f964 	bl	8004a8c <WIZCHIP_READ>
 80057c4:	4603      	mov	r3, r0
 80057c6:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 80057c8:	7dfb      	ldrb	r3, [r7, #23]
 80057ca:	2b42      	cmp	r3, #66	; 0x42
 80057cc:	d008      	beq.n	80057e0 <sendto+0xf0>
 80057ce:	7dfb      	ldrb	r3, [r7, #23]
 80057d0:	2b22      	cmp	r3, #34	; 0x22
 80057d2:	d005      	beq.n	80057e0 <sendto+0xf0>
 80057d4:	7dfb      	ldrb	r3, [r7, #23]
 80057d6:	2b32      	cmp	r3, #50	; 0x32
 80057d8:	d002      	beq.n	80057e0 <sendto+0xf0>
 80057da:	f06f 0306 	mvn.w	r3, #6
 80057de:	e181      	b.n	8005ae4 <sendto+0x3f4>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 80057e0:	7bfb      	ldrb	r3, [r7, #15]
 80057e2:	3308      	adds	r3, #8
 80057e4:	019b      	lsls	r3, r3, #6
 80057e6:	3314      	adds	r3, #20
 80057e8:	4618      	mov	r0, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	021b      	lsls	r3, r3, #8
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	3301      	adds	r3, #1
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	4413      	add	r3, r2
 80057fe:	b29b      	uxth	r3, r3
 8005800:	4619      	mov	r1, r3
 8005802:	f7ff f925 	bl	8004a50 <WIZCHIP_WRITE>
 8005806:	7bfb      	ldrb	r3, [r7, #15]
 8005808:	3308      	adds	r3, #8
 800580a:	019b      	lsls	r3, r3, #6
 800580c:	3316      	adds	r3, #22
 800580e:	4618      	mov	r0, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	3302      	adds	r3, #2
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	b29b      	uxth	r3, r3
 8005818:	021b      	lsls	r3, r3, #8
 800581a:	b29a      	uxth	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	3303      	adds	r3, #3
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	b29b      	uxth	r3, r3
 8005824:	4413      	add	r3, r2
 8005826:	b29b      	uxth	r3, r3
 8005828:	4619      	mov	r1, r3
 800582a:	f7ff f911 	bl	8004a50 <WIZCHIP_WRITE>
   setSn_DPORT(sn,port);      
 800582e:	7bfb      	ldrb	r3, [r7, #15]
 8005830:	3308      	adds	r3, #8
 8005832:	019b      	lsls	r3, r3, #6
 8005834:	3312      	adds	r3, #18
 8005836:	461a      	mov	r2, r3
 8005838:	8c3b      	ldrh	r3, [r7, #32]
 800583a:	4619      	mov	r1, r3
 800583c:	4610      	mov	r0, r2
 800583e:	f7ff f907 	bl	8004a50 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8005842:	7bfb      	ldrb	r3, [r7, #15]
 8005844:	4618      	mov	r0, r3
 8005846:	f7ff f93f 	bl	8004ac8 <getTMSR>
 800584a:	4603      	mov	r3, r0
 800584c:	b29b      	uxth	r3, r3
 800584e:	029b      	lsls	r3, r3, #10
 8005850:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8005852:	89ba      	ldrh	r2, [r7, #12]
 8005854:	8abb      	ldrh	r3, [r7, #20]
 8005856:	429a      	cmp	r2, r3
 8005858:	d901      	bls.n	800585e <sendto+0x16e>
 800585a:	8abb      	ldrh	r3, [r7, #20]
 800585c:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800585e:	7bfb      	ldrb	r3, [r7, #15]
 8005860:	4618      	mov	r0, r3
 8005862:	f7ff f977 	bl	8004b54 <getSn_TX_FSR>
 8005866:	4603      	mov	r3, r0
 8005868:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800586a:	7bfb      	ldrb	r3, [r7, #15]
 800586c:	3308      	adds	r3, #8
 800586e:	019b      	lsls	r3, r3, #6
 8005870:	3308      	adds	r3, #8
 8005872:	4618      	mov	r0, r3
 8005874:	f7ff f90a 	bl	8004a8c <WIZCHIP_READ>
 8005878:	4603      	mov	r3, r0
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b00      	cmp	r3, #0
 800587e:	d102      	bne.n	8005886 <sendto+0x196>
 8005880:	f06f 0303 	mvn.w	r3, #3
 8005884:	e12e      	b.n	8005ae4 <sendto+0x3f4>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8005886:	4b99      	ldr	r3, [pc, #612]	; (8005aec <sendto+0x3fc>)
 8005888:	881b      	ldrh	r3, [r3, #0]
 800588a:	461a      	mov	r2, r3
 800588c:	7bfb      	ldrb	r3, [r7, #15]
 800588e:	fa42 f303 	asr.w	r3, r2, r3
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b00      	cmp	r3, #0
 8005898:	d005      	beq.n	80058a6 <sendto+0x1b6>
 800589a:	89ba      	ldrh	r2, [r7, #12]
 800589c:	8abb      	ldrh	r3, [r7, #20]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d901      	bls.n	80058a6 <sendto+0x1b6>
 80058a2:	2300      	movs	r3, #0
 80058a4:	e11e      	b.n	8005ae4 <sendto+0x3f4>
      if(len <= freesize) break;
 80058a6:	89ba      	ldrh	r2, [r7, #12]
 80058a8:	8abb      	ldrh	r3, [r7, #20]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d900      	bls.n	80058b0 <sendto+0x1c0>
      freesize = getSn_TX_FSR(sn);
 80058ae:	e7d6      	b.n	800585e <sendto+0x16e>
      if(len <= freesize) break;
 80058b0:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 80058b2:	89ba      	ldrh	r2, [r7, #12]
 80058b4:	7bfb      	ldrb	r3, [r7, #15]
 80058b6:	68b9      	ldr	r1, [r7, #8]
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7ff f9a7 	bl	8004c0c <wiz_send_data>

   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      getSIPR((uint8_t*)&taddr);
 80058be:	2018      	movs	r0, #24
 80058c0:	f7ff f8e4 	bl	8004a8c <WIZCHIP_READ>
 80058c4:	4603      	mov	r3, r0
 80058c6:	0a1b      	lsrs	r3, r3, #8
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	f107 0310 	add.w	r3, r7, #16
 80058ce:	b2d2      	uxtb	r2, r2
 80058d0:	701a      	strb	r2, [r3, #0]
 80058d2:	2018      	movs	r0, #24
 80058d4:	f7ff f8da 	bl	8004a8c <WIZCHIP_READ>
 80058d8:	4603      	mov	r3, r0
 80058da:	461a      	mov	r2, r3
 80058dc:	f107 0310 	add.w	r3, r7, #16
 80058e0:	3301      	adds	r3, #1
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	701a      	strb	r2, [r3, #0]
 80058e6:	201a      	movs	r0, #26
 80058e8:	f7ff f8d0 	bl	8004a8c <WIZCHIP_READ>
 80058ec:	4603      	mov	r3, r0
 80058ee:	0a1b      	lsrs	r3, r3, #8
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	f107 0310 	add.w	r3, r7, #16
 80058f6:	3302      	adds	r3, #2
 80058f8:	b2d2      	uxtb	r2, r2
 80058fa:	701a      	strb	r2, [r3, #0]
 80058fc:	201a      	movs	r0, #26
 80058fe:	f7ff f8c5 	bl	8004a8c <WIZCHIP_READ>
 8005902:	4603      	mov	r3, r0
 8005904:	461a      	mov	r2, r3
 8005906:	f107 0310 	add.w	r3, r7, #16
 800590a:	3303      	adds	r3, #3
 800590c:	b2d2      	uxtb	r2, r2
 800590e:	701a      	strb	r2, [r3, #0]
      if(taddr == 0)
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d145      	bne.n	80059a2 <sendto+0x2b2>
      {
         getSUBR((uint8_t*)&taddr);
 8005916:	2014      	movs	r0, #20
 8005918:	f7ff f8b8 	bl	8004a8c <WIZCHIP_READ>
 800591c:	4603      	mov	r3, r0
 800591e:	0a1b      	lsrs	r3, r3, #8
 8005920:	b29a      	uxth	r2, r3
 8005922:	f107 0310 	add.w	r3, r7, #16
 8005926:	b2d2      	uxtb	r2, r2
 8005928:	701a      	strb	r2, [r3, #0]
 800592a:	2014      	movs	r0, #20
 800592c:	f7ff f8ae 	bl	8004a8c <WIZCHIP_READ>
 8005930:	4603      	mov	r3, r0
 8005932:	461a      	mov	r2, r3
 8005934:	f107 0310 	add.w	r3, r7, #16
 8005938:	3301      	adds	r3, #1
 800593a:	b2d2      	uxtb	r2, r2
 800593c:	701a      	strb	r2, [r3, #0]
 800593e:	2016      	movs	r0, #22
 8005940:	f7ff f8a4 	bl	8004a8c <WIZCHIP_READ>
 8005944:	4603      	mov	r3, r0
 8005946:	0a1b      	lsrs	r3, r3, #8
 8005948:	b29a      	uxth	r2, r3
 800594a:	f107 0310 	add.w	r3, r7, #16
 800594e:	3302      	adds	r3, #2
 8005950:	b2d2      	uxtb	r2, r2
 8005952:	701a      	strb	r2, [r3, #0]
 8005954:	2016      	movs	r0, #22
 8005956:	f7ff f899 	bl	8004a8c <WIZCHIP_READ>
 800595a:	4603      	mov	r3, r0
 800595c:	461a      	mov	r2, r3
 800595e:	f107 0310 	add.w	r3, r7, #16
 8005962:	3303      	adds	r3, #3
 8005964:	b2d2      	uxtb	r2, r2
 8005966:	701a      	strb	r2, [r3, #0]
         setSUBR((uint8_t*)"\x00\x00\x00\x00");
 8005968:	4b61      	ldr	r3, [pc, #388]	; (8005af0 <sendto+0x400>)
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	b29b      	uxth	r3, r3
 800596e:	021b      	lsls	r3, r3, #8
 8005970:	b29a      	uxth	r2, r3
 8005972:	4b60      	ldr	r3, [pc, #384]	; (8005af4 <sendto+0x404>)
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	b29b      	uxth	r3, r3
 8005978:	4413      	add	r3, r2
 800597a:	b29b      	uxth	r3, r3
 800597c:	4619      	mov	r1, r3
 800597e:	2014      	movs	r0, #20
 8005980:	f7ff f866 	bl	8004a50 <WIZCHIP_WRITE>
 8005984:	4b5c      	ldr	r3, [pc, #368]	; (8005af8 <sendto+0x408>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	b29b      	uxth	r3, r3
 800598a:	021b      	lsls	r3, r3, #8
 800598c:	b29a      	uxth	r2, r3
 800598e:	4b5b      	ldr	r3, [pc, #364]	; (8005afc <sendto+0x40c>)
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	b29b      	uxth	r3, r3
 8005994:	4413      	add	r3, r2
 8005996:	b29b      	uxth	r3, r3
 8005998:	4619      	mov	r1, r3
 800599a:	2016      	movs	r0, #22
 800599c:	f7ff f858 	bl	8004a50 <WIZCHIP_WRITE>
 80059a0:	e001      	b.n	80059a6 <sendto+0x2b6>
      }
      else taddr = 0;
 80059a2:	2300      	movs	r3, #0
 80059a4:	613b      	str	r3, [r7, #16]
   #endif

//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
 80059a6:	7bfb      	ldrb	r3, [r7, #15]
 80059a8:	3308      	adds	r3, #8
 80059aa:	019b      	lsls	r3, r3, #6
 80059ac:	3320      	adds	r3, #32
 80059ae:	461a      	mov	r2, r3
 80059b0:	89bb      	ldrh	r3, [r7, #12]
 80059b2:	0c1b      	lsrs	r3, r3, #16
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	4619      	mov	r1, r3
 80059b8:	4610      	mov	r0, r2
 80059ba:	f7ff f849 	bl	8004a50 <WIZCHIP_WRITE>
 80059be:	7bfb      	ldrb	r3, [r7, #15]
 80059c0:	3308      	adds	r3, #8
 80059c2:	019b      	lsls	r3, r3, #6
 80059c4:	3322      	adds	r3, #34	; 0x22
 80059c6:	461a      	mov	r2, r3
 80059c8:	89bb      	ldrh	r3, [r7, #12]
 80059ca:	4619      	mov	r1, r3
 80059cc:	4610      	mov	r0, r2
 80059ce:	f7ff f83f 	bl	8004a50 <WIZCHIP_WRITE>
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 80059d2:	7bfb      	ldrb	r3, [r7, #15]
 80059d4:	3308      	adds	r3, #8
 80059d6:	019b      	lsls	r3, r3, #6
 80059d8:	3302      	adds	r3, #2
 80059da:	2120      	movs	r1, #32
 80059dc:	4618      	mov	r0, r3
 80059de:	f7ff f837 	bl	8004a50 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80059e2:	bf00      	nop
 80059e4:	7bfb      	ldrb	r3, [r7, #15]
 80059e6:	3308      	adds	r3, #8
 80059e8:	019b      	lsls	r3, r3, #6
 80059ea:	3302      	adds	r3, #2
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7ff f84d 	bl	8004a8c <WIZCHIP_READ>
 80059f2:	4603      	mov	r3, r0
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1f4      	bne.n	80059e4 <sendto+0x2f4>
   while(1)
   {
      tmp = getSn_IR(sn);
 80059fa:	7bfb      	ldrb	r3, [r7, #15]
 80059fc:	3308      	adds	r3, #8
 80059fe:	019b      	lsls	r3, r3, #6
 8005a00:	3306      	adds	r3, #6
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7ff f842 	bl	8004a8c <WIZCHIP_READ>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8005a0c:	7dfb      	ldrb	r3, [r7, #23]
 8005a0e:	f003 0310 	and.w	r3, r3, #16
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00c      	beq.n	8005a30 <sendto+0x340>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8005a16:	7bfb      	ldrb	r3, [r7, #15]
 8005a18:	3308      	adds	r3, #8
 8005a1a:	019b      	lsls	r3, r3, #6
 8005a1c:	3306      	adds	r3, #6
 8005a1e:	2110      	movs	r1, #16
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7ff f815 	bl	8004a50 <WIZCHIP_WRITE>
         break;
 8005a26:	bf00      	nop
         return SOCKERR_TIMEOUT;
      }
      ////////////
   }
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d059      	beq.n	8005ae2 <sendto+0x3f2>
 8005a2e:	e035      	b.n	8005a9c <sendto+0x3ac>
      else if(tmp & Sn_IR_TIMEOUT)
 8005a30:	7dfb      	ldrb	r3, [r7, #23]
 8005a32:	f003 0308 	and.w	r3, r3, #8
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d0df      	beq.n	80059fa <sendto+0x30a>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8005a3a:	7bfb      	ldrb	r3, [r7, #15]
 8005a3c:	3308      	adds	r3, #8
 8005a3e:	019b      	lsls	r3, r3, #6
 8005a40:	3306      	adds	r3, #6
 8005a42:	2108      	movs	r1, #8
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7ff f803 	bl	8004a50 <WIZCHIP_WRITE>
            if(taddr) setSUBR((uint8_t*)&taddr);
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d022      	beq.n	8005a96 <sendto+0x3a6>
 8005a50:	f107 0310 	add.w	r3, r7, #16
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	021b      	lsls	r3, r3, #8
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	f107 0310 	add.w	r3, r7, #16
 8005a60:	3301      	adds	r3, #1
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	4413      	add	r3, r2
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	2014      	movs	r0, #20
 8005a6e:	f7fe ffef 	bl	8004a50 <WIZCHIP_WRITE>
 8005a72:	f107 0310 	add.w	r3, r7, #16
 8005a76:	3302      	adds	r3, #2
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	021b      	lsls	r3, r3, #8
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	f107 0310 	add.w	r3, r7, #16
 8005a84:	3303      	adds	r3, #3
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	4413      	add	r3, r2
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	4619      	mov	r1, r3
 8005a90:	2016      	movs	r0, #22
 8005a92:	f7fe ffdd 	bl	8004a50 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8005a96:	f06f 030c 	mvn.w	r3, #12
 8005a9a:	e023      	b.n	8005ae4 <sendto+0x3f4>
      if(taddr) setSUBR((uint8_t*)&taddr);
 8005a9c:	f107 0310 	add.w	r3, r7, #16
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	021b      	lsls	r3, r3, #8
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	f107 0310 	add.w	r3, r7, #16
 8005aac:	3301      	adds	r3, #1
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	4413      	add	r3, r2
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	2014      	movs	r0, #20
 8005aba:	f7fe ffc9 	bl	8004a50 <WIZCHIP_WRITE>
 8005abe:	f107 0310 	add.w	r3, r7, #16
 8005ac2:	3302      	adds	r3, #2
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	021b      	lsls	r3, r3, #8
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	f107 0310 	add.w	r3, r7, #16
 8005ad0:	3303      	adds	r3, #3
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	4413      	add	r3, r2
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	4619      	mov	r1, r3
 8005adc:	2016      	movs	r0, #22
 8005ade:	f7fe ffb7 	bl	8004a50 <WIZCHIP_WRITE>
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8005ae2:	89bb      	ldrh	r3, [r7, #12]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3718      	adds	r7, #24
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	200009c4 	.word	0x200009c4
 8005af0:	0800774c 	.word	0x0800774c
 8005af4:	0800774d 	.word	0x0800774d
 8005af8:	0800774e 	.word	0x0800774e
 8005afc:	0800774f 	.word	0x0800774f

08005b00 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	bf00      	nop
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8005b0e:	b480      	push	{r7}
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	bf00      	nop
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8005b1c:	b480      	push	{r7}
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	bf00      	nop
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8005b2a:	b480      	push	{r7}
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	bf00      	nop
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	881b      	ldrh	r3, [r3, #0]
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	4618      	mov	r0, r3
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8005b52:	b480      	push	{r7}
 8005b54:	b083      	sub	sp, #12
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	807b      	strh	r3, [r7, #2]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	887a      	ldrh	r2, [r7, #2]
 8005b62:	801a      	strh	r2, [r3, #0]
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d002      	beq.n	8005b86 <reg_wizchip_cs_cbfunc+0x16>
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d106      	bne.n	8005b94 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8005b86:	4b0a      	ldr	r3, [pc, #40]	; (8005bb0 <reg_wizchip_cs_cbfunc+0x40>)
 8005b88:	4a0a      	ldr	r2, [pc, #40]	; (8005bb4 <reg_wizchip_cs_cbfunc+0x44>)
 8005b8a:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8005b8c:	4b08      	ldr	r3, [pc, #32]	; (8005bb0 <reg_wizchip_cs_cbfunc+0x40>)
 8005b8e:	4a0a      	ldr	r2, [pc, #40]	; (8005bb8 <reg_wizchip_cs_cbfunc+0x48>)
 8005b90:	619a      	str	r2, [r3, #24]
 8005b92:	e006      	b.n	8005ba2 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8005b94:	4a06      	ldr	r2, [pc, #24]	; (8005bb0 <reg_wizchip_cs_cbfunc+0x40>)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8005b9a:	4a05      	ldr	r2, [pc, #20]	; (8005bb0 <reg_wizchip_cs_cbfunc+0x40>)
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	6193      	str	r3, [r2, #24]
   }
}
 8005ba0:	bf00      	nop
 8005ba2:	bf00      	nop
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	20000034 	.word	0x20000034
 8005bb4:	08005b1d 	.word	0x08005b1d
 8005bb8:	08005b2b 	.word	0x08005b2b

08005bbc <reg_wizchip_bus_cbfunc>:

//M20150515 : For integrating with W5300
//void reg_wizchip_bus_cbfunc(uint8_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, uint8_t wb))
void reg_wizchip_bus_cbfunc(iodata_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, iodata_t wb))
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_BUS_));
 8005bc6:	bf00      	nop
 8005bc8:	4b0f      	ldr	r3, [pc, #60]	; (8005c08 <reg_wizchip_bus_cbfunc+0x4c>)
 8005bca:	881b      	ldrh	r3, [r3, #0]
 8005bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d0f9      	beq.n	8005bc8 <reg_wizchip_bus_cbfunc+0xc>
   {
      WIZCHIP.IF.BUS._read_byte   = bus_rb;
      WIZCHIP.IF.BUS._write_byte  = bus_wb;
   }
   */
   if(!bus_rb || !bus_wb)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d002      	beq.n	8005be0 <reg_wizchip_bus_cbfunc+0x24>
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d106      	bne.n	8005bee <reg_wizchip_bus_cbfunc+0x32>
   {
      WIZCHIP.IF.BUS._read_data   = wizchip_bus_readdata;
 8005be0:	4b09      	ldr	r3, [pc, #36]	; (8005c08 <reg_wizchip_bus_cbfunc+0x4c>)
 8005be2:	4a0a      	ldr	r2, [pc, #40]	; (8005c0c <reg_wizchip_bus_cbfunc+0x50>)
 8005be4:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.BUS._write_data  = wizchip_bus_writedata;
 8005be6:	4b08      	ldr	r3, [pc, #32]	; (8005c08 <reg_wizchip_bus_cbfunc+0x4c>)
 8005be8:	4a09      	ldr	r2, [pc, #36]	; (8005c10 <reg_wizchip_bus_cbfunc+0x54>)
 8005bea:	621a      	str	r2, [r3, #32]
 8005bec:	e006      	b.n	8005bfc <reg_wizchip_bus_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.BUS._read_data   = bus_rb;
 8005bee:	4a06      	ldr	r2, [pc, #24]	; (8005c08 <reg_wizchip_bus_cbfunc+0x4c>)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.BUS._write_data  = bus_wb;
 8005bf4:	4a04      	ldr	r2, [pc, #16]	; (8005c08 <reg_wizchip_bus_cbfunc+0x4c>)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	6213      	str	r3, [r2, #32]
   }
}
 8005bfa:	bf00      	nop
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	20000034 	.word	0x20000034
 8005c0c:	08005b39 	.word	0x08005b39
 8005c10:	08005b53 	.word	0x08005b53

08005c14 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	6039      	str	r1, [r7, #0]
 8005c1e:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
#endif
   uint8_t* ptmp[2] = {0,0};
 8005c20:	2300      	movs	r3, #0
 8005c22:	60bb      	str	r3, [r7, #8]
 8005c24:	2300      	movs	r3, #0
 8005c26:	60fb      	str	r3, [r7, #12]
   switch(cwtype)
 8005c28:	79fb      	ldrb	r3, [r7, #7]
 8005c2a:	2b08      	cmp	r3, #8
 8005c2c:	d863      	bhi.n	8005cf6 <ctlwizchip+0xe2>
 8005c2e:	a201      	add	r2, pc, #4	; (adr r2, 8005c34 <ctlwizchip+0x20>)
 8005c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c34:	08005c59 	.word	0x08005c59
 8005c38:	08005c5f 	.word	0x08005c5f
 8005c3c:	08005c8b 	.word	0x08005c8b
 8005c40:	08005c7f 	.word	0x08005c7f
 8005c44:	08005c99 	.word	0x08005c99
 8005c48:	08005ca5 	.word	0x08005ca5
 8005c4c:	08005cf7 	.word	0x08005cf7
 8005c50:	08005cf7 	.word	0x08005cf7
 8005c54:	08005cb3 	.word	0x08005cb3
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8005c58:	f000 f896 	bl	8005d88 <wizchip_sw_reset>
         break;
 8005c5c:	e04e      	b.n	8005cfc <ctlwizchip+0xe8>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d004      	beq.n	8005c6e <ctlwizchip+0x5a>
         {
            ptmp[0] = (uint8_t*)arg;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	60bb      	str	r3, [r7, #8]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	3308      	adds	r3, #8
 8005c6c:	60fb      	str	r3, [r7, #12]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	4611      	mov	r1, r2
 8005c74:	4618      	mov	r0, r3
 8005c76:	f000 f97f 	bl	8005f78 <wizchip_init>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	e03f      	b.n	8005cfe <ctlwizchip+0xea>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 f9e2 	bl	800604c <wizchip_clrinterrupt>
         break;
 8005c88:	e038      	b.n	8005cfc <ctlwizchip+0xe8>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8005c8a:	f000 fa01 	bl	8006090 <wizchip_getinterrupt>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	461a      	mov	r2, r3
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	801a      	strh	r2, [r3, #0]
         break;
 8005c96:	e031      	b.n	8005cfc <ctlwizchip+0xe8>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	881b      	ldrh	r3, [r3, #0]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 fa1b 	bl	80060d8 <wizchip_setinterruptmask>
         break;         
 8005ca2:	e02b      	b.n	8005cfc <ctlwizchip+0xe8>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8005ca4:	f000 fa3a 	bl	800611c <wizchip_getinterruptmask>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	461a      	mov	r2, r3
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	801a      	strh	r2, [r3, #0]
         break;
 8005cb0:	e024      	b.n	8005cfc <ctlwizchip+0xe8>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
         break;
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8005cb2:	4b15      	ldr	r3, [pc, #84]	; (8005d08 <ctlwizchip+0xf4>)
 8005cb4:	789a      	ldrb	r2, [r3, #2]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	4a12      	ldr	r2, [pc, #72]	; (8005d08 <ctlwizchip+0xf4>)
 8005cc0:	78d2      	ldrb	r2, [r2, #3]
 8005cc2:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	3302      	adds	r3, #2
 8005cc8:	4a0f      	ldr	r2, [pc, #60]	; (8005d08 <ctlwizchip+0xf4>)
 8005cca:	7912      	ldrb	r2, [r2, #4]
 8005ccc:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	3303      	adds	r3, #3
 8005cd2:	4a0d      	ldr	r2, [pc, #52]	; (8005d08 <ctlwizchip+0xf4>)
 8005cd4:	7952      	ldrb	r2, [r2, #5]
 8005cd6:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	3304      	adds	r3, #4
 8005cdc:	4a0a      	ldr	r2, [pc, #40]	; (8005d08 <ctlwizchip+0xf4>)
 8005cde:	7992      	ldrb	r2, [r2, #6]
 8005ce0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	3305      	adds	r3, #5
 8005ce6:	4a08      	ldr	r2, [pc, #32]	; (8005d08 <ctlwizchip+0xf4>)
 8005ce8:	79d2      	ldrb	r2, [r2, #7]
 8005cea:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	3306      	adds	r3, #6
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	701a      	strb	r2, [r3, #0]
         break;
 8005cf4:	e002      	b.n	8005cfc <ctlwizchip+0xe8>
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
   #endif      
      default:
         return -1;
 8005cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8005cfa:	e000      	b.n	8005cfe <ctlwizchip+0xea>
   }
   return 0;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3710      	adds	r7, #16
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	20000034 	.word	0x20000034

08005d0c <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	4603      	mov	r3, r0
 8005d14:	6039      	str	r1, [r7, #0]
 8005d16:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8005d18:	79fb      	ldrb	r3, [r7, #7]
 8005d1a:	2b05      	cmp	r3, #5
 8005d1c:	d82c      	bhi.n	8005d78 <ctlnetwork+0x6c>
 8005d1e:	a201      	add	r2, pc, #4	; (adr r2, 8005d24 <ctlnetwork+0x18>)
 8005d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d24:	08005d3d 	.word	0x08005d3d
 8005d28:	08005d45 	.word	0x08005d45
 8005d2c:	08005d4d 	.word	0x08005d4d
 8005d30:	08005d5b 	.word	0x08005d5b
 8005d34:	08005d69 	.word	0x08005d69
 8005d38:	08005d71 	.word	0x08005d71
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8005d3c:	6838      	ldr	r0, [r7, #0]
 8005d3e:	f000 fa15 	bl	800616c <wizchip_setnetinfo>
         break;
 8005d42:	e01c      	b.n	8005d7e <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8005d44:	6838      	ldr	r0, [r7, #0]
 8005d46:	f000 faaf 	bl	80062a8 <wizchip_getnetinfo>
         break;
 8005d4a:	e018      	b.n	8005d7e <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f000 fb59 	bl	8006408 <wizchip_setnetmode>
 8005d56:	4603      	mov	r3, r0
 8005d58:	e012      	b.n	8005d80 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8005d5a:	f000 fb78 	bl	800644e <wizchip_getnetmode>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	461a      	mov	r2, r3
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	701a      	strb	r2, [r3, #0]
         break;
 8005d66:	e00a      	b.n	8005d7e <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8005d68:	6838      	ldr	r0, [r7, #0]
 8005d6a:	f000 fb79 	bl	8006460 <wizchip_settimeout>
         break;
 8005d6e:	e006      	b.n	8005d7e <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8005d70:	6838      	ldr	r0, [r7, #0]
 8005d72:	f000 fb8a 	bl	800648a <wizchip_gettimeout>
         break;
 8005d76:	e002      	b.n	8005d7e <ctlnetwork+0x72>
      default:
         return -1;
 8005d78:	f04f 33ff 	mov.w	r3, #4294967295
 8005d7c:	e000      	b.n	8005d80 <ctlnetwork+0x74>
   }
   return 0;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3708      	adds	r7, #8
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8005d8e:	2008      	movs	r0, #8
 8005d90:	f7fe fe7c 	bl	8004a8c <WIZCHIP_READ>
 8005d94:	4603      	mov	r3, r0
 8005d96:	0a1b      	lsrs	r3, r3, #8
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	713b      	strb	r3, [r7, #4]
 8005d9e:	2008      	movs	r0, #8
 8005da0:	f7fe fe74 	bl	8004a8c <WIZCHIP_READ>
 8005da4:	4603      	mov	r3, r0
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	717b      	strb	r3, [r7, #5]
 8005daa:	200a      	movs	r0, #10
 8005dac:	f7fe fe6e 	bl	8004a8c <WIZCHIP_READ>
 8005db0:	4603      	mov	r3, r0
 8005db2:	0a1b      	lsrs	r3, r3, #8
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	71bb      	strb	r3, [r7, #6]
 8005dba:	200a      	movs	r0, #10
 8005dbc:	f7fe fe66 	bl	8004a8c <WIZCHIP_READ>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	71fb      	strb	r3, [r7, #7]
 8005dc6:	200c      	movs	r0, #12
 8005dc8:	f7fe fe60 	bl	8004a8c <WIZCHIP_READ>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	0a1b      	lsrs	r3, r3, #8
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	723b      	strb	r3, [r7, #8]
 8005dd6:	200c      	movs	r0, #12
 8005dd8:	f7fe fe58 	bl	8004a8c <WIZCHIP_READ>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	727b      	strb	r3, [r7, #9]
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8005de2:	2010      	movs	r0, #16
 8005de4:	f7fe fe52 	bl	8004a8c <WIZCHIP_READ>
 8005de8:	4603      	mov	r3, r0
 8005dea:	0a1b      	lsrs	r3, r3, #8
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	753b      	strb	r3, [r7, #20]
 8005df2:	2010      	movs	r0, #16
 8005df4:	f7fe fe4a 	bl	8004a8c <WIZCHIP_READ>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	757b      	strb	r3, [r7, #21]
 8005dfe:	2012      	movs	r0, #18
 8005e00:	f7fe fe44 	bl	8004a8c <WIZCHIP_READ>
 8005e04:	4603      	mov	r3, r0
 8005e06:	0a1b      	lsrs	r3, r3, #8
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	75bb      	strb	r3, [r7, #22]
 8005e0e:	2012      	movs	r0, #18
 8005e10:	f7fe fe3c 	bl	8004a8c <WIZCHIP_READ>
 8005e14:	4603      	mov	r3, r0
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	75fb      	strb	r3, [r7, #23]
 8005e1a:	2014      	movs	r0, #20
 8005e1c:	f7fe fe36 	bl	8004a8c <WIZCHIP_READ>
 8005e20:	4603      	mov	r3, r0
 8005e22:	0a1b      	lsrs	r3, r3, #8
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	743b      	strb	r3, [r7, #16]
 8005e2a:	2014      	movs	r0, #20
 8005e2c:	f7fe fe2e 	bl	8004a8c <WIZCHIP_READ>
 8005e30:	4603      	mov	r3, r0
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	747b      	strb	r3, [r7, #17]
 8005e36:	2016      	movs	r0, #22
 8005e38:	f7fe fe28 	bl	8004a8c <WIZCHIP_READ>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	0a1b      	lsrs	r3, r3, #8
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	74bb      	strb	r3, [r7, #18]
 8005e46:	2016      	movs	r0, #22
 8005e48:	f7fe fe20 	bl	8004a8c <WIZCHIP_READ>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	74fb      	strb	r3, [r7, #19]
 8005e52:	2018      	movs	r0, #24
 8005e54:	f7fe fe1a 	bl	8004a8c <WIZCHIP_READ>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	0a1b      	lsrs	r3, r3, #8
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	733b      	strb	r3, [r7, #12]
 8005e62:	2018      	movs	r0, #24
 8005e64:	f7fe fe12 	bl	8004a8c <WIZCHIP_READ>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	737b      	strb	r3, [r7, #13]
 8005e6e:	201a      	movs	r0, #26
 8005e70:	f7fe fe0c 	bl	8004a8c <WIZCHIP_READ>
 8005e74:	4603      	mov	r3, r0
 8005e76:	0a1b      	lsrs	r3, r3, #8
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	73bb      	strb	r3, [r7, #14]
 8005e7e:	201a      	movs	r0, #26
 8005e80:	f7fe fe04 	bl	8004a8c <WIZCHIP_READ>
 8005e84:	4603      	mov	r3, r0
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	73fb      	strb	r3, [r7, #15]
   setMR(MR_RST);
 8005e8a:	2180      	movs	r1, #128	; 0x80
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	f7fe fddf 	bl	8004a50 <WIZCHIP_WRITE>
   getMR(); // for delay
 8005e92:	2000      	movs	r0, #0
 8005e94:	f7fe fdfa 	bl	8004a8c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8005e98:	793b      	ldrb	r3, [r7, #4]
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	021b      	lsls	r3, r3, #8
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	797b      	ldrb	r3, [r7, #5]
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	4413      	add	r3, r2
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	2008      	movs	r0, #8
 8005eac:	f7fe fdd0 	bl	8004a50 <WIZCHIP_WRITE>
 8005eb0:	79bb      	ldrb	r3, [r7, #6]
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	021b      	lsls	r3, r3, #8
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	79fb      	ldrb	r3, [r7, #7]
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	4413      	add	r3, r2
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	200a      	movs	r0, #10
 8005ec4:	f7fe fdc4 	bl	8004a50 <WIZCHIP_WRITE>
 8005ec8:	7a3b      	ldrb	r3, [r7, #8]
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	021b      	lsls	r3, r3, #8
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	7a7b      	ldrb	r3, [r7, #9]
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	4413      	add	r3, r2
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	4619      	mov	r1, r3
 8005eda:	200c      	movs	r0, #12
 8005edc:	f7fe fdb8 	bl	8004a50 <WIZCHIP_WRITE>
   setGAR(gw);
 8005ee0:	7d3b      	ldrb	r3, [r7, #20]
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	021b      	lsls	r3, r3, #8
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	7d7b      	ldrb	r3, [r7, #21]
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	4413      	add	r3, r2
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	2010      	movs	r0, #16
 8005ef4:	f7fe fdac 	bl	8004a50 <WIZCHIP_WRITE>
 8005ef8:	7dbb      	ldrb	r3, [r7, #22]
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	021b      	lsls	r3, r3, #8
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	7dfb      	ldrb	r3, [r7, #23]
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	4413      	add	r3, r2
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	4619      	mov	r1, r3
 8005f0a:	2012      	movs	r0, #18
 8005f0c:	f7fe fda0 	bl	8004a50 <WIZCHIP_WRITE>
   setSUBR(sn);
 8005f10:	7c3b      	ldrb	r3, [r7, #16]
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	021b      	lsls	r3, r3, #8
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	7c7b      	ldrb	r3, [r7, #17]
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	4413      	add	r3, r2
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	4619      	mov	r1, r3
 8005f22:	2014      	movs	r0, #20
 8005f24:	f7fe fd94 	bl	8004a50 <WIZCHIP_WRITE>
 8005f28:	7cbb      	ldrb	r3, [r7, #18]
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	021b      	lsls	r3, r3, #8
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	7cfb      	ldrb	r3, [r7, #19]
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	4413      	add	r3, r2
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	4619      	mov	r1, r3
 8005f3a:	2016      	movs	r0, #22
 8005f3c:	f7fe fd88 	bl	8004a50 <WIZCHIP_WRITE>
   setSIPR(sip);
 8005f40:	7b3b      	ldrb	r3, [r7, #12]
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	021b      	lsls	r3, r3, #8
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	7b7b      	ldrb	r3, [r7, #13]
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	4413      	add	r3, r2
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	4619      	mov	r1, r3
 8005f52:	2018      	movs	r0, #24
 8005f54:	f7fe fd7c 	bl	8004a50 <WIZCHIP_WRITE>
 8005f58:	7bbb      	ldrb	r3, [r7, #14]
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	021b      	lsls	r3, r3, #8
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	4413      	add	r3, r2
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	4619      	mov	r1, r3
 8005f6a:	201a      	movs	r0, #26
 8005f6c:	f7fe fd70 	bl	8004a50 <WIZCHIP_WRITE>
}
 8005f70:	bf00      	nop
 8005f72:	3718      	adds	r7, #24
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8005f82:	2300      	movs	r3, #0
 8005f84:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8005f86:	f7ff feff 	bl	8005d88 <wizchip_sw_reset>
   if(txsize)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d02a      	beq.n	8005fe6 <wizchip_init+0x6e>
   {
      tmp = 0;
 8005f90:	2300      	movs	r3, #0
 8005f92:	73bb      	strb	r3, [r7, #14]
   //M20150601 : For integrating with W5300
   #if _WIZCHIP_ == W5300
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005f94:	2300      	movs	r3, #0
 8005f96:	73fb      	strb	r3, [r7, #15]
 8005f98:	e018      	b.n	8005fcc <wizchip_init+0x54>
		{
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8005f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	2b3f      	cmp	r3, #63	; 0x3f
 8005fa6:	d902      	bls.n	8005fae <wizchip_init+0x36>
 8005fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fac:	e04a      	b.n	8006044 <wizchip_init+0xcc>
			tmp += txsize[i];
 8005fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	781a      	ldrb	r2, [r3, #0]
 8005fb8:	7bbb      	ldrb	r3, [r7, #14]
 8005fba:	4413      	add	r3, r2
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	73bb      	strb	r3, [r7, #14]
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	73fb      	strb	r3, [r7, #15]
 8005fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fd0:	2b07      	cmp	r3, #7
 8005fd2:	dde2      	ble.n	8005f9a <wizchip_init+0x22>
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
 8005fd4:	7bbb      	ldrb	r3, [r7, #14]
 8005fd6:	f003 0307 	and.w	r3, r3, #7
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d002      	beq.n	8005fe6 <wizchip_init+0x6e>
 8005fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8005fe4:	e02e      	b.n	8006044 <wizchip_init+0xcc>
		}

	#endif
   }

   if(rxsize)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d02a      	beq.n	8006042 <wizchip_init+0xca>
   {
      tmp = 0;
 8005fec:	2300      	movs	r3, #0
 8005fee:	73bb      	strb	r3, [r7, #14]
   #if _WIZCHIP_ == W5300
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	73fb      	strb	r3, [r7, #15]
 8005ff4:	e018      	b.n	8006028 <wizchip_init+0xb0>
		{
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8005ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	2b3f      	cmp	r3, #63	; 0x3f
 8006002:	d902      	bls.n	800600a <wizchip_init+0x92>
 8006004:	f04f 33ff 	mov.w	r3, #4294967295
 8006008:	e01c      	b.n	8006044 <wizchip_init+0xcc>
			tmp += rxsize[i];
 800600a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	4413      	add	r3, r2
 8006012:	781a      	ldrb	r2, [r3, #0]
 8006014:	7bbb      	ldrb	r3, [r7, #14]
 8006016:	4413      	add	r3, r2
 8006018:	b2db      	uxtb	r3, r3
 800601a:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800601c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006020:	b2db      	uxtb	r3, r3
 8006022:	3301      	adds	r3, #1
 8006024:	b2db      	uxtb	r3, r3
 8006026:	73fb      	strb	r3, [r7, #15]
 8006028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800602c:	2b07      	cmp	r3, #7
 800602e:	dde2      	ble.n	8005ff6 <wizchip_init+0x7e>
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
 8006030:	7bbb      	ldrb	r3, [r7, #14]
 8006032:	f003 0307 	and.w	r3, r3, #7
 8006036:	b2db      	uxtb	r3, r3
 8006038:	2b00      	cmp	r3, #0
 800603a:	d002      	beq.n	8006042 <wizchip_init+0xca>
 800603c:	f04f 33ff 	mov.w	r3, #4294967295
 8006040:	e000      	b.n	8006044 <wizchip_init+0xcc>
			setSn_RXBUF_SIZE(i, rxsize[i]);
		#endif
		}
	#endif
   }
   return 0;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	4603      	mov	r3, r0
 8006054:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8006056:	88fb      	ldrh	r3, [r7, #6]
 8006058:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 800605a:	88fb      	ldrh	r3, [r7, #6]
 800605c:	0a1b      	lsrs	r3, r3, #8
 800605e:	b29b      	uxth	r3, r3
 8006060:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   ir |= (1<<4); // IK_WOL
 8006062:	7bfb      	ldrb	r3, [r7, #15]
 8006064:	f043 0310 	orr.w	r3, r3, #16
 8006068:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ <= W5100S
   ir |= sir;
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
 800606a:	7bfb      	ldrb	r3, [r7, #15]
 800606c:	021b      	lsls	r3, r3, #8
 800606e:	b21a      	sxth	r2, r3
 8006070:	7bbb      	ldrb	r3, [r7, #14]
 8006072:	b21b      	sxth	r3, r3
 8006074:	4313      	orrs	r3, r2
 8006076:	b21b      	sxth	r3, r3
 8006078:	b29b      	uxth	r3, r3
 800607a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800607e:	b29b      	uxth	r3, r3
 8006080:	4619      	mov	r1, r3
 8006082:	2002      	movs	r0, #2
 8006084:	f7fe fce4 	bl	8004a50 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
   }

#endif   
}
 8006088:	bf00      	nop
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8006096:	2300      	movs	r3, #0
 8006098:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 800609a:	2300      	movs	r3, #0
 800609c:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800609e:	2300      	movs	r3, #0
 80060a0:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ <= W5100S
   ir = getIR();
   sir = ir & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_  == W5300
   ret = getIR();
 80060a2:	2002      	movs	r0, #2
 80060a4:	f7fe fcf2 	bl	8004a8c <WIZCHIP_READ>
 80060a8:	4603      	mov	r3, r0
 80060aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80060ae:	80bb      	strh	r3, [r7, #4]
   ir = (uint8_t)(ret >> 8);
 80060b0:	88bb      	ldrh	r3, [r7, #4]
 80060b2:	0a1b      	lsrs	r3, r3, #8
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	71fb      	strb	r3, [r7, #7]
   sir = (uint8_t)ret;
 80060b8:	88bb      	ldrh	r3, [r7, #4]
 80060ba:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80060bc:	79bb      	ldrb	r3, [r7, #6]
 80060be:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80060c0:	88bb      	ldrh	r3, [r7, #4]
 80060c2:	021b      	lsls	r3, r3, #8
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	79fb      	ldrb	r3, [r7, #7]
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	4413      	add	r3, r2
 80060cc:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80060ce:	88bb      	ldrh	r3, [r7, #4]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3708      	adds	r7, #8
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	4603      	mov	r3, r0
 80060e0:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 80060e2:	88fb      	ldrh	r3, [r7, #6]
 80060e4:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 80060e6:	88fb      	ldrh	r3, [r7, #6]
 80060e8:	0a1b      	lsrs	r3, r3, #8
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 80060ee:	7bfb      	ldrb	r3, [r7, #15]
 80060f0:	f023 0310 	bic.w	r3, r3, #16
 80060f4:	73fb      	strb	r3, [r7, #15]
   simr &= 0x0F;
   imr |= simr;
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
 80060f6:	7bfb      	ldrb	r3, [r7, #15]
 80060f8:	021b      	lsls	r3, r3, #8
 80060fa:	b21a      	sxth	r2, r3
 80060fc:	7bbb      	ldrb	r3, [r7, #14]
 80060fe:	b21b      	sxth	r3, r3
 8006100:	4313      	orrs	r3, r2
 8006102:	b21b      	sxth	r3, r3
 8006104:	b29b      	uxth	r3, r3
 8006106:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800610a:	b29b      	uxth	r3, r3
 800610c:	4619      	mov	r1, r3
 800610e:	2004      	movs	r0, #4
 8006110:	f7fe fc9e 	bl	8004a50 <WIZCHIP_WRITE>
#else
   setIMR(imr);
   setSIMR(simr);
#endif   
}
 8006114:	bf00      	nop
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8006122:	2300      	movs	r3, #0
 8006124:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8006126:	2300      	movs	r3, #0
 8006128:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800612a:	2300      	movs	r3, #0
 800612c:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ < W5200
   imr  = getIMR();
   simr = imr & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   ret = getIMR();
 800612e:	2004      	movs	r0, #4
 8006130:	f7fe fcac 	bl	8004a8c <WIZCHIP_READ>
 8006134:	4603      	mov	r3, r0
 8006136:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800613a:	80bb      	strh	r3, [r7, #4]
   imr = (uint8_t)(ret >> 8);
 800613c:	88bb      	ldrh	r3, [r7, #4]
 800613e:	0a1b      	lsrs	r3, r3, #8
 8006140:	b29b      	uxth	r3, r3
 8006142:	71fb      	strb	r3, [r7, #7]
   simr = (uint8_t)ret;
 8006144:	88bb      	ldrh	r3, [r7, #4]
 8006146:	71bb      	strb	r3, [r7, #6]
   imr  = getIMR();
   simr = getSIMR();
#endif         

#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 8006148:	79fb      	ldrb	r3, [r7, #7]
 800614a:	f023 0310 	bic.w	r3, r3, #16
 800614e:	71fb      	strb	r3, [r7, #7]
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8006150:	79bb      	ldrb	r3, [r7, #6]
 8006152:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8006154:	88bb      	ldrh	r3, [r7, #4]
 8006156:	021b      	lsls	r3, r3, #8
 8006158:	b29a      	uxth	r2, r3
 800615a:	79fb      	ldrb	r3, [r7, #7]
 800615c:	b29b      	uxth	r3, r3
 800615e:	4413      	add	r3, r2
 8006160:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8006162:	88bb      	ldrh	r3, [r7, #4]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3708      	adds	r7, #8
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	b29b      	uxth	r3, r3
 800617a:	021b      	lsls	r3, r3, #8
 800617c:	b29a      	uxth	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	785b      	ldrb	r3, [r3, #1]
 8006182:	b29b      	uxth	r3, r3
 8006184:	4413      	add	r3, r2
 8006186:	b29b      	uxth	r3, r3
 8006188:	4619      	mov	r1, r3
 800618a:	2008      	movs	r0, #8
 800618c:	f7fe fc60 	bl	8004a50 <WIZCHIP_WRITE>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	789b      	ldrb	r3, [r3, #2]
 8006194:	b29b      	uxth	r3, r3
 8006196:	021b      	lsls	r3, r3, #8
 8006198:	b29a      	uxth	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	78db      	ldrb	r3, [r3, #3]
 800619e:	b29b      	uxth	r3, r3
 80061a0:	4413      	add	r3, r2
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	4619      	mov	r1, r3
 80061a6:	200a      	movs	r0, #10
 80061a8:	f7fe fc52 	bl	8004a50 <WIZCHIP_WRITE>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	791b      	ldrb	r3, [r3, #4]
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	021b      	lsls	r3, r3, #8
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	795b      	ldrb	r3, [r3, #5]
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	4413      	add	r3, r2
 80061be:	b29b      	uxth	r3, r3
 80061c0:	4619      	mov	r1, r3
 80061c2:	200c      	movs	r0, #12
 80061c4:	f7fe fc44 	bl	8004a50 <WIZCHIP_WRITE>
   setGAR(pnetinfo->gw);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	7b9b      	ldrb	r3, [r3, #14]
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	021b      	lsls	r3, r3, #8
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	7bdb      	ldrb	r3, [r3, #15]
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	4413      	add	r3, r2
 80061da:	b29b      	uxth	r3, r3
 80061dc:	4619      	mov	r1, r3
 80061de:	2010      	movs	r0, #16
 80061e0:	f7fe fc36 	bl	8004a50 <WIZCHIP_WRITE>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	7c1b      	ldrb	r3, [r3, #16]
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	021b      	lsls	r3, r3, #8
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	7c5b      	ldrb	r3, [r3, #17]
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	4413      	add	r3, r2
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	4619      	mov	r1, r3
 80061fa:	2012      	movs	r0, #18
 80061fc:	f7fe fc28 	bl	8004a50 <WIZCHIP_WRITE>
   setSUBR(pnetinfo->sn);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	7a9b      	ldrb	r3, [r3, #10]
 8006204:	b29b      	uxth	r3, r3
 8006206:	021b      	lsls	r3, r3, #8
 8006208:	b29a      	uxth	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	7adb      	ldrb	r3, [r3, #11]
 800620e:	b29b      	uxth	r3, r3
 8006210:	4413      	add	r3, r2
 8006212:	b29b      	uxth	r3, r3
 8006214:	4619      	mov	r1, r3
 8006216:	2014      	movs	r0, #20
 8006218:	f7fe fc1a 	bl	8004a50 <WIZCHIP_WRITE>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	7b1b      	ldrb	r3, [r3, #12]
 8006220:	b29b      	uxth	r3, r3
 8006222:	021b      	lsls	r3, r3, #8
 8006224:	b29a      	uxth	r2, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	7b5b      	ldrb	r3, [r3, #13]
 800622a:	b29b      	uxth	r3, r3
 800622c:	4413      	add	r3, r2
 800622e:	b29b      	uxth	r3, r3
 8006230:	4619      	mov	r1, r3
 8006232:	2016      	movs	r0, #22
 8006234:	f7fe fc0c 	bl	8004a50 <WIZCHIP_WRITE>
   setSIPR(pnetinfo->ip);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	799b      	ldrb	r3, [r3, #6]
 800623c:	b29b      	uxth	r3, r3
 800623e:	021b      	lsls	r3, r3, #8
 8006240:	b29a      	uxth	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	79db      	ldrb	r3, [r3, #7]
 8006246:	b29b      	uxth	r3, r3
 8006248:	4413      	add	r3, r2
 800624a:	b29b      	uxth	r3, r3
 800624c:	4619      	mov	r1, r3
 800624e:	2018      	movs	r0, #24
 8006250:	f7fe fbfe 	bl	8004a50 <WIZCHIP_WRITE>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	7a1b      	ldrb	r3, [r3, #8]
 8006258:	b29b      	uxth	r3, r3
 800625a:	021b      	lsls	r3, r3, #8
 800625c:	b29a      	uxth	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	7a5b      	ldrb	r3, [r3, #9]
 8006262:	b29b      	uxth	r3, r3
 8006264:	4413      	add	r3, r2
 8006266:	b29b      	uxth	r3, r3
 8006268:	4619      	mov	r1, r3
 800626a:	201a      	movs	r0, #26
 800626c:	f7fe fbf0 	bl	8004a50 <WIZCHIP_WRITE>
   _DNS_[0] = pnetinfo->dns[0];
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	7c9a      	ldrb	r2, [r3, #18]
 8006274:	4b0a      	ldr	r3, [pc, #40]	; (80062a0 <wizchip_setnetinfo+0x134>)
 8006276:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	7cda      	ldrb	r2, [r3, #19]
 800627c:	4b08      	ldr	r3, [pc, #32]	; (80062a0 <wizchip_setnetinfo+0x134>)
 800627e:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	7d1a      	ldrb	r2, [r3, #20]
 8006284:	4b06      	ldr	r3, [pc, #24]	; (80062a0 <wizchip_setnetinfo+0x134>)
 8006286:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	7d5a      	ldrb	r2, [r3, #21]
 800628c:	4b04      	ldr	r3, [pc, #16]	; (80062a0 <wizchip_setnetinfo+0x134>)
 800628e:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	7d9a      	ldrb	r2, [r3, #22]
 8006294:	4b03      	ldr	r3, [pc, #12]	; (80062a4 <wizchip_setnetinfo+0x138>)
 8006296:	701a      	strb	r2, [r3, #0]
}
 8006298:	bf00      	nop
 800629a:	3708      	adds	r7, #8
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	200009e8 	.word	0x200009e8
 80062a4:	200009ec 	.word	0x200009ec

080062a8 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80062b0:	2008      	movs	r0, #8
 80062b2:	f7fe fbeb 	bl	8004a8c <WIZCHIP_READ>
 80062b6:	4603      	mov	r3, r0
 80062b8:	0a1b      	lsrs	r3, r3, #8
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	b2da      	uxtb	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	701a      	strb	r2, [r3, #0]
 80062c2:	2008      	movs	r0, #8
 80062c4:	f7fe fbe2 	bl	8004a8c <WIZCHIP_READ>
 80062c8:	4603      	mov	r3, r0
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	705a      	strb	r2, [r3, #1]
 80062d0:	200a      	movs	r0, #10
 80062d2:	f7fe fbdb 	bl	8004a8c <WIZCHIP_READ>
 80062d6:	4603      	mov	r3, r0
 80062d8:	0a1b      	lsrs	r3, r3, #8
 80062da:	b29b      	uxth	r3, r3
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	709a      	strb	r2, [r3, #2]
 80062e2:	200a      	movs	r0, #10
 80062e4:	f7fe fbd2 	bl	8004a8c <WIZCHIP_READ>
 80062e8:	4603      	mov	r3, r0
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	70da      	strb	r2, [r3, #3]
 80062f0:	200c      	movs	r0, #12
 80062f2:	f7fe fbcb 	bl	8004a8c <WIZCHIP_READ>
 80062f6:	4603      	mov	r3, r0
 80062f8:	0a1b      	lsrs	r3, r3, #8
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	b2da      	uxtb	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	711a      	strb	r2, [r3, #4]
 8006302:	200c      	movs	r0, #12
 8006304:	f7fe fbc2 	bl	8004a8c <WIZCHIP_READ>
 8006308:	4603      	mov	r3, r0
 800630a:	b2da      	uxtb	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	715a      	strb	r2, [r3, #5]
   getGAR(pnetinfo->gw);
 8006310:	2010      	movs	r0, #16
 8006312:	f7fe fbbb 	bl	8004a8c <WIZCHIP_READ>
 8006316:	4603      	mov	r3, r0
 8006318:	0a1b      	lsrs	r3, r3, #8
 800631a:	b29b      	uxth	r3, r3
 800631c:	b2da      	uxtb	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	739a      	strb	r2, [r3, #14]
 8006322:	2010      	movs	r0, #16
 8006324:	f7fe fbb2 	bl	8004a8c <WIZCHIP_READ>
 8006328:	4603      	mov	r3, r0
 800632a:	b2da      	uxtb	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	73da      	strb	r2, [r3, #15]
 8006330:	2012      	movs	r0, #18
 8006332:	f7fe fbab 	bl	8004a8c <WIZCHIP_READ>
 8006336:	4603      	mov	r3, r0
 8006338:	0a1b      	lsrs	r3, r3, #8
 800633a:	b29b      	uxth	r3, r3
 800633c:	b2da      	uxtb	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	741a      	strb	r2, [r3, #16]
 8006342:	2012      	movs	r0, #18
 8006344:	f7fe fba2 	bl	8004a8c <WIZCHIP_READ>
 8006348:	4603      	mov	r3, r0
 800634a:	b2da      	uxtb	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	745a      	strb	r2, [r3, #17]
   getSUBR(pnetinfo->sn);
 8006350:	2014      	movs	r0, #20
 8006352:	f7fe fb9b 	bl	8004a8c <WIZCHIP_READ>
 8006356:	4603      	mov	r3, r0
 8006358:	0a1b      	lsrs	r3, r3, #8
 800635a:	b29b      	uxth	r3, r3
 800635c:	b2da      	uxtb	r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	729a      	strb	r2, [r3, #10]
 8006362:	2014      	movs	r0, #20
 8006364:	f7fe fb92 	bl	8004a8c <WIZCHIP_READ>
 8006368:	4603      	mov	r3, r0
 800636a:	b2da      	uxtb	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	72da      	strb	r2, [r3, #11]
 8006370:	2016      	movs	r0, #22
 8006372:	f7fe fb8b 	bl	8004a8c <WIZCHIP_READ>
 8006376:	4603      	mov	r3, r0
 8006378:	0a1b      	lsrs	r3, r3, #8
 800637a:	b29b      	uxth	r3, r3
 800637c:	b2da      	uxtb	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	731a      	strb	r2, [r3, #12]
 8006382:	2016      	movs	r0, #22
 8006384:	f7fe fb82 	bl	8004a8c <WIZCHIP_READ>
 8006388:	4603      	mov	r3, r0
 800638a:	b2da      	uxtb	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	735a      	strb	r2, [r3, #13]
   getSIPR(pnetinfo->ip);
 8006390:	2018      	movs	r0, #24
 8006392:	f7fe fb7b 	bl	8004a8c <WIZCHIP_READ>
 8006396:	4603      	mov	r3, r0
 8006398:	0a1b      	lsrs	r3, r3, #8
 800639a:	b29b      	uxth	r3, r3
 800639c:	b2da      	uxtb	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	719a      	strb	r2, [r3, #6]
 80063a2:	2018      	movs	r0, #24
 80063a4:	f7fe fb72 	bl	8004a8c <WIZCHIP_READ>
 80063a8:	4603      	mov	r3, r0
 80063aa:	b2da      	uxtb	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	71da      	strb	r2, [r3, #7]
 80063b0:	201a      	movs	r0, #26
 80063b2:	f7fe fb6b 	bl	8004a8c <WIZCHIP_READ>
 80063b6:	4603      	mov	r3, r0
 80063b8:	0a1b      	lsrs	r3, r3, #8
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	721a      	strb	r2, [r3, #8]
 80063c2:	201a      	movs	r0, #26
 80063c4:	f7fe fb62 	bl	8004a8c <WIZCHIP_READ>
 80063c8:	4603      	mov	r3, r0
 80063ca:	b2da      	uxtb	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	725a      	strb	r2, [r3, #9]
   pnetinfo->dns[0]= _DNS_[0];
 80063d0:	4b0b      	ldr	r3, [pc, #44]	; (8006400 <wizchip_getnetinfo+0x158>)
 80063d2:	781a      	ldrb	r2, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 80063d8:	4b09      	ldr	r3, [pc, #36]	; (8006400 <wizchip_getnetinfo+0x158>)
 80063da:	785a      	ldrb	r2, [r3, #1]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80063e0:	4b07      	ldr	r3, [pc, #28]	; (8006400 <wizchip_getnetinfo+0x158>)
 80063e2:	789a      	ldrb	r2, [r3, #2]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80063e8:	4b05      	ldr	r3, [pc, #20]	; (8006400 <wizchip_getnetinfo+0x158>)
 80063ea:	78da      	ldrb	r2, [r3, #3]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80063f0:	4b04      	ldr	r3, [pc, #16]	; (8006404 <wizchip_getnetinfo+0x15c>)
 80063f2:	781a      	ldrb	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	759a      	strb	r2, [r3, #22]
}
 80063f8:	bf00      	nop
 80063fa:	3708      	adds	r7, #8
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	200009e8 	.word	0x200009e8
 8006404:	200009ec 	.word	0x200009ec

08006408 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	4603      	mov	r3, r0
 8006410:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8006412:	2300      	movs	r3, #0
 8006414:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
 8006416:	79fb      	ldrb	r3, [r7, #7]
 8006418:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800641c:	2b00      	cmp	r3, #0
 800641e:	d002      	beq.n	8006426 <wizchip_setnetmode+0x1e>
 8006420:	f04f 33ff 	mov.w	r3, #4294967295
 8006424:	e00f      	b.n	8006446 <wizchip_setnetmode+0x3e>
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
#endif      
   tmp = getMR();
 8006426:	2000      	movs	r0, #0
 8006428:	f7fe fb30 	bl	8004a8c <WIZCHIP_READ>
 800642c:	4603      	mov	r3, r0
 800642e:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8006430:	7bfa      	ldrb	r2, [r7, #15]
 8006432:	79fb      	ldrb	r3, [r7, #7]
 8006434:	4313      	orrs	r3, r2
 8006436:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8006438:	7bfb      	ldrb	r3, [r7, #15]
 800643a:	b29b      	uxth	r3, r3
 800643c:	4619      	mov	r1, r3
 800643e:	2000      	movs	r0, #0
 8006440:	f7fe fb06 	bl	8004a50 <WIZCHIP_WRITE>
   return 0;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}

0800644e <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 800644e:	b580      	push	{r7, lr}
 8006450:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8006452:	2000      	movs	r0, #0
 8006454:	f7fe fb1a 	bl	8004a8c <WIZCHIP_READ>
 8006458:	4603      	mov	r3, r0
 800645a:	b2db      	uxtb	r3, r3
}
 800645c:	4618      	mov	r0, r3
 800645e:	bd80      	pop	{r7, pc}

08006460 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	b29b      	uxth	r3, r3
 800646e:	4619      	mov	r1, r3
 8006470:	201e      	movs	r0, #30
 8006472:	f7fe faed 	bl	8004a50 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	885b      	ldrh	r3, [r3, #2]
 800647a:	4619      	mov	r1, r3
 800647c:	201c      	movs	r0, #28
 800647e:	f7fe fae7 	bl	8004a50 <WIZCHIP_WRITE>
}
 8006482:	bf00      	nop
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b082      	sub	sp, #8
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8006492:	201e      	movs	r0, #30
 8006494:	f7fe fafa 	bl	8004a8c <WIZCHIP_READ>
 8006498:	4603      	mov	r3, r0
 800649a:	b2da      	uxtb	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 80064a0:	201c      	movs	r0, #28
 80064a2:	f7fe faf3 	bl	8004a8c <WIZCHIP_READ>
 80064a6:	4603      	mov	r3, r0
 80064a8:	461a      	mov	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	805a      	strh	r2, [r3, #2]
}
 80064ae:	bf00      	nop
 80064b0:	3708      	adds	r7, #8
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
	...

080064b8 <__errno>:
 80064b8:	4b01      	ldr	r3, [pc, #4]	; (80064c0 <__errno+0x8>)
 80064ba:	6818      	ldr	r0, [r3, #0]
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	20000060 	.word	0x20000060

080064c4 <__libc_init_array>:
 80064c4:	b570      	push	{r4, r5, r6, lr}
 80064c6:	4d0d      	ldr	r5, [pc, #52]	; (80064fc <__libc_init_array+0x38>)
 80064c8:	4c0d      	ldr	r4, [pc, #52]	; (8006500 <__libc_init_array+0x3c>)
 80064ca:	1b64      	subs	r4, r4, r5
 80064cc:	10a4      	asrs	r4, r4, #2
 80064ce:	2600      	movs	r6, #0
 80064d0:	42a6      	cmp	r6, r4
 80064d2:	d109      	bne.n	80064e8 <__libc_init_array+0x24>
 80064d4:	4d0b      	ldr	r5, [pc, #44]	; (8006504 <__libc_init_array+0x40>)
 80064d6:	4c0c      	ldr	r4, [pc, #48]	; (8006508 <__libc_init_array+0x44>)
 80064d8:	f001 f824 	bl	8007524 <_init>
 80064dc:	1b64      	subs	r4, r4, r5
 80064de:	10a4      	asrs	r4, r4, #2
 80064e0:	2600      	movs	r6, #0
 80064e2:	42a6      	cmp	r6, r4
 80064e4:	d105      	bne.n	80064f2 <__libc_init_array+0x2e>
 80064e6:	bd70      	pop	{r4, r5, r6, pc}
 80064e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ec:	4798      	blx	r3
 80064ee:	3601      	adds	r6, #1
 80064f0:	e7ee      	b.n	80064d0 <__libc_init_array+0xc>
 80064f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80064f6:	4798      	blx	r3
 80064f8:	3601      	adds	r6, #1
 80064fa:	e7f2      	b.n	80064e2 <__libc_init_array+0x1e>
 80064fc:	0800783c 	.word	0x0800783c
 8006500:	0800783c 	.word	0x0800783c
 8006504:	0800783c 	.word	0x0800783c
 8006508:	08007840 	.word	0x08007840

0800650c <memset>:
 800650c:	4402      	add	r2, r0
 800650e:	4603      	mov	r3, r0
 8006510:	4293      	cmp	r3, r2
 8006512:	d100      	bne.n	8006516 <memset+0xa>
 8006514:	4770      	bx	lr
 8006516:	f803 1b01 	strb.w	r1, [r3], #1
 800651a:	e7f9      	b.n	8006510 <memset+0x4>

0800651c <_free_r>:
 800651c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800651e:	2900      	cmp	r1, #0
 8006520:	d044      	beq.n	80065ac <_free_r+0x90>
 8006522:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006526:	9001      	str	r0, [sp, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	f1a1 0404 	sub.w	r4, r1, #4
 800652e:	bfb8      	it	lt
 8006530:	18e4      	addlt	r4, r4, r3
 8006532:	f000 fcc9 	bl	8006ec8 <__malloc_lock>
 8006536:	4a1e      	ldr	r2, [pc, #120]	; (80065b0 <_free_r+0x94>)
 8006538:	9801      	ldr	r0, [sp, #4]
 800653a:	6813      	ldr	r3, [r2, #0]
 800653c:	b933      	cbnz	r3, 800654c <_free_r+0x30>
 800653e:	6063      	str	r3, [r4, #4]
 8006540:	6014      	str	r4, [r2, #0]
 8006542:	b003      	add	sp, #12
 8006544:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006548:	f000 bcc4 	b.w	8006ed4 <__malloc_unlock>
 800654c:	42a3      	cmp	r3, r4
 800654e:	d908      	bls.n	8006562 <_free_r+0x46>
 8006550:	6825      	ldr	r5, [r4, #0]
 8006552:	1961      	adds	r1, r4, r5
 8006554:	428b      	cmp	r3, r1
 8006556:	bf01      	itttt	eq
 8006558:	6819      	ldreq	r1, [r3, #0]
 800655a:	685b      	ldreq	r3, [r3, #4]
 800655c:	1949      	addeq	r1, r1, r5
 800655e:	6021      	streq	r1, [r4, #0]
 8006560:	e7ed      	b.n	800653e <_free_r+0x22>
 8006562:	461a      	mov	r2, r3
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	b10b      	cbz	r3, 800656c <_free_r+0x50>
 8006568:	42a3      	cmp	r3, r4
 800656a:	d9fa      	bls.n	8006562 <_free_r+0x46>
 800656c:	6811      	ldr	r1, [r2, #0]
 800656e:	1855      	adds	r5, r2, r1
 8006570:	42a5      	cmp	r5, r4
 8006572:	d10b      	bne.n	800658c <_free_r+0x70>
 8006574:	6824      	ldr	r4, [r4, #0]
 8006576:	4421      	add	r1, r4
 8006578:	1854      	adds	r4, r2, r1
 800657a:	42a3      	cmp	r3, r4
 800657c:	6011      	str	r1, [r2, #0]
 800657e:	d1e0      	bne.n	8006542 <_free_r+0x26>
 8006580:	681c      	ldr	r4, [r3, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	6053      	str	r3, [r2, #4]
 8006586:	4421      	add	r1, r4
 8006588:	6011      	str	r1, [r2, #0]
 800658a:	e7da      	b.n	8006542 <_free_r+0x26>
 800658c:	d902      	bls.n	8006594 <_free_r+0x78>
 800658e:	230c      	movs	r3, #12
 8006590:	6003      	str	r3, [r0, #0]
 8006592:	e7d6      	b.n	8006542 <_free_r+0x26>
 8006594:	6825      	ldr	r5, [r4, #0]
 8006596:	1961      	adds	r1, r4, r5
 8006598:	428b      	cmp	r3, r1
 800659a:	bf04      	itt	eq
 800659c:	6819      	ldreq	r1, [r3, #0]
 800659e:	685b      	ldreq	r3, [r3, #4]
 80065a0:	6063      	str	r3, [r4, #4]
 80065a2:	bf04      	itt	eq
 80065a4:	1949      	addeq	r1, r1, r5
 80065a6:	6021      	streq	r1, [r4, #0]
 80065a8:	6054      	str	r4, [r2, #4]
 80065aa:	e7ca      	b.n	8006542 <_free_r+0x26>
 80065ac:	b003      	add	sp, #12
 80065ae:	bd30      	pop	{r4, r5, pc}
 80065b0:	200009f0 	.word	0x200009f0

080065b4 <sbrk_aligned>:
 80065b4:	b570      	push	{r4, r5, r6, lr}
 80065b6:	4e0e      	ldr	r6, [pc, #56]	; (80065f0 <sbrk_aligned+0x3c>)
 80065b8:	460c      	mov	r4, r1
 80065ba:	6831      	ldr	r1, [r6, #0]
 80065bc:	4605      	mov	r5, r0
 80065be:	b911      	cbnz	r1, 80065c6 <sbrk_aligned+0x12>
 80065c0:	f000 f91a 	bl	80067f8 <_sbrk_r>
 80065c4:	6030      	str	r0, [r6, #0]
 80065c6:	4621      	mov	r1, r4
 80065c8:	4628      	mov	r0, r5
 80065ca:	f000 f915 	bl	80067f8 <_sbrk_r>
 80065ce:	1c43      	adds	r3, r0, #1
 80065d0:	d00a      	beq.n	80065e8 <sbrk_aligned+0x34>
 80065d2:	1cc4      	adds	r4, r0, #3
 80065d4:	f024 0403 	bic.w	r4, r4, #3
 80065d8:	42a0      	cmp	r0, r4
 80065da:	d007      	beq.n	80065ec <sbrk_aligned+0x38>
 80065dc:	1a21      	subs	r1, r4, r0
 80065de:	4628      	mov	r0, r5
 80065e0:	f000 f90a 	bl	80067f8 <_sbrk_r>
 80065e4:	3001      	adds	r0, #1
 80065e6:	d101      	bne.n	80065ec <sbrk_aligned+0x38>
 80065e8:	f04f 34ff 	mov.w	r4, #4294967295
 80065ec:	4620      	mov	r0, r4
 80065ee:	bd70      	pop	{r4, r5, r6, pc}
 80065f0:	200009f4 	.word	0x200009f4

080065f4 <_malloc_r>:
 80065f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065f8:	1ccd      	adds	r5, r1, #3
 80065fa:	f025 0503 	bic.w	r5, r5, #3
 80065fe:	3508      	adds	r5, #8
 8006600:	2d0c      	cmp	r5, #12
 8006602:	bf38      	it	cc
 8006604:	250c      	movcc	r5, #12
 8006606:	2d00      	cmp	r5, #0
 8006608:	4607      	mov	r7, r0
 800660a:	db01      	blt.n	8006610 <_malloc_r+0x1c>
 800660c:	42a9      	cmp	r1, r5
 800660e:	d905      	bls.n	800661c <_malloc_r+0x28>
 8006610:	230c      	movs	r3, #12
 8006612:	603b      	str	r3, [r7, #0]
 8006614:	2600      	movs	r6, #0
 8006616:	4630      	mov	r0, r6
 8006618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800661c:	4e2e      	ldr	r6, [pc, #184]	; (80066d8 <_malloc_r+0xe4>)
 800661e:	f000 fc53 	bl	8006ec8 <__malloc_lock>
 8006622:	6833      	ldr	r3, [r6, #0]
 8006624:	461c      	mov	r4, r3
 8006626:	bb34      	cbnz	r4, 8006676 <_malloc_r+0x82>
 8006628:	4629      	mov	r1, r5
 800662a:	4638      	mov	r0, r7
 800662c:	f7ff ffc2 	bl	80065b4 <sbrk_aligned>
 8006630:	1c43      	adds	r3, r0, #1
 8006632:	4604      	mov	r4, r0
 8006634:	d14d      	bne.n	80066d2 <_malloc_r+0xde>
 8006636:	6834      	ldr	r4, [r6, #0]
 8006638:	4626      	mov	r6, r4
 800663a:	2e00      	cmp	r6, #0
 800663c:	d140      	bne.n	80066c0 <_malloc_r+0xcc>
 800663e:	6823      	ldr	r3, [r4, #0]
 8006640:	4631      	mov	r1, r6
 8006642:	4638      	mov	r0, r7
 8006644:	eb04 0803 	add.w	r8, r4, r3
 8006648:	f000 f8d6 	bl	80067f8 <_sbrk_r>
 800664c:	4580      	cmp	r8, r0
 800664e:	d13a      	bne.n	80066c6 <_malloc_r+0xd2>
 8006650:	6821      	ldr	r1, [r4, #0]
 8006652:	3503      	adds	r5, #3
 8006654:	1a6d      	subs	r5, r5, r1
 8006656:	f025 0503 	bic.w	r5, r5, #3
 800665a:	3508      	adds	r5, #8
 800665c:	2d0c      	cmp	r5, #12
 800665e:	bf38      	it	cc
 8006660:	250c      	movcc	r5, #12
 8006662:	4629      	mov	r1, r5
 8006664:	4638      	mov	r0, r7
 8006666:	f7ff ffa5 	bl	80065b4 <sbrk_aligned>
 800666a:	3001      	adds	r0, #1
 800666c:	d02b      	beq.n	80066c6 <_malloc_r+0xd2>
 800666e:	6823      	ldr	r3, [r4, #0]
 8006670:	442b      	add	r3, r5
 8006672:	6023      	str	r3, [r4, #0]
 8006674:	e00e      	b.n	8006694 <_malloc_r+0xa0>
 8006676:	6822      	ldr	r2, [r4, #0]
 8006678:	1b52      	subs	r2, r2, r5
 800667a:	d41e      	bmi.n	80066ba <_malloc_r+0xc6>
 800667c:	2a0b      	cmp	r2, #11
 800667e:	d916      	bls.n	80066ae <_malloc_r+0xba>
 8006680:	1961      	adds	r1, r4, r5
 8006682:	42a3      	cmp	r3, r4
 8006684:	6025      	str	r5, [r4, #0]
 8006686:	bf18      	it	ne
 8006688:	6059      	strne	r1, [r3, #4]
 800668a:	6863      	ldr	r3, [r4, #4]
 800668c:	bf08      	it	eq
 800668e:	6031      	streq	r1, [r6, #0]
 8006690:	5162      	str	r2, [r4, r5]
 8006692:	604b      	str	r3, [r1, #4]
 8006694:	4638      	mov	r0, r7
 8006696:	f104 060b 	add.w	r6, r4, #11
 800669a:	f000 fc1b 	bl	8006ed4 <__malloc_unlock>
 800669e:	f026 0607 	bic.w	r6, r6, #7
 80066a2:	1d23      	adds	r3, r4, #4
 80066a4:	1af2      	subs	r2, r6, r3
 80066a6:	d0b6      	beq.n	8006616 <_malloc_r+0x22>
 80066a8:	1b9b      	subs	r3, r3, r6
 80066aa:	50a3      	str	r3, [r4, r2]
 80066ac:	e7b3      	b.n	8006616 <_malloc_r+0x22>
 80066ae:	6862      	ldr	r2, [r4, #4]
 80066b0:	42a3      	cmp	r3, r4
 80066b2:	bf0c      	ite	eq
 80066b4:	6032      	streq	r2, [r6, #0]
 80066b6:	605a      	strne	r2, [r3, #4]
 80066b8:	e7ec      	b.n	8006694 <_malloc_r+0xa0>
 80066ba:	4623      	mov	r3, r4
 80066bc:	6864      	ldr	r4, [r4, #4]
 80066be:	e7b2      	b.n	8006626 <_malloc_r+0x32>
 80066c0:	4634      	mov	r4, r6
 80066c2:	6876      	ldr	r6, [r6, #4]
 80066c4:	e7b9      	b.n	800663a <_malloc_r+0x46>
 80066c6:	230c      	movs	r3, #12
 80066c8:	603b      	str	r3, [r7, #0]
 80066ca:	4638      	mov	r0, r7
 80066cc:	f000 fc02 	bl	8006ed4 <__malloc_unlock>
 80066d0:	e7a1      	b.n	8006616 <_malloc_r+0x22>
 80066d2:	6025      	str	r5, [r4, #0]
 80066d4:	e7de      	b.n	8006694 <_malloc_r+0xa0>
 80066d6:	bf00      	nop
 80066d8:	200009f0 	.word	0x200009f0

080066dc <iprintf>:
 80066dc:	b40f      	push	{r0, r1, r2, r3}
 80066de:	4b0a      	ldr	r3, [pc, #40]	; (8006708 <iprintf+0x2c>)
 80066e0:	b513      	push	{r0, r1, r4, lr}
 80066e2:	681c      	ldr	r4, [r3, #0]
 80066e4:	b124      	cbz	r4, 80066f0 <iprintf+0x14>
 80066e6:	69a3      	ldr	r3, [r4, #24]
 80066e8:	b913      	cbnz	r3, 80066f0 <iprintf+0x14>
 80066ea:	4620      	mov	r0, r4
 80066ec:	f000 fad4 	bl	8006c98 <__sinit>
 80066f0:	ab05      	add	r3, sp, #20
 80066f2:	9a04      	ldr	r2, [sp, #16]
 80066f4:	68a1      	ldr	r1, [r4, #8]
 80066f6:	9301      	str	r3, [sp, #4]
 80066f8:	4620      	mov	r0, r4
 80066fa:	f000 fc1b 	bl	8006f34 <_vfiprintf_r>
 80066fe:	b002      	add	sp, #8
 8006700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006704:	b004      	add	sp, #16
 8006706:	4770      	bx	lr
 8006708:	20000060 	.word	0x20000060

0800670c <_puts_r>:
 800670c:	b570      	push	{r4, r5, r6, lr}
 800670e:	460e      	mov	r6, r1
 8006710:	4605      	mov	r5, r0
 8006712:	b118      	cbz	r0, 800671c <_puts_r+0x10>
 8006714:	6983      	ldr	r3, [r0, #24]
 8006716:	b90b      	cbnz	r3, 800671c <_puts_r+0x10>
 8006718:	f000 fabe 	bl	8006c98 <__sinit>
 800671c:	69ab      	ldr	r3, [r5, #24]
 800671e:	68ac      	ldr	r4, [r5, #8]
 8006720:	b913      	cbnz	r3, 8006728 <_puts_r+0x1c>
 8006722:	4628      	mov	r0, r5
 8006724:	f000 fab8 	bl	8006c98 <__sinit>
 8006728:	4b2c      	ldr	r3, [pc, #176]	; (80067dc <_puts_r+0xd0>)
 800672a:	429c      	cmp	r4, r3
 800672c:	d120      	bne.n	8006770 <_puts_r+0x64>
 800672e:	686c      	ldr	r4, [r5, #4]
 8006730:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006732:	07db      	lsls	r3, r3, #31
 8006734:	d405      	bmi.n	8006742 <_puts_r+0x36>
 8006736:	89a3      	ldrh	r3, [r4, #12]
 8006738:	0598      	lsls	r0, r3, #22
 800673a:	d402      	bmi.n	8006742 <_puts_r+0x36>
 800673c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800673e:	f000 fb49 	bl	8006dd4 <__retarget_lock_acquire_recursive>
 8006742:	89a3      	ldrh	r3, [r4, #12]
 8006744:	0719      	lsls	r1, r3, #28
 8006746:	d51d      	bpl.n	8006784 <_puts_r+0x78>
 8006748:	6923      	ldr	r3, [r4, #16]
 800674a:	b1db      	cbz	r3, 8006784 <_puts_r+0x78>
 800674c:	3e01      	subs	r6, #1
 800674e:	68a3      	ldr	r3, [r4, #8]
 8006750:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006754:	3b01      	subs	r3, #1
 8006756:	60a3      	str	r3, [r4, #8]
 8006758:	bb39      	cbnz	r1, 80067aa <_puts_r+0x9e>
 800675a:	2b00      	cmp	r3, #0
 800675c:	da38      	bge.n	80067d0 <_puts_r+0xc4>
 800675e:	4622      	mov	r2, r4
 8006760:	210a      	movs	r1, #10
 8006762:	4628      	mov	r0, r5
 8006764:	f000 f89c 	bl	80068a0 <__swbuf_r>
 8006768:	3001      	adds	r0, #1
 800676a:	d011      	beq.n	8006790 <_puts_r+0x84>
 800676c:	250a      	movs	r5, #10
 800676e:	e011      	b.n	8006794 <_puts_r+0x88>
 8006770:	4b1b      	ldr	r3, [pc, #108]	; (80067e0 <_puts_r+0xd4>)
 8006772:	429c      	cmp	r4, r3
 8006774:	d101      	bne.n	800677a <_puts_r+0x6e>
 8006776:	68ac      	ldr	r4, [r5, #8]
 8006778:	e7da      	b.n	8006730 <_puts_r+0x24>
 800677a:	4b1a      	ldr	r3, [pc, #104]	; (80067e4 <_puts_r+0xd8>)
 800677c:	429c      	cmp	r4, r3
 800677e:	bf08      	it	eq
 8006780:	68ec      	ldreq	r4, [r5, #12]
 8006782:	e7d5      	b.n	8006730 <_puts_r+0x24>
 8006784:	4621      	mov	r1, r4
 8006786:	4628      	mov	r0, r5
 8006788:	f000 f8ee 	bl	8006968 <__swsetup_r>
 800678c:	2800      	cmp	r0, #0
 800678e:	d0dd      	beq.n	800674c <_puts_r+0x40>
 8006790:	f04f 35ff 	mov.w	r5, #4294967295
 8006794:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006796:	07da      	lsls	r2, r3, #31
 8006798:	d405      	bmi.n	80067a6 <_puts_r+0x9a>
 800679a:	89a3      	ldrh	r3, [r4, #12]
 800679c:	059b      	lsls	r3, r3, #22
 800679e:	d402      	bmi.n	80067a6 <_puts_r+0x9a>
 80067a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067a2:	f000 fb18 	bl	8006dd6 <__retarget_lock_release_recursive>
 80067a6:	4628      	mov	r0, r5
 80067a8:	bd70      	pop	{r4, r5, r6, pc}
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	da04      	bge.n	80067b8 <_puts_r+0xac>
 80067ae:	69a2      	ldr	r2, [r4, #24]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	dc06      	bgt.n	80067c2 <_puts_r+0xb6>
 80067b4:	290a      	cmp	r1, #10
 80067b6:	d004      	beq.n	80067c2 <_puts_r+0xb6>
 80067b8:	6823      	ldr	r3, [r4, #0]
 80067ba:	1c5a      	adds	r2, r3, #1
 80067bc:	6022      	str	r2, [r4, #0]
 80067be:	7019      	strb	r1, [r3, #0]
 80067c0:	e7c5      	b.n	800674e <_puts_r+0x42>
 80067c2:	4622      	mov	r2, r4
 80067c4:	4628      	mov	r0, r5
 80067c6:	f000 f86b 	bl	80068a0 <__swbuf_r>
 80067ca:	3001      	adds	r0, #1
 80067cc:	d1bf      	bne.n	800674e <_puts_r+0x42>
 80067ce:	e7df      	b.n	8006790 <_puts_r+0x84>
 80067d0:	6823      	ldr	r3, [r4, #0]
 80067d2:	250a      	movs	r5, #10
 80067d4:	1c5a      	adds	r2, r3, #1
 80067d6:	6022      	str	r2, [r4, #0]
 80067d8:	701d      	strb	r5, [r3, #0]
 80067da:	e7db      	b.n	8006794 <_puts_r+0x88>
 80067dc:	080077c0 	.word	0x080077c0
 80067e0:	080077e0 	.word	0x080077e0
 80067e4:	080077a0 	.word	0x080077a0

080067e8 <puts>:
 80067e8:	4b02      	ldr	r3, [pc, #8]	; (80067f4 <puts+0xc>)
 80067ea:	4601      	mov	r1, r0
 80067ec:	6818      	ldr	r0, [r3, #0]
 80067ee:	f7ff bf8d 	b.w	800670c <_puts_r>
 80067f2:	bf00      	nop
 80067f4:	20000060 	.word	0x20000060

080067f8 <_sbrk_r>:
 80067f8:	b538      	push	{r3, r4, r5, lr}
 80067fa:	4d06      	ldr	r5, [pc, #24]	; (8006814 <_sbrk_r+0x1c>)
 80067fc:	2300      	movs	r3, #0
 80067fe:	4604      	mov	r4, r0
 8006800:	4608      	mov	r0, r1
 8006802:	602b      	str	r3, [r5, #0]
 8006804:	f7fa fb56 	bl	8000eb4 <_sbrk>
 8006808:	1c43      	adds	r3, r0, #1
 800680a:	d102      	bne.n	8006812 <_sbrk_r+0x1a>
 800680c:	682b      	ldr	r3, [r5, #0]
 800680e:	b103      	cbz	r3, 8006812 <_sbrk_r+0x1a>
 8006810:	6023      	str	r3, [r4, #0]
 8006812:	bd38      	pop	{r3, r4, r5, pc}
 8006814:	200009fc 	.word	0x200009fc

08006818 <__sread>:
 8006818:	b510      	push	{r4, lr}
 800681a:	460c      	mov	r4, r1
 800681c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006820:	f000 fe4c 	bl	80074bc <_read_r>
 8006824:	2800      	cmp	r0, #0
 8006826:	bfab      	itete	ge
 8006828:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800682a:	89a3      	ldrhlt	r3, [r4, #12]
 800682c:	181b      	addge	r3, r3, r0
 800682e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006832:	bfac      	ite	ge
 8006834:	6563      	strge	r3, [r4, #84]	; 0x54
 8006836:	81a3      	strhlt	r3, [r4, #12]
 8006838:	bd10      	pop	{r4, pc}

0800683a <__swrite>:
 800683a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800683e:	461f      	mov	r7, r3
 8006840:	898b      	ldrh	r3, [r1, #12]
 8006842:	05db      	lsls	r3, r3, #23
 8006844:	4605      	mov	r5, r0
 8006846:	460c      	mov	r4, r1
 8006848:	4616      	mov	r6, r2
 800684a:	d505      	bpl.n	8006858 <__swrite+0x1e>
 800684c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006850:	2302      	movs	r3, #2
 8006852:	2200      	movs	r2, #0
 8006854:	f000 fac0 	bl	8006dd8 <_lseek_r>
 8006858:	89a3      	ldrh	r3, [r4, #12]
 800685a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800685e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006862:	81a3      	strh	r3, [r4, #12]
 8006864:	4632      	mov	r2, r6
 8006866:	463b      	mov	r3, r7
 8006868:	4628      	mov	r0, r5
 800686a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800686e:	f000 b869 	b.w	8006944 <_write_r>

08006872 <__sseek>:
 8006872:	b510      	push	{r4, lr}
 8006874:	460c      	mov	r4, r1
 8006876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800687a:	f000 faad 	bl	8006dd8 <_lseek_r>
 800687e:	1c43      	adds	r3, r0, #1
 8006880:	89a3      	ldrh	r3, [r4, #12]
 8006882:	bf15      	itete	ne
 8006884:	6560      	strne	r0, [r4, #84]	; 0x54
 8006886:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800688a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800688e:	81a3      	strheq	r3, [r4, #12]
 8006890:	bf18      	it	ne
 8006892:	81a3      	strhne	r3, [r4, #12]
 8006894:	bd10      	pop	{r4, pc}

08006896 <__sclose>:
 8006896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800689a:	f000 b8d3 	b.w	8006a44 <_close_r>
	...

080068a0 <__swbuf_r>:
 80068a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068a2:	460e      	mov	r6, r1
 80068a4:	4614      	mov	r4, r2
 80068a6:	4605      	mov	r5, r0
 80068a8:	b118      	cbz	r0, 80068b2 <__swbuf_r+0x12>
 80068aa:	6983      	ldr	r3, [r0, #24]
 80068ac:	b90b      	cbnz	r3, 80068b2 <__swbuf_r+0x12>
 80068ae:	f000 f9f3 	bl	8006c98 <__sinit>
 80068b2:	4b21      	ldr	r3, [pc, #132]	; (8006938 <__swbuf_r+0x98>)
 80068b4:	429c      	cmp	r4, r3
 80068b6:	d12b      	bne.n	8006910 <__swbuf_r+0x70>
 80068b8:	686c      	ldr	r4, [r5, #4]
 80068ba:	69a3      	ldr	r3, [r4, #24]
 80068bc:	60a3      	str	r3, [r4, #8]
 80068be:	89a3      	ldrh	r3, [r4, #12]
 80068c0:	071a      	lsls	r2, r3, #28
 80068c2:	d52f      	bpl.n	8006924 <__swbuf_r+0x84>
 80068c4:	6923      	ldr	r3, [r4, #16]
 80068c6:	b36b      	cbz	r3, 8006924 <__swbuf_r+0x84>
 80068c8:	6923      	ldr	r3, [r4, #16]
 80068ca:	6820      	ldr	r0, [r4, #0]
 80068cc:	1ac0      	subs	r0, r0, r3
 80068ce:	6963      	ldr	r3, [r4, #20]
 80068d0:	b2f6      	uxtb	r6, r6
 80068d2:	4283      	cmp	r3, r0
 80068d4:	4637      	mov	r7, r6
 80068d6:	dc04      	bgt.n	80068e2 <__swbuf_r+0x42>
 80068d8:	4621      	mov	r1, r4
 80068da:	4628      	mov	r0, r5
 80068dc:	f000 f948 	bl	8006b70 <_fflush_r>
 80068e0:	bb30      	cbnz	r0, 8006930 <__swbuf_r+0x90>
 80068e2:	68a3      	ldr	r3, [r4, #8]
 80068e4:	3b01      	subs	r3, #1
 80068e6:	60a3      	str	r3, [r4, #8]
 80068e8:	6823      	ldr	r3, [r4, #0]
 80068ea:	1c5a      	adds	r2, r3, #1
 80068ec:	6022      	str	r2, [r4, #0]
 80068ee:	701e      	strb	r6, [r3, #0]
 80068f0:	6963      	ldr	r3, [r4, #20]
 80068f2:	3001      	adds	r0, #1
 80068f4:	4283      	cmp	r3, r0
 80068f6:	d004      	beq.n	8006902 <__swbuf_r+0x62>
 80068f8:	89a3      	ldrh	r3, [r4, #12]
 80068fa:	07db      	lsls	r3, r3, #31
 80068fc:	d506      	bpl.n	800690c <__swbuf_r+0x6c>
 80068fe:	2e0a      	cmp	r6, #10
 8006900:	d104      	bne.n	800690c <__swbuf_r+0x6c>
 8006902:	4621      	mov	r1, r4
 8006904:	4628      	mov	r0, r5
 8006906:	f000 f933 	bl	8006b70 <_fflush_r>
 800690a:	b988      	cbnz	r0, 8006930 <__swbuf_r+0x90>
 800690c:	4638      	mov	r0, r7
 800690e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006910:	4b0a      	ldr	r3, [pc, #40]	; (800693c <__swbuf_r+0x9c>)
 8006912:	429c      	cmp	r4, r3
 8006914:	d101      	bne.n	800691a <__swbuf_r+0x7a>
 8006916:	68ac      	ldr	r4, [r5, #8]
 8006918:	e7cf      	b.n	80068ba <__swbuf_r+0x1a>
 800691a:	4b09      	ldr	r3, [pc, #36]	; (8006940 <__swbuf_r+0xa0>)
 800691c:	429c      	cmp	r4, r3
 800691e:	bf08      	it	eq
 8006920:	68ec      	ldreq	r4, [r5, #12]
 8006922:	e7ca      	b.n	80068ba <__swbuf_r+0x1a>
 8006924:	4621      	mov	r1, r4
 8006926:	4628      	mov	r0, r5
 8006928:	f000 f81e 	bl	8006968 <__swsetup_r>
 800692c:	2800      	cmp	r0, #0
 800692e:	d0cb      	beq.n	80068c8 <__swbuf_r+0x28>
 8006930:	f04f 37ff 	mov.w	r7, #4294967295
 8006934:	e7ea      	b.n	800690c <__swbuf_r+0x6c>
 8006936:	bf00      	nop
 8006938:	080077c0 	.word	0x080077c0
 800693c:	080077e0 	.word	0x080077e0
 8006940:	080077a0 	.word	0x080077a0

08006944 <_write_r>:
 8006944:	b538      	push	{r3, r4, r5, lr}
 8006946:	4d07      	ldr	r5, [pc, #28]	; (8006964 <_write_r+0x20>)
 8006948:	4604      	mov	r4, r0
 800694a:	4608      	mov	r0, r1
 800694c:	4611      	mov	r1, r2
 800694e:	2200      	movs	r2, #0
 8006950:	602a      	str	r2, [r5, #0]
 8006952:	461a      	mov	r2, r3
 8006954:	f7f9 fe1e 	bl	8000594 <_write>
 8006958:	1c43      	adds	r3, r0, #1
 800695a:	d102      	bne.n	8006962 <_write_r+0x1e>
 800695c:	682b      	ldr	r3, [r5, #0]
 800695e:	b103      	cbz	r3, 8006962 <_write_r+0x1e>
 8006960:	6023      	str	r3, [r4, #0]
 8006962:	bd38      	pop	{r3, r4, r5, pc}
 8006964:	200009fc 	.word	0x200009fc

08006968 <__swsetup_r>:
 8006968:	4b32      	ldr	r3, [pc, #200]	; (8006a34 <__swsetup_r+0xcc>)
 800696a:	b570      	push	{r4, r5, r6, lr}
 800696c:	681d      	ldr	r5, [r3, #0]
 800696e:	4606      	mov	r6, r0
 8006970:	460c      	mov	r4, r1
 8006972:	b125      	cbz	r5, 800697e <__swsetup_r+0x16>
 8006974:	69ab      	ldr	r3, [r5, #24]
 8006976:	b913      	cbnz	r3, 800697e <__swsetup_r+0x16>
 8006978:	4628      	mov	r0, r5
 800697a:	f000 f98d 	bl	8006c98 <__sinit>
 800697e:	4b2e      	ldr	r3, [pc, #184]	; (8006a38 <__swsetup_r+0xd0>)
 8006980:	429c      	cmp	r4, r3
 8006982:	d10f      	bne.n	80069a4 <__swsetup_r+0x3c>
 8006984:	686c      	ldr	r4, [r5, #4]
 8006986:	89a3      	ldrh	r3, [r4, #12]
 8006988:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800698c:	0719      	lsls	r1, r3, #28
 800698e:	d42c      	bmi.n	80069ea <__swsetup_r+0x82>
 8006990:	06dd      	lsls	r5, r3, #27
 8006992:	d411      	bmi.n	80069b8 <__swsetup_r+0x50>
 8006994:	2309      	movs	r3, #9
 8006996:	6033      	str	r3, [r6, #0]
 8006998:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800699c:	81a3      	strh	r3, [r4, #12]
 800699e:	f04f 30ff 	mov.w	r0, #4294967295
 80069a2:	e03e      	b.n	8006a22 <__swsetup_r+0xba>
 80069a4:	4b25      	ldr	r3, [pc, #148]	; (8006a3c <__swsetup_r+0xd4>)
 80069a6:	429c      	cmp	r4, r3
 80069a8:	d101      	bne.n	80069ae <__swsetup_r+0x46>
 80069aa:	68ac      	ldr	r4, [r5, #8]
 80069ac:	e7eb      	b.n	8006986 <__swsetup_r+0x1e>
 80069ae:	4b24      	ldr	r3, [pc, #144]	; (8006a40 <__swsetup_r+0xd8>)
 80069b0:	429c      	cmp	r4, r3
 80069b2:	bf08      	it	eq
 80069b4:	68ec      	ldreq	r4, [r5, #12]
 80069b6:	e7e6      	b.n	8006986 <__swsetup_r+0x1e>
 80069b8:	0758      	lsls	r0, r3, #29
 80069ba:	d512      	bpl.n	80069e2 <__swsetup_r+0x7a>
 80069bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069be:	b141      	cbz	r1, 80069d2 <__swsetup_r+0x6a>
 80069c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069c4:	4299      	cmp	r1, r3
 80069c6:	d002      	beq.n	80069ce <__swsetup_r+0x66>
 80069c8:	4630      	mov	r0, r6
 80069ca:	f7ff fda7 	bl	800651c <_free_r>
 80069ce:	2300      	movs	r3, #0
 80069d0:	6363      	str	r3, [r4, #52]	; 0x34
 80069d2:	89a3      	ldrh	r3, [r4, #12]
 80069d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80069d8:	81a3      	strh	r3, [r4, #12]
 80069da:	2300      	movs	r3, #0
 80069dc:	6063      	str	r3, [r4, #4]
 80069de:	6923      	ldr	r3, [r4, #16]
 80069e0:	6023      	str	r3, [r4, #0]
 80069e2:	89a3      	ldrh	r3, [r4, #12]
 80069e4:	f043 0308 	orr.w	r3, r3, #8
 80069e8:	81a3      	strh	r3, [r4, #12]
 80069ea:	6923      	ldr	r3, [r4, #16]
 80069ec:	b94b      	cbnz	r3, 8006a02 <__swsetup_r+0x9a>
 80069ee:	89a3      	ldrh	r3, [r4, #12]
 80069f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80069f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069f8:	d003      	beq.n	8006a02 <__swsetup_r+0x9a>
 80069fa:	4621      	mov	r1, r4
 80069fc:	4630      	mov	r0, r6
 80069fe:	f000 fa23 	bl	8006e48 <__smakebuf_r>
 8006a02:	89a0      	ldrh	r0, [r4, #12]
 8006a04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a08:	f010 0301 	ands.w	r3, r0, #1
 8006a0c:	d00a      	beq.n	8006a24 <__swsetup_r+0xbc>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	60a3      	str	r3, [r4, #8]
 8006a12:	6963      	ldr	r3, [r4, #20]
 8006a14:	425b      	negs	r3, r3
 8006a16:	61a3      	str	r3, [r4, #24]
 8006a18:	6923      	ldr	r3, [r4, #16]
 8006a1a:	b943      	cbnz	r3, 8006a2e <__swsetup_r+0xc6>
 8006a1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a20:	d1ba      	bne.n	8006998 <__swsetup_r+0x30>
 8006a22:	bd70      	pop	{r4, r5, r6, pc}
 8006a24:	0781      	lsls	r1, r0, #30
 8006a26:	bf58      	it	pl
 8006a28:	6963      	ldrpl	r3, [r4, #20]
 8006a2a:	60a3      	str	r3, [r4, #8]
 8006a2c:	e7f4      	b.n	8006a18 <__swsetup_r+0xb0>
 8006a2e:	2000      	movs	r0, #0
 8006a30:	e7f7      	b.n	8006a22 <__swsetup_r+0xba>
 8006a32:	bf00      	nop
 8006a34:	20000060 	.word	0x20000060
 8006a38:	080077c0 	.word	0x080077c0
 8006a3c:	080077e0 	.word	0x080077e0
 8006a40:	080077a0 	.word	0x080077a0

08006a44 <_close_r>:
 8006a44:	b538      	push	{r3, r4, r5, lr}
 8006a46:	4d06      	ldr	r5, [pc, #24]	; (8006a60 <_close_r+0x1c>)
 8006a48:	2300      	movs	r3, #0
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	4608      	mov	r0, r1
 8006a4e:	602b      	str	r3, [r5, #0]
 8006a50:	f7fa f9fb 	bl	8000e4a <_close>
 8006a54:	1c43      	adds	r3, r0, #1
 8006a56:	d102      	bne.n	8006a5e <_close_r+0x1a>
 8006a58:	682b      	ldr	r3, [r5, #0]
 8006a5a:	b103      	cbz	r3, 8006a5e <_close_r+0x1a>
 8006a5c:	6023      	str	r3, [r4, #0]
 8006a5e:	bd38      	pop	{r3, r4, r5, pc}
 8006a60:	200009fc 	.word	0x200009fc

08006a64 <__sflush_r>:
 8006a64:	898a      	ldrh	r2, [r1, #12]
 8006a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a6a:	4605      	mov	r5, r0
 8006a6c:	0710      	lsls	r0, r2, #28
 8006a6e:	460c      	mov	r4, r1
 8006a70:	d458      	bmi.n	8006b24 <__sflush_r+0xc0>
 8006a72:	684b      	ldr	r3, [r1, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	dc05      	bgt.n	8006a84 <__sflush_r+0x20>
 8006a78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	dc02      	bgt.n	8006a84 <__sflush_r+0x20>
 8006a7e:	2000      	movs	r0, #0
 8006a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a86:	2e00      	cmp	r6, #0
 8006a88:	d0f9      	beq.n	8006a7e <__sflush_r+0x1a>
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a90:	682f      	ldr	r7, [r5, #0]
 8006a92:	602b      	str	r3, [r5, #0]
 8006a94:	d032      	beq.n	8006afc <__sflush_r+0x98>
 8006a96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a98:	89a3      	ldrh	r3, [r4, #12]
 8006a9a:	075a      	lsls	r2, r3, #29
 8006a9c:	d505      	bpl.n	8006aaa <__sflush_r+0x46>
 8006a9e:	6863      	ldr	r3, [r4, #4]
 8006aa0:	1ac0      	subs	r0, r0, r3
 8006aa2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006aa4:	b10b      	cbz	r3, 8006aaa <__sflush_r+0x46>
 8006aa6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006aa8:	1ac0      	subs	r0, r0, r3
 8006aaa:	2300      	movs	r3, #0
 8006aac:	4602      	mov	r2, r0
 8006aae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ab0:	6a21      	ldr	r1, [r4, #32]
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	47b0      	blx	r6
 8006ab6:	1c43      	adds	r3, r0, #1
 8006ab8:	89a3      	ldrh	r3, [r4, #12]
 8006aba:	d106      	bne.n	8006aca <__sflush_r+0x66>
 8006abc:	6829      	ldr	r1, [r5, #0]
 8006abe:	291d      	cmp	r1, #29
 8006ac0:	d82c      	bhi.n	8006b1c <__sflush_r+0xb8>
 8006ac2:	4a2a      	ldr	r2, [pc, #168]	; (8006b6c <__sflush_r+0x108>)
 8006ac4:	40ca      	lsrs	r2, r1
 8006ac6:	07d6      	lsls	r6, r2, #31
 8006ac8:	d528      	bpl.n	8006b1c <__sflush_r+0xb8>
 8006aca:	2200      	movs	r2, #0
 8006acc:	6062      	str	r2, [r4, #4]
 8006ace:	04d9      	lsls	r1, r3, #19
 8006ad0:	6922      	ldr	r2, [r4, #16]
 8006ad2:	6022      	str	r2, [r4, #0]
 8006ad4:	d504      	bpl.n	8006ae0 <__sflush_r+0x7c>
 8006ad6:	1c42      	adds	r2, r0, #1
 8006ad8:	d101      	bne.n	8006ade <__sflush_r+0x7a>
 8006ada:	682b      	ldr	r3, [r5, #0]
 8006adc:	b903      	cbnz	r3, 8006ae0 <__sflush_r+0x7c>
 8006ade:	6560      	str	r0, [r4, #84]	; 0x54
 8006ae0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ae2:	602f      	str	r7, [r5, #0]
 8006ae4:	2900      	cmp	r1, #0
 8006ae6:	d0ca      	beq.n	8006a7e <__sflush_r+0x1a>
 8006ae8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006aec:	4299      	cmp	r1, r3
 8006aee:	d002      	beq.n	8006af6 <__sflush_r+0x92>
 8006af0:	4628      	mov	r0, r5
 8006af2:	f7ff fd13 	bl	800651c <_free_r>
 8006af6:	2000      	movs	r0, #0
 8006af8:	6360      	str	r0, [r4, #52]	; 0x34
 8006afa:	e7c1      	b.n	8006a80 <__sflush_r+0x1c>
 8006afc:	6a21      	ldr	r1, [r4, #32]
 8006afe:	2301      	movs	r3, #1
 8006b00:	4628      	mov	r0, r5
 8006b02:	47b0      	blx	r6
 8006b04:	1c41      	adds	r1, r0, #1
 8006b06:	d1c7      	bne.n	8006a98 <__sflush_r+0x34>
 8006b08:	682b      	ldr	r3, [r5, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d0c4      	beq.n	8006a98 <__sflush_r+0x34>
 8006b0e:	2b1d      	cmp	r3, #29
 8006b10:	d001      	beq.n	8006b16 <__sflush_r+0xb2>
 8006b12:	2b16      	cmp	r3, #22
 8006b14:	d101      	bne.n	8006b1a <__sflush_r+0xb6>
 8006b16:	602f      	str	r7, [r5, #0]
 8006b18:	e7b1      	b.n	8006a7e <__sflush_r+0x1a>
 8006b1a:	89a3      	ldrh	r3, [r4, #12]
 8006b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b20:	81a3      	strh	r3, [r4, #12]
 8006b22:	e7ad      	b.n	8006a80 <__sflush_r+0x1c>
 8006b24:	690f      	ldr	r7, [r1, #16]
 8006b26:	2f00      	cmp	r7, #0
 8006b28:	d0a9      	beq.n	8006a7e <__sflush_r+0x1a>
 8006b2a:	0793      	lsls	r3, r2, #30
 8006b2c:	680e      	ldr	r6, [r1, #0]
 8006b2e:	bf08      	it	eq
 8006b30:	694b      	ldreq	r3, [r1, #20]
 8006b32:	600f      	str	r7, [r1, #0]
 8006b34:	bf18      	it	ne
 8006b36:	2300      	movne	r3, #0
 8006b38:	eba6 0807 	sub.w	r8, r6, r7
 8006b3c:	608b      	str	r3, [r1, #8]
 8006b3e:	f1b8 0f00 	cmp.w	r8, #0
 8006b42:	dd9c      	ble.n	8006a7e <__sflush_r+0x1a>
 8006b44:	6a21      	ldr	r1, [r4, #32]
 8006b46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b48:	4643      	mov	r3, r8
 8006b4a:	463a      	mov	r2, r7
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	47b0      	blx	r6
 8006b50:	2800      	cmp	r0, #0
 8006b52:	dc06      	bgt.n	8006b62 <__sflush_r+0xfe>
 8006b54:	89a3      	ldrh	r3, [r4, #12]
 8006b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b5a:	81a3      	strh	r3, [r4, #12]
 8006b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b60:	e78e      	b.n	8006a80 <__sflush_r+0x1c>
 8006b62:	4407      	add	r7, r0
 8006b64:	eba8 0800 	sub.w	r8, r8, r0
 8006b68:	e7e9      	b.n	8006b3e <__sflush_r+0xda>
 8006b6a:	bf00      	nop
 8006b6c:	20400001 	.word	0x20400001

08006b70 <_fflush_r>:
 8006b70:	b538      	push	{r3, r4, r5, lr}
 8006b72:	690b      	ldr	r3, [r1, #16]
 8006b74:	4605      	mov	r5, r0
 8006b76:	460c      	mov	r4, r1
 8006b78:	b913      	cbnz	r3, 8006b80 <_fflush_r+0x10>
 8006b7a:	2500      	movs	r5, #0
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	bd38      	pop	{r3, r4, r5, pc}
 8006b80:	b118      	cbz	r0, 8006b8a <_fflush_r+0x1a>
 8006b82:	6983      	ldr	r3, [r0, #24]
 8006b84:	b90b      	cbnz	r3, 8006b8a <_fflush_r+0x1a>
 8006b86:	f000 f887 	bl	8006c98 <__sinit>
 8006b8a:	4b14      	ldr	r3, [pc, #80]	; (8006bdc <_fflush_r+0x6c>)
 8006b8c:	429c      	cmp	r4, r3
 8006b8e:	d11b      	bne.n	8006bc8 <_fflush_r+0x58>
 8006b90:	686c      	ldr	r4, [r5, #4]
 8006b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d0ef      	beq.n	8006b7a <_fflush_r+0xa>
 8006b9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b9c:	07d0      	lsls	r0, r2, #31
 8006b9e:	d404      	bmi.n	8006baa <_fflush_r+0x3a>
 8006ba0:	0599      	lsls	r1, r3, #22
 8006ba2:	d402      	bmi.n	8006baa <_fflush_r+0x3a>
 8006ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ba6:	f000 f915 	bl	8006dd4 <__retarget_lock_acquire_recursive>
 8006baa:	4628      	mov	r0, r5
 8006bac:	4621      	mov	r1, r4
 8006bae:	f7ff ff59 	bl	8006a64 <__sflush_r>
 8006bb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bb4:	07da      	lsls	r2, r3, #31
 8006bb6:	4605      	mov	r5, r0
 8006bb8:	d4e0      	bmi.n	8006b7c <_fflush_r+0xc>
 8006bba:	89a3      	ldrh	r3, [r4, #12]
 8006bbc:	059b      	lsls	r3, r3, #22
 8006bbe:	d4dd      	bmi.n	8006b7c <_fflush_r+0xc>
 8006bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bc2:	f000 f908 	bl	8006dd6 <__retarget_lock_release_recursive>
 8006bc6:	e7d9      	b.n	8006b7c <_fflush_r+0xc>
 8006bc8:	4b05      	ldr	r3, [pc, #20]	; (8006be0 <_fflush_r+0x70>)
 8006bca:	429c      	cmp	r4, r3
 8006bcc:	d101      	bne.n	8006bd2 <_fflush_r+0x62>
 8006bce:	68ac      	ldr	r4, [r5, #8]
 8006bd0:	e7df      	b.n	8006b92 <_fflush_r+0x22>
 8006bd2:	4b04      	ldr	r3, [pc, #16]	; (8006be4 <_fflush_r+0x74>)
 8006bd4:	429c      	cmp	r4, r3
 8006bd6:	bf08      	it	eq
 8006bd8:	68ec      	ldreq	r4, [r5, #12]
 8006bda:	e7da      	b.n	8006b92 <_fflush_r+0x22>
 8006bdc:	080077c0 	.word	0x080077c0
 8006be0:	080077e0 	.word	0x080077e0
 8006be4:	080077a0 	.word	0x080077a0

08006be8 <std>:
 8006be8:	2300      	movs	r3, #0
 8006bea:	b510      	push	{r4, lr}
 8006bec:	4604      	mov	r4, r0
 8006bee:	e9c0 3300 	strd	r3, r3, [r0]
 8006bf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bf6:	6083      	str	r3, [r0, #8]
 8006bf8:	8181      	strh	r1, [r0, #12]
 8006bfa:	6643      	str	r3, [r0, #100]	; 0x64
 8006bfc:	81c2      	strh	r2, [r0, #14]
 8006bfe:	6183      	str	r3, [r0, #24]
 8006c00:	4619      	mov	r1, r3
 8006c02:	2208      	movs	r2, #8
 8006c04:	305c      	adds	r0, #92	; 0x5c
 8006c06:	f7ff fc81 	bl	800650c <memset>
 8006c0a:	4b05      	ldr	r3, [pc, #20]	; (8006c20 <std+0x38>)
 8006c0c:	6263      	str	r3, [r4, #36]	; 0x24
 8006c0e:	4b05      	ldr	r3, [pc, #20]	; (8006c24 <std+0x3c>)
 8006c10:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c12:	4b05      	ldr	r3, [pc, #20]	; (8006c28 <std+0x40>)
 8006c14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c16:	4b05      	ldr	r3, [pc, #20]	; (8006c2c <std+0x44>)
 8006c18:	6224      	str	r4, [r4, #32]
 8006c1a:	6323      	str	r3, [r4, #48]	; 0x30
 8006c1c:	bd10      	pop	{r4, pc}
 8006c1e:	bf00      	nop
 8006c20:	08006819 	.word	0x08006819
 8006c24:	0800683b 	.word	0x0800683b
 8006c28:	08006873 	.word	0x08006873
 8006c2c:	08006897 	.word	0x08006897

08006c30 <_cleanup_r>:
 8006c30:	4901      	ldr	r1, [pc, #4]	; (8006c38 <_cleanup_r+0x8>)
 8006c32:	f000 b8af 	b.w	8006d94 <_fwalk_reent>
 8006c36:	bf00      	nop
 8006c38:	08006b71 	.word	0x08006b71

08006c3c <__sfmoreglue>:
 8006c3c:	b570      	push	{r4, r5, r6, lr}
 8006c3e:	2268      	movs	r2, #104	; 0x68
 8006c40:	1e4d      	subs	r5, r1, #1
 8006c42:	4355      	muls	r5, r2
 8006c44:	460e      	mov	r6, r1
 8006c46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c4a:	f7ff fcd3 	bl	80065f4 <_malloc_r>
 8006c4e:	4604      	mov	r4, r0
 8006c50:	b140      	cbz	r0, 8006c64 <__sfmoreglue+0x28>
 8006c52:	2100      	movs	r1, #0
 8006c54:	e9c0 1600 	strd	r1, r6, [r0]
 8006c58:	300c      	adds	r0, #12
 8006c5a:	60a0      	str	r0, [r4, #8]
 8006c5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c60:	f7ff fc54 	bl	800650c <memset>
 8006c64:	4620      	mov	r0, r4
 8006c66:	bd70      	pop	{r4, r5, r6, pc}

08006c68 <__sfp_lock_acquire>:
 8006c68:	4801      	ldr	r0, [pc, #4]	; (8006c70 <__sfp_lock_acquire+0x8>)
 8006c6a:	f000 b8b3 	b.w	8006dd4 <__retarget_lock_acquire_recursive>
 8006c6e:	bf00      	nop
 8006c70:	200009f9 	.word	0x200009f9

08006c74 <__sfp_lock_release>:
 8006c74:	4801      	ldr	r0, [pc, #4]	; (8006c7c <__sfp_lock_release+0x8>)
 8006c76:	f000 b8ae 	b.w	8006dd6 <__retarget_lock_release_recursive>
 8006c7a:	bf00      	nop
 8006c7c:	200009f9 	.word	0x200009f9

08006c80 <__sinit_lock_acquire>:
 8006c80:	4801      	ldr	r0, [pc, #4]	; (8006c88 <__sinit_lock_acquire+0x8>)
 8006c82:	f000 b8a7 	b.w	8006dd4 <__retarget_lock_acquire_recursive>
 8006c86:	bf00      	nop
 8006c88:	200009fa 	.word	0x200009fa

08006c8c <__sinit_lock_release>:
 8006c8c:	4801      	ldr	r0, [pc, #4]	; (8006c94 <__sinit_lock_release+0x8>)
 8006c8e:	f000 b8a2 	b.w	8006dd6 <__retarget_lock_release_recursive>
 8006c92:	bf00      	nop
 8006c94:	200009fa 	.word	0x200009fa

08006c98 <__sinit>:
 8006c98:	b510      	push	{r4, lr}
 8006c9a:	4604      	mov	r4, r0
 8006c9c:	f7ff fff0 	bl	8006c80 <__sinit_lock_acquire>
 8006ca0:	69a3      	ldr	r3, [r4, #24]
 8006ca2:	b11b      	cbz	r3, 8006cac <__sinit+0x14>
 8006ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ca8:	f7ff bff0 	b.w	8006c8c <__sinit_lock_release>
 8006cac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006cb0:	6523      	str	r3, [r4, #80]	; 0x50
 8006cb2:	4b13      	ldr	r3, [pc, #76]	; (8006d00 <__sinit+0x68>)
 8006cb4:	4a13      	ldr	r2, [pc, #76]	; (8006d04 <__sinit+0x6c>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006cba:	42a3      	cmp	r3, r4
 8006cbc:	bf04      	itt	eq
 8006cbe:	2301      	moveq	r3, #1
 8006cc0:	61a3      	streq	r3, [r4, #24]
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f000 f820 	bl	8006d08 <__sfp>
 8006cc8:	6060      	str	r0, [r4, #4]
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f000 f81c 	bl	8006d08 <__sfp>
 8006cd0:	60a0      	str	r0, [r4, #8]
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	f000 f818 	bl	8006d08 <__sfp>
 8006cd8:	2200      	movs	r2, #0
 8006cda:	60e0      	str	r0, [r4, #12]
 8006cdc:	2104      	movs	r1, #4
 8006cde:	6860      	ldr	r0, [r4, #4]
 8006ce0:	f7ff ff82 	bl	8006be8 <std>
 8006ce4:	68a0      	ldr	r0, [r4, #8]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	2109      	movs	r1, #9
 8006cea:	f7ff ff7d 	bl	8006be8 <std>
 8006cee:	68e0      	ldr	r0, [r4, #12]
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	2112      	movs	r1, #18
 8006cf4:	f7ff ff78 	bl	8006be8 <std>
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	61a3      	str	r3, [r4, #24]
 8006cfc:	e7d2      	b.n	8006ca4 <__sinit+0xc>
 8006cfe:	bf00      	nop
 8006d00:	0800779c 	.word	0x0800779c
 8006d04:	08006c31 	.word	0x08006c31

08006d08 <__sfp>:
 8006d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0a:	4607      	mov	r7, r0
 8006d0c:	f7ff ffac 	bl	8006c68 <__sfp_lock_acquire>
 8006d10:	4b1e      	ldr	r3, [pc, #120]	; (8006d8c <__sfp+0x84>)
 8006d12:	681e      	ldr	r6, [r3, #0]
 8006d14:	69b3      	ldr	r3, [r6, #24]
 8006d16:	b913      	cbnz	r3, 8006d1e <__sfp+0x16>
 8006d18:	4630      	mov	r0, r6
 8006d1a:	f7ff ffbd 	bl	8006c98 <__sinit>
 8006d1e:	3648      	adds	r6, #72	; 0x48
 8006d20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d24:	3b01      	subs	r3, #1
 8006d26:	d503      	bpl.n	8006d30 <__sfp+0x28>
 8006d28:	6833      	ldr	r3, [r6, #0]
 8006d2a:	b30b      	cbz	r3, 8006d70 <__sfp+0x68>
 8006d2c:	6836      	ldr	r6, [r6, #0]
 8006d2e:	e7f7      	b.n	8006d20 <__sfp+0x18>
 8006d30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d34:	b9d5      	cbnz	r5, 8006d6c <__sfp+0x64>
 8006d36:	4b16      	ldr	r3, [pc, #88]	; (8006d90 <__sfp+0x88>)
 8006d38:	60e3      	str	r3, [r4, #12]
 8006d3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d3e:	6665      	str	r5, [r4, #100]	; 0x64
 8006d40:	f000 f847 	bl	8006dd2 <__retarget_lock_init_recursive>
 8006d44:	f7ff ff96 	bl	8006c74 <__sfp_lock_release>
 8006d48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006d4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006d50:	6025      	str	r5, [r4, #0]
 8006d52:	61a5      	str	r5, [r4, #24]
 8006d54:	2208      	movs	r2, #8
 8006d56:	4629      	mov	r1, r5
 8006d58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d5c:	f7ff fbd6 	bl	800650c <memset>
 8006d60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d68:	4620      	mov	r0, r4
 8006d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d6c:	3468      	adds	r4, #104	; 0x68
 8006d6e:	e7d9      	b.n	8006d24 <__sfp+0x1c>
 8006d70:	2104      	movs	r1, #4
 8006d72:	4638      	mov	r0, r7
 8006d74:	f7ff ff62 	bl	8006c3c <__sfmoreglue>
 8006d78:	4604      	mov	r4, r0
 8006d7a:	6030      	str	r0, [r6, #0]
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	d1d5      	bne.n	8006d2c <__sfp+0x24>
 8006d80:	f7ff ff78 	bl	8006c74 <__sfp_lock_release>
 8006d84:	230c      	movs	r3, #12
 8006d86:	603b      	str	r3, [r7, #0]
 8006d88:	e7ee      	b.n	8006d68 <__sfp+0x60>
 8006d8a:	bf00      	nop
 8006d8c:	0800779c 	.word	0x0800779c
 8006d90:	ffff0001 	.word	0xffff0001

08006d94 <_fwalk_reent>:
 8006d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d98:	4606      	mov	r6, r0
 8006d9a:	4688      	mov	r8, r1
 8006d9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006da0:	2700      	movs	r7, #0
 8006da2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006da6:	f1b9 0901 	subs.w	r9, r9, #1
 8006daa:	d505      	bpl.n	8006db8 <_fwalk_reent+0x24>
 8006dac:	6824      	ldr	r4, [r4, #0]
 8006dae:	2c00      	cmp	r4, #0
 8006db0:	d1f7      	bne.n	8006da2 <_fwalk_reent+0xe>
 8006db2:	4638      	mov	r0, r7
 8006db4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006db8:	89ab      	ldrh	r3, [r5, #12]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d907      	bls.n	8006dce <_fwalk_reent+0x3a>
 8006dbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	d003      	beq.n	8006dce <_fwalk_reent+0x3a>
 8006dc6:	4629      	mov	r1, r5
 8006dc8:	4630      	mov	r0, r6
 8006dca:	47c0      	blx	r8
 8006dcc:	4307      	orrs	r7, r0
 8006dce:	3568      	adds	r5, #104	; 0x68
 8006dd0:	e7e9      	b.n	8006da6 <_fwalk_reent+0x12>

08006dd2 <__retarget_lock_init_recursive>:
 8006dd2:	4770      	bx	lr

08006dd4 <__retarget_lock_acquire_recursive>:
 8006dd4:	4770      	bx	lr

08006dd6 <__retarget_lock_release_recursive>:
 8006dd6:	4770      	bx	lr

08006dd8 <_lseek_r>:
 8006dd8:	b538      	push	{r3, r4, r5, lr}
 8006dda:	4d07      	ldr	r5, [pc, #28]	; (8006df8 <_lseek_r+0x20>)
 8006ddc:	4604      	mov	r4, r0
 8006dde:	4608      	mov	r0, r1
 8006de0:	4611      	mov	r1, r2
 8006de2:	2200      	movs	r2, #0
 8006de4:	602a      	str	r2, [r5, #0]
 8006de6:	461a      	mov	r2, r3
 8006de8:	f7fa f856 	bl	8000e98 <_lseek>
 8006dec:	1c43      	adds	r3, r0, #1
 8006dee:	d102      	bne.n	8006df6 <_lseek_r+0x1e>
 8006df0:	682b      	ldr	r3, [r5, #0]
 8006df2:	b103      	cbz	r3, 8006df6 <_lseek_r+0x1e>
 8006df4:	6023      	str	r3, [r4, #0]
 8006df6:	bd38      	pop	{r3, r4, r5, pc}
 8006df8:	200009fc 	.word	0x200009fc

08006dfc <__swhatbuf_r>:
 8006dfc:	b570      	push	{r4, r5, r6, lr}
 8006dfe:	460e      	mov	r6, r1
 8006e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e04:	2900      	cmp	r1, #0
 8006e06:	b096      	sub	sp, #88	; 0x58
 8006e08:	4614      	mov	r4, r2
 8006e0a:	461d      	mov	r5, r3
 8006e0c:	da08      	bge.n	8006e20 <__swhatbuf_r+0x24>
 8006e0e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006e12:	2200      	movs	r2, #0
 8006e14:	602a      	str	r2, [r5, #0]
 8006e16:	061a      	lsls	r2, r3, #24
 8006e18:	d410      	bmi.n	8006e3c <__swhatbuf_r+0x40>
 8006e1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e1e:	e00e      	b.n	8006e3e <__swhatbuf_r+0x42>
 8006e20:	466a      	mov	r2, sp
 8006e22:	f000 fb5d 	bl	80074e0 <_fstat_r>
 8006e26:	2800      	cmp	r0, #0
 8006e28:	dbf1      	blt.n	8006e0e <__swhatbuf_r+0x12>
 8006e2a:	9a01      	ldr	r2, [sp, #4]
 8006e2c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e30:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e34:	425a      	negs	r2, r3
 8006e36:	415a      	adcs	r2, r3
 8006e38:	602a      	str	r2, [r5, #0]
 8006e3a:	e7ee      	b.n	8006e1a <__swhatbuf_r+0x1e>
 8006e3c:	2340      	movs	r3, #64	; 0x40
 8006e3e:	2000      	movs	r0, #0
 8006e40:	6023      	str	r3, [r4, #0]
 8006e42:	b016      	add	sp, #88	; 0x58
 8006e44:	bd70      	pop	{r4, r5, r6, pc}
	...

08006e48 <__smakebuf_r>:
 8006e48:	898b      	ldrh	r3, [r1, #12]
 8006e4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e4c:	079d      	lsls	r5, r3, #30
 8006e4e:	4606      	mov	r6, r0
 8006e50:	460c      	mov	r4, r1
 8006e52:	d507      	bpl.n	8006e64 <__smakebuf_r+0x1c>
 8006e54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e58:	6023      	str	r3, [r4, #0]
 8006e5a:	6123      	str	r3, [r4, #16]
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	6163      	str	r3, [r4, #20]
 8006e60:	b002      	add	sp, #8
 8006e62:	bd70      	pop	{r4, r5, r6, pc}
 8006e64:	ab01      	add	r3, sp, #4
 8006e66:	466a      	mov	r2, sp
 8006e68:	f7ff ffc8 	bl	8006dfc <__swhatbuf_r>
 8006e6c:	9900      	ldr	r1, [sp, #0]
 8006e6e:	4605      	mov	r5, r0
 8006e70:	4630      	mov	r0, r6
 8006e72:	f7ff fbbf 	bl	80065f4 <_malloc_r>
 8006e76:	b948      	cbnz	r0, 8006e8c <__smakebuf_r+0x44>
 8006e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e7c:	059a      	lsls	r2, r3, #22
 8006e7e:	d4ef      	bmi.n	8006e60 <__smakebuf_r+0x18>
 8006e80:	f023 0303 	bic.w	r3, r3, #3
 8006e84:	f043 0302 	orr.w	r3, r3, #2
 8006e88:	81a3      	strh	r3, [r4, #12]
 8006e8a:	e7e3      	b.n	8006e54 <__smakebuf_r+0xc>
 8006e8c:	4b0d      	ldr	r3, [pc, #52]	; (8006ec4 <__smakebuf_r+0x7c>)
 8006e8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e90:	89a3      	ldrh	r3, [r4, #12]
 8006e92:	6020      	str	r0, [r4, #0]
 8006e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e98:	81a3      	strh	r3, [r4, #12]
 8006e9a:	9b00      	ldr	r3, [sp, #0]
 8006e9c:	6163      	str	r3, [r4, #20]
 8006e9e:	9b01      	ldr	r3, [sp, #4]
 8006ea0:	6120      	str	r0, [r4, #16]
 8006ea2:	b15b      	cbz	r3, 8006ebc <__smakebuf_r+0x74>
 8006ea4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ea8:	4630      	mov	r0, r6
 8006eaa:	f000 fb2b 	bl	8007504 <_isatty_r>
 8006eae:	b128      	cbz	r0, 8006ebc <__smakebuf_r+0x74>
 8006eb0:	89a3      	ldrh	r3, [r4, #12]
 8006eb2:	f023 0303 	bic.w	r3, r3, #3
 8006eb6:	f043 0301 	orr.w	r3, r3, #1
 8006eba:	81a3      	strh	r3, [r4, #12]
 8006ebc:	89a0      	ldrh	r0, [r4, #12]
 8006ebe:	4305      	orrs	r5, r0
 8006ec0:	81a5      	strh	r5, [r4, #12]
 8006ec2:	e7cd      	b.n	8006e60 <__smakebuf_r+0x18>
 8006ec4:	08006c31 	.word	0x08006c31

08006ec8 <__malloc_lock>:
 8006ec8:	4801      	ldr	r0, [pc, #4]	; (8006ed0 <__malloc_lock+0x8>)
 8006eca:	f7ff bf83 	b.w	8006dd4 <__retarget_lock_acquire_recursive>
 8006ece:	bf00      	nop
 8006ed0:	200009f8 	.word	0x200009f8

08006ed4 <__malloc_unlock>:
 8006ed4:	4801      	ldr	r0, [pc, #4]	; (8006edc <__malloc_unlock+0x8>)
 8006ed6:	f7ff bf7e 	b.w	8006dd6 <__retarget_lock_release_recursive>
 8006eda:	bf00      	nop
 8006edc:	200009f8 	.word	0x200009f8

08006ee0 <__sfputc_r>:
 8006ee0:	6893      	ldr	r3, [r2, #8]
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	b410      	push	{r4}
 8006ee8:	6093      	str	r3, [r2, #8]
 8006eea:	da08      	bge.n	8006efe <__sfputc_r+0x1e>
 8006eec:	6994      	ldr	r4, [r2, #24]
 8006eee:	42a3      	cmp	r3, r4
 8006ef0:	db01      	blt.n	8006ef6 <__sfputc_r+0x16>
 8006ef2:	290a      	cmp	r1, #10
 8006ef4:	d103      	bne.n	8006efe <__sfputc_r+0x1e>
 8006ef6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006efa:	f7ff bcd1 	b.w	80068a0 <__swbuf_r>
 8006efe:	6813      	ldr	r3, [r2, #0]
 8006f00:	1c58      	adds	r0, r3, #1
 8006f02:	6010      	str	r0, [r2, #0]
 8006f04:	7019      	strb	r1, [r3, #0]
 8006f06:	4608      	mov	r0, r1
 8006f08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <__sfputs_r>:
 8006f0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f10:	4606      	mov	r6, r0
 8006f12:	460f      	mov	r7, r1
 8006f14:	4614      	mov	r4, r2
 8006f16:	18d5      	adds	r5, r2, r3
 8006f18:	42ac      	cmp	r4, r5
 8006f1a:	d101      	bne.n	8006f20 <__sfputs_r+0x12>
 8006f1c:	2000      	movs	r0, #0
 8006f1e:	e007      	b.n	8006f30 <__sfputs_r+0x22>
 8006f20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f24:	463a      	mov	r2, r7
 8006f26:	4630      	mov	r0, r6
 8006f28:	f7ff ffda 	bl	8006ee0 <__sfputc_r>
 8006f2c:	1c43      	adds	r3, r0, #1
 8006f2e:	d1f3      	bne.n	8006f18 <__sfputs_r+0xa>
 8006f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f34 <_vfiprintf_r>:
 8006f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f38:	460d      	mov	r5, r1
 8006f3a:	b09d      	sub	sp, #116	; 0x74
 8006f3c:	4614      	mov	r4, r2
 8006f3e:	4698      	mov	r8, r3
 8006f40:	4606      	mov	r6, r0
 8006f42:	b118      	cbz	r0, 8006f4c <_vfiprintf_r+0x18>
 8006f44:	6983      	ldr	r3, [r0, #24]
 8006f46:	b90b      	cbnz	r3, 8006f4c <_vfiprintf_r+0x18>
 8006f48:	f7ff fea6 	bl	8006c98 <__sinit>
 8006f4c:	4b89      	ldr	r3, [pc, #548]	; (8007174 <_vfiprintf_r+0x240>)
 8006f4e:	429d      	cmp	r5, r3
 8006f50:	d11b      	bne.n	8006f8a <_vfiprintf_r+0x56>
 8006f52:	6875      	ldr	r5, [r6, #4]
 8006f54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f56:	07d9      	lsls	r1, r3, #31
 8006f58:	d405      	bmi.n	8006f66 <_vfiprintf_r+0x32>
 8006f5a:	89ab      	ldrh	r3, [r5, #12]
 8006f5c:	059a      	lsls	r2, r3, #22
 8006f5e:	d402      	bmi.n	8006f66 <_vfiprintf_r+0x32>
 8006f60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f62:	f7ff ff37 	bl	8006dd4 <__retarget_lock_acquire_recursive>
 8006f66:	89ab      	ldrh	r3, [r5, #12]
 8006f68:	071b      	lsls	r3, r3, #28
 8006f6a:	d501      	bpl.n	8006f70 <_vfiprintf_r+0x3c>
 8006f6c:	692b      	ldr	r3, [r5, #16]
 8006f6e:	b9eb      	cbnz	r3, 8006fac <_vfiprintf_r+0x78>
 8006f70:	4629      	mov	r1, r5
 8006f72:	4630      	mov	r0, r6
 8006f74:	f7ff fcf8 	bl	8006968 <__swsetup_r>
 8006f78:	b1c0      	cbz	r0, 8006fac <_vfiprintf_r+0x78>
 8006f7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f7c:	07dc      	lsls	r4, r3, #31
 8006f7e:	d50e      	bpl.n	8006f9e <_vfiprintf_r+0x6a>
 8006f80:	f04f 30ff 	mov.w	r0, #4294967295
 8006f84:	b01d      	add	sp, #116	; 0x74
 8006f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f8a:	4b7b      	ldr	r3, [pc, #492]	; (8007178 <_vfiprintf_r+0x244>)
 8006f8c:	429d      	cmp	r5, r3
 8006f8e:	d101      	bne.n	8006f94 <_vfiprintf_r+0x60>
 8006f90:	68b5      	ldr	r5, [r6, #8]
 8006f92:	e7df      	b.n	8006f54 <_vfiprintf_r+0x20>
 8006f94:	4b79      	ldr	r3, [pc, #484]	; (800717c <_vfiprintf_r+0x248>)
 8006f96:	429d      	cmp	r5, r3
 8006f98:	bf08      	it	eq
 8006f9a:	68f5      	ldreq	r5, [r6, #12]
 8006f9c:	e7da      	b.n	8006f54 <_vfiprintf_r+0x20>
 8006f9e:	89ab      	ldrh	r3, [r5, #12]
 8006fa0:	0598      	lsls	r0, r3, #22
 8006fa2:	d4ed      	bmi.n	8006f80 <_vfiprintf_r+0x4c>
 8006fa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fa6:	f7ff ff16 	bl	8006dd6 <__retarget_lock_release_recursive>
 8006faa:	e7e9      	b.n	8006f80 <_vfiprintf_r+0x4c>
 8006fac:	2300      	movs	r3, #0
 8006fae:	9309      	str	r3, [sp, #36]	; 0x24
 8006fb0:	2320      	movs	r3, #32
 8006fb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006fb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fba:	2330      	movs	r3, #48	; 0x30
 8006fbc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007180 <_vfiprintf_r+0x24c>
 8006fc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006fc4:	f04f 0901 	mov.w	r9, #1
 8006fc8:	4623      	mov	r3, r4
 8006fca:	469a      	mov	sl, r3
 8006fcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fd0:	b10a      	cbz	r2, 8006fd6 <_vfiprintf_r+0xa2>
 8006fd2:	2a25      	cmp	r2, #37	; 0x25
 8006fd4:	d1f9      	bne.n	8006fca <_vfiprintf_r+0x96>
 8006fd6:	ebba 0b04 	subs.w	fp, sl, r4
 8006fda:	d00b      	beq.n	8006ff4 <_vfiprintf_r+0xc0>
 8006fdc:	465b      	mov	r3, fp
 8006fde:	4622      	mov	r2, r4
 8006fe0:	4629      	mov	r1, r5
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	f7ff ff93 	bl	8006f0e <__sfputs_r>
 8006fe8:	3001      	adds	r0, #1
 8006fea:	f000 80aa 	beq.w	8007142 <_vfiprintf_r+0x20e>
 8006fee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ff0:	445a      	add	r2, fp
 8006ff2:	9209      	str	r2, [sp, #36]	; 0x24
 8006ff4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f000 80a2 	beq.w	8007142 <_vfiprintf_r+0x20e>
 8006ffe:	2300      	movs	r3, #0
 8007000:	f04f 32ff 	mov.w	r2, #4294967295
 8007004:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007008:	f10a 0a01 	add.w	sl, sl, #1
 800700c:	9304      	str	r3, [sp, #16]
 800700e:	9307      	str	r3, [sp, #28]
 8007010:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007014:	931a      	str	r3, [sp, #104]	; 0x68
 8007016:	4654      	mov	r4, sl
 8007018:	2205      	movs	r2, #5
 800701a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800701e:	4858      	ldr	r0, [pc, #352]	; (8007180 <_vfiprintf_r+0x24c>)
 8007020:	f7f9 f8e6 	bl	80001f0 <memchr>
 8007024:	9a04      	ldr	r2, [sp, #16]
 8007026:	b9d8      	cbnz	r0, 8007060 <_vfiprintf_r+0x12c>
 8007028:	06d1      	lsls	r1, r2, #27
 800702a:	bf44      	itt	mi
 800702c:	2320      	movmi	r3, #32
 800702e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007032:	0713      	lsls	r3, r2, #28
 8007034:	bf44      	itt	mi
 8007036:	232b      	movmi	r3, #43	; 0x2b
 8007038:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800703c:	f89a 3000 	ldrb.w	r3, [sl]
 8007040:	2b2a      	cmp	r3, #42	; 0x2a
 8007042:	d015      	beq.n	8007070 <_vfiprintf_r+0x13c>
 8007044:	9a07      	ldr	r2, [sp, #28]
 8007046:	4654      	mov	r4, sl
 8007048:	2000      	movs	r0, #0
 800704a:	f04f 0c0a 	mov.w	ip, #10
 800704e:	4621      	mov	r1, r4
 8007050:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007054:	3b30      	subs	r3, #48	; 0x30
 8007056:	2b09      	cmp	r3, #9
 8007058:	d94e      	bls.n	80070f8 <_vfiprintf_r+0x1c4>
 800705a:	b1b0      	cbz	r0, 800708a <_vfiprintf_r+0x156>
 800705c:	9207      	str	r2, [sp, #28]
 800705e:	e014      	b.n	800708a <_vfiprintf_r+0x156>
 8007060:	eba0 0308 	sub.w	r3, r0, r8
 8007064:	fa09 f303 	lsl.w	r3, r9, r3
 8007068:	4313      	orrs	r3, r2
 800706a:	9304      	str	r3, [sp, #16]
 800706c:	46a2      	mov	sl, r4
 800706e:	e7d2      	b.n	8007016 <_vfiprintf_r+0xe2>
 8007070:	9b03      	ldr	r3, [sp, #12]
 8007072:	1d19      	adds	r1, r3, #4
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	9103      	str	r1, [sp, #12]
 8007078:	2b00      	cmp	r3, #0
 800707a:	bfbb      	ittet	lt
 800707c:	425b      	neglt	r3, r3
 800707e:	f042 0202 	orrlt.w	r2, r2, #2
 8007082:	9307      	strge	r3, [sp, #28]
 8007084:	9307      	strlt	r3, [sp, #28]
 8007086:	bfb8      	it	lt
 8007088:	9204      	strlt	r2, [sp, #16]
 800708a:	7823      	ldrb	r3, [r4, #0]
 800708c:	2b2e      	cmp	r3, #46	; 0x2e
 800708e:	d10c      	bne.n	80070aa <_vfiprintf_r+0x176>
 8007090:	7863      	ldrb	r3, [r4, #1]
 8007092:	2b2a      	cmp	r3, #42	; 0x2a
 8007094:	d135      	bne.n	8007102 <_vfiprintf_r+0x1ce>
 8007096:	9b03      	ldr	r3, [sp, #12]
 8007098:	1d1a      	adds	r2, r3, #4
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	9203      	str	r2, [sp, #12]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	bfb8      	it	lt
 80070a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80070a6:	3402      	adds	r4, #2
 80070a8:	9305      	str	r3, [sp, #20]
 80070aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007190 <_vfiprintf_r+0x25c>
 80070ae:	7821      	ldrb	r1, [r4, #0]
 80070b0:	2203      	movs	r2, #3
 80070b2:	4650      	mov	r0, sl
 80070b4:	f7f9 f89c 	bl	80001f0 <memchr>
 80070b8:	b140      	cbz	r0, 80070cc <_vfiprintf_r+0x198>
 80070ba:	2340      	movs	r3, #64	; 0x40
 80070bc:	eba0 000a 	sub.w	r0, r0, sl
 80070c0:	fa03 f000 	lsl.w	r0, r3, r0
 80070c4:	9b04      	ldr	r3, [sp, #16]
 80070c6:	4303      	orrs	r3, r0
 80070c8:	3401      	adds	r4, #1
 80070ca:	9304      	str	r3, [sp, #16]
 80070cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070d0:	482c      	ldr	r0, [pc, #176]	; (8007184 <_vfiprintf_r+0x250>)
 80070d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070d6:	2206      	movs	r2, #6
 80070d8:	f7f9 f88a 	bl	80001f0 <memchr>
 80070dc:	2800      	cmp	r0, #0
 80070de:	d03f      	beq.n	8007160 <_vfiprintf_r+0x22c>
 80070e0:	4b29      	ldr	r3, [pc, #164]	; (8007188 <_vfiprintf_r+0x254>)
 80070e2:	bb1b      	cbnz	r3, 800712c <_vfiprintf_r+0x1f8>
 80070e4:	9b03      	ldr	r3, [sp, #12]
 80070e6:	3307      	adds	r3, #7
 80070e8:	f023 0307 	bic.w	r3, r3, #7
 80070ec:	3308      	adds	r3, #8
 80070ee:	9303      	str	r3, [sp, #12]
 80070f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070f2:	443b      	add	r3, r7
 80070f4:	9309      	str	r3, [sp, #36]	; 0x24
 80070f6:	e767      	b.n	8006fc8 <_vfiprintf_r+0x94>
 80070f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80070fc:	460c      	mov	r4, r1
 80070fe:	2001      	movs	r0, #1
 8007100:	e7a5      	b.n	800704e <_vfiprintf_r+0x11a>
 8007102:	2300      	movs	r3, #0
 8007104:	3401      	adds	r4, #1
 8007106:	9305      	str	r3, [sp, #20]
 8007108:	4619      	mov	r1, r3
 800710a:	f04f 0c0a 	mov.w	ip, #10
 800710e:	4620      	mov	r0, r4
 8007110:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007114:	3a30      	subs	r2, #48	; 0x30
 8007116:	2a09      	cmp	r2, #9
 8007118:	d903      	bls.n	8007122 <_vfiprintf_r+0x1ee>
 800711a:	2b00      	cmp	r3, #0
 800711c:	d0c5      	beq.n	80070aa <_vfiprintf_r+0x176>
 800711e:	9105      	str	r1, [sp, #20]
 8007120:	e7c3      	b.n	80070aa <_vfiprintf_r+0x176>
 8007122:	fb0c 2101 	mla	r1, ip, r1, r2
 8007126:	4604      	mov	r4, r0
 8007128:	2301      	movs	r3, #1
 800712a:	e7f0      	b.n	800710e <_vfiprintf_r+0x1da>
 800712c:	ab03      	add	r3, sp, #12
 800712e:	9300      	str	r3, [sp, #0]
 8007130:	462a      	mov	r2, r5
 8007132:	4b16      	ldr	r3, [pc, #88]	; (800718c <_vfiprintf_r+0x258>)
 8007134:	a904      	add	r1, sp, #16
 8007136:	4630      	mov	r0, r6
 8007138:	f3af 8000 	nop.w
 800713c:	4607      	mov	r7, r0
 800713e:	1c78      	adds	r0, r7, #1
 8007140:	d1d6      	bne.n	80070f0 <_vfiprintf_r+0x1bc>
 8007142:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007144:	07d9      	lsls	r1, r3, #31
 8007146:	d405      	bmi.n	8007154 <_vfiprintf_r+0x220>
 8007148:	89ab      	ldrh	r3, [r5, #12]
 800714a:	059a      	lsls	r2, r3, #22
 800714c:	d402      	bmi.n	8007154 <_vfiprintf_r+0x220>
 800714e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007150:	f7ff fe41 	bl	8006dd6 <__retarget_lock_release_recursive>
 8007154:	89ab      	ldrh	r3, [r5, #12]
 8007156:	065b      	lsls	r3, r3, #25
 8007158:	f53f af12 	bmi.w	8006f80 <_vfiprintf_r+0x4c>
 800715c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800715e:	e711      	b.n	8006f84 <_vfiprintf_r+0x50>
 8007160:	ab03      	add	r3, sp, #12
 8007162:	9300      	str	r3, [sp, #0]
 8007164:	462a      	mov	r2, r5
 8007166:	4b09      	ldr	r3, [pc, #36]	; (800718c <_vfiprintf_r+0x258>)
 8007168:	a904      	add	r1, sp, #16
 800716a:	4630      	mov	r0, r6
 800716c:	f000 f880 	bl	8007270 <_printf_i>
 8007170:	e7e4      	b.n	800713c <_vfiprintf_r+0x208>
 8007172:	bf00      	nop
 8007174:	080077c0 	.word	0x080077c0
 8007178:	080077e0 	.word	0x080077e0
 800717c:	080077a0 	.word	0x080077a0
 8007180:	08007800 	.word	0x08007800
 8007184:	0800780a 	.word	0x0800780a
 8007188:	00000000 	.word	0x00000000
 800718c:	08006f0f 	.word	0x08006f0f
 8007190:	08007806 	.word	0x08007806

08007194 <_printf_common>:
 8007194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007198:	4616      	mov	r6, r2
 800719a:	4699      	mov	r9, r3
 800719c:	688a      	ldr	r2, [r1, #8]
 800719e:	690b      	ldr	r3, [r1, #16]
 80071a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071a4:	4293      	cmp	r3, r2
 80071a6:	bfb8      	it	lt
 80071a8:	4613      	movlt	r3, r2
 80071aa:	6033      	str	r3, [r6, #0]
 80071ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071b0:	4607      	mov	r7, r0
 80071b2:	460c      	mov	r4, r1
 80071b4:	b10a      	cbz	r2, 80071ba <_printf_common+0x26>
 80071b6:	3301      	adds	r3, #1
 80071b8:	6033      	str	r3, [r6, #0]
 80071ba:	6823      	ldr	r3, [r4, #0]
 80071bc:	0699      	lsls	r1, r3, #26
 80071be:	bf42      	ittt	mi
 80071c0:	6833      	ldrmi	r3, [r6, #0]
 80071c2:	3302      	addmi	r3, #2
 80071c4:	6033      	strmi	r3, [r6, #0]
 80071c6:	6825      	ldr	r5, [r4, #0]
 80071c8:	f015 0506 	ands.w	r5, r5, #6
 80071cc:	d106      	bne.n	80071dc <_printf_common+0x48>
 80071ce:	f104 0a19 	add.w	sl, r4, #25
 80071d2:	68e3      	ldr	r3, [r4, #12]
 80071d4:	6832      	ldr	r2, [r6, #0]
 80071d6:	1a9b      	subs	r3, r3, r2
 80071d8:	42ab      	cmp	r3, r5
 80071da:	dc26      	bgt.n	800722a <_printf_common+0x96>
 80071dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80071e0:	1e13      	subs	r3, r2, #0
 80071e2:	6822      	ldr	r2, [r4, #0]
 80071e4:	bf18      	it	ne
 80071e6:	2301      	movne	r3, #1
 80071e8:	0692      	lsls	r2, r2, #26
 80071ea:	d42b      	bmi.n	8007244 <_printf_common+0xb0>
 80071ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071f0:	4649      	mov	r1, r9
 80071f2:	4638      	mov	r0, r7
 80071f4:	47c0      	blx	r8
 80071f6:	3001      	adds	r0, #1
 80071f8:	d01e      	beq.n	8007238 <_printf_common+0xa4>
 80071fa:	6823      	ldr	r3, [r4, #0]
 80071fc:	68e5      	ldr	r5, [r4, #12]
 80071fe:	6832      	ldr	r2, [r6, #0]
 8007200:	f003 0306 	and.w	r3, r3, #6
 8007204:	2b04      	cmp	r3, #4
 8007206:	bf08      	it	eq
 8007208:	1aad      	subeq	r5, r5, r2
 800720a:	68a3      	ldr	r3, [r4, #8]
 800720c:	6922      	ldr	r2, [r4, #16]
 800720e:	bf0c      	ite	eq
 8007210:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007214:	2500      	movne	r5, #0
 8007216:	4293      	cmp	r3, r2
 8007218:	bfc4      	itt	gt
 800721a:	1a9b      	subgt	r3, r3, r2
 800721c:	18ed      	addgt	r5, r5, r3
 800721e:	2600      	movs	r6, #0
 8007220:	341a      	adds	r4, #26
 8007222:	42b5      	cmp	r5, r6
 8007224:	d11a      	bne.n	800725c <_printf_common+0xc8>
 8007226:	2000      	movs	r0, #0
 8007228:	e008      	b.n	800723c <_printf_common+0xa8>
 800722a:	2301      	movs	r3, #1
 800722c:	4652      	mov	r2, sl
 800722e:	4649      	mov	r1, r9
 8007230:	4638      	mov	r0, r7
 8007232:	47c0      	blx	r8
 8007234:	3001      	adds	r0, #1
 8007236:	d103      	bne.n	8007240 <_printf_common+0xac>
 8007238:	f04f 30ff 	mov.w	r0, #4294967295
 800723c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007240:	3501      	adds	r5, #1
 8007242:	e7c6      	b.n	80071d2 <_printf_common+0x3e>
 8007244:	18e1      	adds	r1, r4, r3
 8007246:	1c5a      	adds	r2, r3, #1
 8007248:	2030      	movs	r0, #48	; 0x30
 800724a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800724e:	4422      	add	r2, r4
 8007250:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007254:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007258:	3302      	adds	r3, #2
 800725a:	e7c7      	b.n	80071ec <_printf_common+0x58>
 800725c:	2301      	movs	r3, #1
 800725e:	4622      	mov	r2, r4
 8007260:	4649      	mov	r1, r9
 8007262:	4638      	mov	r0, r7
 8007264:	47c0      	blx	r8
 8007266:	3001      	adds	r0, #1
 8007268:	d0e6      	beq.n	8007238 <_printf_common+0xa4>
 800726a:	3601      	adds	r6, #1
 800726c:	e7d9      	b.n	8007222 <_printf_common+0x8e>
	...

08007270 <_printf_i>:
 8007270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007274:	7e0f      	ldrb	r7, [r1, #24]
 8007276:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007278:	2f78      	cmp	r7, #120	; 0x78
 800727a:	4691      	mov	r9, r2
 800727c:	4680      	mov	r8, r0
 800727e:	460c      	mov	r4, r1
 8007280:	469a      	mov	sl, r3
 8007282:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007286:	d807      	bhi.n	8007298 <_printf_i+0x28>
 8007288:	2f62      	cmp	r7, #98	; 0x62
 800728a:	d80a      	bhi.n	80072a2 <_printf_i+0x32>
 800728c:	2f00      	cmp	r7, #0
 800728e:	f000 80d8 	beq.w	8007442 <_printf_i+0x1d2>
 8007292:	2f58      	cmp	r7, #88	; 0x58
 8007294:	f000 80a3 	beq.w	80073de <_printf_i+0x16e>
 8007298:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800729c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80072a0:	e03a      	b.n	8007318 <_printf_i+0xa8>
 80072a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80072a6:	2b15      	cmp	r3, #21
 80072a8:	d8f6      	bhi.n	8007298 <_printf_i+0x28>
 80072aa:	a101      	add	r1, pc, #4	; (adr r1, 80072b0 <_printf_i+0x40>)
 80072ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072b0:	08007309 	.word	0x08007309
 80072b4:	0800731d 	.word	0x0800731d
 80072b8:	08007299 	.word	0x08007299
 80072bc:	08007299 	.word	0x08007299
 80072c0:	08007299 	.word	0x08007299
 80072c4:	08007299 	.word	0x08007299
 80072c8:	0800731d 	.word	0x0800731d
 80072cc:	08007299 	.word	0x08007299
 80072d0:	08007299 	.word	0x08007299
 80072d4:	08007299 	.word	0x08007299
 80072d8:	08007299 	.word	0x08007299
 80072dc:	08007429 	.word	0x08007429
 80072e0:	0800734d 	.word	0x0800734d
 80072e4:	0800740b 	.word	0x0800740b
 80072e8:	08007299 	.word	0x08007299
 80072ec:	08007299 	.word	0x08007299
 80072f0:	0800744b 	.word	0x0800744b
 80072f4:	08007299 	.word	0x08007299
 80072f8:	0800734d 	.word	0x0800734d
 80072fc:	08007299 	.word	0x08007299
 8007300:	08007299 	.word	0x08007299
 8007304:	08007413 	.word	0x08007413
 8007308:	682b      	ldr	r3, [r5, #0]
 800730a:	1d1a      	adds	r2, r3, #4
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	602a      	str	r2, [r5, #0]
 8007310:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007314:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007318:	2301      	movs	r3, #1
 800731a:	e0a3      	b.n	8007464 <_printf_i+0x1f4>
 800731c:	6820      	ldr	r0, [r4, #0]
 800731e:	6829      	ldr	r1, [r5, #0]
 8007320:	0606      	lsls	r6, r0, #24
 8007322:	f101 0304 	add.w	r3, r1, #4
 8007326:	d50a      	bpl.n	800733e <_printf_i+0xce>
 8007328:	680e      	ldr	r6, [r1, #0]
 800732a:	602b      	str	r3, [r5, #0]
 800732c:	2e00      	cmp	r6, #0
 800732e:	da03      	bge.n	8007338 <_printf_i+0xc8>
 8007330:	232d      	movs	r3, #45	; 0x2d
 8007332:	4276      	negs	r6, r6
 8007334:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007338:	485e      	ldr	r0, [pc, #376]	; (80074b4 <_printf_i+0x244>)
 800733a:	230a      	movs	r3, #10
 800733c:	e019      	b.n	8007372 <_printf_i+0x102>
 800733e:	680e      	ldr	r6, [r1, #0]
 8007340:	602b      	str	r3, [r5, #0]
 8007342:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007346:	bf18      	it	ne
 8007348:	b236      	sxthne	r6, r6
 800734a:	e7ef      	b.n	800732c <_printf_i+0xbc>
 800734c:	682b      	ldr	r3, [r5, #0]
 800734e:	6820      	ldr	r0, [r4, #0]
 8007350:	1d19      	adds	r1, r3, #4
 8007352:	6029      	str	r1, [r5, #0]
 8007354:	0601      	lsls	r1, r0, #24
 8007356:	d501      	bpl.n	800735c <_printf_i+0xec>
 8007358:	681e      	ldr	r6, [r3, #0]
 800735a:	e002      	b.n	8007362 <_printf_i+0xf2>
 800735c:	0646      	lsls	r6, r0, #25
 800735e:	d5fb      	bpl.n	8007358 <_printf_i+0xe8>
 8007360:	881e      	ldrh	r6, [r3, #0]
 8007362:	4854      	ldr	r0, [pc, #336]	; (80074b4 <_printf_i+0x244>)
 8007364:	2f6f      	cmp	r7, #111	; 0x6f
 8007366:	bf0c      	ite	eq
 8007368:	2308      	moveq	r3, #8
 800736a:	230a      	movne	r3, #10
 800736c:	2100      	movs	r1, #0
 800736e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007372:	6865      	ldr	r5, [r4, #4]
 8007374:	60a5      	str	r5, [r4, #8]
 8007376:	2d00      	cmp	r5, #0
 8007378:	bfa2      	ittt	ge
 800737a:	6821      	ldrge	r1, [r4, #0]
 800737c:	f021 0104 	bicge.w	r1, r1, #4
 8007380:	6021      	strge	r1, [r4, #0]
 8007382:	b90e      	cbnz	r6, 8007388 <_printf_i+0x118>
 8007384:	2d00      	cmp	r5, #0
 8007386:	d04d      	beq.n	8007424 <_printf_i+0x1b4>
 8007388:	4615      	mov	r5, r2
 800738a:	fbb6 f1f3 	udiv	r1, r6, r3
 800738e:	fb03 6711 	mls	r7, r3, r1, r6
 8007392:	5dc7      	ldrb	r7, [r0, r7]
 8007394:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007398:	4637      	mov	r7, r6
 800739a:	42bb      	cmp	r3, r7
 800739c:	460e      	mov	r6, r1
 800739e:	d9f4      	bls.n	800738a <_printf_i+0x11a>
 80073a0:	2b08      	cmp	r3, #8
 80073a2:	d10b      	bne.n	80073bc <_printf_i+0x14c>
 80073a4:	6823      	ldr	r3, [r4, #0]
 80073a6:	07de      	lsls	r6, r3, #31
 80073a8:	d508      	bpl.n	80073bc <_printf_i+0x14c>
 80073aa:	6923      	ldr	r3, [r4, #16]
 80073ac:	6861      	ldr	r1, [r4, #4]
 80073ae:	4299      	cmp	r1, r3
 80073b0:	bfde      	ittt	le
 80073b2:	2330      	movle	r3, #48	; 0x30
 80073b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80073b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80073bc:	1b52      	subs	r2, r2, r5
 80073be:	6122      	str	r2, [r4, #16]
 80073c0:	f8cd a000 	str.w	sl, [sp]
 80073c4:	464b      	mov	r3, r9
 80073c6:	aa03      	add	r2, sp, #12
 80073c8:	4621      	mov	r1, r4
 80073ca:	4640      	mov	r0, r8
 80073cc:	f7ff fee2 	bl	8007194 <_printf_common>
 80073d0:	3001      	adds	r0, #1
 80073d2:	d14c      	bne.n	800746e <_printf_i+0x1fe>
 80073d4:	f04f 30ff 	mov.w	r0, #4294967295
 80073d8:	b004      	add	sp, #16
 80073da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073de:	4835      	ldr	r0, [pc, #212]	; (80074b4 <_printf_i+0x244>)
 80073e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80073e4:	6829      	ldr	r1, [r5, #0]
 80073e6:	6823      	ldr	r3, [r4, #0]
 80073e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80073ec:	6029      	str	r1, [r5, #0]
 80073ee:	061d      	lsls	r5, r3, #24
 80073f0:	d514      	bpl.n	800741c <_printf_i+0x1ac>
 80073f2:	07df      	lsls	r7, r3, #31
 80073f4:	bf44      	itt	mi
 80073f6:	f043 0320 	orrmi.w	r3, r3, #32
 80073fa:	6023      	strmi	r3, [r4, #0]
 80073fc:	b91e      	cbnz	r6, 8007406 <_printf_i+0x196>
 80073fe:	6823      	ldr	r3, [r4, #0]
 8007400:	f023 0320 	bic.w	r3, r3, #32
 8007404:	6023      	str	r3, [r4, #0]
 8007406:	2310      	movs	r3, #16
 8007408:	e7b0      	b.n	800736c <_printf_i+0xfc>
 800740a:	6823      	ldr	r3, [r4, #0]
 800740c:	f043 0320 	orr.w	r3, r3, #32
 8007410:	6023      	str	r3, [r4, #0]
 8007412:	2378      	movs	r3, #120	; 0x78
 8007414:	4828      	ldr	r0, [pc, #160]	; (80074b8 <_printf_i+0x248>)
 8007416:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800741a:	e7e3      	b.n	80073e4 <_printf_i+0x174>
 800741c:	0659      	lsls	r1, r3, #25
 800741e:	bf48      	it	mi
 8007420:	b2b6      	uxthmi	r6, r6
 8007422:	e7e6      	b.n	80073f2 <_printf_i+0x182>
 8007424:	4615      	mov	r5, r2
 8007426:	e7bb      	b.n	80073a0 <_printf_i+0x130>
 8007428:	682b      	ldr	r3, [r5, #0]
 800742a:	6826      	ldr	r6, [r4, #0]
 800742c:	6961      	ldr	r1, [r4, #20]
 800742e:	1d18      	adds	r0, r3, #4
 8007430:	6028      	str	r0, [r5, #0]
 8007432:	0635      	lsls	r5, r6, #24
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	d501      	bpl.n	800743c <_printf_i+0x1cc>
 8007438:	6019      	str	r1, [r3, #0]
 800743a:	e002      	b.n	8007442 <_printf_i+0x1d2>
 800743c:	0670      	lsls	r0, r6, #25
 800743e:	d5fb      	bpl.n	8007438 <_printf_i+0x1c8>
 8007440:	8019      	strh	r1, [r3, #0]
 8007442:	2300      	movs	r3, #0
 8007444:	6123      	str	r3, [r4, #16]
 8007446:	4615      	mov	r5, r2
 8007448:	e7ba      	b.n	80073c0 <_printf_i+0x150>
 800744a:	682b      	ldr	r3, [r5, #0]
 800744c:	1d1a      	adds	r2, r3, #4
 800744e:	602a      	str	r2, [r5, #0]
 8007450:	681d      	ldr	r5, [r3, #0]
 8007452:	6862      	ldr	r2, [r4, #4]
 8007454:	2100      	movs	r1, #0
 8007456:	4628      	mov	r0, r5
 8007458:	f7f8 feca 	bl	80001f0 <memchr>
 800745c:	b108      	cbz	r0, 8007462 <_printf_i+0x1f2>
 800745e:	1b40      	subs	r0, r0, r5
 8007460:	6060      	str	r0, [r4, #4]
 8007462:	6863      	ldr	r3, [r4, #4]
 8007464:	6123      	str	r3, [r4, #16]
 8007466:	2300      	movs	r3, #0
 8007468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800746c:	e7a8      	b.n	80073c0 <_printf_i+0x150>
 800746e:	6923      	ldr	r3, [r4, #16]
 8007470:	462a      	mov	r2, r5
 8007472:	4649      	mov	r1, r9
 8007474:	4640      	mov	r0, r8
 8007476:	47d0      	blx	sl
 8007478:	3001      	adds	r0, #1
 800747a:	d0ab      	beq.n	80073d4 <_printf_i+0x164>
 800747c:	6823      	ldr	r3, [r4, #0]
 800747e:	079b      	lsls	r3, r3, #30
 8007480:	d413      	bmi.n	80074aa <_printf_i+0x23a>
 8007482:	68e0      	ldr	r0, [r4, #12]
 8007484:	9b03      	ldr	r3, [sp, #12]
 8007486:	4298      	cmp	r0, r3
 8007488:	bfb8      	it	lt
 800748a:	4618      	movlt	r0, r3
 800748c:	e7a4      	b.n	80073d8 <_printf_i+0x168>
 800748e:	2301      	movs	r3, #1
 8007490:	4632      	mov	r2, r6
 8007492:	4649      	mov	r1, r9
 8007494:	4640      	mov	r0, r8
 8007496:	47d0      	blx	sl
 8007498:	3001      	adds	r0, #1
 800749a:	d09b      	beq.n	80073d4 <_printf_i+0x164>
 800749c:	3501      	adds	r5, #1
 800749e:	68e3      	ldr	r3, [r4, #12]
 80074a0:	9903      	ldr	r1, [sp, #12]
 80074a2:	1a5b      	subs	r3, r3, r1
 80074a4:	42ab      	cmp	r3, r5
 80074a6:	dcf2      	bgt.n	800748e <_printf_i+0x21e>
 80074a8:	e7eb      	b.n	8007482 <_printf_i+0x212>
 80074aa:	2500      	movs	r5, #0
 80074ac:	f104 0619 	add.w	r6, r4, #25
 80074b0:	e7f5      	b.n	800749e <_printf_i+0x22e>
 80074b2:	bf00      	nop
 80074b4:	08007811 	.word	0x08007811
 80074b8:	08007822 	.word	0x08007822

080074bc <_read_r>:
 80074bc:	b538      	push	{r3, r4, r5, lr}
 80074be:	4d07      	ldr	r5, [pc, #28]	; (80074dc <_read_r+0x20>)
 80074c0:	4604      	mov	r4, r0
 80074c2:	4608      	mov	r0, r1
 80074c4:	4611      	mov	r1, r2
 80074c6:	2200      	movs	r2, #0
 80074c8:	602a      	str	r2, [r5, #0]
 80074ca:	461a      	mov	r2, r3
 80074cc:	f7f9 fca0 	bl	8000e10 <_read>
 80074d0:	1c43      	adds	r3, r0, #1
 80074d2:	d102      	bne.n	80074da <_read_r+0x1e>
 80074d4:	682b      	ldr	r3, [r5, #0]
 80074d6:	b103      	cbz	r3, 80074da <_read_r+0x1e>
 80074d8:	6023      	str	r3, [r4, #0]
 80074da:	bd38      	pop	{r3, r4, r5, pc}
 80074dc:	200009fc 	.word	0x200009fc

080074e0 <_fstat_r>:
 80074e0:	b538      	push	{r3, r4, r5, lr}
 80074e2:	4d07      	ldr	r5, [pc, #28]	; (8007500 <_fstat_r+0x20>)
 80074e4:	2300      	movs	r3, #0
 80074e6:	4604      	mov	r4, r0
 80074e8:	4608      	mov	r0, r1
 80074ea:	4611      	mov	r1, r2
 80074ec:	602b      	str	r3, [r5, #0]
 80074ee:	f7f9 fcb8 	bl	8000e62 <_fstat>
 80074f2:	1c43      	adds	r3, r0, #1
 80074f4:	d102      	bne.n	80074fc <_fstat_r+0x1c>
 80074f6:	682b      	ldr	r3, [r5, #0]
 80074f8:	b103      	cbz	r3, 80074fc <_fstat_r+0x1c>
 80074fa:	6023      	str	r3, [r4, #0]
 80074fc:	bd38      	pop	{r3, r4, r5, pc}
 80074fe:	bf00      	nop
 8007500:	200009fc 	.word	0x200009fc

08007504 <_isatty_r>:
 8007504:	b538      	push	{r3, r4, r5, lr}
 8007506:	4d06      	ldr	r5, [pc, #24]	; (8007520 <_isatty_r+0x1c>)
 8007508:	2300      	movs	r3, #0
 800750a:	4604      	mov	r4, r0
 800750c:	4608      	mov	r0, r1
 800750e:	602b      	str	r3, [r5, #0]
 8007510:	f7f9 fcb7 	bl	8000e82 <_isatty>
 8007514:	1c43      	adds	r3, r0, #1
 8007516:	d102      	bne.n	800751e <_isatty_r+0x1a>
 8007518:	682b      	ldr	r3, [r5, #0]
 800751a:	b103      	cbz	r3, 800751e <_isatty_r+0x1a>
 800751c:	6023      	str	r3, [r4, #0]
 800751e:	bd38      	pop	{r3, r4, r5, pc}
 8007520:	200009fc 	.word	0x200009fc

08007524 <_init>:
 8007524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007526:	bf00      	nop
 8007528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800752a:	bc08      	pop	{r3}
 800752c:	469e      	mov	lr, r3
 800752e:	4770      	bx	lr

08007530 <_fini>:
 8007530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007532:	bf00      	nop
 8007534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007536:	bc08      	pop	{r3}
 8007538:	469e      	mov	lr, r3
 800753a:	4770      	bx	lr
